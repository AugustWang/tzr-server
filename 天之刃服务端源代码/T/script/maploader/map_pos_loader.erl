%%%-------------------------------------------------------------------
%%% @author xiaosheng
%%%-------------------------------------------------------------------
-module(map_pos_loader).

%% gen_server callbacks
-export([start/0]).
-define(CORRECT_VALUE_MAP, 10000000).
-define(FILE_OUTPUT, "pos.txt").
-define(FILE_SERVER_BORN_POINT, "/data/mtzr/config/born_point.config").


%%%===================================================================
%%% Macro
%%%===================================================================
-define(PLAYGROUND_ITEM, 1).
-define(ENTER_POINT, 2).
-define(LIVE_POINT, 3).
-define(NPC_POINT, 4).
-define(MONSTER_POINT, 5).
-define(COLLECTION_POINT, 6).

%%%===================================================================
%%% API
%%%===================================================================


%%从mcm文件中载入地图数据
start() ->
    ets:new(map_data, [bag, public, named_table]),
    file:delete(?FILE_OUTPUT),
    file:delete(?FILE_SERVER_BORN_POINT),
    file:write_file(?FILE_SERVER_BORN_POINT, <<"%%This file is generated by script tool.Do not edit it.\n">>, [append]),
    
    MapConfigDir = "../../config/map/mcm/",
    ExtName = ".mcm",
    %%列出文件夹中所有的地图文件
    try file:list_dir(MapConfigDir) of
        {ok, FileList} ->

            lists:foreach(
              fun(FileName) ->
                      case filename:extension(FileName) of
                          ExtName ->
                              io:format("====================SUCCESS=====================~n"),
                              io:format("map file loaded:~p~n", [lists:flatten(FileName)]),
                              io:format("====================SUCCESS=====================~n"),
                              loadMapData(MapConfigDir , FileName);
                          _ ->
                              ok
                      end
              end, FileList);
        {error, Reason} ->
            io:format("====================ERROR=====================~n"),
            io:format("read map data file failed:~p~n", [Reason]),
            io:format("====================ERROR=====================~n")
    catch
        _:Reason_2 ->
            io:format("====================ERROR=====================~n"),
            io:format("list map dir failed:~p~n", [Reason_2]),
            io:format("====================ERROR=====================~n")

    end,
    c:q().

loadMapData(MapConfigDir , FileName) ->
    
    FullFileName = MapConfigDir ++ FileName,
    {ok, AllBin} = file:read_file(FullFileName),
    AllBin2 = zlib:uncompress(AllBin),

    <<MapID:32, _MapType:32, _:256, _:256, TileRow:32, TileCol:32, ElementNum:32,  _JumpPointNum:32, _OffsetX:32, _OffsetY:32,
      _TW:32, _TH:32, Data2/binary>> = AllBin2,

    DataTileLength = 8 * TileRow * TileCol,
    <<_DataTile:DataTileLength/bitstring, DataRemain/binary>> = Data2,

    loadMapElementTile(DataRemain, ElementNum ,MapID, [], []).

loadMapElementTile(RemainData, 0, _MapID, _, _) ->
    RemainData;
loadMapElementTile(DataBin, EnterPointlength, MapID, MonsterList, NpcList) ->
    << ID:32, IndexTX:32, IndexTY:32, Type:32, Link:32, DataRemain/bitstring>> = DataBin,
    LinkLen = 8*Link,
    <<_:LinkLen/bitstring, DataRemain2/bitstring>> = DataRemain,
    case Type of
        ?LIVE_POINT ->  %%出生点
           NewMonsterList = MonsterList,
           NewNpcList = NpcList,
           BornPointRow = lists:flatten(lists:concat(["{r_born_point,",MapID,",",IndexTX,",",IndexTY,"}.\n"])),
           file:write_file(?FILE_SERVER_BORN_POINT, list_to_binary(BornPointRow), [append]),
           ignore;
        ?NPC_POINT ->   %%NPC
           NewMonsterList = MonsterList,
           Member = lists:member(ID, NpcList),
           if
               Member =:= false ->
                    io:format("====================WRITE-NPC:~w,IndexTX=~w,IndexTY=~w~n", [ID,IndexTX,IndexTY]),
                    NewNpcList = [ID|NpcList],
                    Data = <<Type:32, MapID:32, ID:32, IndexTX:32, IndexTY:32>>,
                    file:write_file(?FILE_OUTPUT, Data, [append]);
               true ->
                    NewNpcList = NpcList,
                    ignore
           end;
        ?MONSTER_POINT -> %%怪物
           NewNpcList = NpcList,
           Member = lists:member(ID, MonsterList),
           if
               Member =:= false ->
                    io:format("====================WRITE-Monster:~w,IndexTX=~w,IndexTY=~w~n", [ID,IndexTX,IndexTY]),
                    NewMonsterList = [ID|MonsterList],
                    Data = <<Type:32, MapID:32, ID:32, IndexTX:32, IndexTY:32>>,
                    file:write_file(?FILE_OUTPUT, Data, [append]);
               true ->
                    NewMonsterList = MonsterList,
                    ignore
           end;
        _ ->
           NewMonsterList = MonsterList,
           NewNpcList = NpcList,
           ignore
    end,
    loadMapElementTile(DataRemain2, EnterPointlength - 1, MapID, NewMonsterList, NewNpcList).