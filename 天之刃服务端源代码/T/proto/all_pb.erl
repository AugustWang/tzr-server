-module(all_pb).
-include("all_pb.hrl").
-export([
	encode_p_game_role_disply/1,
	encode_p_chat_role/1,
	encode_p_chat_title/1,
	encode_p_title/1,
	encode_p_chat_channel_role_info/1,
	encode_p_channel_info/1,
	encode_p_actor_buf/1,
	encode_p_skin/1,
	encode_p_role_base/1,
	encode_p_role_pos/1,
	encode_p_role_fight/1,
	encode_p_role_attr/1,
	encode_p_role_ext/1,
	encode_p_role/1,
	encode_p_skill/1,
	encode_p_skill_precondition/1,
	encode_p_skill_level/1,
	encode_p_skill_item_consume/1,
	encode_p_effect/1,
	encode_p_buf/1,
	encode_p_map_stall/1,
	encode_p_pos/1,
	encode_p_map_tile/1,
	encode_p_walk_path/1,
	encode_p_map_role/1,
	encode_s_error_common_toc/1,
	encode_s_chat_leave_channel_tos/1,
	encode_s_chat_join_channel_tos/1,
	encode_p_map_dropthing/1,
	encode_s_account_kick_toc/1,
	encode_s_account_register_tos/1,
	encode_p_use_requirement/1,
	encode_p_property_add/1,
	encode_p_equip_base_info/1,
	encode_p_item_effect/1,
	encode_p_item_base_info/1,
	encode_p_stone_base_info/1,
	encode_p_goods/1,
	encode_p_equip_bind_attr/1,
	encode_p_equip_five_ele/1,
	encode_p_equip_whole_attr/1,
	encode_p_refresh_info/1,
	encode_p_monster_skill/1,
	encode_p_drop_property/1,
	encode_p_drop_colour_mode/1,
	encode_p_drop_quality_mode/1,
	encode_p_drop_hole_mode/1,
	encode_p_drop_mode/1,
	encode_p_single_drop/1,
	encode_p_drop_info/1,
	encode_p_monster_base_info/1,
	encode_p_enemy/1,
	encode_p_monster/1,
	encode_p_map_monster/1,
	encode_p_monster_talk/1,
	encode_p_boss_ai_skill/1,
	encode_p_boss_ai_condition/1,
	encode_p_boss_ai_plan/1,
	encode_p_mission_condition/1,
	encode_p_family_info_change/1,
	encode_p_family_info/1,
	encode_p_family_member_info/1,
	encode_p_family_second_owner/1,
	encode_p_family_request/1,
	encode_p_family_invite/1,
	encode_p_rank_row/1,
	encode_p_role_family_donate_info/1,
	encode_p_rank_element/1,
	encode_p_ranking/1,
	encode_p_role_level_rank/1,
	encode_p_role_pkpoint_rank/1,
	encode_p_family_active_rank/1,
	encode_p_family_gongxun_rank/1,
	encode_p_family_gongxun_persistent_rank/1,
	encode_p_equip_rank/1,
	encode_p_role_gongxun_rank/1,
	encode_p_role_all_rank/1,
	encode_p_role_give_flowers_rank/1,
	encode_p_role_give_flowers_today_rank/1,
	encode_p_role_give_flowers_yesterday_rank/1,
	encode_p_role_give_flowers_last_week_rank/1,
	encode_p_role_give_flowers_this_week_rank/1,
	encode_p_role_rece_flowers_rank/1,
	encode_p_role_rece_flowers_today_rank/1,
	encode_p_role_rece_flowers_yesterday_rank/1,
	encode_p_role_rece_flowers_last_week_rank/1,
	encode_p_role_rece_flowers_this_week_rank/1,
	encode_p_role_pet_rank/1,
	encode_p_hero_fb_rank/1,
	encode_p_recommend_member_info/1,
	encode_p_achievement_info/1,
	encode_p_achievement_stat_info/1,
	encode_p_map_collect/1,
	encode_p_collect_role/1,
	encode_p_collect_point/1,
	encode_p_collect_point_base_info/1,
	encode_p_collect/1,
	encode_p_collect_refresh/1,
	encode_p_collect_base_info/1,
	encode_p_collect_demand/1,
	encode_p_collect_goods/1,
	encode_p_map_trap/1,
	encode_p_ybc_buff/1,
	encode_p_ybc_info/1,
	encode_p_map_ybc/1,
	encode_p_server_npc/1,
	encode_p_map_server_npc/1,
	encode_p_server_npc_base_info/1,
	encode_p_equip_onekey_info/1,
	encode_p_equip_onekey_simple/1,
	encode_p_activity_info/1,
	encode_p_actpoint_info/1,
	encode_p_trading_goods_base_info/1,
	encode_p_trading_goods/1,
	encode_p_family_ybc_money/1,
	encode_p_map_farm/1,
	encode_p_seed_info/1,
	encode_p_waroffaction_record/1,
	encode_p_waroffaction_rank/1,
	encode_p_pet_base_info/1,
	encode_p_pet_skill/1,
	encode_p_pet/1,
	encode_p_map_pet/1,
	encode_p_pet_id_name/1,
	encode_p_role_pet_bag/1,
	encode_p_pet_attr_assign/1,
	encode_p_pet_feed/1,
	encode_p_pet_training_info/1,
	encode_p_role_pet_grow/1,
	encode_p_grow_info/1,
	encode_p_pet_refining/1,
	encode_p_role_pet_egg_type_list/1,
	encode_p_educate_fb_item/1,
	encode_p_educate_fb_award/1,
	encode_p_present_info/1,
	encode_p_conlogin_reward/1,
	encode_p_accumulate_exp_info/1,
	encode_p_fml_buff/1,
	encode_p_role_vip/1,
	encode_p_vip_list_info/1,
	encode_p_fmldepot_log/1,
	encode_p_fmldepot_bag/1,
	encode_p_equip_mount_renewal/1,
	encode_p_scene_war_fb_link/1,
	encode_p_scene_war_fb_role_info/1,
	encode_p_scene_war_fb_team_info/1,
	encode_p_family_collect_role_prize_info/1,
	encode_p_gift_goods/1,
	encode_p_map_bonfire/1,
	encode_p_family_task/1,
	encode_p_role_hero_fb_info/1,
	encode_p_hero_fb_barrier/1,
	encode_p_hero_fb_record/1,
	encode_p_hero_fb_poker_reward/1,
	encode_p_refining/1,
	encode_p_refining_box_log/1,
	encode_p_online_info/1,
	encode_p_role_goal/1,
	encode_p_role_goal_item/1,
	encode_p_goal_config/1,
	encode_p_goal_item/1,
	encode_p_prestige_item/1,
	encode_p_activity_condition/1,
	encode_p_activity_prize_goods/1,
	encode_p_boss_group/1,
	encode_p_reward_prop/1,
	encode_p_equip_item/1,
	encode_m_chat_auth_tos/1,
	encode_m_chat_auth_toc/1,
	encode_m_chat_join_channel_toc/1,
	encode_m_chat_leave_channel_toc/1,
	encode_m_chat_in_channel_tos/1,
	encode_m_chat_in_channel_toc/1,
	encode_m_chat_in_pairs_tos/1,
	encode_m_chat_in_pairs_toc/1,
	encode_m_chat_add_black_tos/1,
	encode_m_chat_add_black_toc/1,
	encode_m_chat_remove_black_tos/1,
	encode_m_chat_remove_black_toc/1,
	encode_m_chat_get_black_toc/1,
	encode_m_chat_manage_mute_tos/1,
	encode_m_chat_manage_mute_toc/1,
	encode_m_chat_manage_kick_tos/1,
	encode_m_chat_manage_kick_toc/1,
	encode_m_chat_manage_ban_tos/1,
	encode_m_chat_manage_ban_toc/1,
	encode_m_chat_limit_notify_toc/1,
	encode_m_chat_status_change_toc/1,
	encode_m_chat_quick_toc/1,
	encode_m_chat_new_join_toc/1,
	encode_m_chat_get_roles_tos/1,
	encode_m_chat_get_roles_toc/1,
	encode_m_chat_warofking_toc/1,
	encode_m_chat_get_goods_tos/1,
	encode_m_chat_get_goods_toc/1,
	encode_m_chat_reconnect_tos/1,
	encode_m_chat_reconnect_toc/1,
	encode_m_chat_king_ban_tos/1,
	encode_m_chat_king_ban_toc/1,
	encode_m_login_flash_tos/1,
	encode_m_login_flash_toc/1,
	encode_m_line_list_tos/1,
	encode_m_line_list_toc/1,
	encode_p_line_info/1,
	encode_m_role_list_toc/1,
	encode_m_role_add_tos/1,
	encode_m_role_add_toc/1,
	encode_m_role_del_tos/1,
	encode_m_role_del_toc/1,
	encode_m_role_chose_tos/1,
	encode_m_role_chose_toc/1,
	encode_m_auth_key_tos/1,
	encode_m_auth_key_toc/1,
	encode_m_auth_chat_key_tos/1,
	encode_m_auth_chat_key_toc/1,
	encode_p_bag_content/1,
	encode_p_skill_pos/1,
	encode_m_map_enter_tos/1,
	encode_m_map_enter_toc/1,
	encode_m_map_slice_enter_toc/1,
	encode_m_map_update_actor_mapinfo_tos/1,
	encode_m_map_update_actor_mapinfo_toc/1,
	encode_m_map_transfer_tos/1,
	encode_m_map_transfer_toc/1,
	encode_m_map_role_killed_toc/1,
	encode_m_move_keywalk_tos/1,
	encode_m_move_keywalk_toc/1,
	encode_m_move_keystop_tos/1,
	encode_m_move_keystop_toc/1,
	encode_m_move_walk_path_tos/1,
	encode_m_move_walk_path_toc/1,
	encode_m_move_walk_tos/1,
	encode_m_move_sync_toc/1,
	encode_m_map_quit_toc/1,
	encode_m_skin_change_toc/1,
	encode_m_map_dropthing_enter_toc/1,
	encode_m_map_dropthing_quit_toc/1,
	encode_m_map_dropthing_pick_tos/1,
	encode_m_map_dropthing_pick_toc/1,
	encode_m_map_change_map_tos/1,
	encode_m_map_change_map_toc/1,
	encode_m_map_change_pos_toc/1,
	encode_m_config_getbuffs_tos/1,
	encode_m_config_getbuffs_toc/1,
	encode_p_buff_effect/1,
	encode_m_fight_buff_effect_toc/1,
	encode_m_fight_remove_buff_toc/1,
	encode_m_fight_attack_tos/1,
	encode_p_attack_result/1,
	encode_m_fight_attack_toc/1,
	encode_p_team_role/1,
	encode_m_team_invite_tos/1,
	encode_m_team_invite_toc/1,
	encode_m_team_accept_tos/1,
	encode_m_team_accept_toc/1,
	encode_m_team_refuse_tos/1,
	encode_m_team_refuse_toc/1,
	encode_m_team_leave_tos/1,
	encode_m_team_leave_toc/1,
	encode_m_team_kick_tos/1,
	encode_m_team_kick_toc/1,
	encode_m_team_offline_toc/1,
	encode_m_team_change_leader_tos/1,
	encode_m_team_change_leader_toc/1,
	encode_m_team_disband_tos/1,
	encode_m_team_disband_toc/1,
	encode_m_team_pick_tos/1,
	encode_m_team_pick_toc/1,
	encode_m_team_auto_disband_toc/1,
	encode_m_team_auto_list_toc/1,
	encode_m_team_member_invite_tos/1,
	encode_m_team_member_invite_toc/1,
	encode_m_team_member_recommend_tos/1,
	encode_m_team_member_recommend_toc/1,
	encode_m_team_apply_tos/1,
	encode_m_team_apply_toc/1,
	encode_m_team_query_tos/1,
	encode_m_team_query_toc/1,
	encode_p_team_nearby/1,
	encode_m_team_create_tos/1,
	encode_m_team_create_toc/1,
	encode_m_friend_request_tos/1,
	encode_m_friend_request_toc/1,
	encode_m_friend_accept_tos/1,
	encode_m_friend_accept_toc/1,
	encode_m_friend_refuse_tos/1,
	encode_m_friend_refuse_toc/1,
	encode_m_friend_delete_tos/1,
	encode_m_friend_delete_toc/1,
	encode_m_friend_black_tos/1,
	encode_m_friend_black_toc/1,
	encode_m_friend_enemy_toc/1,
	encode_m_friend_list_tos/1,
	encode_m_friend_list_toc/1,
	encode_p_friend_info/1,
	encode_p_simple_friend_info/1,
	encode_m_friend_offline_request_toc/1,
	encode_m_friend_change_relative_toc/1,
	encode_m_friend_add_friendly_toc/1,
	encode_m_friend_online_toc/1,
	encode_m_friend_offline_toc/1,
	encode_m_friend_upgrade_toc/1,
	encode_m_friend_info_tos/1,
	encode_m_friend_info_toc/1,
	encode_m_friend_modify_tos/1,
	encode_m_friend_modify_toc/1,
	encode_m_friend_create_family_toc/1,
	encode_m_friend_get_info_tos/1,
	encode_m_friend_get_info_toc/1,
	encode_m_friend_update_family_toc/1,
	encode_m_friend_recommend_tos/1,
	encode_m_friend_recommend_toc/1,
	encode_m_friend_congratulation_tos/1,
	encode_m_friend_congratulation_toc/1,
	encode_m_friend_advertise_tos/1,
	encode_m_friend_advertise_toc/1,
	encode_m_friend_bottle_tos/1,
	encode_m_friend_bottle_toc/1,
	encode_m_shop_shops_tos/1,
	encode_p_shop_info/1,
	encode_m_shop_shops_toc/1,
	encode_m_shop_all_goods_tos/1,
	encode_p_shop_currency/1,
	encode_p_shop_price/1,
	encode_p_shop_goods_info/1,
	encode_m_shop_all_goods_toc/1,
	encode_m_shop_item_tos/1,
	encode_m_shop_item_toc/1,
	encode_m_shop_search_tos/1,
	encode_m_shop_search_toc/1,
	encode_m_shop_buy_tos/1,
	encode_m_shop_buy_toc/1,
	encode_p_shop_sale_goods/1,
	encode_m_shop_sale_tos/1,
	encode_m_shop_sale_toc/1,
	encode_m_shop_buy_back_tos/1,
	encode_m_shop_buy_back_toc/1,
	encode_m_shop_npc_tos/1,
	encode_m_shop_npc_toc/1,
	encode_p_letter_info/1,
	encode_p_letter_goods/1,
	encode_p_letter_simple_info/1,
	encode_m_letter_get_tos/1,
	encode_m_letter_get_toc/1,
	encode_m_letter_get_send_tos/1,
	encode_m_letter_get_send_toc/1,
	encode_m_letter_get_receive_tos/1,
	encode_m_letter_get_receive_toc/1,
	encode_m_letter_open_tos/1,
	encode_m_letter_open_toc/1,
	encode_m_letter_p2p_send_tos/1,
	encode_m_letter_clan_send_tos/1,
	encode_m_letter_family_send_tos/1,
	encode_m_letter_batch_send_tos/1,
	encode_p_letter_send_condition/1,
	encode_m_letter_send_toc/1,
	encode_m_letter_delete_tos/1,
	encode_p_letter_delete/1,
	encode_m_letter_delete_toc/1,
	encode_m_letter_accept_goods_tos/1,
	encode_m_letter_accept_goods_toc/1,
	encode_m_letter_state_change_tos/1,
	encode_m_letter_state_change_toc/1,
	encode_m_equip_mountup_tos/1,
	encode_m_equip_mountup_toc/1,
	encode_m_equip_mountdown_tos/1,
	encode_m_equip_mountdown_toc/1,
	encode_m_equip_mount_changecolor_tos/1,
	encode_m_equip_mount_changecolor_toc/1,
	encode_m_equip_mount_renewal_tos/1,
	encode_m_equip_mount_renewal_toc/1,
	encode_m_equip_loaded_list_tos/1,
	encode_m_equip_loaded_list_toc/1,
	encode_m_equip_load_tos/1,
	encode_m_equip_load_toc/1,
	encode_m_equip_unload_tos/1,
	encode_m_equip_unload_toc/1,
	encode_m_equip_swap_tos/1,
	encode_m_equip_swap_toc/1,
	encode_m_equip_fix_tos/1,
	encode_m_equip_fix_toc/1,
	encode_m_equip_endurance_change_toc/1,
	encode_p_equip_endurance_info/1,
	encode_m_item_use_tos/1,
	encode_m_item_use_toc/1,
	encode_m_item_use_special_tos/1,
	encode_m_item_use_special_toc/1,
	encode_m_item_trace_tos/1,
	encode_m_item_trace_toc/1,
	encode_m_item_batch_sell_tos/1,
	encode_m_item_batch_sell_toc/1,
	encode_m_item_new_extend_bag_toc/1,
	encode_m_item_shrink_bag_tos/1,
	encode_m_item_shrink_bag_toc/1,
	encode_m_goods_inbag_list_tos/1,
	encode_m_goods_inbag_list_toc/1,
	encode_m_goods_info_tos/1,
	encode_m_goods_info_toc/1,
	encode_m_goods_destroy_tos/1,
	encode_m_goods_destroy_toc/1,
	encode_m_goods_swap_tos/1,
	encode_m_goods_swap_toc/1,
	encode_m_goods_divide_tos/1,
	encode_m_goods_divide_toc/1,
	encode_m_goods_update_toc/1,
	encode_m_goods_tidy_tos/1,
	encode_m_goods_tidy_toc/1,
	encode_m_goods_show_goods_tos/1,
	encode_m_goods_show_goods_toc/1,
	encode_m_role2_exp_full_toc/1,
	encode_m_role2_levelup_tos/1,
	encode_m_role2_levelup_toc/1,
	encode_m_role2_levelup_other_toc/1,
	encode_p_role_attr_change/1,
	encode_m_role2_attr_change_toc/1,
	encode_m_role2_attr_reload_toc/1,
	encode_m_role2_base_reload_toc/1,
	encode_m_role2_reload_toc/1,
	encode_m_role2_newbuffs_toc/1,
	encode_m_role2_dead_toc/1,
	encode_m_role2_dead_other_toc/1,
	encode_m_role2_relive_toc/1,
	encode_m_role2_unbund_change_tos/1,
	encode_m_role2_unbund_change_toc/1,
	encode_m_role2_rely_main_tos/1,
	encode_m_role2_rely_main_toc/1,
	encode_m_role2_relive_tos/1,
	encode_m_role2_pointassign_tos/1,
	encode_m_role2_pointassign_toc/1,
	encode_m_role2_getroleattr_tos/1,
	encode_m_role2_getskillinfo_tos/1,
	encode_m_role2_getskillinfo_toc/1,
	encode_m_role2_skillassign_tos/1,
	encode_m_role2_skillassign_toc/1,
	encode_m_role2_skilllearn_tos/1,
	encode_m_role2_skilllearn_toc/1,
	encode_m_role2_getrolemapinfo_tos/1,
	encode_m_role2_getroleattr_toc/1,
	encode_p_other_role_info/1,
	encode_m_role2_getrolemapinfo_toc/1,
	encode_m_role2_pkmodemodify_tos/1,
	encode_m_role2_pkmodemodify_toc/1,
	encode_m_role2_zazen_tos/1,
	encode_m_role2_zazen_toc/1,
	encode_m_role2_five_ele_attr_tos/1,
	encode_m_role2_five_ele_attr_toc/1,
	encode_m_role2_gray_name_tos/1,
	encode_m_role2_gray_name_toc/1,
	encode_m_role2_show_cloth_tos/1,
	encode_m_role2_show_cloth_toc/1,
	encode_m_role2_show_equip_ring_tos/1,
	encode_m_role2_show_equip_ring_toc/1,
	encode_m_role2_pkpoint_left_tos/1,
	encode_m_role2_pkpoint_left_toc/1,
	encode_m_role2_hair_tos/1,
	encode_m_role2_hair_toc/1,
	encode_m_role2_head_tos/1,
	encode_m_role2_head_toc/1,
	encode_m_role2_sex_tos/1,
	encode_m_role2_sex_toc/1,
	encode_m_role2_event_tos/1,
	encode_m_role2_event_toc/1,
	encode_m_role2_system_buff_toc/1,
	encode_p_sys_buff_info/1,
	encode_m_role2_remove_skin_buff_tos/1,
	encode_m_role2_remove_skin_buff_toc/1,
	encode_m_role2_add_energy_tos/1,
	encode_m_role2_add_energy_toc/1,
	encode_m_role2_online_broadcast_toc/1,
	encode_m_role2_query_faction_online_rank_tos/1,
	encode_m_role2_query_faction_online_rank_toc/1,
	encode_p_faction_online_rank/1,
	encode_m_mission_listener_toc/1,
	encode_p_mission_listener/1,
	encode_p_mission_info/1,
	encode_m_mission_list_tos/1,
	encode_m_mission_list_toc/1,
	encode_m_mission_vs_tos/1,
	encode_m_mission_vs_toc/1,
	encode_m_mission_do_tos/1,
	encode_p_mission_reward_data/1,
	encode_p_mission_prop/1,
	encode_m_mission_do_toc/1,
	encode_m_mission_cancel_tos/1,
	encode_m_mission_cancel_toc/1,
	encode_m_mission_update_toc/1,
	encode_p_mission_auto/1,
	encode_m_mission_list_auto_tos/1,
	encode_m_mission_list_auto_toc/1,
	encode_m_mission_do_auto_tos/1,
	encode_m_mission_do_auto_toc/1,
	encode_m_mission_cancel_auto_tos/1,
	encode_m_mission_cancel_auto_toc/1,
	encode_m_family_ybc_sure_tos/1,
	encode_m_family_ybc_sure_toc/1,
	encode_m_family_ybc_giveup_tos/1,
	encode_m_family_ybc_giveup_toc/1,
	encode_m_family_ybc_join_tos/1,
	encode_m_family_ybc_join_toc/1,
	encode_m_family_ybc_publish_tos/1,
	encode_m_family_ybc_publish_toc/1,
	encode_m_family_ybc_status_toc/1,
	encode_m_family_ybc_agree_publish_tos/1,
	encode_m_family_ybc_agree_publish_toc/1,
	encode_m_family_ybc_commit_tos/1,
	encode_m_family_ybc_commit_toc/1,
	encode_m_family_ybc_call_help_toc/1,
	encode_m_family_ybc_accept_help_tos/1,
	encode_m_family_ybc_accept_help_toc/1,
	encode_m_family_ybc_collect_tos/1,
	encode_m_family_ybc_collect_toc/1,
	encode_m_family_ybc_accept_collect_tos/1,
	encode_m_family_ybc_accept_collect_toc/1,
	encode_m_family_ybc_list_tos/1,
	encode_m_family_ybc_list_toc/1,
	encode_p_family_ybc_member_info/1,
	encode_m_family_ybc_kick_tos/1,
	encode_m_family_ybc_kick_toc/1,
	encode_m_family_ybc_add_hp_tos/1,
	encode_m_family_ybc_add_hp_toc/1,
	encode_m_family_ybc_alert_tos/1,
	encode_m_family_ybc_alert_toc/1,
	encode_m_family_ybc_invite_tos/1,
	encode_m_family_ybc_invite_toc/1,
	encode_m_ybc_faraway_toc/1,
	encode_m_ybc_enter_toc/1,
	encode_m_ybc_quit_toc/1,
	encode_m_ybc_dead_toc/1,
	encode_m_ybc_info_tos/1,
	encode_m_ybc_walk_toc/1,
	encode_m_ybc_speed_toc/1,
	encode_m_ybc_pos_toc/1,
	encode_m_ybc_notify_pos_toc/1,
	encode_m_monster_enter_toc/1,
	encode_m_monster_quit_toc/1,
	encode_m_monster_dead_toc/1,
	encode_m_monster_attr_change_toc/1,
	encode_m_monster_walk_path_toc/1,
	encode_m_monster_walk_toc/1,
	encode_m_monster_summon_toc/1,
	encode_m_monster_talk_toc/1,
	encode_m_monster_query_tos/1,
	encode_m_monster_query_toc/1,
	encode_m_exchange_request_tos/1,
	encode_m_exchange_request_toc/1,
	encode_m_exchange_agree_tos/1,
	encode_m_exchange_agree_toc/1,
	encode_m_exchange_refuse_tos/1,
	encode_m_exchange_refuse_toc/1,
	encode_m_exchange_lock_tos/1,
	encode_m_exchange_lock_toc/1,
	encode_m_exchange_confirm_tos/1,
	encode_m_exchange_confirm_toc/1,
	encode_p_simple_goods/1,
	encode_m_exchange_cancel_tos/1,
	encode_m_exchange_cancel_toc/1,
	encode_m_exchange_npc_deal_tos/1,
	encode_m_exchange_npc_deal_toc/1,
	encode_m_exchange_equip_info_tos/1,
	encode_m_exchange_equip_info_toc/1,
	encode_m_stall_request_tos/1,
	encode_m_stall_request_toc/1,
	encode_m_stall_open_tos/1,
	encode_m_stall_open_toc/1,
	encode_m_stall_detail_tos/1,
	encode_m_stall_detail_toc/1,
	encode_p_stall_goods/1,
	encode_p_stall_log/1,
	encode_p_stall_list_item/1,
	encode_m_stall_list_tos/1,
	encode_m_stall_list_toc/1,
	encode_p_stall_info/1,
	encode_m_stall_buy_tos/1,
	encode_m_stall_buy_toc/1,
	encode_m_stall_extractmoney_tos/1,
	encode_m_stall_extractmoney_toc/1,
	encode_m_stall_chat_tos/1,
	encode_m_stall_chat_toc/1,
	encode_m_stall_finish_tos/1,
	encode_m_stall_finish_toc/1,
	encode_m_stall_employ_tos/1,
	encode_m_stall_employ_toc/1,
	encode_m_stall_search_tos/1,
	encode_m_stall_search_toc/1,
	encode_p_stall_search_goods/1,
	encode_m_stall_state_tos/1,
	encode_m_stall_state_toc/1,
	encode_p_role_skill/1,
	encode_m_skill_learn_tos/1,
	encode_m_skill_learn_toc/1,
	encode_m_skill_getskills_tos/1,
	encode_m_skill_getskills_toc/1,
	encode_m_skill_reset_toc/1,
	encode_m_skill_personal_forget_tos/1,
	encode_m_skill_personal_forget_toc/1,
	encode_m_fmlskill_research_tos/1,
	encode_m_fmlskill_research_toc/1,
	encode_m_fmlskill_forget_tos/1,
	encode_m_fmlskill_forget_toc/1,
	encode_m_fmlskill_list_tos/1,
	encode_m_fmlskill_list_toc/1,
	encode_m_fmlskill_list_buff_tos/1,
	encode_m_fmlskill_list_buff_toc/1,
	encode_m_fmlskill_fetch_buff_tos/1,
	encode_m_fmlskill_fetch_buff_toc/1,
	encode_m_skill_use_time_toc/1,
	encode_p_skill_time/1,
	encode_m_stall_putin_tos/1,
	encode_m_stall_putin_toc/1,
	encode_m_stall_getout_tos/1,
	encode_m_stall_getout_toc/1,
	encode_m_stall_getall_tos/1,
	encode_m_stall_getall_toc/1,
	encode_m_stall_move_tos/1,
	encode_m_stall_move_toc/1,
	encode_m_refining_inbag_list_tos/1,
	encode_m_refining_inbag_list_toc/1,
	encode_m_refining_info_tos/1,
	encode_m_refining_info_toc/1,
	encode_m_refining_destroy_tos/1,
	encode_m_refining_destroy_toc/1,
	encode_m_refining_swap_tos/1,
	encode_m_refining_swap_toc/1,
	encode_m_refining_divide_tos/1,
	encode_m_refining_divide_toc/1,
	encode_m_refining_reinforce_equip_tos/1,
	encode_m_refining_reinforce_equip_toc/1,
	encode_m_refining_compose_tos/1,
	encode_m_refining_compose_toc/1,
	encode_m_refining_punch_tos/1,
	encode_m_refining_punch_toc/1,
	encode_m_refining_inlay_tos/1,
	encode_m_refining_inlay_toc/1,
	encode_m_refining_unload_tos/1,
	encode_m_refining_unload_toc/1,
	encode_m_refining_equip_bind_tos/1,
	encode_m_refining_equip_bind_toc/1,
	encode_m_refining_forging_tos/1,
	encode_m_refining_forging_toc/1,
	encode_m_refining_firing_tos/1,
	encode_m_refining_firing_toc/1,
	encode_m_refining_box_tos/1,
	encode_m_refining_box_toc/1,
	encode_m_depot_get_goods_tos/1,
	encode_m_depot_get_goods_toc/1,
	encode_p_depot_bag/1,
	encode_m_depot_dredge_tos/1,
	encode_m_depot_dredge_toc/1,
	encode_m_depot_destroy_tos/1,
	encode_m_depot_destroy_toc/1,
	encode_m_depot_swap_tos/1,
	encode_m_depot_swap_toc/1,
	encode_m_depot_divide_tos/1,
	encode_m_depot_divide_toc/1,
	encode_m_depot_tidy_tos/1,
	encode_m_depot_tidy_toc/1,
	encode_m_educate_teacher_online_toc/1,
	encode_m_educate_transfer_tos/1,
	encode_m_educate_student_online_toc/1,
	encode_m_educate_invite_apprentice_toc/1,
	encode_m_educate_invite_apprentice_result_toc/1,
	encode_m_educate_invite_admissions_toc/1,
	encode_m_educate_invite_admissions_result_toc/1,
	encode_m_educate_reply_invite_apprentice_tos/1,
	encode_m_educate_reply_invite_apprentice_toc/1,
	encode_m_educate_reply_invite_admissions_tos/1,
	encode_m_educate_reply_invite_admissions_toc/1,
	encode_m_educate_sworn_mentoring_tos/1,
	encode_m_educate_sworn_mentoring_toc/1,
	encode_m_educate_filter_student_tos/1,
	encode_m_educate_filter_student_toc/1,
	encode_m_educate_filter_teacher_tos/1,
	encode_m_educate_filter_teacher_toc/1,
	encode_m_educate_get_expel_moral_value_tos/1,
	encode_m_educate_get_expel_moral_value_toc/1,
	encode_m_educate_get_dropout_moral_value_tos/1,
	encode_m_educate_get_dropout_moral_value_toc/1,
	encode_m_educate_expel_tos/1,
	encode_m_educate_expel_toc/1,
	encode_m_educate_dropout_tos/1,
	encode_m_educate_dropout_toc/1,
	encode_m_educate_graduate_to_teacher_toc/1,
	encode_m_educate_graduate_to_student_toc/1,
	encode_m_educate_get_clan_info_tos/1,
	encode_m_educate_get_clan_info_toc/1,
	encode_m_educate_get_students_info_tos/1,
	encode_m_educate_get_students_info_toc/1,
	encode_m_educate_get_info_tos/1,
	encode_m_educate_get_info_toc/1,
	encode_m_educate_moral_value_to_exp_tos/1,
	encode_m_educate_moral_value_to_exp_toc/1,
	encode_m_educate_moral_value_to_pkpoint_tos/1,
	encode_m_educate_moral_value_to_pkpoint_toc/1,
	encode_m_educate_upgrade_tos/1,
	encode_m_educate_upgrade_toc/1,
	encode_m_educate_tip_captain_toc/1,
	encode_m_educate_release_tos/1,
	encode_m_educate_release_toc/1,
	encode_p_educate_role_info/1,
	encode_m_educate_call_helper_toc/1,
	encode_m_educate_agree_help_tos/1,
	encode_m_educate_agree_help_toc/1,
	encode_m_educate_get_relate_people_tos/1,
	encode_m_educate_get_relate_people_toc/1,
	encode_m_message_error_toc/1,
	encode_p_bank_sheet/1,
	encode_p_bank_simple_sheet/1,
	encode_m_bank_init_tos/1,
	encode_m_bank_init_toc/1,
	encode_m_bank_buy_tos/1,
	encode_m_bank_buy_toc/1,
	encode_m_bank_sell_tos/1,
	encode_m_bank_sell_toc/1,
	encode_m_bank_undo_tos/1,
	encode_m_bank_undo_toc/1,
	encode_m_bank_add_silver_toc/1,
	encode_m_bank_add_gold_toc/1,
	encode_p_shortcut/1,
	encode_m_shortcut_init_toc/1,
	encode_m_shortcut_update_tos/1,
	encode_m_bubble_send_tos/1,
	encode_m_bubble_send_toc/1,
	encode_m_bubble_msg_toc/1,
	encode_m_family_create_tos/1,
	encode_m_family_create_toc/1,
	encode_m_family_introduce_tos/1,
	encode_m_family_introduce_toc/1,
	encode_m_family_self_tos/1,
	encode_m_family_self_toc/1,
	encode_m_family_panel_tos/1,
	encode_m_family_panel_toc/1,
	encode_p_family_summary/1,
	encode_p_family_invite_info/1,
	encode_m_family_enter_map_tos/1,
	encode_m_family_enter_map_toc/1,
	encode_m_family_call_uplevelboss_tos/1,
	encode_m_family_call_uplevelboss_toc/1,
	encode_m_family_call_commonboss_tos/1,
	encode_m_family_call_commonboss_toc/1,
	encode_m_family_uplevel_tos/1,
	encode_m_family_uplevel_toc/1,
	encode_m_family_invite_list_toc/1,
	encode_m_family_request_list_toc/1,
	encode_m_family_member_join_toc/1,
	encode_m_family_member_leave_tos/1,
	encode_m_family_member_leave_toc/1,
	encode_m_family_list_tos/1,
	encode_m_family_list_toc/1,
	encode_m_family_request_tos/1,
	encode_m_family_request_toc/1,
	encode_m_family_invite_tos/1,
	encode_m_family_invite_toc/1,
	encode_m_family_cancel_invite_tos/1,
	encode_m_family_cancel_invite_toc/1,
	encode_m_family_refuse_tos/1,
	encode_m_family_refuse_toc/1,
	encode_m_family_agree_f_tos/1,
	encode_m_family_agree_f_toc/1,
	encode_m_family_dismiss_tos/1,
	encode_m_family_dismiss_toc/1,
	encode_m_family_set_title_tos/1,
	encode_m_family_set_title_toc/1,
	encode_m_family_set_owner_tos/1,
	encode_m_family_set_owner_toc/1,
	encode_m_family_set_second_owner_tos/1,
	encode_m_family_set_second_owner_toc/1,
	encode_m_family_unset_second_owner_tos/1,
	encode_m_family_unset_second_owner_toc/1,
	encode_m_family_update_pub_notice_tos/1,
	encode_m_family_update_pub_notice_toc/1,
	encode_m_family_update_pri_notice_tos/1,
	encode_m_family_update_pri_notice_toc/1,
	encode_m_family_update_connect_number_tos/1,
	encode_m_family_update_connect_number_toc/1,
	encode_m_family_refuse_f_tos/1,
	encode_m_family_refuse_f_toc/1,
	encode_m_family_fire_tos/1,
	encode_m_family_fire_toc/1,
	encode_m_family_agree_tos/1,
	encode_m_family_agree_toc/1,
	encode_m_family_leave_tos/1,
	encode_m_family_leave_toc/1,
	encode_m_family_leave_map_tos/1,
	encode_m_family_leave_map_toc/1,
	encode_m_family_enter_bossmap_tos/1,
	encode_m_family_enter_bossmap_toc/1,
	encode_m_family_leave_bossmap_tos/1,
	encode_m_family_leave_bossmap_toc/1,
	encode_m_family_role_online_toc/1,
	encode_m_family_role_offline_toc/1,
	encode_m_family_can_invite_tos/1,
	encode_m_family_can_invite_toc/1,
	encode_m_family_cancel_title_tos/1,
	encode_m_family_cancel_title_toc/1,
	encode_m_family_enable_map_tos/1,
	encode_m_family_enable_map_toc/1,
	encode_m_family_del_request_toc/1,
	encode_m_family_map_closed_toc/1,
	encode_p_family_request_info/1,
	encode_m_family_info_change_toc/1,
	encode_m_family_active_points_toc/1,
	encode_m_family_money_toc/1,
	encode_m_family_downlevel_toc/1,
	encode_m_family_callmember_toc/1,
	encode_m_family_callmember_tos/1,
	encode_m_family_member_enter_map_toc/1,
	encode_m_family_member_enter_map_tos/1,
	encode_m_family_maintainfail_toc/1,
	encode_m_family_activestate_toc/1,
	encode_m_family_activestate_tos/1,
	encode_m_family_membergather_toc/1,
	encode_m_family_gatherrequest_tos/1,
	encode_m_family_gatherrequest_toc/1,
	encode_m_family_detail_tos/1,
	encode_m_family_detail_toc/1,
	encode_m_family_collect_begin_toc/1,
	encode_m_family_collect_info_toc/1,
	encode_m_family_collect_prize_info_tos/1,
	encode_m_family_collect_prize_info_toc/1,
	encode_m_family_collect_refresh_prize_tos/1,
	encode_m_family_collect_refresh_prize_toc/1,
	encode_m_family_collect_get_prize_tos/1,
	encode_m_family_collect_get_prize_toc/1,
	encode_m_family_set_bonfire_start_time_tos/1,
	encode_m_family_set_bonfire_start_time_toc/1,
	encode_m_family_get_donate_info_tos/1,
	encode_m_family_get_donate_info_toc/1,
	encode_m_family_donate_tos/1,
	encode_m_family_donate_toc/1,
	encode_m_broadcast_general_toc/1,
	encode_m_broadcast_countdown_toc/1,
	encode_m_broadcast_general_tos/1,
	encode_m_broadcast_countdown_tos/1,
	encode_m_broadcast_admin_tos/1,
	encode_m_broadcast_cycle_tos/1,
	encode_m_broadcast_laba_tos/1,
	encode_m_broadcast_laba_toc/1,
	encode_m_equip_build_list_tos/1,
	encode_m_equip_build_list_toc/1,
	encode_m_equip_build_build_tos/1,
	encode_m_equip_build_build_toc/1,
	encode_m_equip_build_goods_tos/1,
	encode_m_equip_build_goods_toc/1,
	encode_p_equip_build_equip/1,
	encode_p_equip_build_goods/1,
	encode_m_equip_build_quality_goods_tos/1,
	encode_m_equip_build_quality_goods_toc/1,
	encode_m_equip_build_quality_tos/1,
	encode_m_equip_build_quality_toc/1,
	encode_m_equip_build_signature_tos/1,
	encode_m_equip_build_signature_toc/1,
	encode_m_equip_build_upgrade_link_tos/1,
	encode_m_equip_build_upgrade_link_toc/1,
	encode_m_equip_build_upgrade_goods_tos/1,
	encode_m_equip_build_upgrade_goods_toc/1,
	encode_m_equip_build_upgrade_tos/1,
	encode_m_equip_build_upgrade_toc/1,
	encode_m_equip_build_decompose_tos/1,
	encode_m_equip_build_decompose_toc/1,
	encode_m_equip_build_fiveele_goods_tos/1,
	encode_m_equip_build_fiveele_goods_toc/1,
	encode_m_equip_build_fiveele_tos/1,
	encode_m_equip_build_fiveele_toc/1,
	encode_m_driver_go_tos/1,
	encode_m_driver_go_toc/1,
	encode_m_system_behavior_tos/1,
	encode_m_system_heartbeat_tos/1,
	encode_m_system_heartbeat_toc/1,
	encode_m_system_fcm_toc/1,
	encode_m_system_need_fcm_toc/1,
	encode_m_system_set_fcm_tos/1,
	encode_m_system_set_fcm_toc/1,
	encode_m_system_error_toc/1,
	encode_m_system_message_toc/1,
	encode_m_system_config_change_tos/1,
	encode_m_system_config_change_toc/1,
	encode_m_system_config_toc/1,
	encode_m_system_pk_not_agree_tos/1,
	encode_p_sys_config/1,
	encode_m_gm_complaint_tos/1,
	encode_m_gm_complaint_toc/1,
	encode_m_gm_score_tos/1,
	encode_m_gm_score_toc/1,
	encode_m_ranking_get_rank_tos/1,
	encode_m_ranking_get_rank_toc/1,
	encode_m_ranking_config_toc/1,
	encode_m_ranking_get_rankinfo_tos/1,
	encode_m_ranking_role_level_rank_toc/1,
	encode_m_ranking_equip_join_rank_tos/1,
	encode_m_ranking_equip_join_rank_toc/1,
	encode_m_ranking_role_pkpoint_rank_toc/1,
	encode_m_ranking_role_world_pkpoint_rank_toc/1,
	encode_m_ranking_family_active_rank_toc/1,
	encode_m_ranking_family_gongxun_rank_toc/1,
	encode_m_ranking_equip_refining_rank_toc/1,
	encode_m_ranking_equip_reinforce_rank_toc/1,
	encode_m_ranking_equip_stone_rank_toc/1,
	encode_m_ranking_role_gongxun_rank_toc/1,
	encode_m_ranking_role_today_gongxun_rank_toc/1,
	encode_m_ranking_role_yesterday_gongxun_rank_toc/1,
	encode_m_ranking_role_give_flowers_rank_toc/1,
	encode_m_ranking_role_give_flowers_today_rank_toc/1,
	encode_m_ranking_role_give_flowers_yesterday_rank_toc/1,
	encode_m_ranking_role_give_flowers_last_week_rank_toc/1,
	encode_m_ranking_role_give_flowers_this_week_rank_toc/1,
	encode_m_ranking_role_rece_flowers_rank_toc/1,
	encode_m_ranking_role_rece_flowers_today_rank_toc/1,
	encode_m_ranking_role_rece_flowers_yesterday_rank_toc/1,
	encode_m_ranking_role_rece_flowers_last_week_rank_toc/1,
	encode_m_ranking_role_rece_flowers_this_week_rank_toc/1,
	encode_m_ranking_role_pet_rank_toc/1,
	encode_m_ranking_pet_join_rank_tos/1,
	encode_m_ranking_pet_join_rank_toc/1,
	encode_m_ranking_hero_fb_rank_toc/1,
	encode_m_ranking_role_all_rank_tos/1,
	encode_m_ranking_role_all_rank_toc/1,
	encode_m_warofking_hold_tos/1,
	encode_m_warofking_hold_toc/1,
	encode_m_warofking_apply_tos/1,
	encode_m_warofking_apply_toc/1,
	encode_m_warofking_collect_toc/1,
	encode_m_warofking_agree_enter_tos/1,
	encode_m_warofking_agree_enter_toc/1,
	encode_m_warofking_enter_tos/1,
	encode_m_warofking_enter_toc/1,
	encode_p_warofking_mark/1,
	encode_m_warofking_getmarks_tos/1,
	encode_m_warofking_getmarks_toc/1,
	encode_m_warofking_break_toc/1,
	encode_m_warofking_holding_toc/1,
	encode_m_warofking_end_toc/1,
	encode_m_warofking_safetime_tos/1,
	encode_m_warofking_safetime_toc/1,
	encode_m_title_get_role_titles_toc/1,
	encode_m_title_change_cur_title_tos/1,
	encode_m_title_change_cur_title_toc/1,
	encode_p_faction/1,
	encode_p_king_token_used_log/1,
	encode_p_office/1,
	encode_p_office_equip/1,
	encode_p_office_position/1,
	encode_m_office_appoint_tos/1,
	encode_m_office_appoint_toc/1,
	encode_m_office_disappoint_tos/1,
	encode_m_office_disappoint_toc/1,
	encode_m_office_agree_appoint_tos/1,
	encode_m_office_agree_appoint_toc/1,
	encode_m_office_refuse_appoint_tos/1,
	encode_m_office_refuse_appoint_toc/1,
	encode_m_office_cancel_appoint_tos/1,
	encode_m_office_cancel_appoint_toc/1,
	encode_m_office_launch_collection_tos/1,
	encode_m_office_launch_collection_toc/1,
	encode_m_office_donate_tos/1,
	encode_m_office_donate_toc/1,
	encode_m_office_panel_tos/1,
	encode_m_office_panel_toc/1,
	encode_m_office_set_notice_tos/1,
	encode_m_office_set_notice_toc/1,
	encode_m_office_equip_panel_tos/1,
	encode_m_office_equip_panel_toc/1,
	encode_m_office_take_equip_tos/1,
	encode_m_office_take_equip_toc/1,
	encode_m_waroffaction_gather_factionist_toc/1,
	encode_m_waroffaction_gather_confirm_tos/1,
	encode_m_waroffaction_gather_confirm_toc/1,
	encode_m_waroffaction_declare_tos/1,
	encode_m_waroffaction_declare_toc/1,
	encode_m_waroffaction_tower_destroyed_toc/1,
	encode_m_waroffaction_general_killed_toc/1,
	encode_m_waroffaction_flag_destroyed_toc/1,
	encode_m_waroffaction_collect_toc/1,
	encode_m_waroffaction_agree_collect_tos/1,
	encode_m_waroffaction_status_tos/1,
	encode_m_waroffaction_status_toc/1,
	encode_m_waroffaction_warinfo_tos/1,
	encode_m_waroffaction_warinfo_toc/1,
	encode_m_waroffaction_record_tos/1,
	encode_m_waroffaction_record_toc/1,
	encode_m_waroffaction_buy_guarder_tos/1,
	encode_m_waroffaction_buy_guarder_toc/1,
	encode_m_waroffaction_convene_tos/1,
	encode_m_waroffaction_convene_toc/1,
	encode_m_waroffaction_transfer_tos/1,
	encode_m_waroffaction_transfer_toc/1,
	encode_m_waroffaction_count_down_toc/1,
	encode_m_waroffaction_rank_tos/1,
	encode_m_waroffaction_rank_toc/1,
	encode_m_trainingcamp_exchange_tos/1,
	encode_m_trainingcamp_exchange_toc/1,
	encode_m_trainingcamp_start_tos/1,
	encode_m_trainingcamp_start_toc/1,
	encode_m_trainingcamp_stop_tos/1,
	encode_m_trainingcamp_stop_toc/1,
	encode_m_trainingcamp_state_tos/1,
	encode_m_trainingcamp_state_toc/1,
	encode_m_trainingcamp_remain_point_tos/1,
	encode_m_trainingcamp_remain_point_toc/1,
	encode_m_warofcity_apply_tos/1,
	encode_m_warofcity_apply_toc/1,
	encode_m_warofcity_collect_toc/1,
	encode_m_warofcity_agree_enter_tos/1,
	encode_m_warofcity_agree_enter_toc/1,
	encode_p_warofcity_family_mark/1,
	encode_p_warofcity_role_mark/1,
	encode_m_warofcity_get_mark_tos/1,
	encode_m_warofcity_get_mark_toc/1,
	encode_m_warofcity_info_toc/1,
	encode_m_warofcity_hold_tos/1,
	encode_m_warofcity_hold_toc/1,
	encode_m_warofcity_holding_toc/1,
	encode_p_warofcity_apply_family/1,
	encode_p_warofcity/1,
	encode_p_warofcity_reward/1,
	encode_m_warofcity_panel_tos/1,
	encode_m_warofcity_panel_toc/1,
	encode_m_warofcity_get_reward_tos/1,
	encode_m_warofcity_get_reward_toc/1,
	encode_p_warofcity_family_winner/1,
	encode_p_warofcity_role_winner/1,
	encode_m_warofcity_end_toc/1,
	encode_m_warofcity_break_toc/1,
	encode_m_warofcity_hold_succ_toc/1,
	encode_m_family_memberuplevel_toc/1,
	encode_m_achievement_query_tos/1,
	encode_m_achievement_query_toc/1,
	encode_m_achievement_notice_tos/1,
	encode_m_achievement_notice_toc/1,
	encode_m_achievement_award_tos/1,
	encode_m_achievement_award_toc/1,
	encode_m_collect_get_grafts_info_tos/1,
	encode_m_collect_get_grafts_info_toc/1,
	encode_m_collect_stop_tos/1,
	encode_m_collect_remove_grafts_toc/1,
	encode_m_collect_updata_grafts_toc/1,
	encode_m_collect_grafts_toc/1,
	encode_p_personybc_info/1,
	encode_p_personybc_award_prop/1,
	encode_p_personybc_award_attr/1,
	encode_m_personybc_public_tos/1,
	encode_m_personybc_public_toc/1,
	encode_m_personybc_auto_tos/1,
	encode_m_personybc_auto_toc/1,
	encode_m_personybc_set_auto_tos/1,
	encode_m_personybc_set_auto_toc/1,
	encode_m_personybc_cancel_tos/1,
	encode_m_personybc_cancel_toc/1,
	encode_m_personybc_commit_tos/1,
	encode_m_personybc_commit_toc/1,
	encode_m_personybc_info_tos/1,
	encode_m_personybc_info_toc/1,
	encode_m_personybc_color_change_toc/1,
	encode_m_personybc_timer_toc/1,
	encode_m_personybc_faction_notice_toc/1,
	encode_m_personybc_faction_tos/1,
	encode_m_personybc_faction_toc/1,
	encode_m_personybc_sos_toc/1,
	encode_m_personybc_auto_refresh_color_tos/1,
	encode_m_personybc_auto_refresh_color_toc/1,
	encode_m_vie_world_fb_enter_tos/1,
	encode_m_vie_world_fb_enter_toc/1,
	encode_m_vie_world_fb_quit_tos/1,
	encode_m_vie_world_fb_quit_toc/1,
	encode_m_server_npc_enter_toc/1,
	encode_m_server_npc_quit_toc/1,
	encode_m_server_npc_dead_toc/1,
	encode_m_server_npc_attr_change_toc/1,
	encode_m_server_npc_walk_toc/1,
	encode_m_equiponekey_list_tos/1,
	encode_m_equiponekey_list_toc/1,
	encode_m_equiponekey_info_tos/1,
	encode_m_equiponekey_info_toc/1,
	encode_m_equiponekey_save_tos/1,
	encode_m_equiponekey_save_toc/1,
	encode_m_equiponekey_load_tos/1,
	encode_m_equiponekey_load_toc/1,
	encode_m_activity_today_tos/1,
	encode_m_activity_today_toc/1,
	encode_m_activity_pay_gift_info_tos/1,
	encode_m_activity_pay_gift_info_toc/1,
	encode_m_activity_getgift_tos/1,
	encode_m_activity_getgift_toc/1,
	encode_m_activity_benefit_list_tos/1,
	encode_m_activity_benefit_list_toc/1,
	encode_m_activity_benefit_reward_tos/1,
	encode_m_activity_benefit_reward_toc/1,
	encode_m_activity_benefit_buy_tos/1,
	encode_m_activity_benefit_buy_toc/1,
	encode_m_newcomer_activate_code_tos/1,
	encode_m_newcomer_activate_code_toc/1,
	encode_m_trading_shop_tos/1,
	encode_m_trading_shop_toc/1,
	encode_m_trading_buy_tos/1,
	encode_m_trading_buy_toc/1,
	encode_m_trading_sale_tos/1,
	encode_m_trading_sale_toc/1,
	encode_m_trading_get_tos/1,
	encode_m_trading_get_toc/1,
	encode_m_trading_return_tos/1,
	encode_m_trading_return_toc/1,
	encode_m_trading_exchange_tos/1,
	encode_m_trading_exchange_toc/1,
	encode_m_trading_status_tos/1,
	encode_m_trading_status_toc/1,
	encode_m_flowers_get_accept_list_toc/1,
	encode_m_flowers_update_accept_toc/1,
	encode_p_flowers_give_info/1,
	encode_m_flowers_accept_tos/1,
	encode_m_flowers_accept_toc/1,
	encode_m_flowers_give_tos/1,
	encode_m_flowers_give_toc/1,
	encode_m_flowers_get_recever_info_tos/1,
	encode_m_flowers_get_recever_info_toc/1,
	encode_m_flowers_give_world_broadcast_toc/1,
	encode_m_flowers_give_faction_broadcast_toc/1,
	encode_m_flowers_give_map_broadcast_toc/1,
	encode_p_flowers_give_broadcast_info/1,
	encode_m_plant_family_farm_toc/1,
	encode_m_plant_update_farm_toc/1,
	encode_m_plant_assart_tos/1,
	encode_m_plant_assart_toc/1,
	encode_m_plant_sow_tos/1,
	encode_m_plant_sow_toc/1,
	encode_m_plant_fertilize_tos/1,
	encode_m_plant_fertilize_toc/1,
	encode_m_plant_list_log_tos/1,
	encode_m_plant_list_log_toc/1,
	encode_m_plant_clear_log_tos/1,
	encode_m_plant_clear_log_toc/1,
	encode_m_plant_harvest_tos/1,
	encode_m_plant_harvest_toc/1,
	encode_m_plant_show_skill_tos/1,
	encode_m_plant_show_skill_toc/1,
	encode_m_plant_upgrade_skill_tos/1,
	encode_m_plant_upgrade_skill_toc/1,
	encode_m_plant_list_seeds_tos/1,
	encode_m_plant_list_seeds_toc/1,
	encode_m_family_combine_panel_tos/1,
	encode_m_family_combine_panel_toc/1,
	encode_m_family_combine_request_tos/1,
	encode_m_family_combine_request_toc/1,
	encode_m_family_combine_tos/1,
	encode_m_family_combine_toc/1,
	encode_m_role2_on_hook_begin_tos/1,
	encode_m_role2_on_hook_begin_toc/1,
	encode_m_role2_on_hook_end_tos/1,
	encode_m_role2_on_hook_end_toc/1,
	encode_m_role2_on_hook_status_tos/1,
	encode_m_role2_on_hook_status_toc/1,
	encode_m_time_gift_list_toc/1,
	encode_p_time_gift_info/1,
	encode_m_time_gift_accept_tos/1,
	encode_m_time_gift_accept_toc/1,
	encode_m_level_gift_list_toc/1,
	encode_p_level_gift_info/1,
	encode_m_level_gift_accept_tos/1,
	encode_m_level_gift_accept_toc/1,
	encode_m_country_treasure_enter_tos/1,
	encode_m_country_treasure_enter_toc/1,
	encode_m_country_treasure_quit_tos/1,
	encode_m_country_treasure_quit_toc/1,
	encode_m_country_treasure_query_tos/1,
	encode_m_country_treasure_query_toc/1,
	encode_m_country_treasure_points_toc/1,
	encode_p_country_points/1,
	encode_m_pet_enter_toc/1,
	encode_m_pet_quit_toc/1,
	encode_m_pet_dead_toc/1,
	encode_m_pet_attr_change_toc/1,
	encode_m_pet_summon_tos/1,
	encode_m_pet_summon_toc/1,
	encode_m_pet_call_back_tos/1,
	encode_m_pet_call_back_toc/1,
	encode_m_pet_throw_tos/1,
	encode_m_pet_throw_toc/1,
	encode_m_pet_add_life_tos/1,
	encode_m_pet_add_life_toc/1,
	encode_m_pet_learn_skill_tos/1,
	encode_m_pet_learn_skill_toc/1,
	encode_m_pet_info_tos/1,
	encode_m_pet_info_toc/1,
	encode_m_pet_bag_info_tos/1,
	encode_m_pet_bag_info_toc/1,
	encode_m_pet_add_bag_tos/1,
	encode_m_pet_add_bag_toc/1,
	encode_m_pet_attr_assign_tos/1,
	encode_m_pet_attr_assign_toc/1,
	encode_m_pet_level_up_toc/1,
	encode_m_pet_refresh_aptitude_tos/1,
	encode_m_pet_refresh_aptitude_toc/1,
	encode_m_pet_add_understanding_tos/1,
	encode_m_pet_add_understanding_toc/1,
	encode_m_pet_change_name_tos/1,
	encode_m_pet_change_name_toc/1,
	encode_m_pet_feed_info_tos/1,
	encode_m_pet_feed_info_toc/1,
	encode_m_pet_feed_begin_tos/1,
	encode_m_pet_feed_begin_toc/1,
	encode_m_pet_feed_commit_tos/1,
	encode_m_pet_feed_commit_toc/1,
	encode_m_pet_feed_give_up_tos/1,
	encode_m_pet_feed_give_up_toc/1,
	encode_m_pet_feed_star_up_tos/1,
	encode_m_pet_feed_star_up_toc/1,
	encode_m_pet_feed_over_toc/1,
	encode_m_pet_training_request_tos/1,
	encode_m_pet_training_request_toc/1,
	encode_m_pet_grow_info_tos/1,
	encode_m_pet_grow_info_toc/1,
	encode_m_pet_grow_begin_tos/1,
	encode_m_pet_grow_begin_toc/1,
	encode_m_pet_grow_commit_tos/1,
	encode_m_pet_grow_commit_toc/1,
	encode_m_pet_grow_give_up_tos/1,
	encode_m_pet_grow_give_up_toc/1,
	encode_m_pet_grow_over_toc/1,
	encode_m_pet_add_skill_grid_tos/1,
	encode_m_pet_add_skill_grid_toc/1,
	encode_m_pet_forget_skill_tos/1,
	encode_m_pet_forget_skill_toc/1,
	encode_m_pet_change_pos_tos/1,
	encode_m_pet_change_pos_toc/1,
	encode_m_pet_refining_tos/1,
	encode_m_pet_refining_toc/1,
	encode_m_pet_refining_exp_tos/1,
	encode_m_pet_refining_exp_toc/1,
	encode_m_pet_egg_use_tos/1,
	encode_m_pet_egg_use_toc/1,
	encode_m_pet_egg_refresh_tos/1,
	encode_m_pet_egg_refresh_toc/1,
	encode_m_pet_egg_adopt_tos/1,
	encode_m_pet_egg_adopt_toc/1,
	encode_m_pet_trick_learn_tos/1,
	encode_m_pet_trick_learn_toc/1,
	encode_m_pet_trick_upgrade_tos/1,
	encode_m_pet_trick_upgrade_toc/1,
	encode_m_stat_button_tos/1,
	encode_m_stat_config_toc/1,
	encode_m_spy_faction_tos/1,
	encode_m_spy_faction_toc/1,
	encode_m_spy_faction_time_toc/1,
	encode_m_spy_time_tos/1,
	encode_m_spy_time_toc/1,
	encode_m_educate_fb_enter_tos/1,
	encode_m_educate_fb_enter_toc/1,
	encode_m_educate_fb_quit_tos/1,
	encode_m_educate_fb_quit_toc/1,
	encode_m_educate_fb_award_tos/1,
	encode_m_educate_fb_award_toc/1,
	encode_m_educate_fb_gambling_tos/1,
	encode_m_educate_fb_gambling_toc/1,
	encode_m_educate_fb_item_tos/1,
	encode_m_educate_fb_item_toc/1,
	encode_m_educate_fb_query_tos/1,
	encode_m_educate_fb_query_toc/1,
	encode_m_jail_out_tos/1,
	encode_m_jail_out_toc/1,
	encode_m_jail_donate_tos/1,
	encode_m_jail_donate_toc/1,
	encode_m_jail_out_force_tos/1,
	encode_m_jail_out_force_toc/1,
	encode_m_present_get_tos/1,
	encode_m_present_get_toc/1,
	encode_m_present_notify_toc/1,
	encode_m_conlogin_fetch_tos/1,
	encode_m_conlogin_fetch_toc/1,
	encode_m_conlogin_info_toc/1,
	encode_m_conlogin_info_tos/1,
	encode_m_conlogin_notshow_tos/1,
	encode_m_conlogin_notshow_toc/1,
	encode_m_conlogin_clear_tos/1,
	encode_m_conlogin_clear_toc/1,
	encode_m_personal_fb_list_tos/1,
	encode_m_personal_fb_list_toc/1,
	encode_m_personal_fb_enter_tos/1,
	encode_m_personal_fb_enter_toc/1,
	encode_m_personal_fb_lost_toc/1,
	encode_m_personal_fb_quit_tos/1,
	encode_m_personal_fb_quit_toc/1,
	encode_m_personal_fb_next_level_tos/1,
	encode_m_personal_fb_next_level_toc/1,
	encode_m_personal_fb_state_toc/1,
	encode_p_personal_fb_info/1,
	encode_m_accumulate_exp_info_tos/1,
	encode_m_accumulate_exp_info_toc/1,
	encode_m_accumulate_exp_refresh_tos/1,
	encode_m_accumulate_exp_refresh_toc/1,
	encode_m_accumulate_exp_fetch_tos/1,
	encode_m_accumulate_exp_fetch_toc/1,
	encode_m_accumulate_exp_notify_toc/1,
	encode_m_accumulate_exp_list_tos/1,
	encode_m_accumulate_exp_list_toc/1,
	encode_m_trap_enter_toc/1,
	encode_m_trap_quit_toc/1,
	encode_m_vip_info_toc/1,
	encode_m_vip_remote_depot_tos/1,
	encode_m_vip_remote_depot_toc/1,
	encode_m_vip_active_tos/1,
	encode_m_vip_active_toc/1,
	encode_m_vip_multi_exp_tos/1,
	encode_m_vip_multi_exp_toc/1,
	encode_m_vip_stop_notify_tos/1,
	encode_m_vip_stop_notify_toc/1,
	encode_m_vip_list_tos/1,
	encode_m_vip_list_toc/1,
	encode_m_vip_exchange_prestige_tos/1,
	encode_m_vip_exchange_prestige_toc/1,
	encode_m_fmldepot_list_goods_tos/1,
	encode_m_fmldepot_list_goods_toc/1,
	encode_m_fmldepot_create_tos/1,
	encode_m_fmldepot_create_toc/1,
	encode_m_fmldepot_putin_tos/1,
	encode_m_fmldepot_putin_toc/1,
	encode_m_fmldepot_getout_tos/1,
	encode_m_fmldepot_getout_toc/1,
	encode_m_fmldepot_update_goods_toc/1,
	encode_m_fmldepot_list_log_tos/1,
	encode_m_fmldepot_list_log_toc/1,
	encode_m_scene_war_fb_enter_tos/1,
	encode_m_scene_war_fb_enter_toc/1,
	encode_m_scene_war_fb_quit_tos/1,
	encode_m_scene_war_fb_quit_toc/1,
	encode_m_scene_war_fb_query_tos/1,
	encode_m_scene_war_fb_query_toc/1,
	encode_m_scene_war_fb_call_monster_tos/1,
	encode_m_scene_war_fb_call_monster_toc/1,
	encode_m_bgp_login_tos/1,
	encode_m_bgp_login_toc/1,
	encode_m_gift_item_query_tos/1,
	encode_m_gift_item_query_toc/1,
	encode_m_gift_item_award_tos/1,
	encode_m_gift_item_award_toc/1,
	encode_m_bonfire_up_toc/1,
	encode_m_bonfire_rm_toc/1,
	encode_m_bonfire_add_fagot_tos/1,
	encode_m_bonfire_add_fagot_toc/1,
	encode_m_bonfire_get_tos/1,
	encode_m_bonfire_get_toc/1,
	encode_m_mission_fb_enter_tos/1,
	encode_m_mission_fb_enter_toc/1,
	encode_m_mission_fb_prop_tos/1,
	encode_m_mission_fb_prop_toc/1,
	encode_m_mission_fb_quit_tos/1,
	encode_m_mission_fb_quit_toc/1,
	encode_m_hero_fb_enter_tos/1,
	encode_m_hero_fb_enter_toc/1,
	encode_m_hero_fb_report_tos/1,
	encode_m_hero_fb_report_toc/1,
	encode_m_hero_fb_panel_tos/1,
	encode_m_hero_fb_panel_toc/1,
	encode_m_hero_fb_quit_tos/1,
	encode_m_hero_fb_quit_toc/1,
	encode_m_hero_fb_reward_tos/1,
	encode_m_hero_fb_reward_toc/1,
	encode_m_hero_fb_state_toc/1,
	encode_m_hero_fb_buy_tos/1,
	encode_m_hero_fb_buy_toc/1,
	encode_m_hero_fb_poker_reward_tos/1,
	encode_m_hero_fb_poker_reward_toc/1,
	encode_m_accumulate_exp_get_tos/1,
	encode_m_accumulate_exp_get_toc/1,
	encode_m_accumulate_exp_view_tos/1,
	encode_m_accumulate_exp_view_toc/1,
	encode_m_family_set_interior_manager_tos/1,
	encode_m_family_set_interior_manager_toc/1,
	encode_m_family_unset_interior_manager_tos/1,
	encode_m_family_unset_interior_manager_toc/1,
	encode_m_family_leftright_protector_toc/1,
	encode_m_family_collect_get_role_info_tos/1,
	encode_m_family_collect_get_role_info_toc/1,
	encode_m_family_notify_online_tos/1,
	encode_m_family_notify_online_toc/1,
	encode_m_goal_info_tos/1,
	encode_m_goal_info_toc/1,
	encode_m_goal_fetch_tos/1,
	encode_m_goal_fetch_toc/1,
	encode_m_goal_update_toc/1,
	encode_m_prestige_query_tos/1,
	encode_m_prestige_query_toc/1,
	encode_m_prestige_deal_tos/1,
	encode_m_prestige_deal_toc/1,
	encode_m_special_activity_get_prize_tos/1,
	encode_m_special_activity_get_prize_toc/1,
	encode_m_special_activity_able_get_toc/1,
	encode_m_special_activity_list_tos/1,
	encode_m_special_activity_list_toc/1,
	encode_m_special_activity_detail_tos/1,
	encode_m_special_activity_detail_toc/1,
	encode_m_special_activity_stat_tos/1,
	encode_m_special_activity_stat_toc/1,
	encode_m_activity_boss_group_tos/1,
	encode_m_activity_boss_group_toc/1,
	encode_m_shuaqi_fb_request_tos/1,
	encode_m_shuaqi_fb_request_toc/1,
	encode_m_exercise_fb_request_tos/1,
	encode_m_exercise_fb_request_toc/1,
	encode_m_flash_proxy_server_tos/1,
	encode_m_server_disconnect_flash_toc/1,
	encode_m_server_update_proxy_address_config_tos/1,
	encode_p_chat_titles/2,
	encode_p_actor_bufs/2,
	encode_p_goodss/2,
	encode_p_skill_preconditions/2,
	encode_p_skill_item_consumes/2,
	encode_p_map_tiles/2,
	encode_p_item_effects/2,
	encode_p_equip_bind_attrs/2,
	encode_p_drop_colour_modes/2,
	encode_p_drop_quality_modes/2,
	encode_p_drop_hole_modes/2,
	encode_p_single_drops/2,
	encode_p_drop_infos/2,
	encode_p_monster_skills/2,
	encode_p_enemys/2,
	encode_p_boss_ai_skills/2,
	encode_p_monster_talks/2,
	encode_p_boss_ai_conditions/2,
	encode_p_family_second_owners/2,
	encode_p_family_requests/2,
	encode_p_family_invites/2,
	encode_p_family_member_infos/2,
	encode_p_rank_elements/2,
	encode_p_collect_roles/2,
	encode_p_collects/2,
	encode_p_collect_goodss/2,
	encode_p_equip_onekey_simples/2,
	encode_p_pet_skills/2,
	encode_p_pet_id_names/2,
	encode_p_scene_war_fb_role_infos/2,
	encode_p_hero_fb_barriers/2,
	encode_p_role_goal_items/2,
	encode_p_goal_items/2,
	encode_p_activity_prize_goodss/2,
	encode_p_channel_infos/2,
	encode_p_chat_roles/2,
	encode_p_chat_channel_role_infos/2,
	encode_p_roles/2,
	encode_p_line_infos/2,
	encode_p_bag_contents/2,
	encode_p_map_roles/2,
	encode_p_map_monsters/2,
	encode_p_map_dropthings/2,
	encode_p_map_stalls/2,
	encode_p_map_collects/2,
	encode_p_map_ybcs/2,
	encode_p_map_server_npcs/2,
	encode_p_map_pets/2,
	encode_p_map_traps/2,
	encode_p_bufs/2,
	encode_p_buff_effects/2,
	encode_p_attack_results/2,
	encode_p_team_roles/2,
	encode_p_recommend_member_infos/2,
	encode_p_team_nearbys/2,
	encode_p_friend_infos/2,
	encode_p_simple_friend_infos/2,
	encode_p_shop_infos/2,
	encode_p_shop_currencys/2,
	encode_p_shop_prices/2,
	encode_p_shop_goods_infos/2,
	encode_p_shop_sale_goodss/2,
	encode_p_letter_simple_infos/2,
	encode_p_letter_goodss/2,
	encode_p_letter_deletes/2,
	encode_p_equip_mount_renewals/2,
	encode_p_equip_endurance_infos/2,
	encode_p_role_attr_changes/2,
	encode_p_role_skills/2,
	encode_p_sys_buff_infos/2,
	encode_p_faction_online_ranks/2,
	encode_p_mission_listeners/2,
	encode_p_mission_infos/2,
	encode_p_mission_props/2,
	encode_p_mission_autos/2,
	encode_p_family_ybc_member_infos/2,
	encode_p_simple_goodss/2,
	encode_p_equip_items/2,
	encode_p_stall_goodss/2,
	encode_p_stall_logs/2,
	encode_p_stall_list_items/2,
	encode_p_stall_search_goodss/2,
	encode_p_fml_buffs/2,
	encode_p_skill_times/2,
	encode_p_refinings/2,
	encode_p_refining_box_logs/2,
	encode_p_depot_bags/2,
	encode_p_educate_role_infos/2,
	encode_p_bank_simple_sheets/2,
	encode_p_bank_sheets/2,
	encode_p_shortcuts/2,
	encode_p_family_invite_infos/2,
	encode_p_family_summarys/2,
	encode_p_family_request_infos/2,
	encode_p_family_info_changes/2,
	encode_p_family_tasks/2,
	encode_p_role_family_donate_infos/2,
	encode_p_equip_build_equips/2,
	encode_p_equip_build_goodss/2,
	encode_p_rank_rows/2,
	encode_p_rankings/2,
	encode_p_role_level_ranks/2,
	encode_p_role_pkpoint_ranks/2,
	encode_p_family_active_ranks/2,
	encode_p_family_gongxun_ranks/2,
	encode_p_equip_ranks/2,
	encode_p_role_gongxun_ranks/2,
	encode_p_role_give_flowers_ranks/2,
	encode_p_role_give_flowers_today_ranks/2,
	encode_p_role_give_flowers_yesterday_ranks/2,
	encode_p_role_give_flowers_last_week_ranks/2,
	encode_p_role_give_flowers_this_week_ranks/2,
	encode_p_role_rece_flowers_ranks/2,
	encode_p_role_rece_flowers_today_ranks/2,
	encode_p_role_rece_flowers_yesterday_ranks/2,
	encode_p_role_rece_flowers_last_week_ranks/2,
	encode_p_role_rece_flowers_this_week_ranks/2,
	encode_p_role_pet_ranks/2,
	encode_p_hero_fb_ranks/2,
	encode_p_role_all_ranks/2,
	encode_p_warofking_marks/2,
	encode_p_titles/2,
	encode_p_office_positions/2,
	encode_p_office_equips/2,
	encode_p_waroffaction_records/2,
	encode_p_waroffaction_ranks/2,
	encode_p_warofcity_family_marks/2,
	encode_p_warofcity_role_marks/2,
	encode_p_warofcity_rewards/2,
	encode_p_warofcity_apply_familys/2,
	encode_p_warofcitys/2,
	encode_p_achievement_infos/2,
	encode_p_achievement_stat_infos/2,
	encode_p_personybc_award_attrs/2,
	encode_p_personybc_award_props/2,
	encode_p_equip_onekey_infos/2,
	encode_p_activity_infos/2,
	encode_p_gift_goodss/2,
	encode_p_trading_goodss/2,
	encode_p_flowers_give_infos/2,
	encode_p_map_farms/2,
	encode_p_seed_infos/2,
	encode_p_country_pointss/2,
	encode_p_pet_attr_assigns/2,
	encode_p_pet_training_infos/2,
	encode_p_grow_infos/2,
	encode_p_educate_fb_items/2,
	encode_p_educate_fb_awards/2,
	encode_p_present_infos/2,
	encode_p_conlogin_rewards/2,
	encode_p_personal_fb_infos/2,
	encode_p_accumulate_exp_infos/2,
	encode_p_vip_list_infos/2,
	encode_p_fmldepot_bags/2,
	encode_p_fmldepot_logs/2,
	encode_p_scene_war_fb_links/2,
	encode_p_map_bonfires/2,
	encode_p_hero_fb_poker_rewards/2,
	encode_p_online_infos/2,
	encode_p_prestige_items/2,
	encode_p_activity_conditions/2,
	encode_p_boss_groups/2,
	decode_p_chat_titles/2,
	decode_p_actor_bufs/2,
	decode_p_goodss/2,
	decode_p_skill_preconditions/2,
	decode_p_skill_item_consumes/2,
	decode_p_map_tiles/2,
	decode_p_item_effects/2,
	decode_p_equip_bind_attrs/2,
	decode_p_drop_colour_modes/2,
	decode_p_drop_quality_modes/2,
	decode_p_drop_hole_modes/2,
	decode_p_single_drops/2,
	decode_p_drop_infos/2,
	decode_p_monster_skills/2,
	decode_p_enemys/2,
	decode_p_boss_ai_skills/2,
	decode_p_monster_talks/2,
	decode_p_boss_ai_conditions/2,
	decode_p_family_second_owners/2,
	decode_p_family_requests/2,
	decode_p_family_invites/2,
	decode_p_family_member_infos/2,
	decode_p_rank_elements/2,
	decode_p_collect_roles/2,
	decode_p_collects/2,
	decode_p_collect_goodss/2,
	decode_p_equip_onekey_simples/2,
	decode_p_pet_skills/2,
	decode_p_pet_id_names/2,
	decode_p_scene_war_fb_role_infos/2,
	decode_p_hero_fb_barriers/2,
	decode_p_role_goal_items/2,
	decode_p_goal_items/2,
	decode_p_activity_prize_goodss/2,
	decode_p_channel_infos/2,
	decode_p_chat_roles/2,
	decode_p_chat_channel_role_infos/2,
	decode_p_roles/2,
	decode_p_line_infos/2,
	decode_p_bag_contents/2,
	decode_p_map_roles/2,
	decode_p_map_monsters/2,
	decode_p_map_dropthings/2,
	decode_p_map_stalls/2,
	decode_p_map_collects/2,
	decode_p_map_ybcs/2,
	decode_p_map_server_npcs/2,
	decode_p_map_pets/2,
	decode_p_map_traps/2,
	decode_p_bufs/2,
	decode_p_buff_effects/2,
	decode_p_attack_results/2,
	decode_p_team_roles/2,
	decode_p_recommend_member_infos/2,
	decode_p_team_nearbys/2,
	decode_p_friend_infos/2,
	decode_p_simple_friend_infos/2,
	decode_p_shop_infos/2,
	decode_p_shop_currencys/2,
	decode_p_shop_prices/2,
	decode_p_shop_goods_infos/2,
	decode_p_shop_sale_goodss/2,
	decode_p_letter_simple_infos/2,
	decode_p_letter_goodss/2,
	decode_p_letter_deletes/2,
	decode_p_equip_mount_renewals/2,
	decode_p_equip_endurance_infos/2,
	decode_p_role_attr_changes/2,
	decode_p_role_skills/2,
	decode_p_sys_buff_infos/2,
	decode_p_faction_online_ranks/2,
	decode_p_mission_listeners/2,
	decode_p_mission_infos/2,
	decode_p_mission_props/2,
	decode_p_mission_autos/2,
	decode_p_family_ybc_member_infos/2,
	decode_p_simple_goodss/2,
	decode_p_equip_items/2,
	decode_p_stall_goodss/2,
	decode_p_stall_logs/2,
	decode_p_stall_list_items/2,
	decode_p_stall_search_goodss/2,
	decode_p_fml_buffs/2,
	decode_p_skill_times/2,
	decode_p_refinings/2,
	decode_p_refining_box_logs/2,
	decode_p_depot_bags/2,
	decode_p_educate_role_infos/2,
	decode_p_bank_simple_sheets/2,
	decode_p_bank_sheets/2,
	decode_p_shortcuts/2,
	decode_p_family_invite_infos/2,
	decode_p_family_summarys/2,
	decode_p_family_request_infos/2,
	decode_p_family_info_changes/2,
	decode_p_family_tasks/2,
	decode_p_role_family_donate_infos/2,
	decode_p_equip_build_equips/2,
	decode_p_equip_build_goodss/2,
	decode_p_rank_rows/2,
	decode_p_rankings/2,
	decode_p_role_level_ranks/2,
	decode_p_role_pkpoint_ranks/2,
	decode_p_family_active_ranks/2,
	decode_p_family_gongxun_ranks/2,
	decode_p_equip_ranks/2,
	decode_p_role_gongxun_ranks/2,
	decode_p_role_give_flowers_ranks/2,
	decode_p_role_give_flowers_today_ranks/2,
	decode_p_role_give_flowers_yesterday_ranks/2,
	decode_p_role_give_flowers_last_week_ranks/2,
	decode_p_role_give_flowers_this_week_ranks/2,
	decode_p_role_rece_flowers_ranks/2,
	decode_p_role_rece_flowers_today_ranks/2,
	decode_p_role_rece_flowers_yesterday_ranks/2,
	decode_p_role_rece_flowers_last_week_ranks/2,
	decode_p_role_rece_flowers_this_week_ranks/2,
	decode_p_role_pet_ranks/2,
	decode_p_hero_fb_ranks/2,
	decode_p_role_all_ranks/2,
	decode_p_warofking_marks/2,
	decode_p_titles/2,
	decode_p_office_positions/2,
	decode_p_office_equips/2,
	decode_p_waroffaction_records/2,
	decode_p_waroffaction_ranks/2,
	decode_p_warofcity_family_marks/2,
	decode_p_warofcity_role_marks/2,
	decode_p_warofcity_rewards/2,
	decode_p_warofcity_apply_familys/2,
	decode_p_warofcitys/2,
	decode_p_achievement_infos/2,
	decode_p_achievement_stat_infos/2,
	decode_p_personybc_award_attrs/2,
	decode_p_personybc_award_props/2,
	decode_p_equip_onekey_infos/2,
	decode_p_activity_infos/2,
	decode_p_gift_goodss/2,
	decode_p_trading_goodss/2,
	decode_p_flowers_give_infos/2,
	decode_p_map_farms/2,
	decode_p_seed_infos/2,
	decode_p_country_pointss/2,
	decode_p_pet_attr_assigns/2,
	decode_p_pet_training_infos/2,
	decode_p_grow_infos/2,
	decode_p_educate_fb_items/2,
	decode_p_educate_fb_awards/2,
	decode_p_present_infos/2,
	decode_p_conlogin_rewards/2,
	decode_p_personal_fb_infos/2,
	decode_p_accumulate_exp_infos/2,
	decode_p_vip_list_infos/2,
	decode_p_fmldepot_bags/2,
	decode_p_fmldepot_logs/2,
	decode_p_scene_war_fb_links/2,
	decode_p_map_bonfires/2,
	decode_p_hero_fb_poker_rewards/2,
	decode_p_online_infos/2,
	decode_p_prestige_items/2,
	decode_p_activity_conditions/2,
	decode_p_boss_groups/2
]).
-export([
	decode_p_game_role_disply/1,
	decode_p_chat_role/1,
	decode_p_chat_title/1,
	decode_p_title/1,
	decode_p_chat_channel_role_info/1,
	decode_p_channel_info/1,
	decode_p_actor_buf/1,
	decode_p_skin/1,
	decode_p_role_base/1,
	decode_p_role_pos/1,
	decode_p_role_fight/1,
	decode_p_role_attr/1,
	decode_p_role_ext/1,
	decode_p_role/1,
	decode_p_skill/1,
	decode_p_skill_precondition/1,
	decode_p_skill_level/1,
	decode_p_skill_item_consume/1,
	decode_p_effect/1,
	decode_p_buf/1,
	decode_p_map_stall/1,
	decode_p_pos/1,
	decode_p_map_tile/1,
	decode_p_walk_path/1,
	decode_p_map_role/1,
	decode_s_error_common_toc/1,
	decode_s_chat_leave_channel_tos/1,
	decode_s_chat_join_channel_tos/1,
	decode_p_map_dropthing/1,
	decode_s_account_kick_toc/1,
	decode_s_account_register_tos/1,
	decode_p_use_requirement/1,
	decode_p_property_add/1,
	decode_p_equip_base_info/1,
	decode_p_item_effect/1,
	decode_p_item_base_info/1,
	decode_p_stone_base_info/1,
	decode_p_goods/1,
	decode_p_equip_bind_attr/1,
	decode_p_equip_five_ele/1,
	decode_p_equip_whole_attr/1,
	decode_p_refresh_info/1,
	decode_p_monster_skill/1,
	decode_p_drop_property/1,
	decode_p_drop_colour_mode/1,
	decode_p_drop_quality_mode/1,
	decode_p_drop_hole_mode/1,
	decode_p_drop_mode/1,
	decode_p_single_drop/1,
	decode_p_drop_info/1,
	decode_p_monster_base_info/1,
	decode_p_enemy/1,
	decode_p_monster/1,
	decode_p_map_monster/1,
	decode_p_monster_talk/1,
	decode_p_boss_ai_skill/1,
	decode_p_boss_ai_condition/1,
	decode_p_boss_ai_plan/1,
	decode_p_mission_condition/1,
	decode_p_family_info_change/1,
	decode_p_family_info/1,
	decode_p_family_member_info/1,
	decode_p_family_second_owner/1,
	decode_p_family_request/1,
	decode_p_family_invite/1,
	decode_p_rank_row/1,
	decode_p_role_family_donate_info/1,
	decode_p_rank_element/1,
	decode_p_ranking/1,
	decode_p_role_level_rank/1,
	decode_p_role_pkpoint_rank/1,
	decode_p_family_active_rank/1,
	decode_p_family_gongxun_rank/1,
	decode_p_family_gongxun_persistent_rank/1,
	decode_p_equip_rank/1,
	decode_p_role_gongxun_rank/1,
	decode_p_role_all_rank/1,
	decode_p_role_give_flowers_rank/1,
	decode_p_role_give_flowers_today_rank/1,
	decode_p_role_give_flowers_yesterday_rank/1,
	decode_p_role_give_flowers_last_week_rank/1,
	decode_p_role_give_flowers_this_week_rank/1,
	decode_p_role_rece_flowers_rank/1,
	decode_p_role_rece_flowers_today_rank/1,
	decode_p_role_rece_flowers_yesterday_rank/1,
	decode_p_role_rece_flowers_last_week_rank/1,
	decode_p_role_rece_flowers_this_week_rank/1,
	decode_p_role_pet_rank/1,
	decode_p_hero_fb_rank/1,
	decode_p_recommend_member_info/1,
	decode_p_achievement_info/1,
	decode_p_achievement_stat_info/1,
	decode_p_map_collect/1,
	decode_p_collect_role/1,
	decode_p_collect_point/1,
	decode_p_collect_point_base_info/1,
	decode_p_collect/1,
	decode_p_collect_refresh/1,
	decode_p_collect_base_info/1,
	decode_p_collect_demand/1,
	decode_p_collect_goods/1,
	decode_p_map_trap/1,
	decode_p_ybc_buff/1,
	decode_p_ybc_info/1,
	decode_p_map_ybc/1,
	decode_p_server_npc/1,
	decode_p_map_server_npc/1,
	decode_p_server_npc_base_info/1,
	decode_p_equip_onekey_info/1,
	decode_p_equip_onekey_simple/1,
	decode_p_activity_info/1,
	decode_p_actpoint_info/1,
	decode_p_trading_goods_base_info/1,
	decode_p_trading_goods/1,
	decode_p_family_ybc_money/1,
	decode_p_map_farm/1,
	decode_p_seed_info/1,
	decode_p_waroffaction_record/1,
	decode_p_waroffaction_rank/1,
	decode_p_pet_base_info/1,
	decode_p_pet_skill/1,
	decode_p_pet/1,
	decode_p_map_pet/1,
	decode_p_pet_id_name/1,
	decode_p_role_pet_bag/1,
	decode_p_pet_attr_assign/1,
	decode_p_pet_feed/1,
	decode_p_pet_training_info/1,
	decode_p_role_pet_grow/1,
	decode_p_grow_info/1,
	decode_p_pet_refining/1,
	decode_p_role_pet_egg_type_list/1,
	decode_p_educate_fb_item/1,
	decode_p_educate_fb_award/1,
	decode_p_present_info/1,
	decode_p_conlogin_reward/1,
	decode_p_accumulate_exp_info/1,
	decode_p_fml_buff/1,
	decode_p_role_vip/1,
	decode_p_vip_list_info/1,
	decode_p_fmldepot_log/1,
	decode_p_fmldepot_bag/1,
	decode_p_equip_mount_renewal/1,
	decode_p_scene_war_fb_link/1,
	decode_p_scene_war_fb_role_info/1,
	decode_p_scene_war_fb_team_info/1,
	decode_p_family_collect_role_prize_info/1,
	decode_p_gift_goods/1,
	decode_p_map_bonfire/1,
	decode_p_family_task/1,
	decode_p_role_hero_fb_info/1,
	decode_p_hero_fb_barrier/1,
	decode_p_hero_fb_record/1,
	decode_p_hero_fb_poker_reward/1,
	decode_p_refining/1,
	decode_p_refining_box_log/1,
	decode_p_online_info/1,
	decode_p_role_goal/1,
	decode_p_role_goal_item/1,
	decode_p_goal_config/1,
	decode_p_goal_item/1,
	decode_p_prestige_item/1,
	decode_p_activity_condition/1,
	decode_p_activity_prize_goods/1,
	decode_p_boss_group/1,
	decode_p_reward_prop/1,
	decode_p_equip_item/1,
	decode_m_chat_auth_tos/1,
	decode_m_chat_auth_toc/1,
	decode_m_chat_join_channel_toc/1,
	decode_m_chat_leave_channel_toc/1,
	decode_m_chat_in_channel_tos/1,
	decode_m_chat_in_channel_toc/1,
	decode_m_chat_in_pairs_tos/1,
	decode_m_chat_in_pairs_toc/1,
	decode_m_chat_add_black_tos/1,
	decode_m_chat_add_black_toc/1,
	decode_m_chat_remove_black_tos/1,
	decode_m_chat_remove_black_toc/1,
	decode_m_chat_get_black_toc/1,
	decode_m_chat_manage_mute_tos/1,
	decode_m_chat_manage_mute_toc/1,
	decode_m_chat_manage_kick_tos/1,
	decode_m_chat_manage_kick_toc/1,
	decode_m_chat_manage_ban_tos/1,
	decode_m_chat_manage_ban_toc/1,
	decode_m_chat_limit_notify_toc/1,
	decode_m_chat_status_change_toc/1,
	decode_m_chat_quick_toc/1,
	decode_m_chat_new_join_toc/1,
	decode_m_chat_get_roles_tos/1,
	decode_m_chat_get_roles_toc/1,
	decode_m_chat_warofking_toc/1,
	decode_m_chat_get_goods_tos/1,
	decode_m_chat_get_goods_toc/1,
	decode_m_chat_reconnect_tos/1,
	decode_m_chat_reconnect_toc/1,
	decode_m_chat_king_ban_tos/1,
	decode_m_chat_king_ban_toc/1,
	decode_m_login_flash_tos/1,
	decode_m_login_flash_toc/1,
	decode_m_line_list_tos/1,
	decode_m_line_list_toc/1,
	decode_p_line_info/1,
	decode_m_role_list_toc/1,
	decode_m_role_add_tos/1,
	decode_m_role_add_toc/1,
	decode_m_role_del_tos/1,
	decode_m_role_del_toc/1,
	decode_m_role_chose_tos/1,
	decode_m_role_chose_toc/1,
	decode_m_auth_key_tos/1,
	decode_m_auth_key_toc/1,
	decode_m_auth_chat_key_tos/1,
	decode_m_auth_chat_key_toc/1,
	decode_p_bag_content/1,
	decode_p_skill_pos/1,
	decode_m_map_enter_tos/1,
	decode_m_map_enter_toc/1,
	decode_m_map_slice_enter_toc/1,
	decode_m_map_update_actor_mapinfo_tos/1,
	decode_m_map_update_actor_mapinfo_toc/1,
	decode_m_map_transfer_tos/1,
	decode_m_map_transfer_toc/1,
	decode_m_map_role_killed_toc/1,
	decode_m_move_keywalk_tos/1,
	decode_m_move_keywalk_toc/1,
	decode_m_move_keystop_tos/1,
	decode_m_move_keystop_toc/1,
	decode_m_move_walk_path_tos/1,
	decode_m_move_walk_path_toc/1,
	decode_m_move_walk_tos/1,
	decode_m_move_sync_toc/1,
	decode_m_map_quit_toc/1,
	decode_m_skin_change_toc/1,
	decode_m_map_dropthing_enter_toc/1,
	decode_m_map_dropthing_quit_toc/1,
	decode_m_map_dropthing_pick_tos/1,
	decode_m_map_dropthing_pick_toc/1,
	decode_m_map_change_map_tos/1,
	decode_m_map_change_map_toc/1,
	decode_m_map_change_pos_toc/1,
	decode_m_config_getbuffs_tos/1,
	decode_m_config_getbuffs_toc/1,
	decode_p_buff_effect/1,
	decode_m_fight_buff_effect_toc/1,
	decode_m_fight_remove_buff_toc/1,
	decode_m_fight_attack_tos/1,
	decode_p_attack_result/1,
	decode_m_fight_attack_toc/1,
	decode_p_team_role/1,
	decode_m_team_invite_tos/1,
	decode_m_team_invite_toc/1,
	decode_m_team_accept_tos/1,
	decode_m_team_accept_toc/1,
	decode_m_team_refuse_tos/1,
	decode_m_team_refuse_toc/1,
	decode_m_team_leave_tos/1,
	decode_m_team_leave_toc/1,
	decode_m_team_kick_tos/1,
	decode_m_team_kick_toc/1,
	decode_m_team_offline_toc/1,
	decode_m_team_change_leader_tos/1,
	decode_m_team_change_leader_toc/1,
	decode_m_team_disband_tos/1,
	decode_m_team_disband_toc/1,
	decode_m_team_pick_tos/1,
	decode_m_team_pick_toc/1,
	decode_m_team_auto_disband_toc/1,
	decode_m_team_auto_list_toc/1,
	decode_m_team_member_invite_tos/1,
	decode_m_team_member_invite_toc/1,
	decode_m_team_member_recommend_tos/1,
	decode_m_team_member_recommend_toc/1,
	decode_m_team_apply_tos/1,
	decode_m_team_apply_toc/1,
	decode_m_team_query_tos/1,
	decode_m_team_query_toc/1,
	decode_p_team_nearby/1,
	decode_m_team_create_tos/1,
	decode_m_team_create_toc/1,
	decode_m_friend_request_tos/1,
	decode_m_friend_request_toc/1,
	decode_m_friend_accept_tos/1,
	decode_m_friend_accept_toc/1,
	decode_m_friend_refuse_tos/1,
	decode_m_friend_refuse_toc/1,
	decode_m_friend_delete_tos/1,
	decode_m_friend_delete_toc/1,
	decode_m_friend_black_tos/1,
	decode_m_friend_black_toc/1,
	decode_m_friend_enemy_toc/1,
	decode_m_friend_list_tos/1,
	decode_m_friend_list_toc/1,
	decode_p_friend_info/1,
	decode_p_simple_friend_info/1,
	decode_m_friend_offline_request_toc/1,
	decode_m_friend_change_relative_toc/1,
	decode_m_friend_add_friendly_toc/1,
	decode_m_friend_online_toc/1,
	decode_m_friend_offline_toc/1,
	decode_m_friend_upgrade_toc/1,
	decode_m_friend_info_tos/1,
	decode_m_friend_info_toc/1,
	decode_m_friend_modify_tos/1,
	decode_m_friend_modify_toc/1,
	decode_m_friend_create_family_toc/1,
	decode_m_friend_get_info_tos/1,
	decode_m_friend_get_info_toc/1,
	decode_m_friend_update_family_toc/1,
	decode_m_friend_recommend_tos/1,
	decode_m_friend_recommend_toc/1,
	decode_m_friend_congratulation_tos/1,
	decode_m_friend_congratulation_toc/1,
	decode_m_friend_advertise_tos/1,
	decode_m_friend_advertise_toc/1,
	decode_m_friend_bottle_tos/1,
	decode_m_friend_bottle_toc/1,
	decode_m_shop_shops_tos/1,
	decode_p_shop_info/1,
	decode_m_shop_shops_toc/1,
	decode_m_shop_all_goods_tos/1,
	decode_p_shop_currency/1,
	decode_p_shop_price/1,
	decode_p_shop_goods_info/1,
	decode_m_shop_all_goods_toc/1,
	decode_m_shop_item_tos/1,
	decode_m_shop_item_toc/1,
	decode_m_shop_search_tos/1,
	decode_m_shop_search_toc/1,
	decode_m_shop_buy_tos/1,
	decode_m_shop_buy_toc/1,
	decode_p_shop_sale_goods/1,
	decode_m_shop_sale_tos/1,
	decode_m_shop_sale_toc/1,
	decode_m_shop_buy_back_tos/1,
	decode_m_shop_buy_back_toc/1,
	decode_m_shop_npc_tos/1,
	decode_m_shop_npc_toc/1,
	decode_p_letter_info/1,
	decode_p_letter_goods/1,
	decode_p_letter_simple_info/1,
	decode_m_letter_get_tos/1,
	decode_m_letter_get_toc/1,
	decode_m_letter_get_send_tos/1,
	decode_m_letter_get_send_toc/1,
	decode_m_letter_get_receive_tos/1,
	decode_m_letter_get_receive_toc/1,
	decode_m_letter_open_tos/1,
	decode_m_letter_open_toc/1,
	decode_m_letter_p2p_send_tos/1,
	decode_m_letter_clan_send_tos/1,
	decode_m_letter_family_send_tos/1,
	decode_m_letter_batch_send_tos/1,
	decode_p_letter_send_condition/1,
	decode_m_letter_send_toc/1,
	decode_m_letter_delete_tos/1,
	decode_p_letter_delete/1,
	decode_m_letter_delete_toc/1,
	decode_m_letter_accept_goods_tos/1,
	decode_m_letter_accept_goods_toc/1,
	decode_m_letter_state_change_tos/1,
	decode_m_letter_state_change_toc/1,
	decode_m_equip_mountup_tos/1,
	decode_m_equip_mountup_toc/1,
	decode_m_equip_mountdown_tos/1,
	decode_m_equip_mountdown_toc/1,
	decode_m_equip_mount_changecolor_tos/1,
	decode_m_equip_mount_changecolor_toc/1,
	decode_m_equip_mount_renewal_tos/1,
	decode_m_equip_mount_renewal_toc/1,
	decode_m_equip_loaded_list_tos/1,
	decode_m_equip_loaded_list_toc/1,
	decode_m_equip_load_tos/1,
	decode_m_equip_load_toc/1,
	decode_m_equip_unload_tos/1,
	decode_m_equip_unload_toc/1,
	decode_m_equip_swap_tos/1,
	decode_m_equip_swap_toc/1,
	decode_m_equip_fix_tos/1,
	decode_m_equip_fix_toc/1,
	decode_m_equip_endurance_change_toc/1,
	decode_p_equip_endurance_info/1,
	decode_m_item_use_tos/1,
	decode_m_item_use_toc/1,
	decode_m_item_use_special_tos/1,
	decode_m_item_use_special_toc/1,
	decode_m_item_trace_tos/1,
	decode_m_item_trace_toc/1,
	decode_m_item_batch_sell_tos/1,
	decode_m_item_batch_sell_toc/1,
	decode_m_item_new_extend_bag_toc/1,
	decode_m_item_shrink_bag_tos/1,
	decode_m_item_shrink_bag_toc/1,
	decode_m_goods_inbag_list_tos/1,
	decode_m_goods_inbag_list_toc/1,
	decode_m_goods_info_tos/1,
	decode_m_goods_info_toc/1,
	decode_m_goods_destroy_tos/1,
	decode_m_goods_destroy_toc/1,
	decode_m_goods_swap_tos/1,
	decode_m_goods_swap_toc/1,
	decode_m_goods_divide_tos/1,
	decode_m_goods_divide_toc/1,
	decode_m_goods_update_toc/1,
	decode_m_goods_tidy_tos/1,
	decode_m_goods_tidy_toc/1,
	decode_m_goods_show_goods_tos/1,
	decode_m_goods_show_goods_toc/1,
	decode_m_role2_exp_full_toc/1,
	decode_m_role2_levelup_tos/1,
	decode_m_role2_levelup_toc/1,
	decode_m_role2_levelup_other_toc/1,
	decode_p_role_attr_change/1,
	decode_m_role2_attr_change_toc/1,
	decode_m_role2_attr_reload_toc/1,
	decode_m_role2_base_reload_toc/1,
	decode_m_role2_reload_toc/1,
	decode_m_role2_newbuffs_toc/1,
	decode_m_role2_dead_toc/1,
	decode_m_role2_dead_other_toc/1,
	decode_m_role2_relive_toc/1,
	decode_m_role2_unbund_change_tos/1,
	decode_m_role2_unbund_change_toc/1,
	decode_m_role2_rely_main_tos/1,
	decode_m_role2_rely_main_toc/1,
	decode_m_role2_relive_tos/1,
	decode_m_role2_pointassign_tos/1,
	decode_m_role2_pointassign_toc/1,
	decode_m_role2_getroleattr_tos/1,
	decode_m_role2_getskillinfo_tos/1,
	decode_m_role2_getskillinfo_toc/1,
	decode_m_role2_skillassign_tos/1,
	decode_m_role2_skillassign_toc/1,
	decode_m_role2_skilllearn_tos/1,
	decode_m_role2_skilllearn_toc/1,
	decode_m_role2_getrolemapinfo_tos/1,
	decode_m_role2_getroleattr_toc/1,
	decode_p_other_role_info/1,
	decode_m_role2_getrolemapinfo_toc/1,
	decode_m_role2_pkmodemodify_tos/1,
	decode_m_role2_pkmodemodify_toc/1,
	decode_m_role2_zazen_tos/1,
	decode_m_role2_zazen_toc/1,
	decode_m_role2_five_ele_attr_tos/1,
	decode_m_role2_five_ele_attr_toc/1,
	decode_m_role2_gray_name_tos/1,
	decode_m_role2_gray_name_toc/1,
	decode_m_role2_show_cloth_tos/1,
	decode_m_role2_show_cloth_toc/1,
	decode_m_role2_show_equip_ring_tos/1,
	decode_m_role2_show_equip_ring_toc/1,
	decode_m_role2_pkpoint_left_tos/1,
	decode_m_role2_pkpoint_left_toc/1,
	decode_m_role2_hair_tos/1,
	decode_m_role2_hair_toc/1,
	decode_m_role2_head_tos/1,
	decode_m_role2_head_toc/1,
	decode_m_role2_sex_tos/1,
	decode_m_role2_sex_toc/1,
	decode_m_role2_event_tos/1,
	decode_m_role2_event_toc/1,
	decode_m_role2_system_buff_toc/1,
	decode_p_sys_buff_info/1,
	decode_m_role2_remove_skin_buff_tos/1,
	decode_m_role2_remove_skin_buff_toc/1,
	decode_m_role2_add_energy_tos/1,
	decode_m_role2_add_energy_toc/1,
	decode_m_role2_online_broadcast_toc/1,
	decode_m_role2_query_faction_online_rank_tos/1,
	decode_m_role2_query_faction_online_rank_toc/1,
	decode_p_faction_online_rank/1,
	decode_m_mission_listener_toc/1,
	decode_p_mission_listener/1,
	decode_p_mission_info/1,
	decode_m_mission_list_tos/1,
	decode_m_mission_list_toc/1,
	decode_m_mission_vs_tos/1,
	decode_m_mission_vs_toc/1,
	decode_m_mission_do_tos/1,
	decode_p_mission_reward_data/1,
	decode_p_mission_prop/1,
	decode_m_mission_do_toc/1,
	decode_m_mission_cancel_tos/1,
	decode_m_mission_cancel_toc/1,
	decode_m_mission_update_toc/1,
	decode_p_mission_auto/1,
	decode_m_mission_list_auto_tos/1,
	decode_m_mission_list_auto_toc/1,
	decode_m_mission_do_auto_tos/1,
	decode_m_mission_do_auto_toc/1,
	decode_m_mission_cancel_auto_tos/1,
	decode_m_mission_cancel_auto_toc/1,
	decode_m_family_ybc_sure_tos/1,
	decode_m_family_ybc_sure_toc/1,
	decode_m_family_ybc_giveup_tos/1,
	decode_m_family_ybc_giveup_toc/1,
	decode_m_family_ybc_join_tos/1,
	decode_m_family_ybc_join_toc/1,
	decode_m_family_ybc_publish_tos/1,
	decode_m_family_ybc_publish_toc/1,
	decode_m_family_ybc_status_toc/1,
	decode_m_family_ybc_agree_publish_tos/1,
	decode_m_family_ybc_agree_publish_toc/1,
	decode_m_family_ybc_commit_tos/1,
	decode_m_family_ybc_commit_toc/1,
	decode_m_family_ybc_call_help_toc/1,
	decode_m_family_ybc_accept_help_tos/1,
	decode_m_family_ybc_accept_help_toc/1,
	decode_m_family_ybc_collect_tos/1,
	decode_m_family_ybc_collect_toc/1,
	decode_m_family_ybc_accept_collect_tos/1,
	decode_m_family_ybc_accept_collect_toc/1,
	decode_m_family_ybc_list_tos/1,
	decode_m_family_ybc_list_toc/1,
	decode_p_family_ybc_member_info/1,
	decode_m_family_ybc_kick_tos/1,
	decode_m_family_ybc_kick_toc/1,
	decode_m_family_ybc_add_hp_tos/1,
	decode_m_family_ybc_add_hp_toc/1,
	decode_m_family_ybc_alert_tos/1,
	decode_m_family_ybc_alert_toc/1,
	decode_m_family_ybc_invite_tos/1,
	decode_m_family_ybc_invite_toc/1,
	decode_m_ybc_faraway_toc/1,
	decode_m_ybc_enter_toc/1,
	decode_m_ybc_quit_toc/1,
	decode_m_ybc_dead_toc/1,
	decode_m_ybc_info_tos/1,
	decode_m_ybc_walk_toc/1,
	decode_m_ybc_speed_toc/1,
	decode_m_ybc_pos_toc/1,
	decode_m_ybc_notify_pos_toc/1,
	decode_m_monster_enter_toc/1,
	decode_m_monster_quit_toc/1,
	decode_m_monster_dead_toc/1,
	decode_m_monster_attr_change_toc/1,
	decode_m_monster_walk_path_toc/1,
	decode_m_monster_walk_toc/1,
	decode_m_monster_summon_toc/1,
	decode_m_monster_talk_toc/1,
	decode_m_monster_query_tos/1,
	decode_m_monster_query_toc/1,
	decode_m_exchange_request_tos/1,
	decode_m_exchange_request_toc/1,
	decode_m_exchange_agree_tos/1,
	decode_m_exchange_agree_toc/1,
	decode_m_exchange_refuse_tos/1,
	decode_m_exchange_refuse_toc/1,
	decode_m_exchange_lock_tos/1,
	decode_m_exchange_lock_toc/1,
	decode_m_exchange_confirm_tos/1,
	decode_m_exchange_confirm_toc/1,
	decode_p_simple_goods/1,
	decode_m_exchange_cancel_tos/1,
	decode_m_exchange_cancel_toc/1,
	decode_m_exchange_npc_deal_tos/1,
	decode_m_exchange_npc_deal_toc/1,
	decode_m_exchange_equip_info_tos/1,
	decode_m_exchange_equip_info_toc/1,
	decode_m_stall_request_tos/1,
	decode_m_stall_request_toc/1,
	decode_m_stall_open_tos/1,
	decode_m_stall_open_toc/1,
	decode_m_stall_detail_tos/1,
	decode_m_stall_detail_toc/1,
	decode_p_stall_goods/1,
	decode_p_stall_log/1,
	decode_p_stall_list_item/1,
	decode_m_stall_list_tos/1,
	decode_m_stall_list_toc/1,
	decode_p_stall_info/1,
	decode_m_stall_buy_tos/1,
	decode_m_stall_buy_toc/1,
	decode_m_stall_extractmoney_tos/1,
	decode_m_stall_extractmoney_toc/1,
	decode_m_stall_chat_tos/1,
	decode_m_stall_chat_toc/1,
	decode_m_stall_finish_tos/1,
	decode_m_stall_finish_toc/1,
	decode_m_stall_employ_tos/1,
	decode_m_stall_employ_toc/1,
	decode_m_stall_search_tos/1,
	decode_m_stall_search_toc/1,
	decode_p_stall_search_goods/1,
	decode_m_stall_state_tos/1,
	decode_m_stall_state_toc/1,
	decode_p_role_skill/1,
	decode_m_skill_learn_tos/1,
	decode_m_skill_learn_toc/1,
	decode_m_skill_getskills_tos/1,
	decode_m_skill_getskills_toc/1,
	decode_m_skill_reset_toc/1,
	decode_m_skill_personal_forget_tos/1,
	decode_m_skill_personal_forget_toc/1,
	decode_m_fmlskill_research_tos/1,
	decode_m_fmlskill_research_toc/1,
	decode_m_fmlskill_forget_tos/1,
	decode_m_fmlskill_forget_toc/1,
	decode_m_fmlskill_list_tos/1,
	decode_m_fmlskill_list_toc/1,
	decode_m_fmlskill_list_buff_tos/1,
	decode_m_fmlskill_list_buff_toc/1,
	decode_m_fmlskill_fetch_buff_tos/1,
	decode_m_fmlskill_fetch_buff_toc/1,
	decode_m_skill_use_time_toc/1,
	decode_p_skill_time/1,
	decode_m_stall_putin_tos/1,
	decode_m_stall_putin_toc/1,
	decode_m_stall_getout_tos/1,
	decode_m_stall_getout_toc/1,
	decode_m_stall_getall_tos/1,
	decode_m_stall_getall_toc/1,
	decode_m_stall_move_tos/1,
	decode_m_stall_move_toc/1,
	decode_m_refining_inbag_list_tos/1,
	decode_m_refining_inbag_list_toc/1,
	decode_m_refining_info_tos/1,
	decode_m_refining_info_toc/1,
	decode_m_refining_destroy_tos/1,
	decode_m_refining_destroy_toc/1,
	decode_m_refining_swap_tos/1,
	decode_m_refining_swap_toc/1,
	decode_m_refining_divide_tos/1,
	decode_m_refining_divide_toc/1,
	decode_m_refining_reinforce_equip_tos/1,
	decode_m_refining_reinforce_equip_toc/1,
	decode_m_refining_compose_tos/1,
	decode_m_refining_compose_toc/1,
	decode_m_refining_punch_tos/1,
	decode_m_refining_punch_toc/1,
	decode_m_refining_inlay_tos/1,
	decode_m_refining_inlay_toc/1,
	decode_m_refining_unload_tos/1,
	decode_m_refining_unload_toc/1,
	decode_m_refining_equip_bind_tos/1,
	decode_m_refining_equip_bind_toc/1,
	decode_m_refining_forging_tos/1,
	decode_m_refining_forging_toc/1,
	decode_m_refining_firing_tos/1,
	decode_m_refining_firing_toc/1,
	decode_m_refining_box_tos/1,
	decode_m_refining_box_toc/1,
	decode_m_depot_get_goods_tos/1,
	decode_m_depot_get_goods_toc/1,
	decode_p_depot_bag/1,
	decode_m_depot_dredge_tos/1,
	decode_m_depot_dredge_toc/1,
	decode_m_depot_destroy_tos/1,
	decode_m_depot_destroy_toc/1,
	decode_m_depot_swap_tos/1,
	decode_m_depot_swap_toc/1,
	decode_m_depot_divide_tos/1,
	decode_m_depot_divide_toc/1,
	decode_m_depot_tidy_tos/1,
	decode_m_depot_tidy_toc/1,
	decode_m_educate_teacher_online_toc/1,
	decode_m_educate_transfer_tos/1,
	decode_m_educate_student_online_toc/1,
	decode_m_educate_invite_apprentice_toc/1,
	decode_m_educate_invite_apprentice_result_toc/1,
	decode_m_educate_invite_admissions_toc/1,
	decode_m_educate_invite_admissions_result_toc/1,
	decode_m_educate_reply_invite_apprentice_tos/1,
	decode_m_educate_reply_invite_apprentice_toc/1,
	decode_m_educate_reply_invite_admissions_tos/1,
	decode_m_educate_reply_invite_admissions_toc/1,
	decode_m_educate_sworn_mentoring_tos/1,
	decode_m_educate_sworn_mentoring_toc/1,
	decode_m_educate_filter_student_tos/1,
	decode_m_educate_filter_student_toc/1,
	decode_m_educate_filter_teacher_tos/1,
	decode_m_educate_filter_teacher_toc/1,
	decode_m_educate_get_expel_moral_value_tos/1,
	decode_m_educate_get_expel_moral_value_toc/1,
	decode_m_educate_get_dropout_moral_value_tos/1,
	decode_m_educate_get_dropout_moral_value_toc/1,
	decode_m_educate_expel_tos/1,
	decode_m_educate_expel_toc/1,
	decode_m_educate_dropout_tos/1,
	decode_m_educate_dropout_toc/1,
	decode_m_educate_graduate_to_teacher_toc/1,
	decode_m_educate_graduate_to_student_toc/1,
	decode_m_educate_get_clan_info_tos/1,
	decode_m_educate_get_clan_info_toc/1,
	decode_m_educate_get_students_info_tos/1,
	decode_m_educate_get_students_info_toc/1,
	decode_m_educate_get_info_tos/1,
	decode_m_educate_get_info_toc/1,
	decode_m_educate_moral_value_to_exp_tos/1,
	decode_m_educate_moral_value_to_exp_toc/1,
	decode_m_educate_moral_value_to_pkpoint_tos/1,
	decode_m_educate_moral_value_to_pkpoint_toc/1,
	decode_m_educate_upgrade_tos/1,
	decode_m_educate_upgrade_toc/1,
	decode_m_educate_tip_captain_toc/1,
	decode_m_educate_release_tos/1,
	decode_m_educate_release_toc/1,
	decode_p_educate_role_info/1,
	decode_m_educate_call_helper_toc/1,
	decode_m_educate_agree_help_tos/1,
	decode_m_educate_agree_help_toc/1,
	decode_m_educate_get_relate_people_tos/1,
	decode_m_educate_get_relate_people_toc/1,
	decode_m_message_error_toc/1,
	decode_p_bank_sheet/1,
	decode_p_bank_simple_sheet/1,
	decode_m_bank_init_tos/1,
	decode_m_bank_init_toc/1,
	decode_m_bank_buy_tos/1,
	decode_m_bank_buy_toc/1,
	decode_m_bank_sell_tos/1,
	decode_m_bank_sell_toc/1,
	decode_m_bank_undo_tos/1,
	decode_m_bank_undo_toc/1,
	decode_m_bank_add_silver_toc/1,
	decode_m_bank_add_gold_toc/1,
	decode_p_shortcut/1,
	decode_m_shortcut_init_toc/1,
	decode_m_shortcut_update_tos/1,
	decode_m_bubble_send_tos/1,
	decode_m_bubble_send_toc/1,
	decode_m_bubble_msg_toc/1,
	decode_m_family_create_tos/1,
	decode_m_family_create_toc/1,
	decode_m_family_introduce_tos/1,
	decode_m_family_introduce_toc/1,
	decode_m_family_self_tos/1,
	decode_m_family_self_toc/1,
	decode_m_family_panel_tos/1,
	decode_m_family_panel_toc/1,
	decode_p_family_summary/1,
	decode_p_family_invite_info/1,
	decode_m_family_enter_map_tos/1,
	decode_m_family_enter_map_toc/1,
	decode_m_family_call_uplevelboss_tos/1,
	decode_m_family_call_uplevelboss_toc/1,
	decode_m_family_call_commonboss_tos/1,
	decode_m_family_call_commonboss_toc/1,
	decode_m_family_uplevel_tos/1,
	decode_m_family_uplevel_toc/1,
	decode_m_family_invite_list_toc/1,
	decode_m_family_request_list_toc/1,
	decode_m_family_member_join_toc/1,
	decode_m_family_member_leave_tos/1,
	decode_m_family_member_leave_toc/1,
	decode_m_family_list_tos/1,
	decode_m_family_list_toc/1,
	decode_m_family_request_tos/1,
	decode_m_family_request_toc/1,
	decode_m_family_invite_tos/1,
	decode_m_family_invite_toc/1,
	decode_m_family_cancel_invite_tos/1,
	decode_m_family_cancel_invite_toc/1,
	decode_m_family_refuse_tos/1,
	decode_m_family_refuse_toc/1,
	decode_m_family_agree_f_tos/1,
	decode_m_family_agree_f_toc/1,
	decode_m_family_dismiss_tos/1,
	decode_m_family_dismiss_toc/1,
	decode_m_family_set_title_tos/1,
	decode_m_family_set_title_toc/1,
	decode_m_family_set_owner_tos/1,
	decode_m_family_set_owner_toc/1,
	decode_m_family_set_second_owner_tos/1,
	decode_m_family_set_second_owner_toc/1,
	decode_m_family_unset_second_owner_tos/1,
	decode_m_family_unset_second_owner_toc/1,
	decode_m_family_update_pub_notice_tos/1,
	decode_m_family_update_pub_notice_toc/1,
	decode_m_family_update_pri_notice_tos/1,
	decode_m_family_update_pri_notice_toc/1,
	decode_m_family_update_connect_number_tos/1,
	decode_m_family_update_connect_number_toc/1,
	decode_m_family_refuse_f_tos/1,
	decode_m_family_refuse_f_toc/1,
	decode_m_family_fire_tos/1,
	decode_m_family_fire_toc/1,
	decode_m_family_agree_tos/1,
	decode_m_family_agree_toc/1,
	decode_m_family_leave_tos/1,
	decode_m_family_leave_toc/1,
	decode_m_family_leave_map_tos/1,
	decode_m_family_leave_map_toc/1,
	decode_m_family_enter_bossmap_tos/1,
	decode_m_family_enter_bossmap_toc/1,
	decode_m_family_leave_bossmap_tos/1,
	decode_m_family_leave_bossmap_toc/1,
	decode_m_family_role_online_toc/1,
	decode_m_family_role_offline_toc/1,
	decode_m_family_can_invite_tos/1,
	decode_m_family_can_invite_toc/1,
	decode_m_family_cancel_title_tos/1,
	decode_m_family_cancel_title_toc/1,
	decode_m_family_enable_map_tos/1,
	decode_m_family_enable_map_toc/1,
	decode_m_family_del_request_toc/1,
	decode_m_family_map_closed_toc/1,
	decode_p_family_request_info/1,
	decode_m_family_info_change_toc/1,
	decode_m_family_active_points_toc/1,
	decode_m_family_money_toc/1,
	decode_m_family_downlevel_toc/1,
	decode_m_family_callmember_toc/1,
	decode_m_family_callmember_tos/1,
	decode_m_family_member_enter_map_toc/1,
	decode_m_family_member_enter_map_tos/1,
	decode_m_family_maintainfail_toc/1,
	decode_m_family_activestate_toc/1,
	decode_m_family_activestate_tos/1,
	decode_m_family_membergather_toc/1,
	decode_m_family_gatherrequest_tos/1,
	decode_m_family_gatherrequest_toc/1,
	decode_m_family_detail_tos/1,
	decode_m_family_detail_toc/1,
	decode_m_family_collect_begin_toc/1,
	decode_m_family_collect_info_toc/1,
	decode_m_family_collect_prize_info_tos/1,
	decode_m_family_collect_prize_info_toc/1,
	decode_m_family_collect_refresh_prize_tos/1,
	decode_m_family_collect_refresh_prize_toc/1,
	decode_m_family_collect_get_prize_tos/1,
	decode_m_family_collect_get_prize_toc/1,
	decode_m_family_set_bonfire_start_time_tos/1,
	decode_m_family_set_bonfire_start_time_toc/1,
	decode_m_family_get_donate_info_tos/1,
	decode_m_family_get_donate_info_toc/1,
	decode_m_family_donate_tos/1,
	decode_m_family_donate_toc/1,
	decode_m_broadcast_general_toc/1,
	decode_m_broadcast_countdown_toc/1,
	decode_m_broadcast_general_tos/1,
	decode_m_broadcast_countdown_tos/1,
	decode_m_broadcast_admin_tos/1,
	decode_m_broadcast_cycle_tos/1,
	decode_m_broadcast_laba_tos/1,
	decode_m_broadcast_laba_toc/1,
	decode_m_equip_build_list_tos/1,
	decode_m_equip_build_list_toc/1,
	decode_m_equip_build_build_tos/1,
	decode_m_equip_build_build_toc/1,
	decode_m_equip_build_goods_tos/1,
	decode_m_equip_build_goods_toc/1,
	decode_p_equip_build_equip/1,
	decode_p_equip_build_goods/1,
	decode_m_equip_build_quality_goods_tos/1,
	decode_m_equip_build_quality_goods_toc/1,
	decode_m_equip_build_quality_tos/1,
	decode_m_equip_build_quality_toc/1,
	decode_m_equip_build_signature_tos/1,
	decode_m_equip_build_signature_toc/1,
	decode_m_equip_build_upgrade_link_tos/1,
	decode_m_equip_build_upgrade_link_toc/1,
	decode_m_equip_build_upgrade_goods_tos/1,
	decode_m_equip_build_upgrade_goods_toc/1,
	decode_m_equip_build_upgrade_tos/1,
	decode_m_equip_build_upgrade_toc/1,
	decode_m_equip_build_decompose_tos/1,
	decode_m_equip_build_decompose_toc/1,
	decode_m_equip_build_fiveele_goods_tos/1,
	decode_m_equip_build_fiveele_goods_toc/1,
	decode_m_equip_build_fiveele_tos/1,
	decode_m_equip_build_fiveele_toc/1,
	decode_m_driver_go_tos/1,
	decode_m_driver_go_toc/1,
	decode_m_system_behavior_tos/1,
	decode_m_system_heartbeat_tos/1,
	decode_m_system_heartbeat_toc/1,
	decode_m_system_fcm_toc/1,
	decode_m_system_need_fcm_toc/1,
	decode_m_system_set_fcm_tos/1,
	decode_m_system_set_fcm_toc/1,
	decode_m_system_error_toc/1,
	decode_m_system_message_toc/1,
	decode_m_system_config_change_tos/1,
	decode_m_system_config_change_toc/1,
	decode_m_system_config_toc/1,
	decode_m_system_pk_not_agree_tos/1,
	decode_p_sys_config/1,
	decode_m_gm_complaint_tos/1,
	decode_m_gm_complaint_toc/1,
	decode_m_gm_score_tos/1,
	decode_m_gm_score_toc/1,
	decode_m_ranking_get_rank_tos/1,
	decode_m_ranking_get_rank_toc/1,
	decode_m_ranking_config_toc/1,
	decode_m_ranking_get_rankinfo_tos/1,
	decode_m_ranking_role_level_rank_toc/1,
	decode_m_ranking_equip_join_rank_tos/1,
	decode_m_ranking_equip_join_rank_toc/1,
	decode_m_ranking_role_pkpoint_rank_toc/1,
	decode_m_ranking_role_world_pkpoint_rank_toc/1,
	decode_m_ranking_family_active_rank_toc/1,
	decode_m_ranking_family_gongxun_rank_toc/1,
	decode_m_ranking_equip_refining_rank_toc/1,
	decode_m_ranking_equip_reinforce_rank_toc/1,
	decode_m_ranking_equip_stone_rank_toc/1,
	decode_m_ranking_role_gongxun_rank_toc/1,
	decode_m_ranking_role_today_gongxun_rank_toc/1,
	decode_m_ranking_role_yesterday_gongxun_rank_toc/1,
	decode_m_ranking_role_give_flowers_rank_toc/1,
	decode_m_ranking_role_give_flowers_today_rank_toc/1,
	decode_m_ranking_role_give_flowers_yesterday_rank_toc/1,
	decode_m_ranking_role_give_flowers_last_week_rank_toc/1,
	decode_m_ranking_role_give_flowers_this_week_rank_toc/1,
	decode_m_ranking_role_rece_flowers_rank_toc/1,
	decode_m_ranking_role_rece_flowers_today_rank_toc/1,
	decode_m_ranking_role_rece_flowers_yesterday_rank_toc/1,
	decode_m_ranking_role_rece_flowers_last_week_rank_toc/1,
	decode_m_ranking_role_rece_flowers_this_week_rank_toc/1,
	decode_m_ranking_role_pet_rank_toc/1,
	decode_m_ranking_pet_join_rank_tos/1,
	decode_m_ranking_pet_join_rank_toc/1,
	decode_m_ranking_hero_fb_rank_toc/1,
	decode_m_ranking_role_all_rank_tos/1,
	decode_m_ranking_role_all_rank_toc/1,
	decode_m_warofking_hold_tos/1,
	decode_m_warofking_hold_toc/1,
	decode_m_warofking_apply_tos/1,
	decode_m_warofking_apply_toc/1,
	decode_m_warofking_collect_toc/1,
	decode_m_warofking_agree_enter_tos/1,
	decode_m_warofking_agree_enter_toc/1,
	decode_m_warofking_enter_tos/1,
	decode_m_warofking_enter_toc/1,
	decode_p_warofking_mark/1,
	decode_m_warofking_getmarks_tos/1,
	decode_m_warofking_getmarks_toc/1,
	decode_m_warofking_break_toc/1,
	decode_m_warofking_holding_toc/1,
	decode_m_warofking_end_toc/1,
	decode_m_warofking_safetime_tos/1,
	decode_m_warofking_safetime_toc/1,
	decode_m_title_get_role_titles_toc/1,
	decode_m_title_change_cur_title_tos/1,
	decode_m_title_change_cur_title_toc/1,
	decode_p_faction/1,
	decode_p_king_token_used_log/1,
	decode_p_office/1,
	decode_p_office_equip/1,
	decode_p_office_position/1,
	decode_m_office_appoint_tos/1,
	decode_m_office_appoint_toc/1,
	decode_m_office_disappoint_tos/1,
	decode_m_office_disappoint_toc/1,
	decode_m_office_agree_appoint_tos/1,
	decode_m_office_agree_appoint_toc/1,
	decode_m_office_refuse_appoint_tos/1,
	decode_m_office_refuse_appoint_toc/1,
	decode_m_office_cancel_appoint_tos/1,
	decode_m_office_cancel_appoint_toc/1,
	decode_m_office_launch_collection_tos/1,
	decode_m_office_launch_collection_toc/1,
	decode_m_office_donate_tos/1,
	decode_m_office_donate_toc/1,
	decode_m_office_panel_tos/1,
	decode_m_office_panel_toc/1,
	decode_m_office_set_notice_tos/1,
	decode_m_office_set_notice_toc/1,
	decode_m_office_equip_panel_tos/1,
	decode_m_office_equip_panel_toc/1,
	decode_m_office_take_equip_tos/1,
	decode_m_office_take_equip_toc/1,
	decode_m_waroffaction_gather_factionist_toc/1,
	decode_m_waroffaction_gather_confirm_tos/1,
	decode_m_waroffaction_gather_confirm_toc/1,
	decode_m_waroffaction_declare_tos/1,
	decode_m_waroffaction_declare_toc/1,
	decode_m_waroffaction_tower_destroyed_toc/1,
	decode_m_waroffaction_general_killed_toc/1,
	decode_m_waroffaction_flag_destroyed_toc/1,
	decode_m_waroffaction_collect_toc/1,
	decode_m_waroffaction_agree_collect_tos/1,
	decode_m_waroffaction_status_tos/1,
	decode_m_waroffaction_status_toc/1,
	decode_m_waroffaction_warinfo_tos/1,
	decode_m_waroffaction_warinfo_toc/1,
	decode_m_waroffaction_record_tos/1,
	decode_m_waroffaction_record_toc/1,
	decode_m_waroffaction_buy_guarder_tos/1,
	decode_m_waroffaction_buy_guarder_toc/1,
	decode_m_waroffaction_convene_tos/1,
	decode_m_waroffaction_convene_toc/1,
	decode_m_waroffaction_transfer_tos/1,
	decode_m_waroffaction_transfer_toc/1,
	decode_m_waroffaction_count_down_toc/1,
	decode_m_waroffaction_rank_tos/1,
	decode_m_waroffaction_rank_toc/1,
	decode_m_trainingcamp_exchange_tos/1,
	decode_m_trainingcamp_exchange_toc/1,
	decode_m_trainingcamp_start_tos/1,
	decode_m_trainingcamp_start_toc/1,
	decode_m_trainingcamp_stop_tos/1,
	decode_m_trainingcamp_stop_toc/1,
	decode_m_trainingcamp_state_tos/1,
	decode_m_trainingcamp_state_toc/1,
	decode_m_trainingcamp_remain_point_tos/1,
	decode_m_trainingcamp_remain_point_toc/1,
	decode_m_warofcity_apply_tos/1,
	decode_m_warofcity_apply_toc/1,
	decode_m_warofcity_collect_toc/1,
	decode_m_warofcity_agree_enter_tos/1,
	decode_m_warofcity_agree_enter_toc/1,
	decode_p_warofcity_family_mark/1,
	decode_p_warofcity_role_mark/1,
	decode_m_warofcity_get_mark_tos/1,
	decode_m_warofcity_get_mark_toc/1,
	decode_m_warofcity_info_toc/1,
	decode_m_warofcity_hold_tos/1,
	decode_m_warofcity_hold_toc/1,
	decode_m_warofcity_holding_toc/1,
	decode_p_warofcity_apply_family/1,
	decode_p_warofcity/1,
	decode_p_warofcity_reward/1,
	decode_m_warofcity_panel_tos/1,
	decode_m_warofcity_panel_toc/1,
	decode_m_warofcity_get_reward_tos/1,
	decode_m_warofcity_get_reward_toc/1,
	decode_p_warofcity_family_winner/1,
	decode_p_warofcity_role_winner/1,
	decode_m_warofcity_end_toc/1,
	decode_m_warofcity_break_toc/1,
	decode_m_warofcity_hold_succ_toc/1,
	decode_m_family_memberuplevel_toc/1,
	decode_m_achievement_query_tos/1,
	decode_m_achievement_query_toc/1,
	decode_m_achievement_notice_tos/1,
	decode_m_achievement_notice_toc/1,
	decode_m_achievement_award_tos/1,
	decode_m_achievement_award_toc/1,
	decode_m_collect_get_grafts_info_tos/1,
	decode_m_collect_get_grafts_info_toc/1,
	decode_m_collect_stop_tos/1,
	decode_m_collect_remove_grafts_toc/1,
	decode_m_collect_updata_grafts_toc/1,
	decode_m_collect_grafts_toc/1,
	decode_p_personybc_info/1,
	decode_p_personybc_award_prop/1,
	decode_p_personybc_award_attr/1,
	decode_m_personybc_public_tos/1,
	decode_m_personybc_public_toc/1,
	decode_m_personybc_auto_tos/1,
	decode_m_personybc_auto_toc/1,
	decode_m_personybc_set_auto_tos/1,
	decode_m_personybc_set_auto_toc/1,
	decode_m_personybc_cancel_tos/1,
	decode_m_personybc_cancel_toc/1,
	decode_m_personybc_commit_tos/1,
	decode_m_personybc_commit_toc/1,
	decode_m_personybc_info_tos/1,
	decode_m_personybc_info_toc/1,
	decode_m_personybc_color_change_toc/1,
	decode_m_personybc_timer_toc/1,
	decode_m_personybc_faction_notice_toc/1,
	decode_m_personybc_faction_tos/1,
	decode_m_personybc_faction_toc/1,
	decode_m_personybc_sos_toc/1,
	decode_m_personybc_auto_refresh_color_tos/1,
	decode_m_personybc_auto_refresh_color_toc/1,
	decode_m_vie_world_fb_enter_tos/1,
	decode_m_vie_world_fb_enter_toc/1,
	decode_m_vie_world_fb_quit_tos/1,
	decode_m_vie_world_fb_quit_toc/1,
	decode_m_server_npc_enter_toc/1,
	decode_m_server_npc_quit_toc/1,
	decode_m_server_npc_dead_toc/1,
	decode_m_server_npc_attr_change_toc/1,
	decode_m_server_npc_walk_toc/1,
	decode_m_equiponekey_list_tos/1,
	decode_m_equiponekey_list_toc/1,
	decode_m_equiponekey_info_tos/1,
	decode_m_equiponekey_info_toc/1,
	decode_m_equiponekey_save_tos/1,
	decode_m_equiponekey_save_toc/1,
	decode_m_equiponekey_load_tos/1,
	decode_m_equiponekey_load_toc/1,
	decode_m_activity_today_tos/1,
	decode_m_activity_today_toc/1,
	decode_m_activity_pay_gift_info_tos/1,
	decode_m_activity_pay_gift_info_toc/1,
	decode_m_activity_getgift_tos/1,
	decode_m_activity_getgift_toc/1,
	decode_m_activity_benefit_list_tos/1,
	decode_m_activity_benefit_list_toc/1,
	decode_m_activity_benefit_reward_tos/1,
	decode_m_activity_benefit_reward_toc/1,
	decode_m_activity_benefit_buy_tos/1,
	decode_m_activity_benefit_buy_toc/1,
	decode_m_newcomer_activate_code_tos/1,
	decode_m_newcomer_activate_code_toc/1,
	decode_m_trading_shop_tos/1,
	decode_m_trading_shop_toc/1,
	decode_m_trading_buy_tos/1,
	decode_m_trading_buy_toc/1,
	decode_m_trading_sale_tos/1,
	decode_m_trading_sale_toc/1,
	decode_m_trading_get_tos/1,
	decode_m_trading_get_toc/1,
	decode_m_trading_return_tos/1,
	decode_m_trading_return_toc/1,
	decode_m_trading_exchange_tos/1,
	decode_m_trading_exchange_toc/1,
	decode_m_trading_status_tos/1,
	decode_m_trading_status_toc/1,
	decode_m_flowers_get_accept_list_toc/1,
	decode_m_flowers_update_accept_toc/1,
	decode_p_flowers_give_info/1,
	decode_m_flowers_accept_tos/1,
	decode_m_flowers_accept_toc/1,
	decode_m_flowers_give_tos/1,
	decode_m_flowers_give_toc/1,
	decode_m_flowers_get_recever_info_tos/1,
	decode_m_flowers_get_recever_info_toc/1,
	decode_m_flowers_give_world_broadcast_toc/1,
	decode_m_flowers_give_faction_broadcast_toc/1,
	decode_m_flowers_give_map_broadcast_toc/1,
	decode_p_flowers_give_broadcast_info/1,
	decode_m_plant_family_farm_toc/1,
	decode_m_plant_update_farm_toc/1,
	decode_m_plant_assart_tos/1,
	decode_m_plant_assart_toc/1,
	decode_m_plant_sow_tos/1,
	decode_m_plant_sow_toc/1,
	decode_m_plant_fertilize_tos/1,
	decode_m_plant_fertilize_toc/1,
	decode_m_plant_list_log_tos/1,
	decode_m_plant_list_log_toc/1,
	decode_m_plant_clear_log_tos/1,
	decode_m_plant_clear_log_toc/1,
	decode_m_plant_harvest_tos/1,
	decode_m_plant_harvest_toc/1,
	decode_m_plant_show_skill_tos/1,
	decode_m_plant_show_skill_toc/1,
	decode_m_plant_upgrade_skill_tos/1,
	decode_m_plant_upgrade_skill_toc/1,
	decode_m_plant_list_seeds_tos/1,
	decode_m_plant_list_seeds_toc/1,
	decode_m_family_combine_panel_tos/1,
	decode_m_family_combine_panel_toc/1,
	decode_m_family_combine_request_tos/1,
	decode_m_family_combine_request_toc/1,
	decode_m_family_combine_tos/1,
	decode_m_family_combine_toc/1,
	decode_m_role2_on_hook_begin_tos/1,
	decode_m_role2_on_hook_begin_toc/1,
	decode_m_role2_on_hook_end_tos/1,
	decode_m_role2_on_hook_end_toc/1,
	decode_m_role2_on_hook_status_tos/1,
	decode_m_role2_on_hook_status_toc/1,
	decode_m_time_gift_list_toc/1,
	decode_p_time_gift_info/1,
	decode_m_time_gift_accept_tos/1,
	decode_m_time_gift_accept_toc/1,
	decode_m_level_gift_list_toc/1,
	decode_p_level_gift_info/1,
	decode_m_level_gift_accept_tos/1,
	decode_m_level_gift_accept_toc/1,
	decode_m_country_treasure_enter_tos/1,
	decode_m_country_treasure_enter_toc/1,
	decode_m_country_treasure_quit_tos/1,
	decode_m_country_treasure_quit_toc/1,
	decode_m_country_treasure_query_tos/1,
	decode_m_country_treasure_query_toc/1,
	decode_m_country_treasure_points_toc/1,
	decode_p_country_points/1,
	decode_m_pet_enter_toc/1,
	decode_m_pet_quit_toc/1,
	decode_m_pet_dead_toc/1,
	decode_m_pet_attr_change_toc/1,
	decode_m_pet_summon_tos/1,
	decode_m_pet_summon_toc/1,
	decode_m_pet_call_back_tos/1,
	decode_m_pet_call_back_toc/1,
	decode_m_pet_throw_tos/1,
	decode_m_pet_throw_toc/1,
	decode_m_pet_add_life_tos/1,
	decode_m_pet_add_life_toc/1,
	decode_m_pet_learn_skill_tos/1,
	decode_m_pet_learn_skill_toc/1,
	decode_m_pet_info_tos/1,
	decode_m_pet_info_toc/1,
	decode_m_pet_bag_info_tos/1,
	decode_m_pet_bag_info_toc/1,
	decode_m_pet_add_bag_tos/1,
	decode_m_pet_add_bag_toc/1,
	decode_m_pet_attr_assign_tos/1,
	decode_m_pet_attr_assign_toc/1,
	decode_m_pet_level_up_toc/1,
	decode_m_pet_refresh_aptitude_tos/1,
	decode_m_pet_refresh_aptitude_toc/1,
	decode_m_pet_add_understanding_tos/1,
	decode_m_pet_add_understanding_toc/1,
	decode_m_pet_change_name_tos/1,
	decode_m_pet_change_name_toc/1,
	decode_m_pet_feed_info_tos/1,
	decode_m_pet_feed_info_toc/1,
	decode_m_pet_feed_begin_tos/1,
	decode_m_pet_feed_begin_toc/1,
	decode_m_pet_feed_commit_tos/1,
	decode_m_pet_feed_commit_toc/1,
	decode_m_pet_feed_give_up_tos/1,
	decode_m_pet_feed_give_up_toc/1,
	decode_m_pet_feed_star_up_tos/1,
	decode_m_pet_feed_star_up_toc/1,
	decode_m_pet_feed_over_toc/1,
	decode_m_pet_training_request_tos/1,
	decode_m_pet_training_request_toc/1,
	decode_m_pet_grow_info_tos/1,
	decode_m_pet_grow_info_toc/1,
	decode_m_pet_grow_begin_tos/1,
	decode_m_pet_grow_begin_toc/1,
	decode_m_pet_grow_commit_tos/1,
	decode_m_pet_grow_commit_toc/1,
	decode_m_pet_grow_give_up_tos/1,
	decode_m_pet_grow_give_up_toc/1,
	decode_m_pet_grow_over_toc/1,
	decode_m_pet_add_skill_grid_tos/1,
	decode_m_pet_add_skill_grid_toc/1,
	decode_m_pet_forget_skill_tos/1,
	decode_m_pet_forget_skill_toc/1,
	decode_m_pet_change_pos_tos/1,
	decode_m_pet_change_pos_toc/1,
	decode_m_pet_refining_tos/1,
	decode_m_pet_refining_toc/1,
	decode_m_pet_refining_exp_tos/1,
	decode_m_pet_refining_exp_toc/1,
	decode_m_pet_egg_use_tos/1,
	decode_m_pet_egg_use_toc/1,
	decode_m_pet_egg_refresh_tos/1,
	decode_m_pet_egg_refresh_toc/1,
	decode_m_pet_egg_adopt_tos/1,
	decode_m_pet_egg_adopt_toc/1,
	decode_m_pet_trick_learn_tos/1,
	decode_m_pet_trick_learn_toc/1,
	decode_m_pet_trick_upgrade_tos/1,
	decode_m_pet_trick_upgrade_toc/1,
	decode_m_stat_button_tos/1,
	decode_m_stat_config_toc/1,
	decode_m_spy_faction_tos/1,
	decode_m_spy_faction_toc/1,
	decode_m_spy_faction_time_toc/1,
	decode_m_spy_time_tos/1,
	decode_m_spy_time_toc/1,
	decode_m_educate_fb_enter_tos/1,
	decode_m_educate_fb_enter_toc/1,
	decode_m_educate_fb_quit_tos/1,
	decode_m_educate_fb_quit_toc/1,
	decode_m_educate_fb_award_tos/1,
	decode_m_educate_fb_award_toc/1,
	decode_m_educate_fb_gambling_tos/1,
	decode_m_educate_fb_gambling_toc/1,
	decode_m_educate_fb_item_tos/1,
	decode_m_educate_fb_item_toc/1,
	decode_m_educate_fb_query_tos/1,
	decode_m_educate_fb_query_toc/1,
	decode_m_jail_out_tos/1,
	decode_m_jail_out_toc/1,
	decode_m_jail_donate_tos/1,
	decode_m_jail_donate_toc/1,
	decode_m_jail_out_force_tos/1,
	decode_m_jail_out_force_toc/1,
	decode_m_present_get_tos/1,
	decode_m_present_get_toc/1,
	decode_m_present_notify_toc/1,
	decode_m_conlogin_fetch_tos/1,
	decode_m_conlogin_fetch_toc/1,
	decode_m_conlogin_info_toc/1,
	decode_m_conlogin_info_tos/1,
	decode_m_conlogin_notshow_tos/1,
	decode_m_conlogin_notshow_toc/1,
	decode_m_conlogin_clear_tos/1,
	decode_m_conlogin_clear_toc/1,
	decode_m_personal_fb_list_tos/1,
	decode_m_personal_fb_list_toc/1,
	decode_m_personal_fb_enter_tos/1,
	decode_m_personal_fb_enter_toc/1,
	decode_m_personal_fb_lost_toc/1,
	decode_m_personal_fb_quit_tos/1,
	decode_m_personal_fb_quit_toc/1,
	decode_m_personal_fb_next_level_tos/1,
	decode_m_personal_fb_next_level_toc/1,
	decode_m_personal_fb_state_toc/1,
	decode_p_personal_fb_info/1,
	decode_m_accumulate_exp_info_tos/1,
	decode_m_accumulate_exp_info_toc/1,
	decode_m_accumulate_exp_refresh_tos/1,
	decode_m_accumulate_exp_refresh_toc/1,
	decode_m_accumulate_exp_fetch_tos/1,
	decode_m_accumulate_exp_fetch_toc/1,
	decode_m_accumulate_exp_notify_toc/1,
	decode_m_accumulate_exp_list_tos/1,
	decode_m_accumulate_exp_list_toc/1,
	decode_m_trap_enter_toc/1,
	decode_m_trap_quit_toc/1,
	decode_m_vip_info_toc/1,
	decode_m_vip_remote_depot_tos/1,
	decode_m_vip_remote_depot_toc/1,
	decode_m_vip_active_tos/1,
	decode_m_vip_active_toc/1,
	decode_m_vip_multi_exp_tos/1,
	decode_m_vip_multi_exp_toc/1,
	decode_m_vip_stop_notify_tos/1,
	decode_m_vip_stop_notify_toc/1,
	decode_m_vip_list_tos/1,
	decode_m_vip_list_toc/1,
	decode_m_vip_exchange_prestige_tos/1,
	decode_m_vip_exchange_prestige_toc/1,
	decode_m_fmldepot_list_goods_tos/1,
	decode_m_fmldepot_list_goods_toc/1,
	decode_m_fmldepot_create_tos/1,
	decode_m_fmldepot_create_toc/1,
	decode_m_fmldepot_putin_tos/1,
	decode_m_fmldepot_putin_toc/1,
	decode_m_fmldepot_getout_tos/1,
	decode_m_fmldepot_getout_toc/1,
	decode_m_fmldepot_update_goods_toc/1,
	decode_m_fmldepot_list_log_tos/1,
	decode_m_fmldepot_list_log_toc/1,
	decode_m_scene_war_fb_enter_tos/1,
	decode_m_scene_war_fb_enter_toc/1,
	decode_m_scene_war_fb_quit_tos/1,
	decode_m_scene_war_fb_quit_toc/1,
	decode_m_scene_war_fb_query_tos/1,
	decode_m_scene_war_fb_query_toc/1,
	decode_m_scene_war_fb_call_monster_tos/1,
	decode_m_scene_war_fb_call_monster_toc/1,
	decode_m_bgp_login_tos/1,
	decode_m_bgp_login_toc/1,
	decode_m_gift_item_query_tos/1,
	decode_m_gift_item_query_toc/1,
	decode_m_gift_item_award_tos/1,
	decode_m_gift_item_award_toc/1,
	decode_m_bonfire_up_toc/1,
	decode_m_bonfire_rm_toc/1,
	decode_m_bonfire_add_fagot_tos/1,
	decode_m_bonfire_add_fagot_toc/1,
	decode_m_bonfire_get_tos/1,
	decode_m_bonfire_get_toc/1,
	decode_m_mission_fb_enter_tos/1,
	decode_m_mission_fb_enter_toc/1,
	decode_m_mission_fb_prop_tos/1,
	decode_m_mission_fb_prop_toc/1,
	decode_m_mission_fb_quit_tos/1,
	decode_m_mission_fb_quit_toc/1,
	decode_m_hero_fb_enter_tos/1,
	decode_m_hero_fb_enter_toc/1,
	decode_m_hero_fb_report_tos/1,
	decode_m_hero_fb_report_toc/1,
	decode_m_hero_fb_panel_tos/1,
	decode_m_hero_fb_panel_toc/1,
	decode_m_hero_fb_quit_tos/1,
	decode_m_hero_fb_quit_toc/1,
	decode_m_hero_fb_reward_tos/1,
	decode_m_hero_fb_reward_toc/1,
	decode_m_hero_fb_state_toc/1,
	decode_m_hero_fb_buy_tos/1,
	decode_m_hero_fb_buy_toc/1,
	decode_m_hero_fb_poker_reward_tos/1,
	decode_m_hero_fb_poker_reward_toc/1,
	decode_m_accumulate_exp_get_tos/1,
	decode_m_accumulate_exp_get_toc/1,
	decode_m_accumulate_exp_view_tos/1,
	decode_m_accumulate_exp_view_toc/1,
	decode_m_family_set_interior_manager_tos/1,
	decode_m_family_set_interior_manager_toc/1,
	decode_m_family_unset_interior_manager_tos/1,
	decode_m_family_unset_interior_manager_toc/1,
	decode_m_family_leftright_protector_toc/1,
	decode_m_family_collect_get_role_info_tos/1,
	decode_m_family_collect_get_role_info_toc/1,
	decode_m_family_notify_online_tos/1,
	decode_m_family_notify_online_toc/1,
	decode_m_goal_info_tos/1,
	decode_m_goal_info_toc/1,
	decode_m_goal_fetch_tos/1,
	decode_m_goal_fetch_toc/1,
	decode_m_goal_update_toc/1,
	decode_m_prestige_query_tos/1,
	decode_m_prestige_query_toc/1,
	decode_m_prestige_deal_tos/1,
	decode_m_prestige_deal_toc/1,
	decode_m_special_activity_get_prize_tos/1,
	decode_m_special_activity_get_prize_toc/1,
	decode_m_special_activity_able_get_toc/1,
	decode_m_special_activity_list_tos/1,
	decode_m_special_activity_list_toc/1,
	decode_m_special_activity_detail_tos/1,
	decode_m_special_activity_detail_toc/1,
	decode_m_special_activity_stat_tos/1,
	decode_m_special_activity_stat_toc/1,
	decode_m_activity_boss_group_tos/1,
	decode_m_activity_boss_group_toc/1,
	decode_m_shuaqi_fb_request_tos/1,
	decode_m_shuaqi_fb_request_toc/1,
	decode_m_exercise_fb_request_tos/1,
	decode_m_exercise_fb_request_toc/1,
	decode_m_flash_proxy_server_tos/1,
	decode_m_server_disconnect_flash_toc/1,
	decode_m_server_update_proxy_address_config_tos/1
]).
-export([
	encode_int32s/2,
	encode_doubles/2,
	encode_bools/2,
	encode_strings/2
]).

-export([
	decode_int32s/2,
	decode_doubles/2,
	decode_bools/2,
	decode_strings/2
]).

encode_int32s([], Bin) ->
	Bin;
encode_int32s([H|T], Bin) ->
	encode_int32s(T, <<Bin/binary, H:32/signed>>).

encode_doubles([], Bin) ->
	Bin;
encode_doubles([H|T], Bin) ->
	encode_doubles(T, <<Bin/binary, H/float>>).

encode_strings([], Bin) ->
	Bin;
encode_strings([H|T], Bin) ->
	Str = common_tool:to_binary(H),
	StrLen = erlang:byte_size(Str),
	encode_strings(T, <<Bin/binary, StrLen:16, Str/binary>>).

encode_bools([], Bin) ->
	Bin;
encode_bools([H|T], Bin) ->
	case H  of
	true ->
		B = 1;
	false ->
		B = 0
	end,
	encode_bools(T, <<Bin/binary, B:8>>).

decode_int32s(<<>>, List) ->
	List;
decode_int32s(Bin, List) ->
	<<Int:32/signed, Bin2/binary>> = Bin,
	decode_int32s(Bin2, [Int|List]).
decode_doubles(<<>>, List) ->
	List;
decode_doubles(Bin, List) ->
	<<Double/float, Bin2/binary>> = Bin,
	decode_doubles(Bin2, [Double|List]).
decode_strings(<<>>, List) ->
	List;
decode_strings(Bin, List) ->
	<<Len:16, Bin2/binary>> = Bin,
	<<Str:Len/binary, Bin3/binary>> = Bin2,
	decode_strings(Bin3, [common_tool:to_list(Str)|List]).
decode_bools(<<>>, List) ->
	List;
decode_bools(Bin, List) ->
	<<Int:8, Bin2/binary>> = Bin,
	case Int of 
		1 ->
			Bool = true;
		_ ->			Bool = false
	end,
	decode_bools(Bin2, [Bool|List]).
encode_p_game_role_disply(Record) when is_record(Record, p_game_role_disply) ->
	#p_game_role_disply{type=Type,value=Value} = Record,
	case Type =:= undefined of
		true ->
				TypeFinal = 1;
		false ->
			TypeFinal = Type
	end,
	case Value =:= undefined of
		true ->
				ValueFinal = 0;
		false ->
			ValueFinal = Value
	end,

	<<TypeFinal:32/signed,ValueFinal:32/signed>>;
encode_p_game_role_disply(_) -> 
	<<>>.

decode_p_game_role_disply(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Type:32/signed,Value:32/signed>> = Bin0,

	{p_game_role_disply, Type,Value};

decode_p_game_role_disply(_) ->
	undefined.
encode_p_chat_role(Record) when is_record(Record, p_chat_role) ->
	#p_chat_role{roleid=Roleid,rolename=Rolename,factionid=Factionid,faction_name=Faction_name,sex=Sex,head=Head,sign=Sign,titles=Titles} = Record,
	case Roleid =:= undefined of
		true ->
				RoleidFinal = undefined,
				exit({required_field_not_assigned, p_chat_role, roleid});
		false ->
			RoleidFinal = Roleid
	end,
	case Rolename =:= undefined of
		true ->
				RolenameFinal = undefined,
				exit({required_field_not_assigned, p_chat_role, rolename});
		false ->
			RolenameFinal = Rolename
	end,
	case Factionid =:= undefined of
		true ->
				FactionidFinal = undefined,
				exit({required_field_not_assigned, p_chat_role, factionid});
		false ->
			FactionidFinal = Factionid
	end,
	case Faction_name =:= undefined of
		true ->
				Faction_nameFinal = undefined,
				exit({required_field_not_assigned, p_chat_role, faction_name});
		false ->
			Faction_nameFinal = Faction_name
	end,
	case Sex =:= undefined of
		true ->
				SexFinal = undefined,
				exit({required_field_not_assigned, p_chat_role, sex});
		false ->
			SexFinal = Sex
	end,
	case Head =:= undefined of
		true ->
				HeadFinal = 0;
		false ->
			HeadFinal = Head
	end,
	case Sign =:= undefined of
		true ->
				SignFinal = <<>>;
		false ->
			SignFinal = Sign
	end,
	case Titles =:= undefined of
		true ->
			TitlesFinal = [];
		false ->
			TitlesFinal = Titles
	end,
	Rolename2 = common_tool:to_binary(RolenameFinal),
	RolenameLen = erlang:byte_size(Rolename2),
	Faction_name2 = common_tool:to_binary(Faction_nameFinal),
	Faction_nameLen = erlang:byte_size(Faction_name2),
	Sign2 = common_tool:to_binary(SignFinal),
	SignLen = erlang:byte_size(Sign2),
	Titles_bin = encode_p_chat_titles(TitlesFinal, <<>>),
	SizeTitlesFinal = erlang:length(TitlesFinal),
	BinLen_titles = erlang:byte_size(Titles_bin),

	<<RoleidFinal:32/signed,RolenameLen:16, Rolename2/binary,FactionidFinal:32/signed,Faction_nameLen:16, Faction_name2/binary,SexFinal:32/signed,HeadFinal:32/signed,SignLen:16, Sign2/binary,SizeTitlesFinal:16, BinLen_titles:32, Titles_bin/binary>>;
encode_p_chat_role(_) -> 
	<<>>.

decode_p_chat_role(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Roleid:32/signed,RolenameLen:16, Bin1/binary>> = Bin0,
	<<Rolename:RolenameLen/binary,Factionid:32/signed,Faction_nameLen:16, Bin2/binary>> = Bin1,
	<<Faction_name:Faction_nameLen/binary,Sex:32/signed,Head:32/signed,SignLen:16, Bin3/binary>> = Bin2,
	<<Sign:SignLen/binary,_Sizetitles:16, _BinLentitles:32, SubBintitles/binary>> = Bin3,
	Titles = lists:reverse(decode_p_chat_titles(SubBintitles, [])),

	{p_chat_role, Roleid,common_tool:to_list(Rolename),Factionid,common_tool:to_list(Faction_name),Sex,Head,common_tool:to_list(Sign),Titles};

decode_p_chat_role(_) ->
	undefined.
encode_p_chat_title(Record) when is_record(Record, p_chat_title) ->
	#p_chat_title{id=Id,name=Name,color=Color} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, p_chat_title, id});
		false ->
			IdFinal = Id
	end,
	case Name =:= undefined of
		true ->
				NameFinal = undefined,
				exit({required_field_not_assigned, p_chat_title, name});
		false ->
			NameFinal = Name
	end,
	case Color =:= undefined of
		true ->
				ColorFinal = "#ffffff";
		false ->
			ColorFinal = Color
	end,
	Name2 = common_tool:to_binary(NameFinal),
	NameLen = erlang:byte_size(Name2),
	Color2 = common_tool:to_binary(ColorFinal),
	ColorLen = erlang:byte_size(Color2),

	<<IdFinal:32/signed,NameLen:16, Name2/binary,ColorLen:16, Color2/binary>>;
encode_p_chat_title(_) -> 
	<<>>.

decode_p_chat_title(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed,NameLen:16, Bin1/binary>> = Bin0,
	<<Name:NameLen/binary,ColorLen:16, Bin2/binary>> = Bin1,
	<<Color:ColorLen/binary>> = Bin2,

	{p_chat_title, Id,common_tool:to_list(Name),common_tool:to_list(Color)};

decode_p_chat_title(_) ->
	undefined.
encode_p_title(Record) when is_record(Record, p_title) ->
	#p_title{id=Id,name=Name,type=Type,auto_timeout=Auto_timeout,timeout_time=Timeout_time,role_id=Role_id,show_in_chat=Show_in_chat,show_in_sence=Show_in_sence,color=Color} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, p_title, id});
		false ->
			IdFinal = Id
	end,
	case Name =:= undefined of
		true ->
				NameFinal = undefined,
				exit({required_field_not_assigned, p_title, name});
		false ->
			NameFinal = Name
	end,
	case Type =:= undefined of
		true ->
				TypeFinal = undefined,
				exit({required_field_not_assigned, p_title, type});
		false ->
			TypeFinal = Type
	end,
	case Auto_timeout =:= undefined of
		true ->
				Auto_timeoutFinal = undefined,
				exit({required_field_not_assigned, p_title, auto_timeout});
		false ->
		case Auto_timeout of
			true ->
				Auto_timeoutFinal = 1;
			false ->
				Auto_timeoutFinal = 0
		end
	end,
	case Timeout_time =:= undefined of
		true ->
				Timeout_timeFinal = 0;
		false ->
			Timeout_timeFinal = Timeout_time
	end,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, p_title, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Show_in_chat =:= undefined of
		true ->
				Show_in_chatFinal = undefined,
				exit({required_field_not_assigned, p_title, show_in_chat});
		false ->
		case Show_in_chat of
			true ->
				Show_in_chatFinal = 1;
			false ->
				Show_in_chatFinal = 0
		end
	end,
	case Show_in_sence =:= undefined of
		true ->
				Show_in_senceFinal = undefined,
				exit({required_field_not_assigned, p_title, show_in_sence});
		false ->
		case Show_in_sence of
			true ->
				Show_in_senceFinal = 1;
			false ->
				Show_in_senceFinal = 0
		end
	end,
	case Color =:= undefined of
		true ->
				ColorFinal = <<>>;
		false ->
			ColorFinal = Color
	end,
	Name2 = common_tool:to_binary(NameFinal),
	NameLen = erlang:byte_size(Name2),
	Color2 = common_tool:to_binary(ColorFinal),
	ColorLen = erlang:byte_size(Color2),

	<<IdFinal:32/signed,NameLen:16, Name2/binary,TypeFinal:32/signed,Auto_timeoutFinal:8,Timeout_timeFinal:32/signed,Role_idFinal:32/signed,Show_in_chatFinal:8,Show_in_senceFinal:8,ColorLen:16, Color2/binary>>;
encode_p_title(_) -> 
	<<>>.

decode_p_title(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed,NameLen:16, Bin1/binary>> = Bin0,
	<<Name:NameLen/binary,Type:32/signed,Auto_timeoutTmp:8,Timeout_time:32/signed,Role_id:32/signed,Show_in_chatTmp:8,Show_in_senceTmp:8,ColorLen:16, Bin2/binary>> = Bin1,
	<<Color:ColorLen/binary>> = Bin2,
case Auto_timeoutTmp of 
	1 -> 
		Auto_timeout = true;
	_ ->
		Auto_timeout = false
end,
case Show_in_chatTmp of 
	1 -> 
		Show_in_chat = true;
	_ ->
		Show_in_chat = false
end,
case Show_in_senceTmp of 
	1 -> 
		Show_in_sence = true;
	_ ->
		Show_in_sence = false
end,

	{p_title, Id,common_tool:to_list(Name),Type,Auto_timeout,Timeout_time,Role_id,Show_in_chat,Show_in_sence,common_tool:to_list(Color)};

decode_p_title(_) ->
	undefined.
encode_p_chat_channel_role_info(Record) when is_record(Record, p_chat_channel_role_info) ->
	#p_chat_channel_role_info{channel_sign=Channel_sign,channel_type=Channel_type,role_id=Role_id,role_name=Role_name,sex=Sex,faction_id=Faction_id,office_name=Office_name,head=Head,sign=Sign,is_online=Is_online} = Record,
	case Channel_sign =:= undefined of
		true ->
				Channel_signFinal = undefined,
				exit({required_field_not_assigned, p_chat_channel_role_info, channel_sign});
		false ->
			Channel_signFinal = Channel_sign
	end,
	case Channel_type =:= undefined of
		true ->
				Channel_typeFinal = undefined,
				exit({required_field_not_assigned, p_chat_channel_role_info, channel_type});
		false ->
			Channel_typeFinal = Channel_type
	end,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, p_chat_channel_role_info, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = undefined,
				exit({required_field_not_assigned, p_chat_channel_role_info, role_name});
		false ->
			Role_nameFinal = Role_name
	end,
	case Sex =:= undefined of
		true ->
				SexFinal = undefined,
				exit({required_field_not_assigned, p_chat_channel_role_info, sex});
		false ->
			SexFinal = Sex
	end,
	case Faction_id =:= undefined of
		true ->
				Faction_idFinal = undefined,
				exit({required_field_not_assigned, p_chat_channel_role_info, faction_id});
		false ->
			Faction_idFinal = Faction_id
	end,
	case Office_name =:= undefined of
		true ->
				Office_nameFinal = undefined,
				exit({required_field_not_assigned, p_chat_channel_role_info, office_name});
		false ->
			Office_nameFinal = Office_name
	end,
	case Head =:= undefined of
		true ->
				HeadFinal = 0;
		false ->
			HeadFinal = Head
	end,
	case Sign =:= undefined of
		true ->
				SignFinal = <<>>;
		false ->
			SignFinal = Sign
	end,
	case Is_online =:= undefined of
		true ->
				Is_onlineFinal = undefined,
				exit({required_field_not_assigned, p_chat_channel_role_info, is_online});
		false ->
		case Is_online of
			true ->
				Is_onlineFinal = 1;
			false ->
				Is_onlineFinal = 0
		end
	end,
	Channel_sign2 = common_tool:to_binary(Channel_signFinal),
	Channel_signLen = erlang:byte_size(Channel_sign2),
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),
	Office_name2 = common_tool:to_binary(Office_nameFinal),
	Office_nameLen = erlang:byte_size(Office_name2),
	Sign2 = common_tool:to_binary(SignFinal),
	SignLen = erlang:byte_size(Sign2),

	<<Channel_signLen:16, Channel_sign2/binary,Channel_typeFinal:32/signed,Role_idFinal:32/signed,Role_nameLen:16, Role_name2/binary,SexFinal:32/signed,Faction_idFinal:32/signed,Office_nameLen:16, Office_name2/binary,HeadFinal:32/signed,SignLen:16, Sign2/binary,Is_onlineFinal:8>>;
encode_p_chat_channel_role_info(_) -> 
	<<>>.

decode_p_chat_channel_role_info(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Channel_signLen:16, Bin1/binary>> = Bin0,
	<<Channel_sign:Channel_signLen/binary,Channel_type:32/signed,Role_id:32/signed,Role_nameLen:16, Bin2/binary>> = Bin1,
	<<Role_name:Role_nameLen/binary,Sex:32/signed,Faction_id:32/signed,Office_nameLen:16, Bin3/binary>> = Bin2,
	<<Office_name:Office_nameLen/binary,Head:32/signed,SignLen:16, Bin4/binary>> = Bin3,
	<<Sign:SignLen/binary,Is_onlineTmp:8>> = Bin4,
case Is_onlineTmp of 
	1 -> 
		Is_online = true;
	_ ->
		Is_online = false
end,

	{p_chat_channel_role_info, common_tool:to_list(Channel_sign),Channel_type,Role_id,common_tool:to_list(Role_name),Sex,Faction_id,common_tool:to_list(Office_name),Head,common_tool:to_list(Sign),Is_online};

decode_p_chat_channel_role_info(_) ->
	undefined.
encode_p_channel_info(Record) when is_record(Record, p_channel_info) ->
	#p_channel_info{channel_sign=Channel_sign,channel_type=Channel_type,channel_name=Channel_name,online_num=Online_num,total_num=Total_num} = Record,
	case Channel_sign =:= undefined of
		true ->
				Channel_signFinal = undefined,
				exit({required_field_not_assigned, p_channel_info, channel_sign});
		false ->
			Channel_signFinal = Channel_sign
	end,
	case Channel_type =:= undefined of
		true ->
				Channel_typeFinal = undefined,
				exit({required_field_not_assigned, p_channel_info, channel_type});
		false ->
			Channel_typeFinal = Channel_type
	end,
	case Channel_name =:= undefined of
		true ->
				Channel_nameFinal = undefined,
				exit({required_field_not_assigned, p_channel_info, channel_name});
		false ->
			Channel_nameFinal = Channel_name
	end,
	case Online_num =:= undefined of
		true ->
				Online_numFinal = 1;
		false ->
			Online_numFinal = Online_num
	end,
	case Total_num =:= undefined of
		true ->
				Total_numFinal = 1;
		false ->
			Total_numFinal = Total_num
	end,
	Channel_sign2 = common_tool:to_binary(Channel_signFinal),
	Channel_signLen = erlang:byte_size(Channel_sign2),
	Channel_name2 = common_tool:to_binary(Channel_nameFinal),
	Channel_nameLen = erlang:byte_size(Channel_name2),

	<<Channel_signLen:16, Channel_sign2/binary,Channel_typeFinal:32/signed,Channel_nameLen:16, Channel_name2/binary,Online_numFinal:32/signed,Total_numFinal:32/signed>>;
encode_p_channel_info(_) -> 
	<<>>.

decode_p_channel_info(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Channel_signLen:16, Bin1/binary>> = Bin0,
	<<Channel_sign:Channel_signLen/binary,Channel_type:32/signed,Channel_nameLen:16, Bin2/binary>> = Bin1,
	<<Channel_name:Channel_nameLen/binary,Online_num:32/signed,Total_num:32/signed>> = Bin2,

	{p_channel_info, common_tool:to_list(Channel_sign),Channel_type,common_tool:to_list(Channel_name),Online_num,Total_num};

decode_p_channel_info(_) ->
	undefined.
encode_p_actor_buf(Record) when is_record(Record, p_actor_buf) ->
	#p_actor_buf{buff_id=Buff_id,remain_time=Remain_time,actor_id=Actor_id,actor_type=Actor_type,from_actor_id=From_actor_id,from_actor_type=From_actor_type,start_time=Start_time,end_time=End_time,buff_type=Buff_type,value=Value} = Record,
	case Buff_id =:= undefined of
		true ->
				Buff_idFinal = undefined,
				exit({required_field_not_assigned, p_actor_buf, buff_id});
		false ->
			Buff_idFinal = Buff_id
	end,
	case Remain_time =:= undefined of
		true ->
				Remain_timeFinal = 0;
		false ->
			Remain_timeFinal = Remain_time
	end,
	case Actor_id =:= undefined of
		true ->
				Actor_idFinal = undefined,
				exit({required_field_not_assigned, p_actor_buf, actor_id});
		false ->
			Actor_idFinal = Actor_id
	end,
	case Actor_type =:= undefined of
		true ->
				Actor_typeFinal = undefined,
				exit({required_field_not_assigned, p_actor_buf, actor_type});
		false ->
			Actor_typeFinal = Actor_type
	end,
	case From_actor_id =:= undefined of
		true ->
				From_actor_idFinal = undefined,
				exit({required_field_not_assigned, p_actor_buf, from_actor_id});
		false ->
			From_actor_idFinal = From_actor_id
	end,
	case From_actor_type =:= undefined of
		true ->
				From_actor_typeFinal = undefined,
				exit({required_field_not_assigned, p_actor_buf, from_actor_type});
		false ->
			From_actor_typeFinal = From_actor_type
	end,
	case Start_time =:= undefined of
		true ->
				Start_timeFinal = 0;
		false ->
			Start_timeFinal = Start_time
	end,
	case End_time =:= undefined of
		true ->
				End_timeFinal = 0;
		false ->
			End_timeFinal = End_time
	end,
	case Buff_type =:= undefined of
		true ->
				Buff_typeFinal = undefined,
				exit({required_field_not_assigned, p_actor_buf, buff_type});
		false ->
			Buff_typeFinal = Buff_type
	end,
	case Value =:= undefined of
		true ->
				ValueFinal = undefined,
				exit({required_field_not_assigned, p_actor_buf, value});
		false ->
			ValueFinal = Value
	end,

	<<Buff_idFinal:32/signed,Remain_timeFinal:32/signed,Actor_idFinal:32/signed,Actor_typeFinal:32/signed,From_actor_idFinal:32/signed,From_actor_typeFinal:32/signed,Start_timeFinal:32/signed,End_timeFinal:32/signed,Buff_typeFinal:32/signed,ValueFinal:32/signed>>;
encode_p_actor_buf(_) -> 
	<<>>.

decode_p_actor_buf(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Buff_id:32/signed,Remain_time:32/signed,Actor_id:32/signed,Actor_type:32/signed,From_actor_id:32/signed,From_actor_type:32/signed,Start_time:32/signed,End_time:32/signed,Buff_type:32/signed,Value:32/signed>> = Bin0,

	{p_actor_buf, Buff_id,Remain_time,Actor_id,Actor_type,From_actor_id,From_actor_type,Start_time,End_time,Buff_type,Value};

decode_p_actor_buf(_) ->
	undefined.
encode_p_skin(Record) when is_record(Record, p_skin) ->
	#p_skin{skinid=Skinid,hair_type=Hair_type,hair_color=Hair_color,weapon=Weapon,clothes=Clothes,mounts=Mounts,assis_weapon=Assis_weapon,fashion=Fashion,light_code=Light_code} = Record,
	case Skinid =:= undefined of
		true ->
				SkinidFinal = undefined,
				exit({required_field_not_assigned, p_skin, skinid});
		false ->
			SkinidFinal = Skinid
	end,
	case Hair_type =:= undefined of
		true ->
				Hair_typeFinal = 1;
		false ->
			Hair_typeFinal = Hair_type
	end,
	case Hair_color =:= undefined of
		true ->
				Hair_colorFinal = undefined,
				exit({required_field_not_assigned, p_skin, hair_color});
		false ->
			Hair_colorFinal = Hair_color
	end,
	case Weapon =:= undefined of
		true ->
				WeaponFinal = 0;
		false ->
			WeaponFinal = Weapon
	end,
	case Clothes =:= undefined of
		true ->
				ClothesFinal = 0;
		false ->
			ClothesFinal = Clothes
	end,
	case Mounts =:= undefined of
		true ->
				MountsFinal = 0;
		false ->
			MountsFinal = Mounts
	end,
	case Assis_weapon =:= undefined of
		true ->
				Assis_weaponFinal = 0;
		false ->
			Assis_weaponFinal = Assis_weapon
	end,
	case Fashion =:= undefined of
		true ->
				FashionFinal = 0;
		false ->
			FashionFinal = Fashion
	end,
	case Light_code =:= undefined of
		true ->
				Light_codeFinal = 0;
		false ->
			Light_codeFinal = Light_code
	end,
	Hair_color2 = common_tool:to_binary(Hair_colorFinal),
	Hair_colorLen = erlang:byte_size(Hair_color2),

	<<SkinidFinal:32/signed,Hair_typeFinal:32/signed,Hair_colorLen:16, Hair_color2/binary,WeaponFinal:32/signed,ClothesFinal:32/signed,MountsFinal:32/signed,Assis_weaponFinal:32/signed,FashionFinal:32/signed,Light_codeFinal:32/signed>>;
encode_p_skin(_) -> 
	<<>>.

decode_p_skin(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Skinid:32/signed,Hair_type:32/signed,Hair_colorLen:16, Bin1/binary>> = Bin0,
	<<Hair_color:Hair_colorLen/binary,Weapon:32/signed,Clothes:32/signed,Mounts:32/signed,Assis_weapon:32/signed,Fashion:32/signed,Light_code:32/signed>> = Bin1,

	{p_skin, Skinid,Hair_type,common_tool:to_list(Hair_color),Weapon,Clothes,Mounts,Assis_weapon,Fashion,Light_code};

decode_p_skin(_) ->
	undefined.
encode_p_role_base(Record) when is_record(Record, p_role_base) ->
	#p_role_base{role_id=Role_id,role_name=Role_name,account_name=Account_name,sex=Sex,create_time=Create_time,status=Status,head=Head,faction_id=Faction_id,team_id=Team_id,family_id=Family_id,family_name=Family_name,max_hp=Max_hp,max_mp=Max_mp,str=Str,int2=Int2,con=Con,dex=Dex,men=Men,base_str=Base_str,base_int=Base_int,base_con=Base_con,base_dex=Base_dex,base_men=Base_men,remain_attr_points=Remain_attr_points,pk_title=Pk_title,max_phy_attack=Max_phy_attack,min_phy_attack=Min_phy_attack,max_magic_attack=Max_magic_attack,min_magic_attack=Min_magic_attack,phy_defence=Phy_defence,magic_defence=Magic_defence,hp_recover_speed=Hp_recover_speed,mp_recover_speed=Mp_recover_speed,luck=Luck,move_speed=Move_speed,attack_speed=Attack_speed,erupt_attack_rate=Erupt_attack_rate,no_defence=No_defence,miss=Miss,double_attack=Double_attack,phy_anti=Phy_anti,magic_anti=Magic_anti,cur_title=Cur_title,cur_title_color=Cur_title_color,pk_mode=Pk_mode,pk_points=Pk_points,last_gray_name=Last_gray_name,if_gray_name=If_gray_name,weapon_type=Weapon_type,buffs=Buffs,phy_hurt_rate=Phy_hurt_rate,magic_hurt_rate=Magic_hurt_rate,disable_menu=Disable_menu,dizzy=Dizzy,poisoning=Poisoning,freeze=Freeze,hurt=Hurt,poisoning_resist=Poisoning_resist,dizzy_resist=Dizzy_resist,freeze_resist=Freeze_resist,hurt_rebound=Hurt_rebound,achievement=Achievement,equip_score=Equip_score,spec_score_one=Spec_score_one,spec_score_two=Spec_score_two,hit_rate=Hit_rate,account_type=Account_type} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, p_role_base, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = undefined,
				exit({required_field_not_assigned, p_role_base, role_name});
		false ->
			Role_nameFinal = Role_name
	end,
	case Account_name =:= undefined of
		true ->
				Account_nameFinal = undefined,
				exit({required_field_not_assigned, p_role_base, account_name});
		false ->
			Account_nameFinal = Account_name
	end,
	case Sex =:= undefined of
		true ->
				SexFinal = undefined,
				exit({required_field_not_assigned, p_role_base, sex});
		false ->
			SexFinal = Sex
	end,
	case Create_time =:= undefined of
		true ->
				Create_timeFinal = undefined,
				exit({required_field_not_assigned, p_role_base, create_time});
		false ->
			Create_timeFinal = Create_time
	end,
	case Status =:= undefined of
		true ->
				StatusFinal = 0;
		false ->
			StatusFinal = Status
	end,
	case Head =:= undefined of
		true ->
				HeadFinal = undefined,
				exit({required_field_not_assigned, p_role_base, head});
		false ->
			HeadFinal = Head
	end,
	case Faction_id =:= undefined of
		true ->
				Faction_idFinal = undefined,
				exit({required_field_not_assigned, p_role_base, faction_id});
		false ->
			Faction_idFinal = Faction_id
	end,
	case Team_id =:= undefined of
		true ->
				Team_idFinal = 0;
		false ->
			Team_idFinal = Team_id
	end,
	case Family_id =:= undefined of
		true ->
				Family_idFinal = 0;
		false ->
			Family_idFinal = Family_id
	end,
	case Family_name =:= undefined of
		true ->
				Family_nameFinal = "";
		false ->
			Family_nameFinal = Family_name
	end,
	case Max_hp =:= undefined of
		true ->
				Max_hpFinal = undefined,
				exit({required_field_not_assigned, p_role_base, max_hp});
		false ->
			Max_hpFinal = Max_hp
	end,
	case Max_mp =:= undefined of
		true ->
				Max_mpFinal = undefined,
				exit({required_field_not_assigned, p_role_base, max_mp});
		false ->
			Max_mpFinal = Max_mp
	end,
	case Str =:= undefined of
		true ->
				StrFinal = undefined,
				exit({required_field_not_assigned, p_role_base, str});
		false ->
			StrFinal = Str
	end,
	case Int2 =:= undefined of
		true ->
				Int2Final = undefined,
				exit({required_field_not_assigned, p_role_base, int2});
		false ->
			Int2Final = Int2
	end,
	case Con =:= undefined of
		true ->
				ConFinal = undefined,
				exit({required_field_not_assigned, p_role_base, con});
		false ->
			ConFinal = Con
	end,
	case Dex =:= undefined of
		true ->
				DexFinal = undefined,
				exit({required_field_not_assigned, p_role_base, dex});
		false ->
			DexFinal = Dex
	end,
	case Men =:= undefined of
		true ->
				MenFinal = undefined,
				exit({required_field_not_assigned, p_role_base, men});
		false ->
			MenFinal = Men
	end,
	case Base_str =:= undefined of
		true ->
				Base_strFinal = 0;
		false ->
			Base_strFinal = Base_str
	end,
	case Base_int =:= undefined of
		true ->
				Base_intFinal = 0;
		false ->
			Base_intFinal = Base_int
	end,
	case Base_con =:= undefined of
		true ->
				Base_conFinal = 0;
		false ->
			Base_conFinal = Base_con
	end,
	case Base_dex =:= undefined of
		true ->
				Base_dexFinal = 0;
		false ->
			Base_dexFinal = Base_dex
	end,
	case Base_men =:= undefined of
		true ->
				Base_menFinal = 0;
		false ->
			Base_menFinal = Base_men
	end,
	case Remain_attr_points =:= undefined of
		true ->
				Remain_attr_pointsFinal = undefined,
				exit({required_field_not_assigned, p_role_base, remain_attr_points});
		false ->
			Remain_attr_pointsFinal = Remain_attr_points
	end,
	case Pk_title =:= undefined of
		true ->
				Pk_titleFinal = undefined,
				exit({required_field_not_assigned, p_role_base, pk_title});
		false ->
			Pk_titleFinal = Pk_title
	end,
	case Max_phy_attack =:= undefined of
		true ->
				Max_phy_attackFinal = undefined,
				exit({required_field_not_assigned, p_role_base, max_phy_attack});
		false ->
			Max_phy_attackFinal = Max_phy_attack
	end,
	case Min_phy_attack =:= undefined of
		true ->
				Min_phy_attackFinal = undefined,
				exit({required_field_not_assigned, p_role_base, min_phy_attack});
		false ->
			Min_phy_attackFinal = Min_phy_attack
	end,
	case Max_magic_attack =:= undefined of
		true ->
				Max_magic_attackFinal = undefined,
				exit({required_field_not_assigned, p_role_base, max_magic_attack});
		false ->
			Max_magic_attackFinal = Max_magic_attack
	end,
	case Min_magic_attack =:= undefined of
		true ->
				Min_magic_attackFinal = undefined,
				exit({required_field_not_assigned, p_role_base, min_magic_attack});
		false ->
			Min_magic_attackFinal = Min_magic_attack
	end,
	case Phy_defence =:= undefined of
		true ->
				Phy_defenceFinal = undefined,
				exit({required_field_not_assigned, p_role_base, phy_defence});
		false ->
			Phy_defenceFinal = Phy_defence
	end,
	case Magic_defence =:= undefined of
		true ->
				Magic_defenceFinal = undefined,
				exit({required_field_not_assigned, p_role_base, magic_defence});
		false ->
			Magic_defenceFinal = Magic_defence
	end,
	case Hp_recover_speed =:= undefined of
		true ->
				Hp_recover_speedFinal = undefined,
				exit({required_field_not_assigned, p_role_base, hp_recover_speed});
		false ->
			Hp_recover_speedFinal = Hp_recover_speed
	end,
	case Mp_recover_speed =:= undefined of
		true ->
				Mp_recover_speedFinal = undefined,
				exit({required_field_not_assigned, p_role_base, mp_recover_speed});
		false ->
			Mp_recover_speedFinal = Mp_recover_speed
	end,
	case Luck =:= undefined of
		true ->
				LuckFinal = undefined,
				exit({required_field_not_assigned, p_role_base, luck});
		false ->
			LuckFinal = Luck
	end,
	case Move_speed =:= undefined of
		true ->
				Move_speedFinal = undefined,
				exit({required_field_not_assigned, p_role_base, move_speed});
		false ->
			Move_speedFinal = Move_speed
	end,
	case Attack_speed =:= undefined of
		true ->
				Attack_speedFinal = undefined,
				exit({required_field_not_assigned, p_role_base, attack_speed});
		false ->
			Attack_speedFinal = Attack_speed
	end,
	case Erupt_attack_rate =:= undefined of
		true ->
				Erupt_attack_rateFinal = undefined,
				exit({required_field_not_assigned, p_role_base, erupt_attack_rate});
		false ->
			Erupt_attack_rateFinal = Erupt_attack_rate
	end,
	case No_defence =:= undefined of
		true ->
				No_defenceFinal = 0;
		false ->
			No_defenceFinal = No_defence
	end,
	case Miss =:= undefined of
		true ->
				MissFinal = 0;
		false ->
			MissFinal = Miss
	end,
	case Double_attack =:= undefined of
		true ->
				Double_attackFinal = 0;
		false ->
			Double_attackFinal = Double_attack
	end,
	case Phy_anti =:= undefined of
		true ->
				Phy_antiFinal = 0;
		false ->
			Phy_antiFinal = Phy_anti
	end,
	case Magic_anti =:= undefined of
		true ->
				Magic_antiFinal = 0;
		false ->
			Magic_antiFinal = Magic_anti
	end,
	case Cur_title =:= undefined of
		true ->
				Cur_titleFinal = <<>>;
		false ->
			Cur_titleFinal = Cur_title
	end,
	case Cur_title_color =:= undefined of
		true ->
				Cur_title_colorFinal = <<>>;
		false ->
			Cur_title_colorFinal = Cur_title_color
	end,
	case Pk_mode =:= undefined of
		true ->
				Pk_modeFinal = 0;
		false ->
			Pk_modeFinal = Pk_mode
	end,
	case Pk_points =:= undefined of
		true ->
				Pk_pointsFinal = 0;
		false ->
			Pk_pointsFinal = Pk_points
	end,
	case Last_gray_name =:= undefined of
		true ->
				Last_gray_nameFinal = 0;
		false ->
			Last_gray_nameFinal = Last_gray_name
	end,
	case If_gray_name =:= undefined of
		true ->
				If_gray_nameFinal = 0;
		false ->
		case If_gray_name of
			true ->
				If_gray_nameFinal = 1;
			false ->
				If_gray_nameFinal = 0
		end
	end,
	case Weapon_type =:= undefined of
		true ->
				Weapon_typeFinal = 0;
		false ->
			Weapon_typeFinal = Weapon_type
	end,
	case Buffs =:= undefined of
		true ->
			BuffsFinal = [];
		false ->
			BuffsFinal = Buffs
	end,
	case Phy_hurt_rate =:= undefined of
		true ->
				Phy_hurt_rateFinal = 0;
		false ->
			Phy_hurt_rateFinal = Phy_hurt_rate
	end,
	case Magic_hurt_rate =:= undefined of
		true ->
				Magic_hurt_rateFinal = 0;
		false ->
			Magic_hurt_rateFinal = Magic_hurt_rate
	end,
	case Disable_menu =:= undefined of
		true ->
			Disable_menuFinal = [];
		false ->
			Disable_menuFinal = Disable_menu
	end,
	case Dizzy =:= undefined of
		true ->
				DizzyFinal = 0;
		false ->
			DizzyFinal = Dizzy
	end,
	case Poisoning =:= undefined of
		true ->
				PoisoningFinal = 0;
		false ->
			PoisoningFinal = Poisoning
	end,
	case Freeze =:= undefined of
		true ->
				FreezeFinal = 0;
		false ->
			FreezeFinal = Freeze
	end,
	case Hurt =:= undefined of
		true ->
				HurtFinal = 0;
		false ->
			HurtFinal = Hurt
	end,
	case Poisoning_resist =:= undefined of
		true ->
				Poisoning_resistFinal = 0;
		false ->
			Poisoning_resistFinal = Poisoning_resist
	end,
	case Dizzy_resist =:= undefined of
		true ->
				Dizzy_resistFinal = 0;
		false ->
			Dizzy_resistFinal = Dizzy_resist
	end,
	case Freeze_resist =:= undefined of
		true ->
				Freeze_resistFinal = 0;
		false ->
			Freeze_resistFinal = Freeze_resist
	end,
	case Hurt_rebound =:= undefined of
		true ->
				Hurt_reboundFinal = 0;
		false ->
			Hurt_reboundFinal = Hurt_rebound
	end,
	case Achievement =:= undefined of
		true ->
				AchievementFinal = 0;
		false ->
			AchievementFinal = Achievement
	end,
	case Equip_score =:= undefined of
		true ->
				Equip_scoreFinal = 0;
		false ->
			Equip_scoreFinal = Equip_score
	end,
	case Spec_score_one =:= undefined of
		true ->
				Spec_score_oneFinal = 0;
		false ->
			Spec_score_oneFinal = Spec_score_one
	end,
	case Spec_score_two =:= undefined of
		true ->
				Spec_score_twoFinal = 0;
		false ->
			Spec_score_twoFinal = Spec_score_two
	end,
	case Hit_rate =:= undefined of
		true ->
				Hit_rateFinal = 10000;
		false ->
			Hit_rateFinal = Hit_rate
	end,
	case Account_type =:= undefined of
		true ->
				Account_typeFinal = 0;
		false ->
			Account_typeFinal = Account_type
	end,
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),
	Account_name2 = common_tool:to_binary(Account_nameFinal),
	Account_nameLen = erlang:byte_size(Account_name2),
	Family_name2 = common_tool:to_binary(Family_nameFinal),
	Family_nameLen = erlang:byte_size(Family_name2),
	Cur_title2 = common_tool:to_binary(Cur_titleFinal),
	Cur_titleLen = erlang:byte_size(Cur_title2),
	Cur_title_color2 = common_tool:to_binary(Cur_title_colorFinal),
	Cur_title_colorLen = erlang:byte_size(Cur_title_color2),
	Buffs_bin = encode_p_actor_bufs(BuffsFinal, <<>>),
	SizeBuffsFinal = erlang:length(BuffsFinal),
	BinLen_buffs = erlang:byte_size(Buffs_bin),
	Disable_menu_bin = encode_int32s(Disable_menuFinal, <<>>),
	SizeDisable_menuFinal = erlang:length(Disable_menuFinal),
	BinLen_disable_menu = erlang:byte_size(Disable_menu_bin),

	<<Role_idFinal:32/signed,Role_nameLen:16, Role_name2/binary,Account_nameLen:16, Account_name2/binary,SexFinal:32/signed,Create_timeFinal:32/signed,StatusFinal:32/signed,HeadFinal:32/signed,Faction_idFinal:32/signed,Team_idFinal:32/signed,Family_idFinal:32/signed,Family_nameLen:16, Family_name2/binary,Max_hpFinal:32/signed,Max_mpFinal:32/signed,StrFinal:32/signed,Int2Final:32/signed,ConFinal:32/signed,DexFinal:32/signed,MenFinal:32/signed,Base_strFinal:32/signed,Base_intFinal:32/signed,Base_conFinal:32/signed,Base_dexFinal:32/signed,Base_menFinal:32/signed,Remain_attr_pointsFinal:32/signed,Pk_titleFinal:32/signed,Max_phy_attackFinal:32/signed,Min_phy_attackFinal:32/signed,Max_magic_attackFinal:32/signed,Min_magic_attackFinal:32/signed,Phy_defenceFinal:32/signed,Magic_defenceFinal:32/signed,Hp_recover_speedFinal:32/signed,Mp_recover_speedFinal:32/signed,LuckFinal:32/signed,Move_speedFinal:32/signed,Attack_speedFinal:32/signed,Erupt_attack_rateFinal:32/signed,No_defenceFinal:32/signed,MissFinal:32/signed,Double_attackFinal:32/signed,Phy_antiFinal:32/signed,Magic_antiFinal:32/signed,Cur_titleLen:16, Cur_title2/binary,Cur_title_colorLen:16, Cur_title_color2/binary,Pk_modeFinal:32/signed,Pk_pointsFinal:32/signed,Last_gray_nameFinal:32/signed,If_gray_nameFinal:8,Weapon_typeFinal:32/signed,SizeBuffsFinal:16, BinLen_buffs:32, Buffs_bin/binary,Phy_hurt_rateFinal:32/signed,Magic_hurt_rateFinal:32/signed,SizeDisable_menuFinal:16, BinLen_disable_menu:32, Disable_menu_bin/binary,DizzyFinal:32/signed,PoisoningFinal:32/signed,FreezeFinal:32/signed,HurtFinal:32/signed,Poisoning_resistFinal:32/signed,Dizzy_resistFinal:32/signed,Freeze_resistFinal:32/signed,Hurt_reboundFinal:32/signed,AchievementFinal:32/signed,Equip_scoreFinal:32/signed,Spec_score_oneFinal:32/signed,Spec_score_twoFinal:32/signed,Hit_rateFinal:32/signed,Account_typeFinal:32/signed>>;
encode_p_role_base(_) -> 
	<<>>.

decode_p_role_base(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,Role_nameLen:16, Bin1/binary>> = Bin0,
	<<Role_name:Role_nameLen/binary,Account_nameLen:16, Bin2/binary>> = Bin1,
	<<Account_name:Account_nameLen/binary,Sex:32/signed,Create_time:32/signed,Status:32/signed,Head:32/signed,Faction_id:32/signed,Team_id:32/signed,Family_id:32/signed,Family_nameLen:16, Bin3/binary>> = Bin2,
	<<Family_name:Family_nameLen/binary,Max_hp:32/signed,Max_mp:32/signed,Str:32/signed,Int2:32/signed,Con:32/signed,Dex:32/signed,Men:32/signed,Base_str:32/signed,Base_int:32/signed,Base_con:32/signed,Base_dex:32/signed,Base_men:32/signed,Remain_attr_points:32/signed,Pk_title:32/signed,Max_phy_attack:32/signed,Min_phy_attack:32/signed,Max_magic_attack:32/signed,Min_magic_attack:32/signed,Phy_defence:32/signed,Magic_defence:32/signed,Hp_recover_speed:32/signed,Mp_recover_speed:32/signed,Luck:32/signed,Move_speed:32/signed,Attack_speed:32/signed,Erupt_attack_rate:32/signed,No_defence:32/signed,Miss:32/signed,Double_attack:32/signed,Phy_anti:32/signed,Magic_anti:32/signed,Cur_titleLen:16, Bin4/binary>> = Bin3,
	<<Cur_title:Cur_titleLen/binary,Cur_title_colorLen:16, Bin5/binary>> = Bin4,
	<<Cur_title_color:Cur_title_colorLen/binary,Pk_mode:32/signed,Pk_points:32/signed,Last_gray_name:32/signed,If_gray_nameTmp:8,Weapon_type:32/signed,_Sizebuffs:16, BinLenbuffs:32, Bin6/binary>> = Bin5,
	<<SubBinbuffs:BinLenbuffs/binary, Bin7/binary>> = Bin6, 
	Buffs = lists:reverse(decode_p_actor_bufs(SubBinbuffs, [])),
	<<Phy_hurt_rate:32/signed,Magic_hurt_rate:32/signed,_Sizedisable_menu:16, BinLendisable_menu:32, Bin8/binary>> = Bin7,
	<<SubBindisable_menu:BinLendisable_menu/binary, Bin9/binary>> = Bin8, 
	Disable_menu = lists:reverse(decode_int32s(SubBindisable_menu, [])),
	<<Dizzy:32/signed,Poisoning:32/signed,Freeze:32/signed,Hurt:32/signed,Poisoning_resist:32/signed,Dizzy_resist:32/signed,Freeze_resist:32/signed,Hurt_rebound:32/signed,Achievement:32/signed,Equip_score:32/signed,Spec_score_one:32/signed,Spec_score_two:32/signed,Hit_rate:32/signed,Account_type:32/signed>> = Bin9,
case If_gray_nameTmp of 
	1 -> 
		If_gray_name = true;
	_ ->
		If_gray_name = false
end,

	{p_role_base, Role_id,common_tool:to_list(Role_name),common_tool:to_list(Account_name),Sex,Create_time,Status,Head,Faction_id,Team_id,Family_id,common_tool:to_list(Family_name),Max_hp,Max_mp,Str,Int2,Con,Dex,Men,Base_str,Base_int,Base_con,Base_dex,Base_men,Remain_attr_points,Pk_title,Max_phy_attack,Min_phy_attack,Max_magic_attack,Min_magic_attack,Phy_defence,Magic_defence,Hp_recover_speed,Mp_recover_speed,Luck,Move_speed,Attack_speed,Erupt_attack_rate,No_defence,Miss,Double_attack,Phy_anti,Magic_anti,common_tool:to_list(Cur_title),common_tool:to_list(Cur_title_color),Pk_mode,Pk_points,Last_gray_name,If_gray_name,Weapon_type,Buffs,Phy_hurt_rate,Magic_hurt_rate,Disable_menu,Dizzy,Poisoning,Freeze,Hurt,Poisoning_resist,Dizzy_resist,Freeze_resist,Hurt_rebound,Achievement,Equip_score,Spec_score_one,Spec_score_two,Hit_rate,Account_type};

decode_p_role_base(_) ->
	undefined.
encode_p_role_pos(Record) when is_record(Record, p_role_pos) ->
	#p_role_pos{role_id=Role_id,map_id=Map_id,pos=Pos,map_process_name=Map_process_name,old_map_process_name=Old_map_process_name} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, p_role_pos, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Map_id =:= undefined of
		true ->
				Map_idFinal = undefined,
				exit({required_field_not_assigned, p_role_pos, map_id});
		false ->
			Map_idFinal = Map_id
	end,
	case Pos =:= undefined of
		true ->
				PosFinal = undefined,
				exit({required_field_not_assigned, p_role_pos, pos});
		false ->
			PosFinal = Pos
	end,
	case Map_process_name =:= undefined of
		true ->
				Map_process_nameFinal = undefined,
				exit({required_field_not_assigned, p_role_pos, map_process_name});
		false ->
			Map_process_nameFinal = Map_process_name
	end,
	case Old_map_process_name =:= undefined of
		true ->
				Old_map_process_nameFinal = undefined,
				exit({required_field_not_assigned, p_role_pos, old_map_process_name});
		false ->
			Old_map_process_nameFinal = Old_map_process_name
	end,
	Pos_bin = encode_p_pos(PosFinal),
	BinLen_pos = erlang:byte_size(Pos_bin),
	Map_process_name2 = common_tool:to_binary(Map_process_nameFinal),
	Map_process_nameLen = erlang:byte_size(Map_process_name2),
	Old_map_process_name2 = common_tool:to_binary(Old_map_process_nameFinal),
	Old_map_process_nameLen = erlang:byte_size(Old_map_process_name2),

	<<Role_idFinal:32/signed,Map_idFinal:32/signed,BinLen_pos:32, Pos_bin/binary,Map_process_nameLen:16, Map_process_name2/binary,Old_map_process_nameLen:16, Old_map_process_name2/binary>>;
encode_p_role_pos(_) -> 
	<<>>.

decode_p_role_pos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,Map_id:32/signed,SubBinSizepos:32, Bin1/binary>> = Bin0,
	<<SubBinpos:SubBinSizepos/binary, Bin2/binary>> = Bin1,
	Pos = decode_p_pos(SubBinpos),
	<<Map_process_nameLen:16, Bin3/binary>> = Bin2,
	<<Map_process_name:Map_process_nameLen/binary,Old_map_process_nameLen:16, Bin4/binary>> = Bin3,
	<<Old_map_process_name:Old_map_process_nameLen/binary>> = Bin4,

	{p_role_pos, Role_id,Map_id,Pos,common_tool:to_list(Map_process_name),common_tool:to_list(Old_map_process_name)};

decode_p_role_pos(_) ->
	undefined.
encode_p_role_fight(Record) when is_record(Record, p_role_fight) ->
	#p_role_fight{role_id=Role_id,hp=Hp,mp=Mp,energy=Energy,energy_remain=Energy_remain,time_reset_energy=Time_reset_energy} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, p_role_fight, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Hp =:= undefined of
		true ->
				HpFinal = undefined,
				exit({required_field_not_assigned, p_role_fight, hp});
		false ->
			HpFinal = Hp
	end,
	case Mp =:= undefined of
		true ->
				MpFinal = undefined,
				exit({required_field_not_assigned, p_role_fight, mp});
		false ->
			MpFinal = Mp
	end,
	case Energy =:= undefined of
		true ->
				EnergyFinal = undefined,
				exit({required_field_not_assigned, p_role_fight, energy});
		false ->
			EnergyFinal = Energy
	end,
	case Energy_remain =:= undefined of
		true ->
				Energy_remainFinal = undefined,
				exit({required_field_not_assigned, p_role_fight, energy_remain});
		false ->
			Energy_remainFinal = Energy_remain
	end,
	case Time_reset_energy =:= undefined of
		true ->
				Time_reset_energyFinal = undefined,
				exit({required_field_not_assigned, p_role_fight, time_reset_energy});
		false ->
			Time_reset_energyFinal = Time_reset_energy
	end,

	<<Role_idFinal:32/signed,HpFinal:32/signed,MpFinal:32/signed,EnergyFinal:32/signed,Energy_remainFinal:32/signed,Time_reset_energyFinal:32/signed>>;
encode_p_role_fight(_) -> 
	<<>>.

decode_p_role_fight(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,Hp:32/signed,Mp:32/signed,Energy:32/signed,Energy_remain:32/signed,Time_reset_energy:32/signed>> = Bin0,

	{p_role_fight, Role_id,Hp,Mp,Energy,Energy_remain,Time_reset_energy};

decode_p_role_fight(_) ->
	undefined.
encode_p_role_attr(Record) when is_record(Record, p_role_attr) ->
	#p_role_attr{role_id=Role_id,role_name=Role_name,next_level_exp=Next_level_exp,exp=Exp,level=Level,five_ele_attr=Five_ele_attr,last_login_location=Last_login_location,equips=Equips,jungong=Jungong,charm=Charm,couple_id=Couple_id,couple_name=Couple_name,skin=Skin,cur_energy=Cur_energy,max_energy=Max_energy,remain_skill_points=Remain_skill_points,gold=Gold,gold_bind=Gold_bind,silver=Silver,silver_bind=Silver_bind,show_cloth=Show_cloth,moral_values=Moral_values,gongxun=Gongxun,last_login_ip=Last_login_ip,office_id=Office_id,office_name=Office_name,unbund=Unbund,family_contribute=Family_contribute,active_points=Active_points,category=Category,show_equip_ring=Show_equip_ring,is_payed=Is_payed,sum_prestige=Sum_prestige,cur_prestige=Cur_prestige} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, p_role_attr, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = undefined,
				exit({required_field_not_assigned, p_role_attr, role_name});
		false ->
			Role_nameFinal = Role_name
	end,
	case Next_level_exp =:= undefined of
		true ->
				Next_level_expFinal = undefined,
				exit({required_field_not_assigned, p_role_attr, next_level_exp});
		false ->
			Next_level_expFinal = Next_level_exp
	end,
	case Exp =:= undefined of
		true ->
				ExpFinal = undefined,
				exit({required_field_not_assigned, p_role_attr, exp});
		false ->
			ExpFinal = Exp
	end,
	case Level =:= undefined of
		true ->
				LevelFinal = undefined,
				exit({required_field_not_assigned, p_role_attr, level});
		false ->
			LevelFinal = Level
	end,
	case Five_ele_attr =:= undefined of
		true ->
				Five_ele_attrFinal = undefined,
				exit({required_field_not_assigned, p_role_attr, five_ele_attr});
		false ->
			Five_ele_attrFinal = Five_ele_attr
	end,
	case Last_login_location =:= undefined of
		true ->
				Last_login_locationFinal = undefined,
				exit({required_field_not_assigned, p_role_attr, last_login_location});
		false ->
			Last_login_locationFinal = Last_login_location
	end,
	case Equips =:= undefined of
		true ->
			EquipsFinal = [];
		false ->
			EquipsFinal = Equips
	end,
	case Jungong =:= undefined of
		true ->
				JungongFinal = 0;
		false ->
			JungongFinal = Jungong
	end,
	case Charm =:= undefined of
		true ->
				CharmFinal = 0;
		false ->
			CharmFinal = Charm
	end,
	case Couple_id =:= undefined of
		true ->
				Couple_idFinal = 0;
		false ->
			Couple_idFinal = Couple_id
	end,
	case Couple_name =:= undefined of
		true ->
				Couple_nameFinal = "";
		false ->
			Couple_nameFinal = Couple_name
	end,
	case Skin =:= undefined of
		true ->
				SkinFinal = undefined,
				exit({required_field_not_assigned, p_role_attr, skin});
		false ->
			SkinFinal = Skin
	end,
	case Cur_energy =:= undefined of
		true ->
				Cur_energyFinal = 2000;
		false ->
			Cur_energyFinal = Cur_energy
	end,
	case Max_energy =:= undefined of
		true ->
				Max_energyFinal = 2000;
		false ->
			Max_energyFinal = Max_energy
	end,
	case Remain_skill_points =:= undefined of
		true ->
				Remain_skill_pointsFinal = 0;
		false ->
			Remain_skill_pointsFinal = Remain_skill_points
	end,
	case Gold =:= undefined of
		true ->
				GoldFinal = 0;
		false ->
			GoldFinal = Gold
	end,
	case Gold_bind =:= undefined of
		true ->
				Gold_bindFinal = 0;
		false ->
			Gold_bindFinal = Gold_bind
	end,
	case Silver =:= undefined of
		true ->
				SilverFinal = 0;
		false ->
			SilverFinal = Silver
	end,
	case Silver_bind =:= undefined of
		true ->
				Silver_bindFinal = 0;
		false ->
			Silver_bindFinal = Silver_bind
	end,
	case Show_cloth =:= undefined of
		true ->
				Show_clothFinal = 1;
		false ->
		case Show_cloth of
			true ->
				Show_clothFinal = 1;
			false ->
				Show_clothFinal = 0
		end
	end,
	case Moral_values =:= undefined of
		true ->
				Moral_valuesFinal = 0;
		false ->
			Moral_valuesFinal = Moral_values
	end,
	case Gongxun =:= undefined of
		true ->
				GongxunFinal = 0;
		false ->
			GongxunFinal = Gongxun
	end,
	case Last_login_ip =:= undefined of
		true ->
				Last_login_ipFinal = "";
		false ->
			Last_login_ipFinal = Last_login_ip
	end,
	case Office_id =:= undefined of
		true ->
				Office_idFinal = 0;
		false ->
			Office_idFinal = Office_id
	end,
	case Office_name =:= undefined of
		true ->
				Office_nameFinal = "";
		false ->
			Office_nameFinal = Office_name
	end,
	case Unbund =:= undefined of
		true ->
				UnbundFinal = 0;
		false ->
		case Unbund of
			true ->
				UnbundFinal = 1;
			false ->
				UnbundFinal = 0
		end
	end,
	case Family_contribute =:= undefined of
		true ->
				Family_contributeFinal = 0;
		false ->
			Family_contributeFinal = Family_contribute
	end,
	case Active_points =:= undefined of
		true ->
				Active_pointsFinal = 0;
		false ->
			Active_pointsFinal = Active_points
	end,
	case Category =:= undefined of
		true ->
				CategoryFinal = undefined,
				exit({required_field_not_assigned, p_role_attr, category});
		false ->
			CategoryFinal = Category
	end,
	case Show_equip_ring =:= undefined of
		true ->
				Show_equip_ringFinal = 1;
		false ->
		case Show_equip_ring of
			true ->
				Show_equip_ringFinal = 1;
			false ->
				Show_equip_ringFinal = 0
		end
	end,
	case Is_payed =:= undefined of
		true ->
				Is_payedFinal = 0;
		false ->
		case Is_payed of
			true ->
				Is_payedFinal = 1;
			false ->
				Is_payedFinal = 0
		end
	end,
	case Sum_prestige =:= undefined of
		true ->
				Sum_prestigeFinal = 0;
		false ->
			Sum_prestigeFinal = Sum_prestige
	end,
	case Cur_prestige =:= undefined of
		true ->
				Cur_prestigeFinal = 0;
		false ->
			Cur_prestigeFinal = Cur_prestige
	end,
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),
	Last_login_location2 = common_tool:to_binary(Last_login_locationFinal),
	Last_login_locationLen = erlang:byte_size(Last_login_location2),
	Equips_bin = encode_p_goodss(EquipsFinal, <<>>),
	SizeEquipsFinal = erlang:length(EquipsFinal),
	BinLen_equips = erlang:byte_size(Equips_bin),
	Couple_name2 = common_tool:to_binary(Couple_nameFinal),
	Couple_nameLen = erlang:byte_size(Couple_name2),
	Skin_bin = encode_p_skin(SkinFinal),
	BinLen_skin = erlang:byte_size(Skin_bin),
	Last_login_ip2 = common_tool:to_binary(Last_login_ipFinal),
	Last_login_ipLen = erlang:byte_size(Last_login_ip2),
	Office_name2 = common_tool:to_binary(Office_nameFinal),
	Office_nameLen = erlang:byte_size(Office_name2),

	<<Role_idFinal:32/signed,Role_nameLen:16, Role_name2/binary,Next_level_expFinal:64/float,ExpFinal:64/float,LevelFinal:32/signed,Five_ele_attrFinal:32/signed,Last_login_locationLen:16, Last_login_location2/binary,SizeEquipsFinal:16, BinLen_equips:32, Equips_bin/binary,JungongFinal:32/signed,CharmFinal:32/signed,Couple_idFinal:32/signed,Couple_nameLen:16, Couple_name2/binary,BinLen_skin:32, Skin_bin/binary,Cur_energyFinal:32/signed,Max_energyFinal:32/signed,Remain_skill_pointsFinal:32/signed,GoldFinal:32/signed,Gold_bindFinal:32/signed,SilverFinal:32/signed,Silver_bindFinal:32/signed,Show_clothFinal:8,Moral_valuesFinal:32/signed,GongxunFinal:32/signed,Last_login_ipLen:16, Last_login_ip2/binary,Office_idFinal:32/signed,Office_nameLen:16, Office_name2/binary,UnbundFinal:8,Family_contributeFinal:32/signed,Active_pointsFinal:32/signed,CategoryFinal:32/signed,Show_equip_ringFinal:8,Is_payedFinal:8,Sum_prestigeFinal:64/float,Cur_prestigeFinal:64/float>>;
encode_p_role_attr(_) -> 
	<<>>.

decode_p_role_attr(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,Role_nameLen:16, Bin1/binary>> = Bin0,
	<<Role_name:Role_nameLen/binary,Next_level_exp:64,Exp:64,Level:32/signed,Five_ele_attr:32/signed,Last_login_locationLen:16, Bin2/binary>> = Bin1,
	<<Last_login_location:Last_login_locationLen/binary,_Sizeequips:16, BinLenequips:32, Bin3/binary>> = Bin2,
	<<SubBinequips:BinLenequips/binary, Bin4/binary>> = Bin3, 
	Equips = lists:reverse(decode_p_goodss(SubBinequips, [])),
	<<Jungong:32/signed,Charm:32/signed,Couple_id:32/signed,Couple_nameLen:16, Bin5/binary>> = Bin4,
	<<Couple_name:Couple_nameLen/binary,SubBinSizeskin:32, Bin6/binary>> = Bin5,
	<<SubBinskin:SubBinSizeskin/binary, Bin7/binary>> = Bin6,
	Skin = decode_p_skin(SubBinskin),
	<<Cur_energy:32/signed,Max_energy:32/signed,Remain_skill_points:32/signed,Gold:32/signed,Gold_bind:32/signed,Silver:32/signed,Silver_bind:32/signed,Show_clothTmp:8,Moral_values:32/signed,Gongxun:32/signed,Last_login_ipLen:16, Bin8/binary>> = Bin7,
	<<Last_login_ip:Last_login_ipLen/binary,Office_id:32/signed,Office_nameLen:16, Bin9/binary>> = Bin8,
	<<Office_name:Office_nameLen/binary,UnbundTmp:8,Family_contribute:32/signed,Active_points:32/signed,Category:32/signed,Show_equip_ringTmp:8,Is_payedTmp:8,Sum_prestige:64,Cur_prestige:64>> = Bin9,
case Show_clothTmp of 
	1 -> 
		Show_cloth = true;
	_ ->
		Show_cloth = false
end,
case UnbundTmp of 
	1 -> 
		Unbund = true;
	_ ->
		Unbund = false
end,
case Show_equip_ringTmp of 
	1 -> 
		Show_equip_ring = true;
	_ ->
		Show_equip_ring = false
end,
case Is_payedTmp of 
	1 -> 
		Is_payed = true;
	_ ->
		Is_payed = false
end,

	{p_role_attr, Role_id,common_tool:to_list(Role_name),Next_level_exp,Exp,Level,Five_ele_attr,common_tool:to_list(Last_login_location),Equips,Jungong,Charm,Couple_id,common_tool:to_list(Couple_name),Skin,Cur_energy,Max_energy,Remain_skill_points,Gold,Gold_bind,Silver,Silver_bind,Show_cloth,Moral_values,Gongxun,common_tool:to_list(Last_login_ip),Office_id,common_tool:to_list(Office_name),Unbund,Family_contribute,Active_points,Category,Show_equip_ring,Is_payed,Sum_prestige,Cur_prestige};

decode_p_role_attr(_) ->
	undefined.
encode_p_role_ext(Record) when is_record(Record, p_role_ext) ->
	#p_role_ext{role_id=Role_id,signature=Signature,birthday=Birthday,constellation=Constellation,country=Country,province=Province,city=City,blog=Blog,family_last_op_time=Family_last_op_time,last_login_time=Last_login_time,last_offline_time=Last_offline_time,role_name=Role_name,sex=Sex,ever_leave_xsc=Ever_leave_xsc} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, p_role_ext, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Signature =:= undefined of
		true ->
				SignatureFinal = <<>>;
		false ->
			SignatureFinal = Signature
	end,
	case Birthday =:= undefined of
		true ->
				BirthdayFinal = 0;
		false ->
			BirthdayFinal = Birthday
	end,
	case Constellation =:= undefined of
		true ->
				ConstellationFinal = 0;
		false ->
			ConstellationFinal = Constellation
	end,
	case Country =:= undefined of
		true ->
				CountryFinal = 0;
		false ->
			CountryFinal = Country
	end,
	case Province =:= undefined of
		true ->
				ProvinceFinal = 0;
		false ->
			ProvinceFinal = Province
	end,
	case City =:= undefined of
		true ->
				CityFinal = 0;
		false ->
			CityFinal = City
	end,
	case Blog =:= undefined of
		true ->
				BlogFinal = <<>>;
		false ->
			BlogFinal = Blog
	end,
	case Family_last_op_time =:= undefined of
		true ->
				Family_last_op_timeFinal = 0;
		false ->
			Family_last_op_timeFinal = Family_last_op_time
	end,
	case Last_login_time =:= undefined of
		true ->
				Last_login_timeFinal = undefined,
				exit({required_field_not_assigned, p_role_ext, last_login_time});
		false ->
			Last_login_timeFinal = Last_login_time
	end,
	case Last_offline_time =:= undefined of
		true ->
				Last_offline_timeFinal = undefined,
				exit({required_field_not_assigned, p_role_ext, last_offline_time});
		false ->
			Last_offline_timeFinal = Last_offline_time
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = undefined,
				exit({required_field_not_assigned, p_role_ext, role_name});
		false ->
			Role_nameFinal = Role_name
	end,
	case Sex =:= undefined of
		true ->
				SexFinal = undefined,
				exit({required_field_not_assigned, p_role_ext, sex});
		false ->
			SexFinal = Sex
	end,
	case Ever_leave_xsc =:= undefined of
		true ->
				Ever_leave_xscFinal = 0;
		false ->
		case Ever_leave_xsc of
			true ->
				Ever_leave_xscFinal = 1;
			false ->
				Ever_leave_xscFinal = 0
		end
	end,
	Signature2 = common_tool:to_binary(SignatureFinal),
	SignatureLen = erlang:byte_size(Signature2),
	Blog2 = common_tool:to_binary(BlogFinal),
	BlogLen = erlang:byte_size(Blog2),
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),

	<<Role_idFinal:32/signed,SignatureLen:16, Signature2/binary,BirthdayFinal:32/signed,ConstellationFinal:32/signed,CountryFinal:32/signed,ProvinceFinal:32/signed,CityFinal:32/signed,BlogLen:16, Blog2/binary,Family_last_op_timeFinal:32/signed,Last_login_timeFinal:32/signed,Last_offline_timeFinal:32/signed,Role_nameLen:16, Role_name2/binary,SexFinal:32/signed,Ever_leave_xscFinal:8>>;
encode_p_role_ext(_) -> 
	<<>>.

decode_p_role_ext(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,SignatureLen:16, Bin1/binary>> = Bin0,
	<<Signature:SignatureLen/binary,Birthday:32/signed,Constellation:32/signed,Country:32/signed,Province:32/signed,City:32/signed,BlogLen:16, Bin2/binary>> = Bin1,
	<<Blog:BlogLen/binary,Family_last_op_time:32/signed,Last_login_time:32/signed,Last_offline_time:32/signed,Role_nameLen:16, Bin3/binary>> = Bin2,
	<<Role_name:Role_nameLen/binary,Sex:32/signed,Ever_leave_xscTmp:8>> = Bin3,
case Ever_leave_xscTmp of 
	1 -> 
		Ever_leave_xsc = true;
	_ ->
		Ever_leave_xsc = false
end,

	{p_role_ext, Role_id,common_tool:to_list(Signature),Birthday,Constellation,Country,Province,City,common_tool:to_list(Blog),Family_last_op_time,Last_login_time,Last_offline_time,common_tool:to_list(Role_name),Sex,Ever_leave_xsc};

decode_p_role_ext(_) ->
	undefined.
encode_p_role(Record) when is_record(Record, p_role) ->
	#p_role{base=Base,fight=Fight,pos=Pos,attr=Attr,ext=Ext} = Record,
	case Base =:= undefined of
		true ->
				BaseFinal = undefined,
				exit({required_field_not_assigned, p_role, base});
		false ->
			BaseFinal = Base
	end,
	case Fight =:= undefined of
		true ->
				FightFinal = undefined,
				exit({required_field_not_assigned, p_role, fight});
		false ->
			FightFinal = Fight
	end,
	case Pos =:= undefined of
		true ->
				PosFinal = undefined,
				exit({required_field_not_assigned, p_role, pos});
		false ->
			PosFinal = Pos
	end,
	case Attr =:= undefined of
		true ->
				AttrFinal = undefined,
				exit({required_field_not_assigned, p_role, attr});
		false ->
			AttrFinal = Attr
	end,
	case Ext =:= undefined of
		true ->
				ExtFinal = undefined,
				exit({required_field_not_assigned, p_role, ext});
		false ->
			ExtFinal = Ext
	end,
	Base_bin = encode_p_role_base(BaseFinal),
	BinLen_base = erlang:byte_size(Base_bin),
	Fight_bin = encode_p_role_fight(FightFinal),
	BinLen_fight = erlang:byte_size(Fight_bin),
	Pos_bin = encode_p_role_pos(PosFinal),
	BinLen_pos = erlang:byte_size(Pos_bin),
	Attr_bin = encode_p_role_attr(AttrFinal),
	BinLen_attr = erlang:byte_size(Attr_bin),
	Ext_bin = encode_p_role_ext(ExtFinal),
	BinLen_ext = erlang:byte_size(Ext_bin),

	<<BinLen_base:32, Base_bin/binary,BinLen_fight:32, Fight_bin/binary,BinLen_pos:32, Pos_bin/binary,BinLen_attr:32, Attr_bin/binary,BinLen_ext:32, Ext_bin/binary>>;
encode_p_role(_) -> 
	<<>>.

decode_p_role(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SubBinSizebase:32, Bin1/binary>> = Bin0,
	<<SubBinbase:SubBinSizebase/binary, Bin2/binary>> = Bin1,
	Base = decode_p_role_base(SubBinbase),
	<<SubBinSizefight:32, Bin3/binary>> = Bin2,
	<<SubBinfight:SubBinSizefight/binary, Bin4/binary>> = Bin3,
	Fight = decode_p_role_fight(SubBinfight),
	<<SubBinSizepos:32, Bin5/binary>> = Bin4,
	<<SubBinpos:SubBinSizepos/binary, Bin6/binary>> = Bin5,
	Pos = decode_p_role_pos(SubBinpos),
	<<SubBinSizeattr:32, Bin7/binary>> = Bin6,
	<<SubBinattr:SubBinSizeattr/binary, Bin8/binary>> = Bin7,
	Attr = decode_p_role_attr(SubBinattr),
	<<_SubBinSizeext:32, SubBinext/binary>> = Bin8,
	Ext = decode_p_role_ext(SubBinext),

	{p_role, Base,Fight,Pos,Attr,Ext};

decode_p_role(_) ->
	undefined.
encode_p_skill(Record) when is_record(Record, p_skill) ->
	#p_skill{id=Id,name=Name,kind=Kind,effect_type=Effect_type,distance=Distance,attack_type=Attack_type,target_type=Target_type,max_level=Max_level,contain_common_attack=Contain_common_attack,category=Category,target_area=Target_area} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, p_skill, id});
		false ->
			IdFinal = Id
	end,
	case Name =:= undefined of
		true ->
				NameFinal = undefined,
				exit({required_field_not_assigned, p_skill, name});
		false ->
			NameFinal = Name
	end,
	case Kind =:= undefined of
		true ->
				KindFinal = undefined,
				exit({required_field_not_assigned, p_skill, kind});
		false ->
			KindFinal = Kind
	end,
	case Effect_type =:= undefined of
		true ->
				Effect_typeFinal = undefined,
				exit({required_field_not_assigned, p_skill, effect_type});
		false ->
			Effect_typeFinal = Effect_type
	end,
	case Distance =:= undefined of
		true ->
				DistanceFinal = 0;
		false ->
			DistanceFinal = Distance
	end,
	case Attack_type =:= undefined of
		true ->
				Attack_typeFinal = undefined,
				exit({required_field_not_assigned, p_skill, attack_type});
		false ->
			Attack_typeFinal = Attack_type
	end,
	case Target_type =:= undefined of
		true ->
				Target_typeFinal = undefined,
				exit({required_field_not_assigned, p_skill, target_type});
		false ->
			Target_typeFinal = Target_type
	end,
	case Max_level =:= undefined of
		true ->
				Max_levelFinal = undefined,
				exit({required_field_not_assigned, p_skill, max_level});
		false ->
			Max_levelFinal = Max_level
	end,
	case Contain_common_attack =:= undefined of
		true ->
				Contain_common_attackFinal = undefined,
				exit({required_field_not_assigned, p_skill, contain_common_attack});
		false ->
		case Contain_common_attack of
			true ->
				Contain_common_attackFinal = 1;
			false ->
				Contain_common_attackFinal = 0
		end
	end,
	case Category =:= undefined of
		true ->
				CategoryFinal = undefined,
				exit({required_field_not_assigned, p_skill, category});
		false ->
			CategoryFinal = Category
	end,
	case Target_area =:= undefined of
		true ->
				Target_areaFinal = 0;
		false ->
			Target_areaFinal = Target_area
	end,
	Name2 = common_tool:to_binary(NameFinal),
	NameLen = erlang:byte_size(Name2),

	<<IdFinal:32/signed,NameLen:16, Name2/binary,KindFinal:32/signed,Effect_typeFinal:32/signed,DistanceFinal:32/signed,Attack_typeFinal:32/signed,Target_typeFinal:32/signed,Max_levelFinal:32/signed,Contain_common_attackFinal:8,CategoryFinal:32/signed,Target_areaFinal:32/signed>>;
encode_p_skill(_) -> 
	<<>>.

decode_p_skill(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed,NameLen:16, Bin1/binary>> = Bin0,
	<<Name:NameLen/binary,Kind:32/signed,Effect_type:32/signed,Distance:32/signed,Attack_type:32/signed,Target_type:32/signed,Max_level:32/signed,Contain_common_attackTmp:8,Category:32/signed,Target_area:32/signed>> = Bin1,
case Contain_common_attackTmp of 
	1 -> 
		Contain_common_attack = true;
	_ ->
		Contain_common_attack = false
end,

	{p_skill, Id,common_tool:to_list(Name),Kind,Effect_type,Distance,Attack_type,Target_type,Max_level,Contain_common_attack,Category,Target_area};

decode_p_skill(_) ->
	undefined.
encode_p_skill_precondition(Record) when is_record(Record, p_skill_precondition) ->
	#p_skill_precondition{skill_id=Skill_id,skill_level=Skill_level} = Record,
	case Skill_id =:= undefined of
		true ->
				Skill_idFinal = undefined,
				exit({required_field_not_assigned, p_skill_precondition, skill_id});
		false ->
			Skill_idFinal = Skill_id
	end,
	case Skill_level =:= undefined of
		true ->
				Skill_levelFinal = undefined,
				exit({required_field_not_assigned, p_skill_precondition, skill_level});
		false ->
			Skill_levelFinal = Skill_level
	end,

	<<Skill_idFinal:32/signed,Skill_levelFinal:32/signed>>;
encode_p_skill_precondition(_) -> 
	<<>>.

decode_p_skill_precondition(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Skill_id:32/signed,Skill_level:32/signed>> = Bin0,

	{p_skill_precondition, Skill_id,Skill_level};

decode_p_skill_precondition(_) ->
	undefined.
encode_p_skill_level(Record) when is_record(Record, p_skill_level) ->
	#p_skill_level{skill_id=Skill_id,level=Level,premise_point=Premise_point,pre_condition=Pre_condition,cool_time=Cool_time,category=Category,premise_role_level=Premise_role_level,need_item=Need_item,need_silver=Need_silver,consume_exp=Consume_exp,effects=Effects,buffs=Buffs,consume_mp=Consume_mp,item_consume=Item_consume} = Record,
	case Skill_id =:= undefined of
		true ->
				Skill_idFinal = undefined,
				exit({required_field_not_assigned, p_skill_level, skill_id});
		false ->
			Skill_idFinal = Skill_id
	end,
	case Level =:= undefined of
		true ->
				LevelFinal = undefined,
				exit({required_field_not_assigned, p_skill_level, level});
		false ->
			LevelFinal = Level
	end,
	case Premise_point =:= undefined of
		true ->
				Premise_pointFinal = undefined,
				exit({required_field_not_assigned, p_skill_level, premise_point});
		false ->
			Premise_pointFinal = Premise_point
	end,
	case Pre_condition =:= undefined of
		true ->
			Pre_conditionFinal = [];
		false ->
			Pre_conditionFinal = Pre_condition
	end,
	case Cool_time =:= undefined of
		true ->
				Cool_timeFinal = undefined,
				exit({required_field_not_assigned, p_skill_level, cool_time});
		false ->
			Cool_timeFinal = Cool_time
	end,
	case Category =:= undefined of
		true ->
				CategoryFinal = undefined,
				exit({required_field_not_assigned, p_skill_level, category});
		false ->
			CategoryFinal = Category
	end,
	case Premise_role_level =:= undefined of
		true ->
				Premise_role_levelFinal = undefined,
				exit({required_field_not_assigned, p_skill_level, premise_role_level});
		false ->
			Premise_role_levelFinal = Premise_role_level
	end,
	case Need_item =:= undefined of
		true ->
				Need_itemFinal = 0;
		false ->
			Need_itemFinal = Need_item
	end,
	case Need_silver =:= undefined of
		true ->
				Need_silverFinal = 0;
		false ->
			Need_silverFinal = Need_silver
	end,
	case Consume_exp =:= undefined of
		true ->
				Consume_expFinal = 0;
		false ->
			Consume_expFinal = Consume_exp
	end,
	case Effects =:= undefined of
		true ->
			EffectsFinal = [];
		false ->
			EffectsFinal = Effects
	end,
	case Buffs =:= undefined of
		true ->
			BuffsFinal = [];
		false ->
			BuffsFinal = Buffs
	end,
	case Consume_mp =:= undefined of
		true ->
				Consume_mpFinal = undefined,
				exit({required_field_not_assigned, p_skill_level, consume_mp});
		false ->
			Consume_mpFinal = Consume_mp
	end,
	case Item_consume =:= undefined of
		true ->
			Item_consumeFinal = [];
		false ->
			Item_consumeFinal = Item_consume
	end,
	Pre_condition_bin = encode_p_skill_preconditions(Pre_conditionFinal, <<>>),
	SizePre_conditionFinal = erlang:length(Pre_conditionFinal),
	BinLen_pre_condition = erlang:byte_size(Pre_condition_bin),
	Effects_bin = encode_int32s(EffectsFinal, <<>>),
	SizeEffectsFinal = erlang:length(EffectsFinal),
	BinLen_effects = erlang:byte_size(Effects_bin),
	Buffs_bin = encode_int32s(BuffsFinal, <<>>),
	SizeBuffsFinal = erlang:length(BuffsFinal),
	BinLen_buffs = erlang:byte_size(Buffs_bin),
	Item_consume_bin = encode_p_skill_item_consumes(Item_consumeFinal, <<>>),
	SizeItem_consumeFinal = erlang:length(Item_consumeFinal),
	BinLen_item_consume = erlang:byte_size(Item_consume_bin),

	<<Skill_idFinal:32/signed,LevelFinal:32/signed,Premise_pointFinal:32/signed,SizePre_conditionFinal:16, BinLen_pre_condition:32, Pre_condition_bin/binary,Cool_timeFinal:32/signed,CategoryFinal:32/signed,Premise_role_levelFinal:32/signed,Need_itemFinal:32/signed,Need_silverFinal:32/signed,Consume_expFinal:32/signed,SizeEffectsFinal:16, BinLen_effects:32, Effects_bin/binary,SizeBuffsFinal:16, BinLen_buffs:32, Buffs_bin/binary,Consume_mpFinal:32/signed,SizeItem_consumeFinal:16, BinLen_item_consume:32, Item_consume_bin/binary>>;
encode_p_skill_level(_) -> 
	<<>>.

decode_p_skill_level(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Skill_id:32/signed,Level:32/signed,Premise_point:32/signed,_Sizepre_condition:16, BinLenpre_condition:32, Bin1/binary>> = Bin0,
	<<SubBinpre_condition:BinLenpre_condition/binary, Bin2/binary>> = Bin1, 
	Pre_condition = lists:reverse(decode_p_skill_preconditions(SubBinpre_condition, [])),
	<<Cool_time:32/signed,Category:32/signed,Premise_role_level:32/signed,Need_item:32/signed,Need_silver:32/signed,Consume_exp:32/signed,_Sizeeffects:16, BinLeneffects:32, Bin3/binary>> = Bin2,
	<<SubBineffects:BinLeneffects/binary, Bin4/binary>> = Bin3, 
	Effects = lists:reverse(decode_int32s(SubBineffects, [])),
	<<_Sizebuffs:16, BinLenbuffs:32, Bin5/binary>> = Bin4,
	<<SubBinbuffs:BinLenbuffs/binary, Bin6/binary>> = Bin5, 
	Buffs = lists:reverse(decode_int32s(SubBinbuffs, [])),
	<<Consume_mp:32/signed,_Sizeitem_consume:16, _BinLenitem_consume:32, SubBinitem_consume/binary>> = Bin6,
	Item_consume = lists:reverse(decode_p_skill_item_consumes(SubBinitem_consume, [])),

	{p_skill_level, Skill_id,Level,Premise_point,Pre_condition,Cool_time,Category,Premise_role_level,Need_item,Need_silver,Consume_exp,Effects,Buffs,Consume_mp,Item_consume};

decode_p_skill_level(_) ->
	undefined.
encode_p_skill_item_consume(Record) when is_record(Record, p_skill_item_consume) ->
	#p_skill_item_consume{item_typeid=Item_typeid,number=Number} = Record,
	case Item_typeid =:= undefined of
		true ->
				Item_typeidFinal = undefined,
				exit({required_field_not_assigned, p_skill_item_consume, item_typeid});
		false ->
			Item_typeidFinal = Item_typeid
	end,
	case Number =:= undefined of
		true ->
				NumberFinal = undefined,
				exit({required_field_not_assigned, p_skill_item_consume, number});
		false ->
			NumberFinal = Number
	end,

	<<Item_typeidFinal:32/signed,NumberFinal:32/signed>>;
encode_p_skill_item_consume(_) -> 
	<<>>.

decode_p_skill_item_consume(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Item_typeid:32/signed,Number:32/signed>> = Bin0,

	{p_skill_item_consume, Item_typeid,Number};

decode_p_skill_item_consume(_) ->
	undefined.
encode_p_effect(Record) when is_record(Record, p_effect) ->
	#p_effect{effect_id=Effect_id,effect_type=Effect_type,calc_type=Calc_type,absolute_or_rate=Absolute_or_rate,value=Value,value_out_type=Value_out_type,probability=Probability} = Record,
	case Effect_id =:= undefined of
		true ->
				Effect_idFinal = undefined,
				exit({required_field_not_assigned, p_effect, effect_id});
		false ->
			Effect_idFinal = Effect_id
	end,
	case Effect_type =:= undefined of
		true ->
				Effect_typeFinal = undefined,
				exit({required_field_not_assigned, p_effect, effect_type});
		false ->
			Effect_typeFinal = Effect_type
	end,
	case Calc_type =:= undefined of
		true ->
				Calc_typeFinal = undefined,
				exit({required_field_not_assigned, p_effect, calc_type});
		false ->
			Calc_typeFinal = Calc_type
	end,
	case Absolute_or_rate =:= undefined of
		true ->
				Absolute_or_rateFinal = undefined,
				exit({required_field_not_assigned, p_effect, absolute_or_rate});
		false ->
			Absolute_or_rateFinal = Absolute_or_rate
	end,
	case Value =:= undefined of
		true ->
				ValueFinal = undefined,
				exit({required_field_not_assigned, p_effect, value});
		false ->
			ValueFinal = Value
	end,
	case Value_out_type =:= undefined of
		true ->
				Value_out_typeFinal = undefined,
				exit({required_field_not_assigned, p_effect, value_out_type});
		false ->
			Value_out_typeFinal = Value_out_type
	end,
	case Probability =:= undefined of
		true ->
				ProbabilityFinal = 100;
		false ->
			ProbabilityFinal = Probability
	end,

	<<Effect_idFinal:32/signed,Effect_typeFinal:32/signed,Calc_typeFinal:32/signed,Absolute_or_rateFinal:32/signed,ValueFinal:32/signed,Value_out_typeFinal:32/signed,ProbabilityFinal:32/signed>>;
encode_p_effect(_) -> 
	<<>>.

decode_p_effect(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Effect_id:32/signed,Effect_type:32/signed,Calc_type:32/signed,Absolute_or_rate:32/signed,Value:32/signed,Value_out_type:32/signed,Probability:32/signed>> = Bin0,

	{p_effect, Effect_id,Effect_type,Calc_type,Absolute_or_rate,Value,Value_out_type,Probability};

decode_p_effect(_) ->
	undefined.
encode_p_buf(Record) when is_record(Record, p_buf) ->
	#p_buf{buff_id=Buff_id,level=Level,absolute_or_rate=Absolute_or_rate,value=Value,last_type=Last_type,last_value=Last_value,last_interval=Last_interval,can_remove=Can_remove,kind=Kind,buff_type=Buff_type,send_to_client=Send_to_client,is_debuff=Is_debuff} = Record,
	case Buff_id =:= undefined of
		true ->
				Buff_idFinal = undefined,
				exit({required_field_not_assigned, p_buf, buff_id});
		false ->
			Buff_idFinal = Buff_id
	end,
	case Level =:= undefined of
		true ->
				LevelFinal = undefined,
				exit({required_field_not_assigned, p_buf, level});
		false ->
			LevelFinal = Level
	end,
	case Absolute_or_rate =:= undefined of
		true ->
				Absolute_or_rateFinal = 0;
		false ->
			Absolute_or_rateFinal = Absolute_or_rate
	end,
	case Value =:= undefined of
		true ->
				ValueFinal = 0;
		false ->
			ValueFinal = Value
	end,
	case Last_type =:= undefined of
		true ->
				Last_typeFinal = undefined,
				exit({required_field_not_assigned, p_buf, last_type});
		false ->
			Last_typeFinal = Last_type
	end,
	case Last_value =:= undefined of
		true ->
				Last_valueFinal = undefined,
				exit({required_field_not_assigned, p_buf, last_value});
		false ->
			Last_valueFinal = Last_value
	end,
	case Last_interval =:= undefined of
		true ->
				Last_intervalFinal = undefined,
				exit({required_field_not_assigned, p_buf, last_interval});
		false ->
			Last_intervalFinal = Last_interval
	end,
	case Can_remove =:= undefined of
		true ->
				Can_removeFinal = undefined,
				exit({required_field_not_assigned, p_buf, can_remove});
		false ->
		case Can_remove of
			true ->
				Can_removeFinal = 1;
			false ->
				Can_removeFinal = 0
		end
	end,
	case Kind =:= undefined of
		true ->
				KindFinal = undefined,
				exit({required_field_not_assigned, p_buf, kind});
		false ->
			KindFinal = Kind
	end,
	case Buff_type =:= undefined of
		true ->
				Buff_typeFinal = undefined,
				exit({required_field_not_assigned, p_buf, buff_type});
		false ->
			Buff_typeFinal = Buff_type
	end,
	case Send_to_client =:= undefined of
		true ->
				Send_to_clientFinal = 0;
		false ->
		case Send_to_client of
			true ->
				Send_to_clientFinal = 1;
			false ->
				Send_to_clientFinal = 0
		end
	end,
	case Is_debuff =:= undefined of
		true ->
				Is_debuffFinal = 0;
		false ->
		case Is_debuff of
			true ->
				Is_debuffFinal = 1;
			false ->
				Is_debuffFinal = 0
		end
	end,

	<<Buff_idFinal:32/signed,LevelFinal:32/signed,Absolute_or_rateFinal:32/signed,ValueFinal:32/signed,Last_typeFinal:32/signed,Last_valueFinal:32/signed,Last_intervalFinal:32/signed,Can_removeFinal:8,KindFinal:32/signed,Buff_typeFinal:32/signed,Send_to_clientFinal:8,Is_debuffFinal:8>>;
encode_p_buf(_) -> 
	<<>>.

decode_p_buf(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Buff_id:32/signed,Level:32/signed,Absolute_or_rate:32/signed,Value:32/signed,Last_type:32/signed,Last_value:32/signed,Last_interval:32/signed,Can_removeTmp:8,Kind:32/signed,Buff_type:32/signed,Send_to_clientTmp:8,Is_debuffTmp:8>> = Bin0,
case Can_removeTmp of 
	1 -> 
		Can_remove = true;
	_ ->
		Can_remove = false
end,
case Send_to_clientTmp of 
	1 -> 
		Send_to_client = true;
	_ ->
		Send_to_client = false
end,
case Is_debuffTmp of 
	1 -> 
		Is_debuff = true;
	_ ->
		Is_debuff = false
end,

	{p_buf, Buff_id,Level,Absolute_or_rate,Value,Last_type,Last_value,Last_interval,Can_remove,Kind,Buff_type,Send_to_client,Is_debuff};

decode_p_buf(_) ->
	undefined.
encode_p_map_stall(Record) when is_record(Record, p_map_stall) ->
	#p_map_stall{role_id=Role_id,role_name=Role_name,stall_name=Stall_name,mode=Mode,pos=Pos} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, p_map_stall, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = undefined,
				exit({required_field_not_assigned, p_map_stall, role_name});
		false ->
			Role_nameFinal = Role_name
	end,
	case Stall_name =:= undefined of
		true ->
				Stall_nameFinal = undefined,
				exit({required_field_not_assigned, p_map_stall, stall_name});
		false ->
			Stall_nameFinal = Stall_name
	end,
	case Mode =:= undefined of
		true ->
				ModeFinal = undefined,
				exit({required_field_not_assigned, p_map_stall, mode});
		false ->
			ModeFinal = Mode
	end,
	case Pos =:= undefined of
		true ->
				PosFinal = undefined,
				exit({required_field_not_assigned, p_map_stall, pos});
		false ->
			PosFinal = Pos
	end,
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),
	Stall_name2 = common_tool:to_binary(Stall_nameFinal),
	Stall_nameLen = erlang:byte_size(Stall_name2),
	Pos_bin = encode_p_pos(PosFinal),
	BinLen_pos = erlang:byte_size(Pos_bin),

	<<Role_idFinal:32/signed,Role_nameLen:16, Role_name2/binary,Stall_nameLen:16, Stall_name2/binary,ModeFinal:32/signed,BinLen_pos:32, Pos_bin/binary>>;
encode_p_map_stall(_) -> 
	<<>>.

decode_p_map_stall(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,Role_nameLen:16, Bin1/binary>> = Bin0,
	<<Role_name:Role_nameLen/binary,Stall_nameLen:16, Bin2/binary>> = Bin1,
	<<Stall_name:Stall_nameLen/binary,Mode:32/signed,_SubBinSizepos:32, SubBinpos/binary>> = Bin2,
	Pos = decode_p_pos(SubBinpos),

	{p_map_stall, Role_id,common_tool:to_list(Role_name),common_tool:to_list(Stall_name),Mode,Pos};

decode_p_map_stall(_) ->
	undefined.
encode_p_pos(Record) when is_record(Record, p_pos) ->
	#p_pos{tx=Tx,ty=Ty,px=Px,py=Py,dir=Dir} = Record,
	case Tx =:= undefined of
		true ->
				TxFinal = undefined,
				exit({required_field_not_assigned, p_pos, tx});
		false ->
			TxFinal = Tx
	end,
	case Ty =:= undefined of
		true ->
				TyFinal = undefined,
				exit({required_field_not_assigned, p_pos, ty});
		false ->
			TyFinal = Ty
	end,
	case Px =:= undefined of
		true ->
				PxFinal = 0;
		false ->
			PxFinal = Px
	end,
	case Py =:= undefined of
		true ->
				PyFinal = 0;
		false ->
			PyFinal = Py
	end,
	case Dir =:= undefined of
		true ->
				DirFinal = 0;
		false ->
			DirFinal = Dir
	end,

	<<TxFinal:32/signed,TyFinal:32/signed,PxFinal:32/signed,PyFinal:32/signed,DirFinal:32/signed>>;
encode_p_pos(_) -> 
	<<>>.

decode_p_pos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Tx:32/signed,Ty:32/signed,Px:32/signed,Py:32/signed,Dir:32/signed>> = Bin0,

	{p_pos, Tx,Ty,Px,Py,Dir};

decode_p_pos(_) ->
	undefined.
encode_p_map_tile(Record) when is_record(Record, p_map_tile) ->
	#p_map_tile{tx=Tx,ty=Ty} = Record,
	case Tx =:= undefined of
		true ->
				TxFinal = undefined,
				exit({required_field_not_assigned, p_map_tile, tx});
		false ->
			TxFinal = Tx
	end,
	case Ty =:= undefined of
		true ->
				TyFinal = undefined,
				exit({required_field_not_assigned, p_map_tile, ty});
		false ->
			TyFinal = Ty
	end,

	<<TxFinal:32/signed,TyFinal:32/signed>>;
encode_p_map_tile(_) -> 
	<<>>.

decode_p_map_tile(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Tx:32/signed,Ty:32/signed>> = Bin0,

	{p_map_tile, Tx,Ty};

decode_p_map_tile(_) ->
	undefined.
encode_p_walk_path(Record) when is_record(Record, p_walk_path) ->
	#p_walk_path{bpx=Bpx,bpy=Bpy,path=Path,epx=Epx,epy=Epy} = Record,
	case Bpx =:= undefined of
		true ->
				BpxFinal = undefined,
				exit({required_field_not_assigned, p_walk_path, bpx});
		false ->
			BpxFinal = Bpx
	end,
	case Bpy =:= undefined of
		true ->
				BpyFinal = undefined,
				exit({required_field_not_assigned, p_walk_path, bpy});
		false ->
			BpyFinal = Bpy
	end,
	case Path =:= undefined of
		true ->
			PathFinal = [];
		false ->
			PathFinal = Path
	end,
	case Epx =:= undefined of
		true ->
				EpxFinal = undefined,
				exit({required_field_not_assigned, p_walk_path, epx});
		false ->
			EpxFinal = Epx
	end,
	case Epy =:= undefined of
		true ->
				EpyFinal = undefined,
				exit({required_field_not_assigned, p_walk_path, epy});
		false ->
			EpyFinal = Epy
	end,
	Path_bin = encode_p_map_tiles(PathFinal, <<>>),
	SizePathFinal = erlang:length(PathFinal),
	BinLen_path = erlang:byte_size(Path_bin),

	<<BpxFinal:32/signed,BpyFinal:32/signed,SizePathFinal:16, BinLen_path:32, Path_bin/binary,EpxFinal:32/signed,EpyFinal:32/signed>>;
encode_p_walk_path(_) -> 
	<<>>.

decode_p_walk_path(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Bpx:32/signed,Bpy:32/signed,_Sizepath:16, BinLenpath:32, Bin1/binary>> = Bin0,
	<<SubBinpath:BinLenpath/binary, Bin2/binary>> = Bin1, 
	Path = lists:reverse(decode_p_map_tiles(SubBinpath, [])),
	<<Epx:32/signed,Epy:32/signed>> = Bin2,

	{p_walk_path, Bpx,Bpy,Path,Epx,Epy};

decode_p_walk_path(_) ->
	undefined.
encode_p_map_role(Record) when is_record(Record, p_map_role) ->
	#p_map_role{role_id=Role_id,role_name=Role_name,faction_id=Faction_id,cur_title=Cur_title,family_id=Family_id,family_name=Family_name,pos=Pos,last_walk_path=Last_walk_path,last_key_path=Last_key_path,hp=Hp,max_hp=Max_hp,mp=Mp,max_mp=Max_mp,skin=Skin,move_speed=Move_speed,team_id=Team_id,level=Level,pk_point=Pk_point,state=State,gray_name=Gray_name,state_buffs=State_buffs,show_cloth=Show_cloth,cur_title_color=Cur_title_color,equip_ring_color=Equip_ring_color,show_equip_ring=Show_equip_ring,vip_level=Vip_level,mount_color=Mount_color,sex=Sex,category=Category} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, p_map_role, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = undefined,
				exit({required_field_not_assigned, p_map_role, role_name});
		false ->
			Role_nameFinal = Role_name
	end,
	case Faction_id =:= undefined of
		true ->
				Faction_idFinal = undefined,
				exit({required_field_not_assigned, p_map_role, faction_id});
		false ->
			Faction_idFinal = Faction_id
	end,
	case Cur_title =:= undefined of
		true ->
				Cur_titleFinal = <<>>;
		false ->
			Cur_titleFinal = Cur_title
	end,
	case Family_id =:= undefined of
		true ->
				Family_idFinal = undefined,
				exit({required_field_not_assigned, p_map_role, family_id});
		false ->
			Family_idFinal = Family_id
	end,
	case Family_name =:= undefined of
		true ->
				Family_nameFinal = undefined,
				exit({required_field_not_assigned, p_map_role, family_name});
		false ->
			Family_nameFinal = Family_name
	end,
	case Pos =:= undefined of
		true ->
				PosFinal = undefined,
				exit({required_field_not_assigned, p_map_role, pos});
		false ->
			PosFinal = Pos
	end,
	case Last_walk_path =:= undefined of
		true ->
				Last_walk_pathFinal = 0;
		false ->
			Last_walk_pathFinal = Last_walk_path
	end,
	case Last_key_path =:= undefined of
		true ->
				Last_key_pathFinal = 0;
		false ->
			Last_key_pathFinal = Last_key_path
	end,
	case Hp =:= undefined of
		true ->
				HpFinal = undefined,
				exit({required_field_not_assigned, p_map_role, hp});
		false ->
			HpFinal = Hp
	end,
	case Max_hp =:= undefined of
		true ->
				Max_hpFinal = undefined,
				exit({required_field_not_assigned, p_map_role, max_hp});
		false ->
			Max_hpFinal = Max_hp
	end,
	case Mp =:= undefined of
		true ->
				MpFinal = undefined,
				exit({required_field_not_assigned, p_map_role, mp});
		false ->
			MpFinal = Mp
	end,
	case Max_mp =:= undefined of
		true ->
				Max_mpFinal = undefined,
				exit({required_field_not_assigned, p_map_role, max_mp});
		false ->
			Max_mpFinal = Max_mp
	end,
	case Skin =:= undefined of
		true ->
				SkinFinal = undefined,
				exit({required_field_not_assigned, p_map_role, skin});
		false ->
			SkinFinal = Skin
	end,
	case Move_speed =:= undefined of
		true ->
				Move_speedFinal = undefined,
				exit({required_field_not_assigned, p_map_role, move_speed});
		false ->
			Move_speedFinal = Move_speed
	end,
	case Team_id =:= undefined of
		true ->
				Team_idFinal = 0;
		false ->
			Team_idFinal = Team_id
	end,
	case Level =:= undefined of
		true ->
				LevelFinal = undefined,
				exit({required_field_not_assigned, p_map_role, level});
		false ->
			LevelFinal = Level
	end,
	case Pk_point =:= undefined of
		true ->
				Pk_pointFinal = 0;
		false ->
			Pk_pointFinal = Pk_point
	end,
	case State =:= undefined of
		true ->
				StateFinal = 0;
		false ->
			StateFinal = State
	end,
	case Gray_name =:= undefined of
		true ->
				Gray_nameFinal = undefined,
				exit({required_field_not_assigned, p_map_role, gray_name});
		false ->
		case Gray_name of
			true ->
				Gray_nameFinal = 1;
			false ->
				Gray_nameFinal = 0
		end
	end,
	case State_buffs =:= undefined of
		true ->
			State_buffsFinal = [];
		false ->
			State_buffsFinal = State_buffs
	end,
	case Show_cloth =:= undefined of
		true ->
				Show_clothFinal = undefined,
				exit({required_field_not_assigned, p_map_role, show_cloth});
		false ->
		case Show_cloth of
			true ->
				Show_clothFinal = 1;
			false ->
				Show_clothFinal = 0
		end
	end,
	case Cur_title_color =:= undefined of
		true ->
				Cur_title_colorFinal = "ffffff";
		false ->
			Cur_title_colorFinal = Cur_title_color
	end,
	case Equip_ring_color =:= undefined of
		true ->
				Equip_ring_colorFinal = 0;
		false ->
			Equip_ring_colorFinal = Equip_ring_color
	end,
	case Show_equip_ring =:= undefined of
		true ->
				Show_equip_ringFinal = 1;
		false ->
			case Show_equip_ring of
				true ->
					Show_equip_ringFinal = 1;
				false ->
					Show_equip_ringFinal = 0
			end
	end,
	case Vip_level =:= undefined of
		true ->
				Vip_levelFinal = 0;
		false ->
			Vip_levelFinal = Vip_level
	end,
	case Mount_color =:= undefined of
		true ->
				Mount_colorFinal = 0;
		false ->
			Mount_colorFinal = Mount_color
	end,
	case Sex =:= undefined of
		true ->
				SexFinal = 0;
		false ->
			SexFinal = Sex
	end,
	case Category =:= undefined of
		true ->
				CategoryFinal = 0;
		false ->
			CategoryFinal = Category
	end,
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),
	Cur_title2 = common_tool:to_binary(Cur_titleFinal),
	Cur_titleLen = erlang:byte_size(Cur_title2),
	Family_name2 = common_tool:to_binary(Family_nameFinal),
	Family_nameLen = erlang:byte_size(Family_name2),
	Pos_bin = encode_p_pos(PosFinal),
	BinLen_pos = erlang:byte_size(Pos_bin),
	Last_walk_path_bin = encode_p_walk_path(Last_walk_pathFinal),
	BinLen_last_walk_path = erlang:byte_size(Last_walk_path_bin),
	Last_key_path_bin = encode_p_pos(Last_key_pathFinal),
	BinLen_last_key_path = erlang:byte_size(Last_key_path_bin),
	Skin_bin = encode_p_skin(SkinFinal),
	BinLen_skin = erlang:byte_size(Skin_bin),
	State_buffs_bin = encode_p_actor_bufs(State_buffsFinal, <<>>),
	SizeState_buffsFinal = erlang:length(State_buffsFinal),
	BinLen_state_buffs = erlang:byte_size(State_buffs_bin),
	Cur_title_color2 = common_tool:to_binary(Cur_title_colorFinal),
	Cur_title_colorLen = erlang:byte_size(Cur_title_color2),

	<<Role_idFinal:32/signed,Role_nameLen:16, Role_name2/binary,Faction_idFinal:32/signed,Cur_titleLen:16, Cur_title2/binary,Family_idFinal:32/signed,Family_nameLen:16, Family_name2/binary,BinLen_pos:32, Pos_bin/binary,BinLen_last_walk_path:32, Last_walk_path_bin/binary,BinLen_last_key_path:32, Last_key_path_bin/binary,HpFinal:32/signed,Max_hpFinal:32/signed,MpFinal:32/signed,Max_mpFinal:32/signed,BinLen_skin:32, Skin_bin/binary,Move_speedFinal:32/signed,Team_idFinal:32/signed,LevelFinal:32/signed,Pk_pointFinal:32/signed,StateFinal:32/signed,Gray_nameFinal:8,SizeState_buffsFinal:16, BinLen_state_buffs:32, State_buffs_bin/binary,Show_clothFinal:8,Cur_title_colorLen:16, Cur_title_color2/binary,Equip_ring_colorFinal:32/signed,Show_equip_ringFinal:8,Vip_levelFinal:32/signed,Mount_colorFinal:32/signed,SexFinal:32/signed,CategoryFinal:32/signed>>;
encode_p_map_role(_) -> 
	<<>>.

decode_p_map_role(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,Role_nameLen:16, Bin1/binary>> = Bin0,
	<<Role_name:Role_nameLen/binary,Faction_id:32/signed,Cur_titleLen:16, Bin2/binary>> = Bin1,
	<<Cur_title:Cur_titleLen/binary,Family_id:32/signed,Family_nameLen:16, Bin3/binary>> = Bin2,
	<<Family_name:Family_nameLen/binary,SubBinSizepos:32, Bin4/binary>> = Bin3,
	<<SubBinpos:SubBinSizepos/binary, Bin5/binary>> = Bin4,
	Pos = decode_p_pos(SubBinpos),
	<<SubBinSizelast_walk_path:32, Bin6/binary>> = Bin5,
	<<SubBinlast_walk_path:SubBinSizelast_walk_path/binary, Bin7/binary>> = Bin6,
	Last_walk_path = decode_p_walk_path(SubBinlast_walk_path),
	<<SubBinSizelast_key_path:32, Bin8/binary>> = Bin7,
	<<SubBinlast_key_path:SubBinSizelast_key_path/binary, Bin9/binary>> = Bin8,
	Last_key_path = decode_p_pos(SubBinlast_key_path),
	<<Hp:32/signed,Max_hp:32/signed,Mp:32/signed,Max_mp:32/signed,SubBinSizeskin:32, Bin10/binary>> = Bin9,
	<<SubBinskin:SubBinSizeskin/binary, Bin11/binary>> = Bin10,
	Skin = decode_p_skin(SubBinskin),
	<<Move_speed:32/signed,Team_id:32/signed,Level:32/signed,Pk_point:32/signed,State:32/signed,Gray_nameTmp:8,_Sizestate_buffs:16, BinLenstate_buffs:32, Bin12/binary>> = Bin11,
	<<SubBinstate_buffs:BinLenstate_buffs/binary, Bin13/binary>> = Bin12, 
	State_buffs = lists:reverse(decode_p_actor_bufs(SubBinstate_buffs, [])),
<<Show_clothTmp:8,Cur_title_colorLen:16, Bin14/binary>> = Bin13,
	<<Cur_title_color:Cur_title_colorLen/binary,Equip_ring_color:32/signed,Show_equip_ringTmp:8,Vip_level:32/signed,Mount_color:32/signed,Sex:32/signed,Category:32/signed>> = Bin14,
case Gray_nameTmp of 
	1 -> 
		Gray_name = true;
	_ ->
		Gray_name = false
end,
case Show_clothTmp of 
	1 -> 
		Show_cloth = true;
	_ ->
		Show_cloth = false
end,
case Show_equip_ringTmp of 
	1 -> 
		Show_equip_ring = true;
	_ ->
		Show_equip_ring = false
end,

	{p_map_role, Role_id,common_tool:to_list(Role_name),Faction_id,common_tool:to_list(Cur_title),Family_id,common_tool:to_list(Family_name),Pos,Last_walk_path,Last_key_path,Hp,Max_hp,Mp,Max_mp,Skin,Move_speed,Team_id,Level,Pk_point,State,Gray_name,State_buffs,Show_cloth,common_tool:to_list(Cur_title_color),Equip_ring_color,Show_equip_ring,Vip_level,Mount_color,Sex,Category};

decode_p_map_role(_) ->
	undefined.
encode_s_error_common_toc(Record) when is_record(Record, s_error_common_toc) ->
	#s_error_common_toc{msg=Msg} = Record,
	case Msg =:= undefined of
		true ->
				MsgFinal = undefined,
				exit({required_field_not_assigned, s_error_common_toc, msg});
		false ->
			MsgFinal = Msg
	end,
	Msg2 = common_tool:to_binary(MsgFinal),
	MsgLen = erlang:byte_size(Msg2),

	<<MsgLen:16, Msg2/binary>>;
encode_s_error_common_toc(_) -> 
	<<>>.

decode_s_error_common_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<MsgLen:16, Bin1/binary>> = Bin0,
	<<Msg:MsgLen/binary>> = Bin1,

	{s_error_common_toc, common_tool:to_list(Msg)};

decode_s_error_common_toc(_) ->
	undefined.
encode_s_chat_leave_channel_tos(Record) when is_record(Record, s_chat_leave_channel_tos) ->
	#s_chat_leave_channel_tos{role_id=Role_id,channel_sign=Channel_sign} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, s_chat_leave_channel_tos, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Channel_sign =:= undefined of
		true ->
				Channel_signFinal = undefined,
				exit({required_field_not_assigned, s_chat_leave_channel_tos, channel_sign});
		false ->
			Channel_signFinal = Channel_sign
	end,
	Channel_sign2 = common_tool:to_binary(Channel_signFinal),
	Channel_signLen = erlang:byte_size(Channel_sign2),

	<<Role_idFinal:32/signed,Channel_signLen:16, Channel_sign2/binary>>;
encode_s_chat_leave_channel_tos(_) -> 
	<<>>.

decode_s_chat_leave_channel_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,Channel_signLen:16, Bin1/binary>> = Bin0,
	<<Channel_sign:Channel_signLen/binary>> = Bin1,

	{s_chat_leave_channel_tos, Role_id,common_tool:to_list(Channel_sign)};

decode_s_chat_leave_channel_tos(_) ->
	undefined.
encode_s_chat_join_channel_tos(Record) when is_record(Record, s_chat_join_channel_tos) ->
	#s_chat_join_channel_tos{channel_info=Channel_info,role_info=Role_info} = Record,
	case Channel_info =:= undefined of
		true ->
				Channel_infoFinal = undefined,
				exit({required_field_not_assigned, s_chat_join_channel_tos, channel_info});
		false ->
			Channel_infoFinal = Channel_info
	end,
	case Role_info =:= undefined of
		true ->
				Role_infoFinal = 0;
		false ->
			Role_infoFinal = Role_info
	end,
	Channel_info_bin = encode_p_channel_info(Channel_infoFinal),
	BinLen_channel_info = erlang:byte_size(Channel_info_bin),
	Role_info_bin = encode_p_chat_role(Role_infoFinal),
	BinLen_role_info = erlang:byte_size(Role_info_bin),

	<<BinLen_channel_info:32, Channel_info_bin/binary,BinLen_role_info:32, Role_info_bin/binary>>;
encode_s_chat_join_channel_tos(_) -> 
	<<>>.

decode_s_chat_join_channel_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SubBinSizechannel_info:32, Bin1/binary>> = Bin0,
	<<SubBinchannel_info:SubBinSizechannel_info/binary, Bin2/binary>> = Bin1,
	Channel_info = decode_p_channel_info(SubBinchannel_info),
	<<_SubBinSizerole_info:32, SubBinrole_info/binary>> = Bin2,
	Role_info = decode_p_chat_role(SubBinrole_info),

	{s_chat_join_channel_tos, Channel_info,Role_info};

decode_s_chat_join_channel_tos(_) ->
	undefined.
encode_p_map_dropthing(Record) when is_record(Record, p_map_dropthing) ->
	#p_map_dropthing{id=Id,ismoney=Ismoney,bind=Bind,num=Num,roles=Roles,pos=Pos,money=Money,goodsid=Goodsid,colour=Colour,goodstype=Goodstype,goodstypeid=Goodstypeid,drop_property=Drop_property} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, p_map_dropthing, id});
		false ->
			IdFinal = Id
	end,
	case Ismoney =:= undefined of
		true ->
				IsmoneyFinal = 0;
		false ->
		case Ismoney of
			true ->
				IsmoneyFinal = 1;
			false ->
				IsmoneyFinal = 0
		end
	end,
	case Bind =:= undefined of
		true ->
				BindFinal = 0;
		false ->
			case Bind of
				true ->
					BindFinal = 1;
				false ->
					BindFinal = 0
			end
	end,
	case Num =:= undefined of
		true ->
				NumFinal = 1;
		false ->
			NumFinal = Num
	end,
	case Roles =:= undefined of
		true ->
			RolesFinal = [];
		false ->
			RolesFinal = Roles
	end,
	case Pos =:= undefined of
		true ->
				PosFinal = undefined,
				exit({required_field_not_assigned, p_map_dropthing, pos});
		false ->
			PosFinal = Pos
	end,
	case Money =:= undefined of
		true ->
				MoneyFinal = 0;
		false ->
			MoneyFinal = Money
	end,
	case Goodsid =:= undefined of
		true ->
				GoodsidFinal = 0;
		false ->
			GoodsidFinal = Goodsid
	end,
	case Colour =:= undefined of
		true ->
				ColourFinal = 0;
		false ->
			ColourFinal = Colour
	end,
	case Goodstype =:= undefined of
		true ->
				GoodstypeFinal = 0;
		false ->
			GoodstypeFinal = Goodstype
	end,
	case Goodstypeid =:= undefined of
		true ->
				GoodstypeidFinal = 0;
		false ->
			GoodstypeidFinal = Goodstypeid
	end,
	case Drop_property =:= undefined of
		true ->
				Drop_propertyFinal = 0;
		false ->
			Drop_propertyFinal = Drop_property
	end,
	Roles_bin = encode_int32s(RolesFinal, <<>>),
	SizeRolesFinal = erlang:length(RolesFinal),
	BinLen_roles = erlang:byte_size(Roles_bin),
	Pos_bin = encode_p_pos(PosFinal),
	BinLen_pos = erlang:byte_size(Pos_bin),
	Drop_property_bin = encode_p_drop_property(Drop_propertyFinal),
	BinLen_drop_property = erlang:byte_size(Drop_property_bin),

	<<IdFinal:32/signed,IsmoneyFinal:8,BindFinal:8,NumFinal:32/signed,SizeRolesFinal:16, BinLen_roles:32, Roles_bin/binary,BinLen_pos:32, Pos_bin/binary,MoneyFinal:32/signed,GoodsidFinal:32/signed,ColourFinal:32/signed,GoodstypeFinal:32/signed,GoodstypeidFinal:32/signed,BinLen_drop_property:32, Drop_property_bin/binary>>;
encode_p_map_dropthing(_) -> 
	<<>>.

decode_p_map_dropthing(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed,IsmoneyTmp:8,BindTmp:8,Num:32/signed,_Sizeroles:16, BinLenroles:32, Bin1/binary>> = Bin0,
	<<SubBinroles:BinLenroles/binary, Bin2/binary>> = Bin1, 
	Roles = lists:reverse(decode_int32s(SubBinroles, [])),
	<<SubBinSizepos:32, Bin3/binary>> = Bin2,
	<<SubBinpos:SubBinSizepos/binary, Bin4/binary>> = Bin3,
	Pos = decode_p_pos(SubBinpos),
	<<Money:32/signed,Goodsid:32/signed,Colour:32/signed,Goodstype:32/signed,Goodstypeid:32/signed,_SubBinSizedrop_property:32, SubBindrop_property/binary>> = Bin4,
	Drop_property = decode_p_drop_property(SubBindrop_property),
case IsmoneyTmp of 
	1 -> 
		Ismoney = true;
	_ ->
		Ismoney = false
end,
case BindTmp of 
	1 -> 
		Bind = true;
	_ ->
		Bind = false
end,

	{p_map_dropthing, Id,Ismoney,Bind,Num,Roles,Pos,Money,Goodsid,Colour,Goodstype,Goodstypeid,Drop_property};

decode_p_map_dropthing(_) ->
	undefined.
encode_s_account_kick_toc(Record) when is_record(Record, s_account_kick_toc) ->
	#s_account_kick_toc{account=Account} = Record,
	case Account =:= undefined of
		true ->
				AccountFinal = undefined,
				exit({required_field_not_assigned, s_account_kick_toc, account});
		false ->
			AccountFinal = Account
	end,
	Account2 = common_tool:to_binary(AccountFinal),
	AccountLen = erlang:byte_size(Account2),

	<<AccountLen:16, Account2/binary>>;
encode_s_account_kick_toc(_) -> 
	<<>>.

decode_s_account_kick_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<AccountLen:16, Bin1/binary>> = Bin0,
	<<Account:AccountLen/binary>> = Bin1,

	{s_account_kick_toc, common_tool:to_list(Account)};

decode_s_account_kick_toc(_) ->
	undefined.
encode_s_account_register_tos(Record) when is_record(Record, s_account_register_tos) ->
	#s_account_register_tos{account=Account,guid=Guid} = Record,
	case Account =:= undefined of
		true ->
				AccountFinal = undefined,
				exit({required_field_not_assigned, s_account_register_tos, account});
		false ->
			AccountFinal = Account
	end,
	case Guid =:= undefined of
		true ->
				GuidFinal = undefined,
				exit({required_field_not_assigned, s_account_register_tos, guid});
		false ->
			GuidFinal = Guid
	end,
	Account2 = common_tool:to_binary(AccountFinal),
	AccountLen = erlang:byte_size(Account2),
	Guid2 = common_tool:to_binary(GuidFinal),
	GuidLen = erlang:byte_size(Guid2),

	<<AccountLen:16, Account2/binary,GuidLen:16, Guid2/binary>>;
encode_s_account_register_tos(_) -> 
	<<>>.

decode_s_account_register_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<AccountLen:16, Bin1/binary>> = Bin0,
	<<Account:AccountLen/binary,GuidLen:16, Bin2/binary>> = Bin1,
	<<Guid:GuidLen/binary>> = Bin2,

	{s_account_register_tos, common_tool:to_list(Account),common_tool:to_list(Guid)};

decode_s_account_register_tos(_) ->
	undefined.
encode_p_use_requirement(Record) when is_record(Record, p_use_requirement) ->
	#p_use_requirement{sex=Sex,min_level=Min_level,max_level=Max_level,min_power=Min_power,min_agile=Min_agile,min_brain=Min_brain,min_vitality=Min_vitality,min_spirit=Min_spirit} = Record,
	case Sex =:= undefined of
		true ->
				SexFinal = 0;
		false ->
			SexFinal = Sex
	end,
	case Min_level =:= undefined of
		true ->
				Min_levelFinal = 0;
		false ->
			Min_levelFinal = Min_level
	end,
	case Max_level =:= undefined of
		true ->
				Max_levelFinal = 0;
		false ->
			Max_levelFinal = Max_level
	end,
	case Min_power =:= undefined of
		true ->
				Min_powerFinal = 0;
		false ->
			Min_powerFinal = Min_power
	end,
	case Min_agile =:= undefined of
		true ->
				Min_agileFinal = 0;
		false ->
			Min_agileFinal = Min_agile
	end,
	case Min_brain =:= undefined of
		true ->
				Min_brainFinal = 0;
		false ->
			Min_brainFinal = Min_brain
	end,
	case Min_vitality =:= undefined of
		true ->
				Min_vitalityFinal = 0;
		false ->
			Min_vitalityFinal = Min_vitality
	end,
	case Min_spirit =:= undefined of
		true ->
				Min_spiritFinal = 0;
		false ->
			Min_spiritFinal = Min_spirit
	end,

	<<SexFinal:32/signed,Min_levelFinal:32/signed,Max_levelFinal:32/signed,Min_powerFinal:32/signed,Min_agileFinal:32/signed,Min_brainFinal:32/signed,Min_vitalityFinal:32/signed,Min_spiritFinal:32/signed>>;
encode_p_use_requirement(_) -> 
	<<>>.

decode_p_use_requirement(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Sex:32/signed,Min_level:32/signed,Max_level:32/signed,Min_power:32/signed,Min_agile:32/signed,Min_brain:32/signed,Min_vitality:32/signed,Min_spirit:32/signed>> = Bin0,

	{p_use_requirement, Sex,Min_level,Max_level,Min_power,Min_agile,Min_brain,Min_vitality,Min_spirit};

decode_p_use_requirement(_) ->
	undefined.
encode_p_property_add(Record) when is_record(Record, p_property_add) ->
	#p_property_add{power=Power,agile=Agile,brain=Brain,vitality=Vitality,spirit=Spirit,min_physic_att=Min_physic_att,max_physic_att=Max_physic_att,min_magic_att=Min_magic_att,max_magic_att=Max_magic_att,physic_def=Physic_def,magic_def=Magic_def,blood=Blood,magic=Magic,physic_att_rate=Physic_att_rate,magic_att_rate=Magic_att_rate,physic_def_rate=Physic_def_rate,magic_def_rate=Magic_def_rate,blood_rate=Blood_rate,magic_rate=Magic_rate,blood_resume_speed=Blood_resume_speed,magic_resume_speed=Magic_resume_speed,dead_attack=Dead_attack,lucky=Lucky,move_speed=Move_speed,attack_speed=Attack_speed,dodge=Dodge,no_defence=No_defence,main_property=Main_property,dizzy=Dizzy,poisoning=Poisoning,freeze=Freeze,hurt=Hurt,hurt_shift=Hurt_shift,poisoning_resist=Poisoning_resist,dizzy_resist=Dizzy_resist,freeze_resist=Freeze_resist,phy_anti=Phy_anti,magic_anti=Magic_anti,hurt_rebound=Hurt_rebound} = Record,
	case Power =:= undefined of
		true ->
				PowerFinal = 0;
		false ->
			PowerFinal = Power
	end,
	case Agile =:= undefined of
		true ->
				AgileFinal = 0;
		false ->
			AgileFinal = Agile
	end,
	case Brain =:= undefined of
		true ->
				BrainFinal = 0;
		false ->
			BrainFinal = Brain
	end,
	case Vitality =:= undefined of
		true ->
				VitalityFinal = 0;
		false ->
			VitalityFinal = Vitality
	end,
	case Spirit =:= undefined of
		true ->
				SpiritFinal = 0;
		false ->
			SpiritFinal = Spirit
	end,
	case Min_physic_att =:= undefined of
		true ->
				Min_physic_attFinal = 0;
		false ->
			Min_physic_attFinal = Min_physic_att
	end,
	case Max_physic_att =:= undefined of
		true ->
				Max_physic_attFinal = 0;
		false ->
			Max_physic_attFinal = Max_physic_att
	end,
	case Min_magic_att =:= undefined of
		true ->
				Min_magic_attFinal = 0;
		false ->
			Min_magic_attFinal = Min_magic_att
	end,
	case Max_magic_att =:= undefined of
		true ->
				Max_magic_attFinal = 0;
		false ->
			Max_magic_attFinal = Max_magic_att
	end,
	case Physic_def =:= undefined of
		true ->
				Physic_defFinal = 0;
		false ->
			Physic_defFinal = Physic_def
	end,
	case Magic_def =:= undefined of
		true ->
				Magic_defFinal = 0;
		false ->
			Magic_defFinal = Magic_def
	end,
	case Blood =:= undefined of
		true ->
				BloodFinal = 0;
		false ->
			BloodFinal = Blood
	end,
	case Magic =:= undefined of
		true ->
				MagicFinal = 0;
		false ->
			MagicFinal = Magic
	end,
	case Physic_att_rate =:= undefined of
		true ->
				Physic_att_rateFinal = 0;
		false ->
			Physic_att_rateFinal = Physic_att_rate
	end,
	case Magic_att_rate =:= undefined of
		true ->
				Magic_att_rateFinal = 0;
		false ->
			Magic_att_rateFinal = Magic_att_rate
	end,
	case Physic_def_rate =:= undefined of
		true ->
				Physic_def_rateFinal = 0;
		false ->
			Physic_def_rateFinal = Physic_def_rate
	end,
	case Magic_def_rate =:= undefined of
		true ->
				Magic_def_rateFinal = 0;
		false ->
			Magic_def_rateFinal = Magic_def_rate
	end,
	case Blood_rate =:= undefined of
		true ->
				Blood_rateFinal = 0;
		false ->
			Blood_rateFinal = Blood_rate
	end,
	case Magic_rate =:= undefined of
		true ->
				Magic_rateFinal = 0;
		false ->
			Magic_rateFinal = Magic_rate
	end,
	case Blood_resume_speed =:= undefined of
		true ->
				Blood_resume_speedFinal = 0;
		false ->
			Blood_resume_speedFinal = Blood_resume_speed
	end,
	case Magic_resume_speed =:= undefined of
		true ->
				Magic_resume_speedFinal = 0;
		false ->
			Magic_resume_speedFinal = Magic_resume_speed
	end,
	case Dead_attack =:= undefined of
		true ->
				Dead_attackFinal = 0;
		false ->
			Dead_attackFinal = Dead_attack
	end,
	case Lucky =:= undefined of
		true ->
				LuckyFinal = 0;
		false ->
			LuckyFinal = Lucky
	end,
	case Move_speed =:= undefined of
		true ->
				Move_speedFinal = 0;
		false ->
			Move_speedFinal = Move_speed
	end,
	case Attack_speed =:= undefined of
		true ->
				Attack_speedFinal = 0;
		false ->
			Attack_speedFinal = Attack_speed
	end,
	case Dodge =:= undefined of
		true ->
				DodgeFinal = 0;
		false ->
			DodgeFinal = Dodge
	end,
	case No_defence =:= undefined of
		true ->
				No_defenceFinal = 0;
		false ->
			No_defenceFinal = No_defence
	end,
	case Main_property =:= undefined of
		true ->
				Main_propertyFinal = 0;
		false ->
			Main_propertyFinal = Main_property
	end,
	case Dizzy =:= undefined of
		true ->
				DizzyFinal = 0;
		false ->
			DizzyFinal = Dizzy
	end,
	case Poisoning =:= undefined of
		true ->
				PoisoningFinal = 0;
		false ->
			PoisoningFinal = Poisoning
	end,
	case Freeze =:= undefined of
		true ->
				FreezeFinal = 0;
		false ->
			FreezeFinal = Freeze
	end,
	case Hurt =:= undefined of
		true ->
				HurtFinal = 0;
		false ->
			HurtFinal = Hurt
	end,
	case Hurt_shift =:= undefined of
		true ->
				Hurt_shiftFinal = 0;
		false ->
			Hurt_shiftFinal = Hurt_shift
	end,
	case Poisoning_resist =:= undefined of
		true ->
				Poisoning_resistFinal = 0;
		false ->
			Poisoning_resistFinal = Poisoning_resist
	end,
	case Dizzy_resist =:= undefined of
		true ->
				Dizzy_resistFinal = 0;
		false ->
			Dizzy_resistFinal = Dizzy_resist
	end,
	case Freeze_resist =:= undefined of
		true ->
				Freeze_resistFinal = 0;
		false ->
			Freeze_resistFinal = Freeze_resist
	end,
	case Phy_anti =:= undefined of
		true ->
				Phy_antiFinal = 0;
		false ->
			Phy_antiFinal = Phy_anti
	end,
	case Magic_anti =:= undefined of
		true ->
				Magic_antiFinal = 0;
		false ->
			Magic_antiFinal = Magic_anti
	end,
	case Hurt_rebound =:= undefined of
		true ->
				Hurt_reboundFinal = 0;
		false ->
			Hurt_reboundFinal = Hurt_rebound
	end,

	<<PowerFinal:32/signed,AgileFinal:32/signed,BrainFinal:32/signed,VitalityFinal:32/signed,SpiritFinal:32/signed,Min_physic_attFinal:32/signed,Max_physic_attFinal:32/signed,Min_magic_attFinal:32/signed,Max_magic_attFinal:32/signed,Physic_defFinal:32/signed,Magic_defFinal:32/signed,BloodFinal:32/signed,MagicFinal:32/signed,Physic_att_rateFinal:32/signed,Magic_att_rateFinal:32/signed,Physic_def_rateFinal:32/signed,Magic_def_rateFinal:32/signed,Blood_rateFinal:32/signed,Magic_rateFinal:32/signed,Blood_resume_speedFinal:32/signed,Magic_resume_speedFinal:32/signed,Dead_attackFinal:32/signed,LuckyFinal:32/signed,Move_speedFinal:32/signed,Attack_speedFinal:32/signed,DodgeFinal:32/signed,No_defenceFinal:32/signed,Main_propertyFinal:32/signed,DizzyFinal:32/signed,PoisoningFinal:32/signed,FreezeFinal:32/signed,HurtFinal:32/signed,Hurt_shiftFinal:32/signed,Poisoning_resistFinal:32/signed,Dizzy_resistFinal:32/signed,Freeze_resistFinal:32/signed,Phy_antiFinal:32/signed,Magic_antiFinal:32/signed,Hurt_reboundFinal:32/signed>>;
encode_p_property_add(_) -> 
	<<>>.

decode_p_property_add(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Power:32/signed,Agile:32/signed,Brain:32/signed,Vitality:32/signed,Spirit:32/signed,Min_physic_att:32/signed,Max_physic_att:32/signed,Min_magic_att:32/signed,Max_magic_att:32/signed,Physic_def:32/signed,Magic_def:32/signed,Blood:32/signed,Magic:32/signed,Physic_att_rate:32/signed,Magic_att_rate:32/signed,Physic_def_rate:32/signed,Magic_def_rate:32/signed,Blood_rate:32/signed,Magic_rate:32/signed,Blood_resume_speed:32/signed,Magic_resume_speed:32/signed,Dead_attack:32/signed,Lucky:32/signed,Move_speed:32/signed,Attack_speed:32/signed,Dodge:32/signed,No_defence:32/signed,Main_property:32/signed,Dizzy:32/signed,Poisoning:32/signed,Freeze:32/signed,Hurt:32/signed,Hurt_shift:32/signed,Poisoning_resist:32/signed,Dizzy_resist:32/signed,Freeze_resist:32/signed,Phy_anti:32/signed,Magic_anti:32/signed,Hurt_rebound:32/signed>> = Bin0,

	{p_property_add, Power,Agile,Brain,Vitality,Spirit,Min_physic_att,Max_physic_att,Min_magic_att,Max_magic_att,Physic_def,Magic_def,Blood,Magic,Physic_att_rate,Magic_att_rate,Physic_def_rate,Magic_def_rate,Blood_rate,Magic_rate,Blood_resume_speed,Magic_resume_speed,Dead_attack,Lucky,Move_speed,Attack_speed,Dodge,No_defence,Main_property,Dizzy,Poisoning,Freeze,Hurt,Hurt_shift,Poisoning_resist,Dizzy_resist,Freeze_resist,Phy_anti,Magic_anti,Hurt_rebound};

decode_p_property_add(_) ->
	undefined.
encode_p_equip_base_info(Record) when is_record(Record, p_equip_base_info) ->
	#p_equip_base_info{typeid=Typeid,equipname=Equipname,slot_num=Slot_num,kind=Kind,colour=Colour,endurance=Endurance,requirement=Requirement,property=Property,loss_endu=Loss_endu,sell_type=Sell_type,sell_price=Sell_price,material=Material,protype=Protype} = Record,
	case Typeid =:= undefined of
		true ->
				TypeidFinal = undefined,
				exit({required_field_not_assigned, p_equip_base_info, typeid});
		false ->
			TypeidFinal = Typeid
	end,
	case Equipname =:= undefined of
		true ->
				EquipnameFinal = undefined,
				exit({required_field_not_assigned, p_equip_base_info, equipname});
		false ->
			EquipnameFinal = Equipname
	end,
	case Slot_num =:= undefined of
		true ->
				Slot_numFinal = undefined,
				exit({required_field_not_assigned, p_equip_base_info, slot_num});
		false ->
			Slot_numFinal = Slot_num
	end,
	case Kind =:= undefined of
		true ->
				KindFinal = undefined,
				exit({required_field_not_assigned, p_equip_base_info, kind});
		false ->
			KindFinal = Kind
	end,
	case Colour =:= undefined of
		true ->
				ColourFinal = undefined,
				exit({required_field_not_assigned, p_equip_base_info, colour});
		false ->
			ColourFinal = Colour
	end,
	case Endurance =:= undefined of
		true ->
				EnduranceFinal = undefined,
				exit({required_field_not_assigned, p_equip_base_info, endurance});
		false ->
			EnduranceFinal = Endurance
	end,
	case Requirement =:= undefined of
		true ->
				RequirementFinal = 0;
		false ->
			RequirementFinal = Requirement
	end,
	case Property =:= undefined of
		true ->
				PropertyFinal = 0;
		false ->
			PropertyFinal = Property
	end,
	case Loss_endu =:= undefined of
		true ->
				Loss_enduFinal = undefined,
				exit({required_field_not_assigned, p_equip_base_info, loss_endu});
		false ->
			Loss_enduFinal = Loss_endu
	end,
	case Sell_type =:= undefined of
		true ->
				Sell_typeFinal = 1;
		false ->
			Sell_typeFinal = Sell_type
	end,
	case Sell_price =:= undefined of
		true ->
				Sell_priceFinal = undefined,
				exit({required_field_not_assigned, p_equip_base_info, sell_price});
		false ->
			Sell_priceFinal = Sell_price
	end,
	case Material =:= undefined of
		true ->
				MaterialFinal = undefined,
				exit({required_field_not_assigned, p_equip_base_info, material});
		false ->
			MaterialFinal = Material
	end,
	case Protype =:= undefined of
		true ->
				ProtypeFinal = undefined,
				exit({required_field_not_assigned, p_equip_base_info, protype});
		false ->
			ProtypeFinal = Protype
	end,
	Equipname2 = common_tool:to_binary(EquipnameFinal),
	EquipnameLen = erlang:byte_size(Equipname2),
	Requirement_bin = encode_p_use_requirement(RequirementFinal),
	BinLen_requirement = erlang:byte_size(Requirement_bin),
	Property_bin = encode_p_property_add(PropertyFinal),
	BinLen_property = erlang:byte_size(Property_bin),

	<<TypeidFinal:32/signed,EquipnameLen:16, Equipname2/binary,Slot_numFinal:32/signed,KindFinal:32/signed,ColourFinal:32/signed,EnduranceFinal:32/signed,BinLen_requirement:32, Requirement_bin/binary,BinLen_property:32, Property_bin/binary,Loss_enduFinal:32/signed,Sell_typeFinal:32/signed,Sell_priceFinal:32/signed,MaterialFinal:32/signed,ProtypeFinal:32/signed>>;
encode_p_equip_base_info(_) -> 
	<<>>.

decode_p_equip_base_info(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Typeid:32/signed,EquipnameLen:16, Bin1/binary>> = Bin0,
	<<Equipname:EquipnameLen/binary,Slot_num:32/signed,Kind:32/signed,Colour:32/signed,Endurance:32/signed,SubBinSizerequirement:32, Bin2/binary>> = Bin1,
	<<SubBinrequirement:SubBinSizerequirement/binary, Bin3/binary>> = Bin2,
	Requirement = decode_p_use_requirement(SubBinrequirement),
	<<SubBinSizeproperty:32, Bin4/binary>> = Bin3,
	<<SubBinproperty:SubBinSizeproperty/binary, Bin5/binary>> = Bin4,
	Property = decode_p_property_add(SubBinproperty),
	<<Loss_endu:32/signed,Sell_type:32/signed,Sell_price:32/signed,Material:32/signed,Protype:32/signed>> = Bin5,

	{p_equip_base_info, Typeid,common_tool:to_list(Equipname),Slot_num,Kind,Colour,Endurance,Requirement,Property,Loss_endu,Sell_type,Sell_price,Material,Protype};

decode_p_equip_base_info(_) ->
	undefined.
encode_p_item_effect(Record) when is_record(Record, p_item_effect) ->
	#p_item_effect{funid=Funid,parameter=Parameter} = Record,
	case Funid =:= undefined of
		true ->
				FunidFinal = undefined,
				exit({required_field_not_assigned, p_item_effect, funid});
		false ->
			FunidFinal = Funid
	end,
	case Parameter =:= undefined of
		true ->
				ParameterFinal = undefined,
				exit({required_field_not_assigned, p_item_effect, parameter});
		false ->
			ParameterFinal = Parameter
	end,
	Parameter2 = common_tool:to_binary(ParameterFinal),
	ParameterLen = erlang:byte_size(Parameter2),

	<<FunidFinal:32/signed,ParameterLen:16, Parameter2/binary>>;
encode_p_item_effect(_) -> 
	<<>>.

decode_p_item_effect(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Funid:32/signed,ParameterLen:16, Bin1/binary>> = Bin0,
	<<Parameter:ParameterLen/binary>> = Bin1,

	{p_item_effect, Funid,common_tool:to_list(Parameter)};

decode_p_item_effect(_) ->
	undefined.
encode_p_item_base_info(Record) when is_record(Record, p_item_base_info) ->
	#p_item_base_info{typeid=Typeid,itemname=Itemname,kind=Kind,colour=Colour,usenum=Usenum,sell_type=Sell_type,sell_price=Sell_price,requirement=Requirement,effects=Effects,cd_type=Cd_type,is_overlap=Is_overlap} = Record,
	case Typeid =:= undefined of
		true ->
				TypeidFinal = undefined,
				exit({required_field_not_assigned, p_item_base_info, typeid});
		false ->
			TypeidFinal = Typeid
	end,
	case Itemname =:= undefined of
		true ->
				ItemnameFinal = undefined,
				exit({required_field_not_assigned, p_item_base_info, itemname});
		false ->
			ItemnameFinal = Itemname
	end,
	case Kind =:= undefined of
		true ->
				KindFinal = undefined,
				exit({required_field_not_assigned, p_item_base_info, kind});
		false ->
			KindFinal = Kind
	end,
	case Colour =:= undefined of
		true ->
				ColourFinal = undefined,
				exit({required_field_not_assigned, p_item_base_info, colour});
		false ->
			ColourFinal = Colour
	end,
	case Usenum =:= undefined of
		true ->
				UsenumFinal = undefined,
				exit({required_field_not_assigned, p_item_base_info, usenum});
		false ->
			UsenumFinal = Usenum
	end,
	case Sell_type =:= undefined of
		true ->
				Sell_typeFinal = 1;
		false ->
			Sell_typeFinal = Sell_type
	end,
	case Sell_price =:= undefined of
		true ->
				Sell_priceFinal = undefined,
				exit({required_field_not_assigned, p_item_base_info, sell_price});
		false ->
			Sell_priceFinal = Sell_price
	end,
	case Requirement =:= undefined of
		true ->
				RequirementFinal = 0;
		false ->
			RequirementFinal = Requirement
	end,
	case Effects =:= undefined of
		true ->
			EffectsFinal = [];
		false ->
			EffectsFinal = Effects
	end,
	case Cd_type =:= undefined of
		true ->
				Cd_typeFinal = 0;
		false ->
			Cd_typeFinal = Cd_type
	end,
	case Is_overlap =:= undefined of
		true ->
				Is_overlapFinal = 0;
		false ->
			Is_overlapFinal = Is_overlap
	end,
	Itemname2 = common_tool:to_binary(ItemnameFinal),
	ItemnameLen = erlang:byte_size(Itemname2),
	Requirement_bin = encode_p_use_requirement(RequirementFinal),
	BinLen_requirement = erlang:byte_size(Requirement_bin),
	Effects_bin = encode_p_item_effects(EffectsFinal, <<>>),
	SizeEffectsFinal = erlang:length(EffectsFinal),
	BinLen_effects = erlang:byte_size(Effects_bin),

	<<TypeidFinal:32/signed,ItemnameLen:16, Itemname2/binary,KindFinal:32/signed,ColourFinal:32/signed,UsenumFinal:32/signed,Sell_typeFinal:32/signed,Sell_priceFinal:32/signed,BinLen_requirement:32, Requirement_bin/binary,SizeEffectsFinal:16, BinLen_effects:32, Effects_bin/binary,Cd_typeFinal:32/signed,Is_overlapFinal:32/signed>>;
encode_p_item_base_info(_) -> 
	<<>>.

decode_p_item_base_info(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Typeid:32/signed,ItemnameLen:16, Bin1/binary>> = Bin0,
	<<Itemname:ItemnameLen/binary,Kind:32/signed,Colour:32/signed,Usenum:32/signed,Sell_type:32/signed,Sell_price:32/signed,SubBinSizerequirement:32, Bin2/binary>> = Bin1,
	<<SubBinrequirement:SubBinSizerequirement/binary, Bin3/binary>> = Bin2,
	Requirement = decode_p_use_requirement(SubBinrequirement),
	<<_Sizeeffects:16, BinLeneffects:32, Bin4/binary>> = Bin3,
	<<SubBineffects:BinLeneffects/binary, Bin5/binary>> = Bin4, 
	Effects = lists:reverse(decode_p_item_effects(SubBineffects, [])),
	<<Cd_type:32/signed,Is_overlap:32/signed>> = Bin5,

	{p_item_base_info, Typeid,common_tool:to_list(Itemname),Kind,Colour,Usenum,Sell_type,Sell_price,Requirement,Effects,Cd_type,Is_overlap};

decode_p_item_base_info(_) ->
	undefined.
encode_p_stone_base_info(Record) when is_record(Record, p_stone_base_info) ->
	#p_stone_base_info{typeid=Typeid,stonename=Stonename,colour=Colour,requirement=Requirement,level_prop=Level_prop,level=Level,sell_type=Sell_type,sell_price=Sell_price,embe_equip_list=Embe_equip_list,kind=Kind} = Record,
	case Typeid =:= undefined of
		true ->
				TypeidFinal = undefined,
				exit({required_field_not_assigned, p_stone_base_info, typeid});
		false ->
			TypeidFinal = Typeid
	end,
	case Stonename =:= undefined of
		true ->
				StonenameFinal = undefined,
				exit({required_field_not_assigned, p_stone_base_info, stonename});
		false ->
			StonenameFinal = Stonename
	end,
	case Colour =:= undefined of
		true ->
				ColourFinal = undefined,
				exit({required_field_not_assigned, p_stone_base_info, colour});
		false ->
			ColourFinal = Colour
	end,
	case Requirement =:= undefined of
		true ->
				RequirementFinal = 0;
		false ->
			RequirementFinal = Requirement
	end,
	case Level_prop =:= undefined of
		true ->
				Level_propFinal = undefined,
				exit({required_field_not_assigned, p_stone_base_info, level_prop});
		false ->
			Level_propFinal = Level_prop
	end,
	case Level =:= undefined of
		true ->
				LevelFinal = undefined,
				exit({required_field_not_assigned, p_stone_base_info, level});
		false ->
			LevelFinal = Level
	end,
	case Sell_type =:= undefined of
		true ->
				Sell_typeFinal = 1;
		false ->
			Sell_typeFinal = Sell_type
	end,
	case Sell_price =:= undefined of
		true ->
				Sell_priceFinal = undefined,
				exit({required_field_not_assigned, p_stone_base_info, sell_price});
		false ->
			Sell_priceFinal = Sell_price
	end,
	case Embe_equip_list =:= undefined of
		true ->
			Embe_equip_listFinal = [];
		false ->
			Embe_equip_listFinal = Embe_equip_list
	end,
	case Kind =:= undefined of
		true ->
				KindFinal = undefined,
				exit({required_field_not_assigned, p_stone_base_info, kind});
		false ->
			KindFinal = Kind
	end,
	Stonename2 = common_tool:to_binary(StonenameFinal),
	StonenameLen = erlang:byte_size(Stonename2),
	Requirement_bin = encode_p_use_requirement(RequirementFinal),
	BinLen_requirement = erlang:byte_size(Requirement_bin),
	Level_prop_bin = encode_p_property_add(Level_propFinal),
	BinLen_level_prop = erlang:byte_size(Level_prop_bin),
	Embe_equip_list_bin = encode_int32s(Embe_equip_listFinal, <<>>),
	SizeEmbe_equip_listFinal = erlang:length(Embe_equip_listFinal),
	BinLen_embe_equip_list = erlang:byte_size(Embe_equip_list_bin),

	<<TypeidFinal:32/signed,StonenameLen:16, Stonename2/binary,ColourFinal:32/signed,BinLen_requirement:32, Requirement_bin/binary,BinLen_level_prop:32, Level_prop_bin/binary,LevelFinal:32/signed,Sell_typeFinal:32/signed,Sell_priceFinal:32/signed,SizeEmbe_equip_listFinal:16, BinLen_embe_equip_list:32, Embe_equip_list_bin/binary,KindFinal:32/signed>>;
encode_p_stone_base_info(_) -> 
	<<>>.

decode_p_stone_base_info(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Typeid:32/signed,StonenameLen:16, Bin1/binary>> = Bin0,
	<<Stonename:StonenameLen/binary,Colour:32/signed,SubBinSizerequirement:32, Bin2/binary>> = Bin1,
	<<SubBinrequirement:SubBinSizerequirement/binary, Bin3/binary>> = Bin2,
	Requirement = decode_p_use_requirement(SubBinrequirement),
	<<SubBinSizelevel_prop:32, Bin4/binary>> = Bin3,
	<<SubBinlevel_prop:SubBinSizelevel_prop/binary, Bin5/binary>> = Bin4,
	Level_prop = decode_p_property_add(SubBinlevel_prop),
	<<Level:32/signed,Sell_type:32/signed,Sell_price:32/signed,_Sizeembe_equip_list:16, BinLenembe_equip_list:32, Bin6/binary>> = Bin5,
	<<SubBinembe_equip_list:BinLenembe_equip_list/binary, Bin7/binary>> = Bin6, 
	Embe_equip_list = lists:reverse(decode_int32s(SubBinembe_equip_list, [])),
	<<Kind:32/signed>> = Bin7,

	{p_stone_base_info, Typeid,common_tool:to_list(Stonename),Colour,Requirement,Level_prop,Level,Sell_type,Sell_price,Embe_equip_list,Kind};

decode_p_stone_base_info(_) ->
	undefined.
encode_p_goods(Record) when is_record(Record, p_goods) ->
	#p_goods{id=Id,type=Type,roleid=Roleid,bagposition=Bagposition,current_num=Current_num,bagid=Bagid,sell_type=Sell_type,sell_price=Sell_price,typeid=Typeid,bind=Bind,start_time=Start_time,end_time=End_time,current_colour=Current_colour,state=State,name=Name,level=Level,embe_pos=Embe_pos,embe_equipid=Embe_equipid,loadposition=Loadposition,quality=Quality,current_endurance=Current_endurance,forge_num=Forge_num,reinforce_result=Reinforce_result,punch_num=Punch_num,stone_num=Stone_num,add_property=Add_property,stones=Stones,reinforce_rate=Reinforce_rate,endurance=Endurance,signature=Signature,equip_bind_attr=Equip_bind_attr,refining_index=Refining_index,sign_role_id=Sign_role_id,five_ele_attr=Five_ele_attr,whole_attr=Whole_attr,reinforce_result_list=Reinforce_result_list,use_bind=Use_bind,sub_quality=Sub_quality,quality_rate=Quality_rate,exp=Exp,next_level_exp=Next_level_exp,light_code=Light_code} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, p_goods, id});
		false ->
			IdFinal = Id
	end,
	case Type =:= undefined of
		true ->
				TypeFinal = undefined,
				exit({required_field_not_assigned, p_goods, type});
		false ->
			TypeFinal = Type
	end,
	case Roleid =:= undefined of
		true ->
				RoleidFinal = undefined,
				exit({required_field_not_assigned, p_goods, roleid});
		false ->
			RoleidFinal = Roleid
	end,
	case Bagposition =:= undefined of
		true ->
				BagpositionFinal = undefined,
				exit({required_field_not_assigned, p_goods, bagposition});
		false ->
			BagpositionFinal = Bagposition
	end,
	case Current_num =:= undefined of
		true ->
				Current_numFinal = undefined,
				exit({required_field_not_assigned, p_goods, current_num});
		false ->
			Current_numFinal = Current_num
	end,
	case Bagid =:= undefined of
		true ->
				BagidFinal = undefined,
				exit({required_field_not_assigned, p_goods, bagid});
		false ->
			BagidFinal = Bagid
	end,
	case Sell_type =:= undefined of
		true ->
				Sell_typeFinal = 1;
		false ->
			Sell_typeFinal = Sell_type
	end,
	case Sell_price =:= undefined of
		true ->
				Sell_priceFinal = undefined,
				exit({required_field_not_assigned, p_goods, sell_price});
		false ->
			Sell_priceFinal = Sell_price
	end,
	case Typeid =:= undefined of
		true ->
				TypeidFinal = undefined,
				exit({required_field_not_assigned, p_goods, typeid});
		false ->
			TypeidFinal = Typeid
	end,
	case Bind =:= undefined of
		true ->
				BindFinal = 0;
		false ->
			case Bind of
				true ->
					BindFinal = 1;
				false ->
					BindFinal = 0
			end
	end,
	case Start_time =:= undefined of
		true ->
				Start_timeFinal = 0;
		false ->
			Start_timeFinal = Start_time
	end,
	case End_time =:= undefined of
		true ->
				End_timeFinal = 0;
		false ->
			End_timeFinal = End_time
	end,
	case Current_colour =:= undefined of
		true ->
				Current_colourFinal = 0;
		false ->
			Current_colourFinal = Current_colour
	end,
	case State =:= undefined of
		true ->
				StateFinal = 0;
		false ->
			StateFinal = State
	end,
	case Name =:= undefined of
		true ->
				NameFinal = <<>>;
		false ->
			NameFinal = Name
	end,
	case Level =:= undefined of
		true ->
				LevelFinal = 0;
		false ->
			LevelFinal = Level
	end,
	case Embe_pos =:= undefined of
		true ->
				Embe_posFinal = 0;
		false ->
			Embe_posFinal = Embe_pos
	end,
	case Embe_equipid =:= undefined of
		true ->
				Embe_equipidFinal = 0;
		false ->
			Embe_equipidFinal = Embe_equipid
	end,
	case Loadposition =:= undefined of
		true ->
				LoadpositionFinal = 0;
		false ->
			LoadpositionFinal = Loadposition
	end,
	case Quality =:= undefined of
		true ->
				QualityFinal = 0;
		false ->
			QualityFinal = Quality
	end,
	case Current_endurance =:= undefined of
		true ->
				Current_enduranceFinal = 0;
		false ->
			Current_enduranceFinal = Current_endurance
	end,
	case Forge_num =:= undefined of
		true ->
				Forge_numFinal = 0;
		false ->
			Forge_numFinal = Forge_num
	end,
	case Reinforce_result =:= undefined of
		true ->
				Reinforce_resultFinal = 0;
		false ->
			Reinforce_resultFinal = Reinforce_result
	end,
	case Punch_num =:= undefined of
		true ->
				Punch_numFinal = 0;
		false ->
			Punch_numFinal = Punch_num
	end,
	case Stone_num =:= undefined of
		true ->
				Stone_numFinal = 0;
		false ->
			Stone_numFinal = Stone_num
	end,
	case Add_property =:= undefined of
		true ->
				Add_propertyFinal = 0;
		false ->
			Add_propertyFinal = Add_property
	end,
	case Stones =:= undefined of
		true ->
			StonesFinal = [];
		false ->
			StonesFinal = Stones
	end,
	case Reinforce_rate =:= undefined of
		true ->
				Reinforce_rateFinal = 0;
		false ->
			Reinforce_rateFinal = Reinforce_rate
	end,
	case Endurance =:= undefined of
		true ->
				EnduranceFinal = 0;
		false ->
			EnduranceFinal = Endurance
	end,
	case Signature =:= undefined of
		true ->
				SignatureFinal = <<>>;
		false ->
			SignatureFinal = Signature
	end,
	case Equip_bind_attr =:= undefined of
		true ->
			Equip_bind_attrFinal = [];
		false ->
			Equip_bind_attrFinal = Equip_bind_attr
	end,
	case Refining_index =:= undefined of
		true ->
				Refining_indexFinal = 0;
		false ->
			Refining_indexFinal = Refining_index
	end,
	case Sign_role_id =:= undefined of
		true ->
				Sign_role_idFinal = 0;
		false ->
			Sign_role_idFinal = Sign_role_id
	end,
	case Five_ele_attr =:= undefined of
		true ->
				Five_ele_attrFinal = 0;
		false ->
			Five_ele_attrFinal = Five_ele_attr
	end,
	case Whole_attr =:= undefined of
		true ->
				Whole_attrFinal = 0;
		false ->
			Whole_attrFinal = Whole_attr
	end,
	case Reinforce_result_list =:= undefined of
		true ->
			Reinforce_result_listFinal = [];
		false ->
			Reinforce_result_listFinal = Reinforce_result_list
	end,
	case Use_bind =:= undefined of
		true ->
				Use_bindFinal = 0;
		false ->
			Use_bindFinal = Use_bind
	end,
	case Sub_quality =:= undefined of
		true ->
				Sub_qualityFinal = 0;
		false ->
			Sub_qualityFinal = Sub_quality
	end,
	case Quality_rate =:= undefined of
		true ->
				Quality_rateFinal = 0;
		false ->
			Quality_rateFinal = Quality_rate
	end,
	case Exp =:= undefined of
		true ->
				ExpFinal = 0;
		false ->
			ExpFinal = Exp
	end,
	case Next_level_exp =:= undefined of
		true ->
				Next_level_expFinal = 0;
		false ->
			Next_level_expFinal = Next_level_exp
	end,
	case Light_code =:= undefined of
		true ->
				Light_codeFinal = 0;
		false ->
			Light_codeFinal = Light_code
	end,
	Name2 = common_tool:to_binary(NameFinal),
	NameLen = erlang:byte_size(Name2),
	Add_property_bin = encode_p_property_add(Add_propertyFinal),
	BinLen_add_property = erlang:byte_size(Add_property_bin),
	Stones_bin = encode_p_goodss(StonesFinal, <<>>),
	SizeStonesFinal = erlang:length(StonesFinal),
	BinLen_stones = erlang:byte_size(Stones_bin),
	Signature2 = common_tool:to_binary(SignatureFinal),
	SignatureLen = erlang:byte_size(Signature2),
	Equip_bind_attr_bin = encode_p_equip_bind_attrs(Equip_bind_attrFinal, <<>>),
	SizeEquip_bind_attrFinal = erlang:length(Equip_bind_attrFinal),
	BinLen_equip_bind_attr = erlang:byte_size(Equip_bind_attr_bin),
	Five_ele_attr_bin = encode_p_equip_five_ele(Five_ele_attrFinal),
	BinLen_five_ele_attr = erlang:byte_size(Five_ele_attr_bin),
	Whole_attr_bin = encode_p_equip_whole_attr(Whole_attrFinal),
	BinLen_whole_attr = erlang:byte_size(Whole_attr_bin),
	Reinforce_result_list_bin = encode_int32s(Reinforce_result_listFinal, <<>>),
	SizeReinforce_result_listFinal = erlang:length(Reinforce_result_listFinal),
	BinLen_reinforce_result_list = erlang:byte_size(Reinforce_result_list_bin),

	<<IdFinal:32/signed,TypeFinal:32/signed,RoleidFinal:32/signed,BagpositionFinal:32/signed,Current_numFinal:32/signed,BagidFinal:32/signed,Sell_typeFinal:32/signed,Sell_priceFinal:32/signed,TypeidFinal:32/signed,BindFinal:8,Start_timeFinal:32/signed,End_timeFinal:32/signed,Current_colourFinal:32/signed,StateFinal:32/signed,NameLen:16, Name2/binary,LevelFinal:32/signed,Embe_posFinal:32/signed,Embe_equipidFinal:32/signed,LoadpositionFinal:32/signed,QualityFinal:32/signed,Current_enduranceFinal:32/signed,Forge_numFinal:32/signed,Reinforce_resultFinal:32/signed,Punch_numFinal:32/signed,Stone_numFinal:32/signed,BinLen_add_property:32, Add_property_bin/binary,SizeStonesFinal:16, BinLen_stones:32, Stones_bin/binary,Reinforce_rateFinal:32/signed,EnduranceFinal:32/signed,SignatureLen:16, Signature2/binary,SizeEquip_bind_attrFinal:16, BinLen_equip_bind_attr:32, Equip_bind_attr_bin/binary,Refining_indexFinal:32/signed,Sign_role_idFinal:32/signed,BinLen_five_ele_attr:32, Five_ele_attr_bin/binary,BinLen_whole_attr:32, Whole_attr_bin/binary,SizeReinforce_result_listFinal:16, BinLen_reinforce_result_list:32, Reinforce_result_list_bin/binary,Use_bindFinal:32/signed,Sub_qualityFinal:32/signed,Quality_rateFinal:32/signed,ExpFinal:64/float,Next_level_expFinal:64/float,Light_codeFinal:32/signed>>;
encode_p_goods(_) -> 
	<<>>.

decode_p_goods(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed,Type:32/signed,Roleid:32/signed,Bagposition:32/signed,Current_num:32/signed,Bagid:32/signed,Sell_type:32/signed,Sell_price:32/signed,Typeid:32/signed,BindTmp:8,Start_time:32/signed,End_time:32/signed,Current_colour:32/signed,State:32/signed,NameLen:16, Bin1/binary>> = Bin0,
	<<Name:NameLen/binary,Level:32/signed,Embe_pos:32/signed,Embe_equipid:32/signed,Loadposition:32/signed,Quality:32/signed,Current_endurance:32/signed,Forge_num:32/signed,Reinforce_result:32/signed,Punch_num:32/signed,Stone_num:32/signed,SubBinSizeadd_property:32, Bin2/binary>> = Bin1,
	<<SubBinadd_property:SubBinSizeadd_property/binary, Bin3/binary>> = Bin2,
	Add_property = decode_p_property_add(SubBinadd_property),
	<<_Sizestones:16, BinLenstones:32, Bin4/binary>> = Bin3,
	<<SubBinstones:BinLenstones/binary, Bin5/binary>> = Bin4, 
	Stones = lists:reverse(decode_p_goodss(SubBinstones, [])),
	<<Reinforce_rate:32/signed,Endurance:32/signed,SignatureLen:16, Bin6/binary>> = Bin5,
	<<Signature:SignatureLen/binary,_Sizeequip_bind_attr:16, BinLenequip_bind_attr:32, Bin7/binary>> = Bin6,
	<<SubBinequip_bind_attr:BinLenequip_bind_attr/binary, Bin8/binary>> = Bin7, 
	Equip_bind_attr = lists:reverse(decode_p_equip_bind_attrs(SubBinequip_bind_attr, [])),
	<<Refining_index:32/signed,Sign_role_id:32/signed,SubBinSizefive_ele_attr:32, Bin9/binary>> = Bin8,
	<<SubBinfive_ele_attr:SubBinSizefive_ele_attr/binary, Bin10/binary>> = Bin9,
	Five_ele_attr = decode_p_equip_five_ele(SubBinfive_ele_attr),
	<<SubBinSizewhole_attr:32, Bin11/binary>> = Bin10,
	<<SubBinwhole_attr:SubBinSizewhole_attr/binary, Bin12/binary>> = Bin11,
	Whole_attr = decode_p_equip_whole_attr(SubBinwhole_attr),
	<<_Sizereinforce_result_list:16, BinLenreinforce_result_list:32, Bin13/binary>> = Bin12,
	<<SubBinreinforce_result_list:BinLenreinforce_result_list/binary, Bin14/binary>> = Bin13, 
	Reinforce_result_list = lists:reverse(decode_int32s(SubBinreinforce_result_list, [])),
	<<Use_bind:32/signed,Sub_quality:32/signed,Quality_rate:32/signed,Exp:64,Next_level_exp:64,Light_code:32/signed>> = Bin14,
case BindTmp of 
	1 -> 
		Bind = true;
	_ ->
		Bind = false
end,

	{p_goods, Id,Type,Roleid,Bagposition,Current_num,Bagid,Sell_type,Sell_price,Typeid,Bind,Start_time,End_time,Current_colour,State,common_tool:to_list(Name),Level,Embe_pos,Embe_equipid,Loadposition,Quality,Current_endurance,Forge_num,Reinforce_result,Punch_num,Stone_num,Add_property,Stones,Reinforce_rate,Endurance,common_tool:to_list(Signature),Equip_bind_attr,Refining_index,Sign_role_id,Five_ele_attr,Whole_attr,Reinforce_result_list,Use_bind,Sub_quality,Quality_rate,Exp,Next_level_exp,Light_code};

decode_p_goods(_) ->
	undefined.
encode_p_equip_bind_attr(Record) when is_record(Record, p_equip_bind_attr) ->
	#p_equip_bind_attr{attr_code=Attr_code,attr_level=Attr_level,type=Type,value=Value} = Record,
	case Attr_code =:= undefined of
		true ->
				Attr_codeFinal = undefined,
				exit({required_field_not_assigned, p_equip_bind_attr, attr_code});
		false ->
			Attr_codeFinal = Attr_code
	end,
	case Attr_level =:= undefined of
		true ->
				Attr_levelFinal = undefined,
				exit({required_field_not_assigned, p_equip_bind_attr, attr_level});
		false ->
			Attr_levelFinal = Attr_level
	end,
	case Type =:= undefined of
		true ->
				TypeFinal = undefined,
				exit({required_field_not_assigned, p_equip_bind_attr, type});
		false ->
			TypeFinal = Type
	end,
	case Value =:= undefined of
		true ->
				ValueFinal = undefined,
				exit({required_field_not_assigned, p_equip_bind_attr, value});
		false ->
			ValueFinal = Value
	end,

	<<Attr_codeFinal:32/signed,Attr_levelFinal:32/signed,TypeFinal:32/signed,ValueFinal:32/signed>>;
encode_p_equip_bind_attr(_) -> 
	<<>>.

decode_p_equip_bind_attr(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Attr_code:32/signed,Attr_level:32/signed,Type:32/signed,Value:32/signed>> = Bin0,

	{p_equip_bind_attr, Attr_code,Attr_level,Type,Value};

decode_p_equip_bind_attr(_) ->
	undefined.
encode_p_equip_five_ele(Record) when is_record(Record, p_equip_five_ele) ->
	#p_equip_five_ele{id=Id,type_id=Type_id,equip_name=Equip_name,level=Level,active=Active,phy_anti=Phy_anti,magic_anti=Magic_anti,hurt=Hurt,no_defence=No_defence,hurt_rebound=Hurt_rebound,link_slot_num=Link_slot_num,whole_name=Whole_name} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = 0;
		false ->
			IdFinal = Id
	end,
	case Type_id =:= undefined of
		true ->
			Type_idFinal = [];
		false ->
			Type_idFinal = Type_id
	end,
	case Equip_name =:= undefined of
		true ->
			Equip_nameFinal = [];
		false ->
			Equip_nameFinal = Equip_name
	end,
	case Level =:= undefined of
		true ->
				LevelFinal = 0;
		false ->
			LevelFinal = Level
	end,
	case Active =:= undefined of
		true ->
				ActiveFinal = 0;
		false ->
			ActiveFinal = Active
	end,
	case Phy_anti =:= undefined of
		true ->
				Phy_antiFinal = 0;
		false ->
			Phy_antiFinal = Phy_anti
	end,
	case Magic_anti =:= undefined of
		true ->
				Magic_antiFinal = 0;
		false ->
			Magic_antiFinal = Magic_anti
	end,
	case Hurt =:= undefined of
		true ->
				HurtFinal = 0;
		false ->
			HurtFinal = Hurt
	end,
	case No_defence =:= undefined of
		true ->
				No_defenceFinal = 0;
		false ->
			No_defenceFinal = No_defence
	end,
	case Hurt_rebound =:= undefined of
		true ->
				Hurt_reboundFinal = 0;
		false ->
			Hurt_reboundFinal = Hurt_rebound
	end,
	case Link_slot_num =:= undefined of
		true ->
				Link_slot_numFinal = 0;
		false ->
			Link_slot_numFinal = Link_slot_num
	end,
	case Whole_name =:= undefined of
		true ->
				Whole_nameFinal = <<>>;
		false ->
			Whole_nameFinal = Whole_name
	end,
	Type_id_bin = encode_int32s(Type_idFinal, <<>>),
	SizeType_idFinal = erlang:length(Type_idFinal),
	BinLen_type_id = erlang:byte_size(Type_id_bin),
	Equip_name_bin = encode_strings(Equip_nameFinal, <<>>),
	SizeEquip_nameFinal = erlang:length(Equip_nameFinal),
	BinLen_equip_name = erlang:byte_size(Equip_name_bin),
	Whole_name2 = common_tool:to_binary(Whole_nameFinal),
	Whole_nameLen = erlang:byte_size(Whole_name2),

	<<IdFinal:32/signed,SizeType_idFinal:16, BinLen_type_id:32, Type_id_bin/binary,SizeEquip_nameFinal:16, BinLen_equip_name:32, Equip_name_bin/binary,LevelFinal:32/signed,ActiveFinal:32/signed,Phy_antiFinal:32/signed,Magic_antiFinal:32/signed,HurtFinal:32/signed,No_defenceFinal:32/signed,Hurt_reboundFinal:32/signed,Link_slot_numFinal:32/signed,Whole_nameLen:16, Whole_name2/binary>>;
encode_p_equip_five_ele(_) -> 
	<<>>.

decode_p_equip_five_ele(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed,_Sizetype_id:16, BinLentype_id:32, Bin1/binary>> = Bin0,
	<<SubBintype_id:BinLentype_id/binary, Bin2/binary>> = Bin1, 
	Type_id = lists:reverse(decode_int32s(SubBintype_id, [])),
	<<_Sizeequip_name:16, BinLenequip_name:32, Bin3/binary>> = Bin2,
	<<SubBinequip_name:BinLenequip_name/binary, Bin4/binary>> = Bin3, 
	Equip_name = lists:reverse(decode_strings(SubBinequip_name, [])),
	<<Level:32/signed,Active:32/signed,Phy_anti:32/signed,Magic_anti:32/signed,Hurt:32/signed,No_defence:32/signed,Hurt_rebound:32/signed,Link_slot_num:32/signed,Whole_nameLen:16, Bin5/binary>> = Bin4,
	<<Whole_name:Whole_nameLen/binary>> = Bin5,

	{p_equip_five_ele, Id,Type_id,Equip_name,Level,Active,Phy_anti,Magic_anti,Hurt,No_defence,Hurt_rebound,Link_slot_num,common_tool:to_list(Whole_name)};

decode_p_equip_five_ele(_) ->
	undefined.
encode_p_equip_whole_attr(Record) when is_record(Record, p_equip_whole_attr) ->
	#p_equip_whole_attr{id=Id,sub_id=Sub_id,active=Active,index=Index,name=Name,desc=Desc,number=Number} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = 0;
		false ->
			IdFinal = Id
	end,
	case Sub_id =:= undefined of
		true ->
				Sub_idFinal = 0;
		false ->
			Sub_idFinal = Sub_id
	end,
	case Active =:= undefined of
		true ->
				ActiveFinal = 0;
		false ->
			ActiveFinal = Active
	end,
	case Index =:= undefined of
		true ->
				IndexFinal = 0;
		false ->
			IndexFinal = Index
	end,
	case Name =:= undefined of
		true ->
				NameFinal = <<>>;
		false ->
			NameFinal = Name
	end,
	case Desc =:= undefined of
		true ->
				DescFinal = <<>>;
		false ->
			DescFinal = Desc
	end,
	case Number =:= undefined of
		true ->
				NumberFinal = 0;
		false ->
			NumberFinal = Number
	end,
	Name2 = common_tool:to_binary(NameFinal),
	NameLen = erlang:byte_size(Name2),
	Desc2 = common_tool:to_binary(DescFinal),
	DescLen = erlang:byte_size(Desc2),

	<<IdFinal:32/signed,Sub_idFinal:32/signed,ActiveFinal:32/signed,IndexFinal:32/signed,NameLen:16, Name2/binary,DescLen:16, Desc2/binary,NumberFinal:32/signed>>;
encode_p_equip_whole_attr(_) -> 
	<<>>.

decode_p_equip_whole_attr(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed,Sub_id:32/signed,Active:32/signed,Index:32/signed,NameLen:16, Bin1/binary>> = Bin0,
	<<Name:NameLen/binary,DescLen:16, Bin2/binary>> = Bin1,
	<<Desc:DescLen/binary,Number:32/signed>> = Bin2,

	{p_equip_whole_attr, Id,Sub_id,Active,Index,common_tool:to_list(Name),common_tool:to_list(Desc),Number};

decode_p_equip_whole_attr(_) ->
	undefined.
encode_p_refresh_info(Record) when is_record(Record, p_refresh_info) ->
	#p_refresh_info{refresh_type=Refresh_type,refresh_interval=Refresh_interval,refresh_start_year=Refresh_start_year,refresh_end_year=Refresh_end_year,refresh_start_month=Refresh_start_month,refresh_end_month=Refresh_end_month,refresh_start_day=Refresh_start_day,refresh_end_day=Refresh_end_day,refresh_start_weekday=Refresh_start_weekday,refresh_end_weekday=Refresh_end_weekday,refresh_start_hour=Refresh_start_hour,refresh_end_hour=Refresh_end_hour,refresh_start_minute=Refresh_start_minute,refresh_end_minute=Refresh_end_minute,active_time=Active_time,start_time=Start_time,end_time=End_time} = Record,
	case Refresh_type =:= undefined of
		true ->
				Refresh_typeFinal = undefined,
				exit({required_field_not_assigned, p_refresh_info, refresh_type});
		false ->
			Refresh_typeFinal = Refresh_type
	end,
	case Refresh_interval =:= undefined of
		true ->
				Refresh_intervalFinal = 0;
		false ->
			Refresh_intervalFinal = Refresh_interval
	end,
	case Refresh_start_year =:= undefined of
		true ->
				Refresh_start_yearFinal = 0;
		false ->
			Refresh_start_yearFinal = Refresh_start_year
	end,
	case Refresh_end_year =:= undefined of
		true ->
				Refresh_end_yearFinal = 0;
		false ->
			Refresh_end_yearFinal = Refresh_end_year
	end,
	case Refresh_start_month =:= undefined of
		true ->
				Refresh_start_monthFinal = 0;
		false ->
			Refresh_start_monthFinal = Refresh_start_month
	end,
	case Refresh_end_month =:= undefined of
		true ->
				Refresh_end_monthFinal = 0;
		false ->
			Refresh_end_monthFinal = Refresh_end_month
	end,
	case Refresh_start_day =:= undefined of
		true ->
				Refresh_start_dayFinal = 0;
		false ->
			Refresh_start_dayFinal = Refresh_start_day
	end,
	case Refresh_end_day =:= undefined of
		true ->
				Refresh_end_dayFinal = 0;
		false ->
			Refresh_end_dayFinal = Refresh_end_day
	end,
	case Refresh_start_weekday =:= undefined of
		true ->
				Refresh_start_weekdayFinal = 0;
		false ->
			Refresh_start_weekdayFinal = Refresh_start_weekday
	end,
	case Refresh_end_weekday =:= undefined of
		true ->
				Refresh_end_weekdayFinal = 0;
		false ->
			Refresh_end_weekdayFinal = Refresh_end_weekday
	end,
	case Refresh_start_hour =:= undefined of
		true ->
				Refresh_start_hourFinal = 0;
		false ->
			Refresh_start_hourFinal = Refresh_start_hour
	end,
	case Refresh_end_hour =:= undefined of
		true ->
				Refresh_end_hourFinal = 0;
		false ->
			Refresh_end_hourFinal = Refresh_end_hour
	end,
	case Refresh_start_minute =:= undefined of
		true ->
				Refresh_start_minuteFinal = 0;
		false ->
			Refresh_start_minuteFinal = Refresh_start_minute
	end,
	case Refresh_end_minute =:= undefined of
		true ->
				Refresh_end_minuteFinal = 0;
		false ->
			Refresh_end_minuteFinal = Refresh_end_minute
	end,
	case Active_time =:= undefined of
		true ->
				Active_timeFinal = undefined,
				exit({required_field_not_assigned, p_refresh_info, active_time});
		false ->
			Active_timeFinal = Active_time
	end,
	case Start_time =:= undefined of
		true ->
				Start_timeFinal = undefined,
				exit({required_field_not_assigned, p_refresh_info, start_time});
		false ->
			Start_timeFinal = Start_time
	end,
	case End_time =:= undefined of
		true ->
				End_timeFinal = undefined,
				exit({required_field_not_assigned, p_refresh_info, end_time});
		false ->
			End_timeFinal = End_time
	end,

	<<Refresh_typeFinal:32/signed,Refresh_intervalFinal:32/signed,Refresh_start_yearFinal:32/signed,Refresh_end_yearFinal:32/signed,Refresh_start_monthFinal:32/signed,Refresh_end_monthFinal:32/signed,Refresh_start_dayFinal:32/signed,Refresh_end_dayFinal:32/signed,Refresh_start_weekdayFinal:32/signed,Refresh_end_weekdayFinal:32/signed,Refresh_start_hourFinal:32/signed,Refresh_end_hourFinal:32/signed,Refresh_start_minuteFinal:32/signed,Refresh_end_minuteFinal:32/signed,Active_timeFinal:32/signed,Start_timeFinal:32/signed,End_timeFinal:32/signed>>;
encode_p_refresh_info(_) -> 
	<<>>.

decode_p_refresh_info(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Refresh_type:32/signed,Refresh_interval:32/signed,Refresh_start_year:32/signed,Refresh_end_year:32/signed,Refresh_start_month:32/signed,Refresh_end_month:32/signed,Refresh_start_day:32/signed,Refresh_end_day:32/signed,Refresh_start_weekday:32/signed,Refresh_end_weekday:32/signed,Refresh_start_hour:32/signed,Refresh_end_hour:32/signed,Refresh_start_minute:32/signed,Refresh_end_minute:32/signed,Active_time:32/signed,Start_time:32/signed,End_time:32/signed>> = Bin0,

	{p_refresh_info, Refresh_type,Refresh_interval,Refresh_start_year,Refresh_end_year,Refresh_start_month,Refresh_end_month,Refresh_start_day,Refresh_end_day,Refresh_start_weekday,Refresh_end_weekday,Refresh_start_hour,Refresh_end_hour,Refresh_start_minute,Refresh_end_minute,Active_time,Start_time,End_time};

decode_p_refresh_info(_) ->
	undefined.
encode_p_monster_skill(Record) when is_record(Record, p_monster_skill) ->
	#p_monster_skill{skillid=Skillid,level=Level} = Record,
	case Skillid =:= undefined of
		true ->
				SkillidFinal = undefined,
				exit({required_field_not_assigned, p_monster_skill, skillid});
		false ->
			SkillidFinal = Skillid
	end,
	case Level =:= undefined of
		true ->
				LevelFinal = undefined,
				exit({required_field_not_assigned, p_monster_skill, level});
		false ->
			LevelFinal = Level
	end,

	<<SkillidFinal:32/signed,LevelFinal:32/signed>>;
encode_p_monster_skill(_) -> 
	<<>>.

decode_p_monster_skill(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Skillid:32/signed,Level:32/signed>> = Bin0,

	{p_monster_skill, Skillid,Level};

decode_p_monster_skill(_) ->
	undefined.
encode_p_drop_property(Record) when is_record(Record, p_drop_property) ->
	#p_drop_property{bind=Bind,colour=Colour,quality=Quality,hole_num=Hole_num,use_bind=Use_bind} = Record,
	case Bind =:= undefined of
		true ->
				BindFinal = 0;
		false ->
			case Bind of
				true ->
					BindFinal = 1;
				false ->
					BindFinal = 0
			end
	end,
	case Colour =:= undefined of
		true ->
				ColourFinal = 0;
		false ->
			ColourFinal = Colour
	end,
	case Quality =:= undefined of
		true ->
				QualityFinal = 0;
		false ->
			QualityFinal = Quality
	end,
	case Hole_num =:= undefined of
		true ->
				Hole_numFinal = 0;
		false ->
			Hole_numFinal = Hole_num
	end,
	case Use_bind =:= undefined of
		true ->
				Use_bindFinal = 0;
		false ->
			Use_bindFinal = Use_bind
	end,

	<<BindFinal:8,ColourFinal:32/signed,QualityFinal:32/signed,Hole_numFinal:32/signed,Use_bindFinal:32/signed>>;
encode_p_drop_property(_) -> 
	<<>>.

decode_p_drop_property(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<BindTmp:8,Colour:32/signed,Quality:32/signed,Hole_num:32/signed,Use_bind:32/signed>> = Bin0,
case BindTmp of 
	1 -> 
		Bind = true;
	_ ->
		Bind = false
end,

	{p_drop_property, Bind,Colour,Quality,Hole_num,Use_bind};

decode_p_drop_property(_) ->
	undefined.
encode_p_drop_colour_mode(Record) when is_record(Record, p_drop_colour_mode) ->
	#p_drop_colour_mode{colour=Colour,rate=Rate} = Record,
	case Colour =:= undefined of
		true ->
				ColourFinal = undefined,
				exit({required_field_not_assigned, p_drop_colour_mode, colour});
		false ->
			ColourFinal = Colour
	end,
	case Rate =:= undefined of
		true ->
				RateFinal = undefined,
				exit({required_field_not_assigned, p_drop_colour_mode, rate});
		false ->
			RateFinal = Rate
	end,

	<<ColourFinal:32/signed,RateFinal:32/signed>>;
encode_p_drop_colour_mode(_) -> 
	<<>>.

decode_p_drop_colour_mode(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Colour:32/signed,Rate:32/signed>> = Bin0,

	{p_drop_colour_mode, Colour,Rate};

decode_p_drop_colour_mode(_) ->
	undefined.
encode_p_drop_quality_mode(Record) when is_record(Record, p_drop_quality_mode) ->
	#p_drop_quality_mode{quality=Quality,rate=Rate} = Record,
	case Quality =:= undefined of
		true ->
				QualityFinal = undefined,
				exit({required_field_not_assigned, p_drop_quality_mode, quality});
		false ->
			QualityFinal = Quality
	end,
	case Rate =:= undefined of
		true ->
				RateFinal = undefined,
				exit({required_field_not_assigned, p_drop_quality_mode, rate});
		false ->
			RateFinal = Rate
	end,

	<<QualityFinal:32/signed,RateFinal:32/signed>>;
encode_p_drop_quality_mode(_) -> 
	<<>>.

decode_p_drop_quality_mode(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Quality:32/signed,Rate:32/signed>> = Bin0,

	{p_drop_quality_mode, Quality,Rate};

decode_p_drop_quality_mode(_) ->
	undefined.
encode_p_drop_hole_mode(Record) when is_record(Record, p_drop_hole_mode) ->
	#p_drop_hole_mode{hole_num=Hole_num,rate=Rate} = Record,
	case Hole_num =:= undefined of
		true ->
				Hole_numFinal = undefined,
				exit({required_field_not_assigned, p_drop_hole_mode, hole_num});
		false ->
			Hole_numFinal = Hole_num
	end,
	case Rate =:= undefined of
		true ->
				RateFinal = undefined,
				exit({required_field_not_assigned, p_drop_hole_mode, rate});
		false ->
			RateFinal = Rate
	end,

	<<Hole_numFinal:32/signed,RateFinal:32/signed>>;
encode_p_drop_hole_mode(_) -> 
	<<>>.

decode_p_drop_hole_mode(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Hole_num:32/signed,Rate:32/signed>> = Bin0,

	{p_drop_hole_mode, Hole_num,Rate};

decode_p_drop_hole_mode(_) ->
	undefined.
encode_p_drop_mode(Record) when is_record(Record, p_drop_mode) ->
	#p_drop_mode{mode_id=Mode_id,bind_rate=Bind_rate,bind_colour=Bind_colour,unbind_colour=Unbind_colour,bind_quality=Bind_quality,unbind_quality=Unbind_quality,bind_hole=Bind_hole,unbind_hole=Unbind_hole,use_bind=Use_bind} = Record,
	case Mode_id =:= undefined of
		true ->
				Mode_idFinal = undefined,
				exit({required_field_not_assigned, p_drop_mode, mode_id});
		false ->
			Mode_idFinal = Mode_id
	end,
	case Bind_rate =:= undefined of
		true ->
				Bind_rateFinal = 0;
		false ->
			Bind_rateFinal = Bind_rate
	end,
	case Bind_colour =:= undefined of
		true ->
			Bind_colourFinal = [];
		false ->
			Bind_colourFinal = Bind_colour
	end,
	case Unbind_colour =:= undefined of
		true ->
			Unbind_colourFinal = [];
		false ->
			Unbind_colourFinal = Unbind_colour
	end,
	case Bind_quality =:= undefined of
		true ->
			Bind_qualityFinal = [];
		false ->
			Bind_qualityFinal = Bind_quality
	end,
	case Unbind_quality =:= undefined of
		true ->
			Unbind_qualityFinal = [];
		false ->
			Unbind_qualityFinal = Unbind_quality
	end,
	case Bind_hole =:= undefined of
		true ->
			Bind_holeFinal = [];
		false ->
			Bind_holeFinal = Bind_hole
	end,
	case Unbind_hole =:= undefined of
		true ->
			Unbind_holeFinal = [];
		false ->
			Unbind_holeFinal = Unbind_hole
	end,
	case Use_bind =:= undefined of
		true ->
				Use_bindFinal = 1;
		false ->
			Use_bindFinal = Use_bind
	end,
	Bind_colour_bin = encode_p_drop_colour_modes(Bind_colourFinal, <<>>),
	SizeBind_colourFinal = erlang:length(Bind_colourFinal),
	BinLen_bind_colour = erlang:byte_size(Bind_colour_bin),
	Unbind_colour_bin = encode_p_drop_colour_modes(Unbind_colourFinal, <<>>),
	SizeUnbind_colourFinal = erlang:length(Unbind_colourFinal),
	BinLen_unbind_colour = erlang:byte_size(Unbind_colour_bin),
	Bind_quality_bin = encode_p_drop_quality_modes(Bind_qualityFinal, <<>>),
	SizeBind_qualityFinal = erlang:length(Bind_qualityFinal),
	BinLen_bind_quality = erlang:byte_size(Bind_quality_bin),
	Unbind_quality_bin = encode_p_drop_quality_modes(Unbind_qualityFinal, <<>>),
	SizeUnbind_qualityFinal = erlang:length(Unbind_qualityFinal),
	BinLen_unbind_quality = erlang:byte_size(Unbind_quality_bin),
	Bind_hole_bin = encode_p_drop_hole_modes(Bind_holeFinal, <<>>),
	SizeBind_holeFinal = erlang:length(Bind_holeFinal),
	BinLen_bind_hole = erlang:byte_size(Bind_hole_bin),
	Unbind_hole_bin = encode_p_drop_hole_modes(Unbind_holeFinal, <<>>),
	SizeUnbind_holeFinal = erlang:length(Unbind_holeFinal),
	BinLen_unbind_hole = erlang:byte_size(Unbind_hole_bin),

	<<Mode_idFinal:32/signed,Bind_rateFinal:32/signed,SizeBind_colourFinal:16, BinLen_bind_colour:32, Bind_colour_bin/binary,SizeUnbind_colourFinal:16, BinLen_unbind_colour:32, Unbind_colour_bin/binary,SizeBind_qualityFinal:16, BinLen_bind_quality:32, Bind_quality_bin/binary,SizeUnbind_qualityFinal:16, BinLen_unbind_quality:32, Unbind_quality_bin/binary,SizeBind_holeFinal:16, BinLen_bind_hole:32, Bind_hole_bin/binary,SizeUnbind_holeFinal:16, BinLen_unbind_hole:32, Unbind_hole_bin/binary,Use_bindFinal:32/signed>>;
encode_p_drop_mode(_) -> 
	<<>>.

decode_p_drop_mode(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Mode_id:32/signed,Bind_rate:32/signed,_Sizebind_colour:16, BinLenbind_colour:32, Bin1/binary>> = Bin0,
	<<SubBinbind_colour:BinLenbind_colour/binary, Bin2/binary>> = Bin1, 
	Bind_colour = lists:reverse(decode_p_drop_colour_modes(SubBinbind_colour, [])),
	<<_Sizeunbind_colour:16, BinLenunbind_colour:32, Bin3/binary>> = Bin2,
	<<SubBinunbind_colour:BinLenunbind_colour/binary, Bin4/binary>> = Bin3, 
	Unbind_colour = lists:reverse(decode_p_drop_colour_modes(SubBinunbind_colour, [])),
	<<_Sizebind_quality:16, BinLenbind_quality:32, Bin5/binary>> = Bin4,
	<<SubBinbind_quality:BinLenbind_quality/binary, Bin6/binary>> = Bin5, 
	Bind_quality = lists:reverse(decode_p_drop_quality_modes(SubBinbind_quality, [])),
	<<_Sizeunbind_quality:16, BinLenunbind_quality:32, Bin7/binary>> = Bin6,
	<<SubBinunbind_quality:BinLenunbind_quality/binary, Bin8/binary>> = Bin7, 
	Unbind_quality = lists:reverse(decode_p_drop_quality_modes(SubBinunbind_quality, [])),
	<<_Sizebind_hole:16, BinLenbind_hole:32, Bin9/binary>> = Bin8,
	<<SubBinbind_hole:BinLenbind_hole/binary, Bin10/binary>> = Bin9, 
	Bind_hole = lists:reverse(decode_p_drop_hole_modes(SubBinbind_hole, [])),
	<<_Sizeunbind_hole:16, BinLenunbind_hole:32, Bin11/binary>> = Bin10,
	<<SubBinunbind_hole:BinLenunbind_hole/binary, Bin12/binary>> = Bin11, 
	Unbind_hole = lists:reverse(decode_p_drop_hole_modes(SubBinunbind_hole, [])),
	<<Use_bind:32/signed>> = Bin12,

	{p_drop_mode, Mode_id,Bind_rate,Bind_colour,Unbind_colour,Bind_quality,Unbind_quality,Bind_hole,Unbind_hole,Use_bind};

decode_p_drop_mode(_) ->
	undefined.
encode_p_single_drop(Record) when is_record(Record, p_single_drop) ->
	#p_single_drop{type=Type,typeid=Typeid,weight=Weight} = Record,
	case Type =:= undefined of
		true ->
				TypeFinal = undefined,
				exit({required_field_not_assigned, p_single_drop, type});
		false ->
			TypeFinal = Type
	end,
	case Typeid =:= undefined of
		true ->
				TypeidFinal = undefined,
				exit({required_field_not_assigned, p_single_drop, typeid});
		false ->
			TypeidFinal = Typeid
	end,
	case Weight =:= undefined of
		true ->
				WeightFinal = undefined,
				exit({required_field_not_assigned, p_single_drop, weight});
		false ->
			WeightFinal = Weight
	end,

	<<TypeFinal:32/signed,TypeidFinal:32/signed,WeightFinal:32/signed>>;
encode_p_single_drop(_) -> 
	<<>>.

decode_p_single_drop(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Type:32/signed,Typeid:32/signed,Weight:32/signed>> = Bin0,

	{p_single_drop, Type,Typeid,Weight};

decode_p_single_drop(_) ->
	undefined.
encode_p_drop_info(Record) when is_record(Record, p_drop_info) ->
	#p_drop_info{drops=Drops,rate=Rate,max_num=Max_num,drop_mode=Drop_mode} = Record,
	case Drops =:= undefined of
		true ->
			DropsFinal = [];
		false ->
			DropsFinal = Drops
	end,
	case Rate =:= undefined of
		true ->
				RateFinal = undefined,
				exit({required_field_not_assigned, p_drop_info, rate});
		false ->
			RateFinal = Rate
	end,
	case Max_num =:= undefined of
		true ->
				Max_numFinal = 1;
		false ->
			Max_numFinal = Max_num
	end,
	case Drop_mode =:= undefined of
		true ->
				Drop_modeFinal = 0;
		false ->
			Drop_modeFinal = Drop_mode
	end,
	Drops_bin = encode_p_single_drops(DropsFinal, <<>>),
	SizeDropsFinal = erlang:length(DropsFinal),
	BinLen_drops = erlang:byte_size(Drops_bin),
	Drop_mode_bin = encode_p_drop_mode(Drop_modeFinal),
	BinLen_drop_mode = erlang:byte_size(Drop_mode_bin),

	<<SizeDropsFinal:16, BinLen_drops:32, Drops_bin/binary,RateFinal:32/signed,Max_numFinal:32/signed,BinLen_drop_mode:32, Drop_mode_bin/binary>>;
encode_p_drop_info(_) -> 
	<<>>.

decode_p_drop_info(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizedrops:16, BinLendrops:32, Bin1/binary>> = Bin0,
	<<SubBindrops:BinLendrops/binary, Bin2/binary>> = Bin1, 
	Drops = lists:reverse(decode_p_single_drops(SubBindrops, [])),
	<<Rate:32/signed,Max_num:32/signed,_SubBinSizedrop_mode:32, SubBindrop_mode/binary>> = Bin2,
	Drop_mode = decode_p_drop_mode(SubBindrop_mode),

	{p_drop_info, Drops,Rate,Max_num,Drop_mode};

decode_p_drop_info(_) ->
	undefined.
encode_p_monster_base_info(Record) when is_record(Record, p_monster_base_info) ->
	#p_monster_base_info{typeid=Typeid,monstername=Monstername,rarity=Rarity,level=Level,attacktype=Attacktype,max_hp=Max_hp,max_mp=Max_mp,min_attack=Min_attack,max_attack=Max_attack,phy_defence=Phy_defence,magic_defence=Magic_defence,blood_resume_speed=Blood_resume_speed,magic_resume_speed=Magic_resume_speed,dead_attack=Dead_attack,lucky=Lucky,move_speed=Move_speed,attack_speed=Attack_speed,miss=Miss,no_defence=No_defence,phy_anti=Phy_anti,magic_anti=Magic_anti,poisoning_resist=Poisoning_resist,dizzy_resist=Dizzy_resist,freeze_resist=Freeze_resist,equip_score=Equip_score,spec_score_one=Spec_score_one,spec_score_two=Spec_score_two,hit_rate=Hit_rate,ai_type=Ai_type,guard_radius=Guard_radius,attention_radius=Attention_radius,activity_radius=Activity_radius,refresh=Refresh,max_drop_num=Max_drop_num,droplist=Droplist,exp=Exp,min_money=Min_money,max_money=Max_money,skinid=Skinid,is_human=Is_human,color=Color,money_rate=Money_rate,skills=Skills} = Record,
	case Typeid =:= undefined of
		true ->
				TypeidFinal = undefined,
				exit({required_field_not_assigned, p_monster_base_info, typeid});
		false ->
			TypeidFinal = Typeid
	end,
	case Monstername =:= undefined of
		true ->
				MonsternameFinal = undefined,
				exit({required_field_not_assigned, p_monster_base_info, monstername});
		false ->
			MonsternameFinal = Monstername
	end,
	case Rarity =:= undefined of
		true ->
				RarityFinal = undefined,
				exit({required_field_not_assigned, p_monster_base_info, rarity});
		false ->
			RarityFinal = Rarity
	end,
	case Level =:= undefined of
		true ->
				LevelFinal = undefined,
				exit({required_field_not_assigned, p_monster_base_info, level});
		false ->
			LevelFinal = Level
	end,
	case Attacktype =:= undefined of
		true ->
				AttacktypeFinal = undefined,
				exit({required_field_not_assigned, p_monster_base_info, attacktype});
		false ->
			AttacktypeFinal = Attacktype
	end,
	case Max_hp =:= undefined of
		true ->
				Max_hpFinal = undefined,
				exit({required_field_not_assigned, p_monster_base_info, max_hp});
		false ->
			Max_hpFinal = Max_hp
	end,
	case Max_mp =:= undefined of
		true ->
				Max_mpFinal = undefined,
				exit({required_field_not_assigned, p_monster_base_info, max_mp});
		false ->
			Max_mpFinal = Max_mp
	end,
	case Min_attack =:= undefined of
		true ->
				Min_attackFinal = undefined,
				exit({required_field_not_assigned, p_monster_base_info, min_attack});
		false ->
			Min_attackFinal = Min_attack
	end,
	case Max_attack =:= undefined of
		true ->
				Max_attackFinal = undefined,
				exit({required_field_not_assigned, p_monster_base_info, max_attack});
		false ->
			Max_attackFinal = Max_attack
	end,
	case Phy_defence =:= undefined of
		true ->
				Phy_defenceFinal = undefined,
				exit({required_field_not_assigned, p_monster_base_info, phy_defence});
		false ->
			Phy_defenceFinal = Phy_defence
	end,
	case Magic_defence =:= undefined of
		true ->
				Magic_defenceFinal = undefined,
				exit({required_field_not_assigned, p_monster_base_info, magic_defence});
		false ->
			Magic_defenceFinal = Magic_defence
	end,
	case Blood_resume_speed =:= undefined of
		true ->
				Blood_resume_speedFinal = undefined,
				exit({required_field_not_assigned, p_monster_base_info, blood_resume_speed});
		false ->
			Blood_resume_speedFinal = Blood_resume_speed
	end,
	case Magic_resume_speed =:= undefined of
		true ->
				Magic_resume_speedFinal = undefined,
				exit({required_field_not_assigned, p_monster_base_info, magic_resume_speed});
		false ->
			Magic_resume_speedFinal = Magic_resume_speed
	end,
	case Dead_attack =:= undefined of
		true ->
				Dead_attackFinal = undefined,
				exit({required_field_not_assigned, p_monster_base_info, dead_attack});
		false ->
			Dead_attackFinal = Dead_attack
	end,
	case Lucky =:= undefined of
		true ->
				LuckyFinal = undefined,
				exit({required_field_not_assigned, p_monster_base_info, lucky});
		false ->
			LuckyFinal = Lucky
	end,
	case Move_speed =:= undefined of
		true ->
				Move_speedFinal = undefined,
				exit({required_field_not_assigned, p_monster_base_info, move_speed});
		false ->
			Move_speedFinal = Move_speed
	end,
	case Attack_speed =:= undefined of
		true ->
				Attack_speedFinal = undefined,
				exit({required_field_not_assigned, p_monster_base_info, attack_speed});
		false ->
			Attack_speedFinal = Attack_speed
	end,
	case Miss =:= undefined of
		true ->
				MissFinal = undefined,
				exit({required_field_not_assigned, p_monster_base_info, miss});
		false ->
			MissFinal = Miss
	end,
	case No_defence =:= undefined of
		true ->
				No_defenceFinal = undefined,
				exit({required_field_not_assigned, p_monster_base_info, no_defence});
		false ->
			No_defenceFinal = No_defence
	end,
	case Phy_anti =:= undefined of
		true ->
				Phy_antiFinal = undefined,
				exit({required_field_not_assigned, p_monster_base_info, phy_anti});
		false ->
			Phy_antiFinal = Phy_anti
	end,
	case Magic_anti =:= undefined of
		true ->
				Magic_antiFinal = undefined,
				exit({required_field_not_assigned, p_monster_base_info, magic_anti});
		false ->
			Magic_antiFinal = Magic_anti
	end,
	case Poisoning_resist =:= undefined of
		true ->
				Poisoning_resistFinal = 0;
		false ->
			Poisoning_resistFinal = Poisoning_resist
	end,
	case Dizzy_resist =:= undefined of
		true ->
				Dizzy_resistFinal = 0;
		false ->
			Dizzy_resistFinal = Dizzy_resist
	end,
	case Freeze_resist =:= undefined of
		true ->
				Freeze_resistFinal = 0;
		false ->
			Freeze_resistFinal = Freeze_resist
	end,
	case Equip_score =:= undefined of
		true ->
				Equip_scoreFinal = 0;
		false ->
			Equip_scoreFinal = Equip_score
	end,
	case Spec_score_one =:= undefined of
		true ->
				Spec_score_oneFinal = 0;
		false ->
			Spec_score_oneFinal = Spec_score_one
	end,
	case Spec_score_two =:= undefined of
		true ->
				Spec_score_twoFinal = 0;
		false ->
			Spec_score_twoFinal = Spec_score_two
	end,
	case Hit_rate =:= undefined of
		true ->
				Hit_rateFinal = 10000;
		false ->
			Hit_rateFinal = Hit_rate
	end,
	case Ai_type =:= undefined of
		true ->
				Ai_typeFinal = undefined,
				exit({required_field_not_assigned, p_monster_base_info, ai_type});
		false ->
			Ai_typeFinal = Ai_type
	end,
	case Guard_radius =:= undefined of
		true ->
				Guard_radiusFinal = undefined,
				exit({required_field_not_assigned, p_monster_base_info, guard_radius});
		false ->
			Guard_radiusFinal = Guard_radius
	end,
	case Attention_radius =:= undefined of
		true ->
				Attention_radiusFinal = undefined,
				exit({required_field_not_assigned, p_monster_base_info, attention_radius});
		false ->
			Attention_radiusFinal = Attention_radius
	end,
	case Activity_radius =:= undefined of
		true ->
				Activity_radiusFinal = undefined,
				exit({required_field_not_assigned, p_monster_base_info, activity_radius});
		false ->
			Activity_radiusFinal = Activity_radius
	end,
	case Refresh =:= undefined of
		true ->
				RefreshFinal = undefined,
				exit({required_field_not_assigned, p_monster_base_info, refresh});
		false ->
			RefreshFinal = Refresh
	end,
	case Max_drop_num =:= undefined of
		true ->
				Max_drop_numFinal = 0;
		false ->
			Max_drop_numFinal = Max_drop_num
	end,
	case Droplist =:= undefined of
		true ->
			DroplistFinal = [];
		false ->
			DroplistFinal = Droplist
	end,
	case Exp =:= undefined of
		true ->
				ExpFinal = undefined,
				exit({required_field_not_assigned, p_monster_base_info, exp});
		false ->
			ExpFinal = Exp
	end,
	case Min_money =:= undefined of
		true ->
				Min_moneyFinal = undefined,
				exit({required_field_not_assigned, p_monster_base_info, min_money});
		false ->
			Min_moneyFinal = Min_money
	end,
	case Max_money =:= undefined of
		true ->
				Max_moneyFinal = undefined,
				exit({required_field_not_assigned, p_monster_base_info, max_money});
		false ->
			Max_moneyFinal = Max_money
	end,
	case Skinid =:= undefined of
		true ->
				SkinidFinal = undefined,
				exit({required_field_not_assigned, p_monster_base_info, skinid});
		false ->
			SkinidFinal = Skinid
	end,
	case Is_human =:= undefined of
		true ->
				Is_humanFinal = undefined,
				exit({required_field_not_assigned, p_monster_base_info, is_human});
		false ->
			Is_humanFinal = Is_human
	end,
	case Color =:= undefined of
		true ->
				ColorFinal = undefined,
				exit({required_field_not_assigned, p_monster_base_info, color});
		false ->
			ColorFinal = Color
	end,
	case Money_rate =:= undefined of
		true ->
				Money_rateFinal = undefined,
				exit({required_field_not_assigned, p_monster_base_info, money_rate});
		false ->
			Money_rateFinal = Money_rate
	end,
	case Skills =:= undefined of
		true ->
			SkillsFinal = [];
		false ->
			SkillsFinal = Skills
	end,
	Monstername2 = common_tool:to_binary(MonsternameFinal),
	MonsternameLen = erlang:byte_size(Monstername2),
	Refresh_bin = encode_p_refresh_info(RefreshFinal),
	BinLen_refresh = erlang:byte_size(Refresh_bin),
	Droplist_bin = encode_p_drop_infos(DroplistFinal, <<>>),
	SizeDroplistFinal = erlang:length(DroplistFinal),
	BinLen_droplist = erlang:byte_size(Droplist_bin),
	Skills_bin = encode_p_monster_skills(SkillsFinal, <<>>),
	SizeSkillsFinal = erlang:length(SkillsFinal),
	BinLen_skills = erlang:byte_size(Skills_bin),

	<<TypeidFinal:32/signed,MonsternameLen:16, Monstername2/binary,RarityFinal:32/signed,LevelFinal:32/signed,AttacktypeFinal:32/signed,Max_hpFinal:32/signed,Max_mpFinal:32/signed,Min_attackFinal:32/signed,Max_attackFinal:32/signed,Phy_defenceFinal:32/signed,Magic_defenceFinal:32/signed,Blood_resume_speedFinal:32/signed,Magic_resume_speedFinal:32/signed,Dead_attackFinal:32/signed,LuckyFinal:32/signed,Move_speedFinal:32/signed,Attack_speedFinal:32/signed,MissFinal:32/signed,No_defenceFinal:32/signed,Phy_antiFinal:32/signed,Magic_antiFinal:32/signed,Poisoning_resistFinal:32/signed,Dizzy_resistFinal:32/signed,Freeze_resistFinal:32/signed,Equip_scoreFinal:32/signed,Spec_score_oneFinal:32/signed,Spec_score_twoFinal:32/signed,Hit_rateFinal:32/signed,Ai_typeFinal:32/signed,Guard_radiusFinal:32/signed,Attention_radiusFinal:32/signed,Activity_radiusFinal:32/signed,BinLen_refresh:32, Refresh_bin/binary,Max_drop_numFinal:32/signed,SizeDroplistFinal:16, BinLen_droplist:32, Droplist_bin/binary,ExpFinal:32/signed,Min_moneyFinal:32/signed,Max_moneyFinal:32/signed,SkinidFinal:32/signed,Is_humanFinal:32/signed,ColorFinal:32/signed,Money_rateFinal:32/signed,SizeSkillsFinal:16, BinLen_skills:32, Skills_bin/binary>>;
encode_p_monster_base_info(_) -> 
	<<>>.

decode_p_monster_base_info(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Typeid:32/signed,MonsternameLen:16, Bin1/binary>> = Bin0,
	<<Monstername:MonsternameLen/binary,Rarity:32/signed,Level:32/signed,Attacktype:32/signed,Max_hp:32/signed,Max_mp:32/signed,Min_attack:32/signed,Max_attack:32/signed,Phy_defence:32/signed,Magic_defence:32/signed,Blood_resume_speed:32/signed,Magic_resume_speed:32/signed,Dead_attack:32/signed,Lucky:32/signed,Move_speed:32/signed,Attack_speed:32/signed,Miss:32/signed,No_defence:32/signed,Phy_anti:32/signed,Magic_anti:32/signed,Poisoning_resist:32/signed,Dizzy_resist:32/signed,Freeze_resist:32/signed,Equip_score:32/signed,Spec_score_one:32/signed,Spec_score_two:32/signed,Hit_rate:32/signed,Ai_type:32/signed,Guard_radius:32/signed,Attention_radius:32/signed,Activity_radius:32/signed,SubBinSizerefresh:32, Bin2/binary>> = Bin1,
	<<SubBinrefresh:SubBinSizerefresh/binary, Bin3/binary>> = Bin2,
	Refresh = decode_p_refresh_info(SubBinrefresh),
	<<Max_drop_num:32/signed,_Sizedroplist:16, BinLendroplist:32, Bin4/binary>> = Bin3,
	<<SubBindroplist:BinLendroplist/binary, Bin5/binary>> = Bin4, 
	Droplist = lists:reverse(decode_p_drop_infos(SubBindroplist, [])),
	<<Exp:32/signed,Min_money:32/signed,Max_money:32/signed,Skinid:32/signed,Is_human:32/signed,Color:32/signed,Money_rate:32/signed,_Sizeskills:16, _BinLenskills:32, SubBinskills/binary>> = Bin5,
	Skills = lists:reverse(decode_p_monster_skills(SubBinskills, [])),

	{p_monster_base_info, Typeid,common_tool:to_list(Monstername),Rarity,Level,Attacktype,Max_hp,Max_mp,Min_attack,Max_attack,Phy_defence,Magic_defence,Blood_resume_speed,Magic_resume_speed,Dead_attack,Lucky,Move_speed,Attack_speed,Miss,No_defence,Phy_anti,Magic_anti,Poisoning_resist,Dizzy_resist,Freeze_resist,Equip_score,Spec_score_one,Spec_score_two,Hit_rate,Ai_type,Guard_radius,Attention_radius,Activity_radius,Refresh,Max_drop_num,Droplist,Exp,Min_money,Max_money,Skinid,Is_human,Color,Money_rate,Skills};

decode_p_monster_base_info(_) ->
	undefined.
encode_p_enemy(Record) when is_record(Record, p_enemy) ->
	#p_enemy{actor_key=Actor_key,total_hurt=Total_hurt,last_att_time=Last_att_time,pos=Pos,state=State} = Record,
	case Actor_key =:= undefined of
		true ->
				Actor_keyFinal = undefined,
				exit({required_field_not_assigned, p_enemy, actor_key});
		false ->
			Actor_keyFinal = Actor_key
	end,
	case Total_hurt =:= undefined of
		true ->
				Total_hurtFinal = undefined,
				exit({required_field_not_assigned, p_enemy, total_hurt});
		false ->
			Total_hurtFinal = Total_hurt
	end,
	case Last_att_time =:= undefined of
		true ->
				Last_att_timeFinal = undefined,
				exit({required_field_not_assigned, p_enemy, last_att_time});
		false ->
			Last_att_timeFinal = Last_att_time
	end,
	case Pos =:= undefined of
		true ->
				PosFinal = undefined,
				exit({required_field_not_assigned, p_enemy, pos});
		false ->
			PosFinal = Pos
	end,
	case State =:= undefined of
		true ->
				StateFinal = 1;
		false ->
			StateFinal = State
	end,
	Pos_bin = encode_p_pos(PosFinal),
	BinLen_pos = erlang:byte_size(Pos_bin),

	<<Actor_keyFinal:32/signed,Total_hurtFinal:32/signed,Last_att_timeFinal:32/signed,BinLen_pos:32, Pos_bin/binary,StateFinal:32/signed>>;
encode_p_enemy(_) -> 
	<<>>.

decode_p_enemy(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Actor_key:32/signed,Total_hurt:32/signed,Last_att_time:32/signed,SubBinSizepos:32, Bin1/binary>> = Bin0,
	<<SubBinpos:SubBinSizepos/binary, Bin2/binary>> = Bin1,
	Pos = decode_p_pos(SubBinpos),
	<<State:32/signed>> = Bin2,

	{p_enemy, Actor_key,Total_hurt,Last_att_time,Pos,State};

decode_p_enemy(_) ->
	undefined.
encode_p_monster(Record) when is_record(Record, p_monster) ->
	#p_monster{monsterid=Monsterid,typeid=Typeid,state=State,mapid=Mapid,hp=Hp,mp=Mp,pos=Pos,reborn_pos=Reborn_pos,first_enemies=First_enemies,second_enemies=Second_enemies,third_enemies=Third_enemies,max_mp=Max_mp,max_hp=Max_hp,buffs=Buffs,monstername=Monstername,phy_defence=Phy_defence,magic_defence=Magic_defence,blood_resume_speed=Blood_resume_speed,magic_resume_speed=Magic_resume_speed,dead_attack=Dead_attack,lucky=Lucky,move_speed=Move_speed,attack_speed=Attack_speed,miss=Miss,no_defence=No_defence,min_attack=Min_attack,max_attack=Max_attack,phy_anti=Phy_anti,magic_anti=Magic_anti,poisoning_resist=Poisoning_resist,dizzy_resist=Dizzy_resist,freeze_resist=Freeze_resist,equip_score=Equip_score,spec_score_one=Spec_score_one,spec_score_two=Spec_score_two,hit_rate=Hit_rate} = Record,
	case Monsterid =:= undefined of
		true ->
				MonsteridFinal = undefined,
				exit({required_field_not_assigned, p_monster, monsterid});
		false ->
			MonsteridFinal = Monsterid
	end,
	case Typeid =:= undefined of
		true ->
				TypeidFinal = undefined,
				exit({required_field_not_assigned, p_monster, typeid});
		false ->
			TypeidFinal = Typeid
	end,
	case State =:= undefined of
		true ->
				StateFinal = undefined,
				exit({required_field_not_assigned, p_monster, state});
		false ->
			StateFinal = State
	end,
	case Mapid =:= undefined of
		true ->
				MapidFinal = undefined,
				exit({required_field_not_assigned, p_monster, mapid});
		false ->
			MapidFinal = Mapid
	end,
	case Hp =:= undefined of
		true ->
				HpFinal = undefined,
				exit({required_field_not_assigned, p_monster, hp});
		false ->
			HpFinal = Hp
	end,
	case Mp =:= undefined of
		true ->
				MpFinal = undefined,
				exit({required_field_not_assigned, p_monster, mp});
		false ->
			MpFinal = Mp
	end,
	case Pos =:= undefined of
		true ->
				PosFinal = undefined,
				exit({required_field_not_assigned, p_monster, pos});
		false ->
			PosFinal = Pos
	end,
	case Reborn_pos =:= undefined of
		true ->
				Reborn_posFinal = undefined,
				exit({required_field_not_assigned, p_monster, reborn_pos});
		false ->
			Reborn_posFinal = Reborn_pos
	end,
	case First_enemies =:= undefined of
		true ->
			First_enemiesFinal = [];
		false ->
			First_enemiesFinal = First_enemies
	end,
	case Second_enemies =:= undefined of
		true ->
			Second_enemiesFinal = [];
		false ->
			Second_enemiesFinal = Second_enemies
	end,
	case Third_enemies =:= undefined of
		true ->
			Third_enemiesFinal = [];
		false ->
			Third_enemiesFinal = Third_enemies
	end,
	case Max_mp =:= undefined of
		true ->
				Max_mpFinal = undefined,
				exit({required_field_not_assigned, p_monster, max_mp});
		false ->
			Max_mpFinal = Max_mp
	end,
	case Max_hp =:= undefined of
		true ->
				Max_hpFinal = undefined,
				exit({required_field_not_assigned, p_monster, max_hp});
		false ->
			Max_hpFinal = Max_hp
	end,
	case Buffs =:= undefined of
		true ->
			BuffsFinal = [];
		false ->
			BuffsFinal = Buffs
	end,
	case Monstername =:= undefined of
		true ->
				MonsternameFinal = undefined,
				exit({required_field_not_assigned, p_monster, monstername});
		false ->
			MonsternameFinal = Monstername
	end,
	case Phy_defence =:= undefined of
		true ->
				Phy_defenceFinal = undefined,
				exit({required_field_not_assigned, p_monster, phy_defence});
		false ->
			Phy_defenceFinal = Phy_defence
	end,
	case Magic_defence =:= undefined of
		true ->
				Magic_defenceFinal = undefined,
				exit({required_field_not_assigned, p_monster, magic_defence});
		false ->
			Magic_defenceFinal = Magic_defence
	end,
	case Blood_resume_speed =:= undefined of
		true ->
				Blood_resume_speedFinal = undefined,
				exit({required_field_not_assigned, p_monster, blood_resume_speed});
		false ->
			Blood_resume_speedFinal = Blood_resume_speed
	end,
	case Magic_resume_speed =:= undefined of
		true ->
				Magic_resume_speedFinal = undefined,
				exit({required_field_not_assigned, p_monster, magic_resume_speed});
		false ->
			Magic_resume_speedFinal = Magic_resume_speed
	end,
	case Dead_attack =:= undefined of
		true ->
				Dead_attackFinal = undefined,
				exit({required_field_not_assigned, p_monster, dead_attack});
		false ->
			Dead_attackFinal = Dead_attack
	end,
	case Lucky =:= undefined of
		true ->
				LuckyFinal = undefined,
				exit({required_field_not_assigned, p_monster, lucky});
		false ->
			LuckyFinal = Lucky
	end,
	case Move_speed =:= undefined of
		true ->
				Move_speedFinal = undefined,
				exit({required_field_not_assigned, p_monster, move_speed});
		false ->
			Move_speedFinal = Move_speed
	end,
	case Attack_speed =:= undefined of
		true ->
				Attack_speedFinal = undefined,
				exit({required_field_not_assigned, p_monster, attack_speed});
		false ->
			Attack_speedFinal = Attack_speed
	end,
	case Miss =:= undefined of
		true ->
				MissFinal = undefined,
				exit({required_field_not_assigned, p_monster, miss});
		false ->
			MissFinal = Miss
	end,
	case No_defence =:= undefined of
		true ->
				No_defenceFinal = undefined,
				exit({required_field_not_assigned, p_monster, no_defence});
		false ->
			No_defenceFinal = No_defence
	end,
	case Min_attack =:= undefined of
		true ->
				Min_attackFinal = undefined,
				exit({required_field_not_assigned, p_monster, min_attack});
		false ->
			Min_attackFinal = Min_attack
	end,
	case Max_attack =:= undefined of
		true ->
				Max_attackFinal = undefined,
				exit({required_field_not_assigned, p_monster, max_attack});
		false ->
			Max_attackFinal = Max_attack
	end,
	case Phy_anti =:= undefined of
		true ->
				Phy_antiFinal = undefined,
				exit({required_field_not_assigned, p_monster, phy_anti});
		false ->
			Phy_antiFinal = Phy_anti
	end,
	case Magic_anti =:= undefined of
		true ->
				Magic_antiFinal = undefined,
				exit({required_field_not_assigned, p_monster, magic_anti});
		false ->
			Magic_antiFinal = Magic_anti
	end,
	case Poisoning_resist =:= undefined of
		true ->
				Poisoning_resistFinal = 0;
		false ->
			Poisoning_resistFinal = Poisoning_resist
	end,
	case Dizzy_resist =:= undefined of
		true ->
				Dizzy_resistFinal = 0;
		false ->
			Dizzy_resistFinal = Dizzy_resist
	end,
	case Freeze_resist =:= undefined of
		true ->
				Freeze_resistFinal = 0;
		false ->
			Freeze_resistFinal = Freeze_resist
	end,
	case Equip_score =:= undefined of
		true ->
				Equip_scoreFinal = 0;
		false ->
			Equip_scoreFinal = Equip_score
	end,
	case Spec_score_one =:= undefined of
		true ->
				Spec_score_oneFinal = 0;
		false ->
			Spec_score_oneFinal = Spec_score_one
	end,
	case Spec_score_two =:= undefined of
		true ->
				Spec_score_twoFinal = 0;
		false ->
			Spec_score_twoFinal = Spec_score_two
	end,
	case Hit_rate =:= undefined of
		true ->
				Hit_rateFinal = 10000;
		false ->
			Hit_rateFinal = Hit_rate
	end,
	Pos_bin = encode_p_pos(PosFinal),
	BinLen_pos = erlang:byte_size(Pos_bin),
	Reborn_pos_bin = encode_p_pos(Reborn_posFinal),
	BinLen_reborn_pos = erlang:byte_size(Reborn_pos_bin),
	First_enemies_bin = encode_p_enemys(First_enemiesFinal, <<>>),
	SizeFirst_enemiesFinal = erlang:length(First_enemiesFinal),
	BinLen_first_enemies = erlang:byte_size(First_enemies_bin),
	Second_enemies_bin = encode_p_enemys(Second_enemiesFinal, <<>>),
	SizeSecond_enemiesFinal = erlang:length(Second_enemiesFinal),
	BinLen_second_enemies = erlang:byte_size(Second_enemies_bin),
	Third_enemies_bin = encode_p_enemys(Third_enemiesFinal, <<>>),
	SizeThird_enemiesFinal = erlang:length(Third_enemiesFinal),
	BinLen_third_enemies = erlang:byte_size(Third_enemies_bin),
	Buffs_bin = encode_p_actor_bufs(BuffsFinal, <<>>),
	SizeBuffsFinal = erlang:length(BuffsFinal),
	BinLen_buffs = erlang:byte_size(Buffs_bin),
	Monstername2 = common_tool:to_binary(MonsternameFinal),
	MonsternameLen = erlang:byte_size(Monstername2),

	<<MonsteridFinal:32/signed,TypeidFinal:32/signed,StateFinal:32/signed,MapidFinal:32/signed,HpFinal:32/signed,MpFinal:32/signed,BinLen_pos:32, Pos_bin/binary,BinLen_reborn_pos:32, Reborn_pos_bin/binary,SizeFirst_enemiesFinal:16, BinLen_first_enemies:32, First_enemies_bin/binary,SizeSecond_enemiesFinal:16, BinLen_second_enemies:32, Second_enemies_bin/binary,SizeThird_enemiesFinal:16, BinLen_third_enemies:32, Third_enemies_bin/binary,Max_mpFinal:32/signed,Max_hpFinal:32/signed,SizeBuffsFinal:16, BinLen_buffs:32, Buffs_bin/binary,MonsternameLen:16, Monstername2/binary,Phy_defenceFinal:32/signed,Magic_defenceFinal:32/signed,Blood_resume_speedFinal:32/signed,Magic_resume_speedFinal:32/signed,Dead_attackFinal:32/signed,LuckyFinal:32/signed,Move_speedFinal:32/signed,Attack_speedFinal:32/signed,MissFinal:32/signed,No_defenceFinal:32/signed,Min_attackFinal:32/signed,Max_attackFinal:32/signed,Phy_antiFinal:32/signed,Magic_antiFinal:32/signed,Poisoning_resistFinal:32/signed,Dizzy_resistFinal:32/signed,Freeze_resistFinal:32/signed,Equip_scoreFinal:32/signed,Spec_score_oneFinal:32/signed,Spec_score_twoFinal:32/signed,Hit_rateFinal:32/signed>>;
encode_p_monster(_) -> 
	<<>>.

decode_p_monster(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Monsterid:32/signed,Typeid:32/signed,State:32/signed,Mapid:32/signed,Hp:32/signed,Mp:32/signed,SubBinSizepos:32, Bin1/binary>> = Bin0,
	<<SubBinpos:SubBinSizepos/binary, Bin2/binary>> = Bin1,
	Pos = decode_p_pos(SubBinpos),
	<<SubBinSizereborn_pos:32, Bin3/binary>> = Bin2,
	<<SubBinreborn_pos:SubBinSizereborn_pos/binary, Bin4/binary>> = Bin3,
	Reborn_pos = decode_p_pos(SubBinreborn_pos),
	<<_Sizefirst_enemies:16, BinLenfirst_enemies:32, Bin5/binary>> = Bin4,
	<<SubBinfirst_enemies:BinLenfirst_enemies/binary, Bin6/binary>> = Bin5, 
	First_enemies = lists:reverse(decode_p_enemys(SubBinfirst_enemies, [])),
	<<_Sizesecond_enemies:16, BinLensecond_enemies:32, Bin7/binary>> = Bin6,
	<<SubBinsecond_enemies:BinLensecond_enemies/binary, Bin8/binary>> = Bin7, 
	Second_enemies = lists:reverse(decode_p_enemys(SubBinsecond_enemies, [])),
	<<_Sizethird_enemies:16, BinLenthird_enemies:32, Bin9/binary>> = Bin8,
	<<SubBinthird_enemies:BinLenthird_enemies/binary, Bin10/binary>> = Bin9, 
	Third_enemies = lists:reverse(decode_p_enemys(SubBinthird_enemies, [])),
	<<Max_mp:32/signed,Max_hp:32/signed,_Sizebuffs:16, BinLenbuffs:32, Bin11/binary>> = Bin10,
	<<SubBinbuffs:BinLenbuffs/binary, Bin12/binary>> = Bin11, 
	Buffs = lists:reverse(decode_p_actor_bufs(SubBinbuffs, [])),
	<<MonsternameLen:16, Bin13/binary>> = Bin12,
	<<Monstername:MonsternameLen/binary,Phy_defence:32/signed,Magic_defence:32/signed,Blood_resume_speed:32/signed,Magic_resume_speed:32/signed,Dead_attack:32/signed,Lucky:32/signed,Move_speed:32/signed,Attack_speed:32/signed,Miss:32/signed,No_defence:32/signed,Min_attack:32/signed,Max_attack:32/signed,Phy_anti:32/signed,Magic_anti:32/signed,Poisoning_resist:32/signed,Dizzy_resist:32/signed,Freeze_resist:32/signed,Equip_score:32/signed,Spec_score_one:32/signed,Spec_score_two:32/signed,Hit_rate:32/signed>> = Bin13,

	{p_monster, Monsterid,Typeid,State,Mapid,Hp,Mp,Pos,Reborn_pos,First_enemies,Second_enemies,Third_enemies,Max_mp,Max_hp,Buffs,common_tool:to_list(Monstername),Phy_defence,Magic_defence,Blood_resume_speed,Magic_resume_speed,Dead_attack,Lucky,Move_speed,Attack_speed,Miss,No_defence,Min_attack,Max_attack,Phy_anti,Magic_anti,Poisoning_resist,Dizzy_resist,Freeze_resist,Equip_score,Spec_score_one,Spec_score_two,Hit_rate};

decode_p_monster(_) ->
	undefined.
encode_p_map_monster(Record) when is_record(Record, p_map_monster) ->
	#p_map_monster{monsterid=Monsterid,typeid=Typeid,state=State,mapid=Mapid,hp=Hp,mp=Mp,pos=Pos,max_mp=Max_mp,max_hp=Max_hp,move_speed=Move_speed,last_walk_path=Last_walk_path,state_buffs=State_buffs,monster_name=Monster_name} = Record,
	case Monsterid =:= undefined of
		true ->
				MonsteridFinal = undefined,
				exit({required_field_not_assigned, p_map_monster, monsterid});
		false ->
			MonsteridFinal = Monsterid
	end,
	case Typeid =:= undefined of
		true ->
				TypeidFinal = undefined,
				exit({required_field_not_assigned, p_map_monster, typeid});
		false ->
			TypeidFinal = Typeid
	end,
	case State =:= undefined of
		true ->
				StateFinal = undefined,
				exit({required_field_not_assigned, p_map_monster, state});
		false ->
			StateFinal = State
	end,
	case Mapid =:= undefined of
		true ->
				MapidFinal = undefined,
				exit({required_field_not_assigned, p_map_monster, mapid});
		false ->
			MapidFinal = Mapid
	end,
	case Hp =:= undefined of
		true ->
				HpFinal = undefined,
				exit({required_field_not_assigned, p_map_monster, hp});
		false ->
			HpFinal = Hp
	end,
	case Mp =:= undefined of
		true ->
				MpFinal = undefined,
				exit({required_field_not_assigned, p_map_monster, mp});
		false ->
			MpFinal = Mp
	end,
	case Pos =:= undefined of
		true ->
				PosFinal = undefined,
				exit({required_field_not_assigned, p_map_monster, pos});
		false ->
			PosFinal = Pos
	end,
	case Max_mp =:= undefined of
		true ->
				Max_mpFinal = undefined,
				exit({required_field_not_assigned, p_map_monster, max_mp});
		false ->
			Max_mpFinal = Max_mp
	end,
	case Max_hp =:= undefined of
		true ->
				Max_hpFinal = undefined,
				exit({required_field_not_assigned, p_map_monster, max_hp});
		false ->
			Max_hpFinal = Max_hp
	end,
	case Move_speed =:= undefined of
		true ->
				Move_speedFinal = undefined,
				exit({required_field_not_assigned, p_map_monster, move_speed});
		false ->
			Move_speedFinal = Move_speed
	end,
	case Last_walk_path =:= undefined of
		true ->
				Last_walk_pathFinal = 0;
		false ->
			Last_walk_pathFinal = Last_walk_path
	end,
	case State_buffs =:= undefined of
		true ->
			State_buffsFinal = [];
		false ->
			State_buffsFinal = State_buffs
	end,
	case Monster_name =:= undefined of
		true ->
				Monster_nameFinal = <<>>;
		false ->
			Monster_nameFinal = Monster_name
	end,
	Pos_bin = encode_p_pos(PosFinal),
	BinLen_pos = erlang:byte_size(Pos_bin),
	Last_walk_path_bin = encode_p_walk_path(Last_walk_pathFinal),
	BinLen_last_walk_path = erlang:byte_size(Last_walk_path_bin),
	State_buffs_bin = encode_p_actor_bufs(State_buffsFinal, <<>>),
	SizeState_buffsFinal = erlang:length(State_buffsFinal),
	BinLen_state_buffs = erlang:byte_size(State_buffs_bin),
	Monster_name2 = common_tool:to_binary(Monster_nameFinal),
	Monster_nameLen = erlang:byte_size(Monster_name2),

	<<MonsteridFinal:32/signed,TypeidFinal:32/signed,StateFinal:32/signed,MapidFinal:32/signed,HpFinal:32/signed,MpFinal:32/signed,BinLen_pos:32, Pos_bin/binary,Max_mpFinal:32/signed,Max_hpFinal:32/signed,Move_speedFinal:32/signed,BinLen_last_walk_path:32, Last_walk_path_bin/binary,SizeState_buffsFinal:16, BinLen_state_buffs:32, State_buffs_bin/binary,Monster_nameLen:16, Monster_name2/binary>>;
encode_p_map_monster(_) -> 
	<<>>.

decode_p_map_monster(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Monsterid:32/signed,Typeid:32/signed,State:32/signed,Mapid:32/signed,Hp:32/signed,Mp:32/signed,SubBinSizepos:32, Bin1/binary>> = Bin0,
	<<SubBinpos:SubBinSizepos/binary, Bin2/binary>> = Bin1,
	Pos = decode_p_pos(SubBinpos),
	<<Max_mp:32/signed,Max_hp:32/signed,Move_speed:32/signed,SubBinSizelast_walk_path:32, Bin3/binary>> = Bin2,
	<<SubBinlast_walk_path:SubBinSizelast_walk_path/binary, Bin4/binary>> = Bin3,
	Last_walk_path = decode_p_walk_path(SubBinlast_walk_path),
	<<_Sizestate_buffs:16, BinLenstate_buffs:32, Bin5/binary>> = Bin4,
	<<SubBinstate_buffs:BinLenstate_buffs/binary, Bin6/binary>> = Bin5, 
	State_buffs = lists:reverse(decode_p_actor_bufs(SubBinstate_buffs, [])),
	<<Monster_nameLen:16, Bin7/binary>> = Bin6,
	<<Monster_name:Monster_nameLen/binary>> = Bin7,

	{p_map_monster, Monsterid,Typeid,State,Mapid,Hp,Mp,Pos,Max_mp,Max_hp,Move_speed,Last_walk_path,State_buffs,common_tool:to_list(Monster_name)};

decode_p_map_monster(_) ->
	undefined.
encode_p_monster_talk(Record) when is_record(Record, p_monster_talk) ->
	#p_monster_talk{rate=Rate,talk=Talk} = Record,
	case Rate =:= undefined of
		true ->
				RateFinal = undefined,
				exit({required_field_not_assigned, p_monster_talk, rate});
		false ->
			RateFinal = Rate
	end,
	case Talk =:= undefined of
		true ->
				TalkFinal = undefined,
				exit({required_field_not_assigned, p_monster_talk, talk});
		false ->
			TalkFinal = Talk
	end,
	Talk2 = common_tool:to_binary(TalkFinal),
	TalkLen = erlang:byte_size(Talk2),

	<<RateFinal:32/signed,TalkLen:16, Talk2/binary>>;
encode_p_monster_talk(_) -> 
	<<>>.

decode_p_monster_talk(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Rate:32/signed,TalkLen:16, Bin1/binary>> = Bin0,
	<<Talk:TalkLen/binary>> = Bin1,

	{p_monster_talk, Rate,common_tool:to_list(Talk)};

decode_p_monster_talk(_) ->
	undefined.
encode_p_boss_ai_skill(Record) when is_record(Record, p_boss_ai_skill) ->
	#p_boss_ai_skill{skill_id=Skill_id,skill_level=Skill_level,weight=Weight,parm=Parm,reset_attacktime=Reset_attacktime} = Record,
	case Skill_id =:= undefined of
		true ->
				Skill_idFinal = undefined,
				exit({required_field_not_assigned, p_boss_ai_skill, skill_id});
		false ->
			Skill_idFinal = Skill_id
	end,
	case Skill_level =:= undefined of
		true ->
				Skill_levelFinal = undefined,
				exit({required_field_not_assigned, p_boss_ai_skill, skill_level});
		false ->
			Skill_levelFinal = Skill_level
	end,
	case Weight =:= undefined of
		true ->
				WeightFinal = undefined,
				exit({required_field_not_assigned, p_boss_ai_skill, weight});
		false ->
			WeightFinal = Weight
	end,
	case Parm =:= undefined of
		true ->
				ParmFinal = 0;
		false ->
			ParmFinal = Parm
	end,
	case Reset_attacktime =:= undefined of
		true ->
				Reset_attacktimeFinal = undefined,
				exit({required_field_not_assigned, p_boss_ai_skill, reset_attacktime});
		false ->
		case Reset_attacktime of
			true ->
				Reset_attacktimeFinal = 1;
			false ->
				Reset_attacktimeFinal = 0
		end
	end,

	<<Skill_idFinal:32/signed,Skill_levelFinal:32/signed,WeightFinal:32/signed,ParmFinal:32/signed,Reset_attacktimeFinal:8>>;
encode_p_boss_ai_skill(_) -> 
	<<>>.

decode_p_boss_ai_skill(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Skill_id:32/signed,Skill_level:32/signed,Weight:32/signed,Parm:32/signed,Reset_attacktimeTmp:8>> = Bin0,
case Reset_attacktimeTmp of 
	1 -> 
		Reset_attacktime = true;
	_ ->
		Reset_attacktime = false
end,

	{p_boss_ai_skill, Skill_id,Skill_level,Weight,Parm,Reset_attacktime};

decode_p_boss_ai_skill(_) ->
	undefined.
encode_p_boss_ai_condition(Record) when is_record(Record, p_boss_ai_condition) ->
	#p_boss_ai_condition{condition_id=Condition_id,rate=Rate,parm=Parm,total_weight=Total_weight,skills=Skills,timeout=Timeout,talks=Talks} = Record,
	case Condition_id =:= undefined of
		true ->
				Condition_idFinal = undefined,
				exit({required_field_not_assigned, p_boss_ai_condition, condition_id});
		false ->
			Condition_idFinal = Condition_id
	end,
	case Rate =:= undefined of
		true ->
				RateFinal = undefined,
				exit({required_field_not_assigned, p_boss_ai_condition, rate});
		false ->
			RateFinal = Rate
	end,
	case Parm =:= undefined of
		true ->
				ParmFinal = 0;
		false ->
			ParmFinal = Parm
	end,
	case Total_weight =:= undefined of
		true ->
				Total_weightFinal = undefined,
				exit({required_field_not_assigned, p_boss_ai_condition, total_weight});
		false ->
			Total_weightFinal = Total_weight
	end,
	case Skills =:= undefined of
		true ->
			SkillsFinal = [];
		false ->
			SkillsFinal = Skills
	end,
	case Timeout =:= undefined of
		true ->
				TimeoutFinal = 0;
		false ->
			TimeoutFinal = Timeout
	end,
	case Talks =:= undefined of
		true ->
			TalksFinal = [];
		false ->
			TalksFinal = Talks
	end,
	Skills_bin = encode_p_boss_ai_skills(SkillsFinal, <<>>),
	SizeSkillsFinal = erlang:length(SkillsFinal),
	BinLen_skills = erlang:byte_size(Skills_bin),
	Talks_bin = encode_p_monster_talks(TalksFinal, <<>>),
	SizeTalksFinal = erlang:length(TalksFinal),
	BinLen_talks = erlang:byte_size(Talks_bin),

	<<Condition_idFinal:32/signed,RateFinal:32/signed,ParmFinal:32/signed,Total_weightFinal:32/signed,SizeSkillsFinal:16, BinLen_skills:32, Skills_bin/binary,TimeoutFinal:32/signed,SizeTalksFinal:16, BinLen_talks:32, Talks_bin/binary>>;
encode_p_boss_ai_condition(_) -> 
	<<>>.

decode_p_boss_ai_condition(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Condition_id:32/signed,Rate:32/signed,Parm:32/signed,Total_weight:32/signed,_Sizeskills:16, BinLenskills:32, Bin1/binary>> = Bin0,
	<<SubBinskills:BinLenskills/binary, Bin2/binary>> = Bin1, 
	Skills = lists:reverse(decode_p_boss_ai_skills(SubBinskills, [])),
	<<Timeout:32/signed,_Sizetalks:16, _BinLentalks:32, SubBintalks/binary>> = Bin2,
	Talks = lists:reverse(decode_p_monster_talks(SubBintalks, [])),

	{p_boss_ai_condition, Condition_id,Rate,Parm,Total_weight,Skills,Timeout,Talks};

decode_p_boss_ai_condition(_) ->
	undefined.
encode_p_boss_ai_plan(Record) when is_record(Record, p_boss_ai_plan) ->
	#p_boss_ai_plan{boss_typeid=Boss_typeid,conditions=Conditions} = Record,
	case Boss_typeid =:= undefined of
		true ->
				Boss_typeidFinal = undefined,
				exit({required_field_not_assigned, p_boss_ai_plan, boss_typeid});
		false ->
			Boss_typeidFinal = Boss_typeid
	end,
	case Conditions =:= undefined of
		true ->
			ConditionsFinal = [];
		false ->
			ConditionsFinal = Conditions
	end,
	Conditions_bin = encode_p_boss_ai_conditions(ConditionsFinal, <<>>),
	SizeConditionsFinal = erlang:length(ConditionsFinal),
	BinLen_conditions = erlang:byte_size(Conditions_bin),

	<<Boss_typeidFinal:32/signed,SizeConditionsFinal:16, BinLen_conditions:32, Conditions_bin/binary>>;
encode_p_boss_ai_plan(_) -> 
	<<>>.

decode_p_boss_ai_plan(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Boss_typeid:32/signed,_Sizeconditions:16, _BinLenconditions:32, SubBinconditions/binary>> = Bin0,
	Conditions = lists:reverse(decode_p_boss_ai_conditions(SubBinconditions, [])),

	{p_boss_ai_plan, Boss_typeid,Conditions};

decode_p_boss_ai_plan(_) ->
	undefined.
encode_p_mission_condition(Record) when is_record(Record, p_mission_condition) ->
	#p_mission_condition{role_id=Role_id,faction=Faction,sex=Sex,level=Level,job=Job,has_team=Has_team,has_family=Has_family} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, p_mission_condition, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Faction =:= undefined of
		true ->
				FactionFinal = undefined,
				exit({required_field_not_assigned, p_mission_condition, faction});
		false ->
			FactionFinal = Faction
	end,
	case Sex =:= undefined of
		true ->
				SexFinal = undefined,
				exit({required_field_not_assigned, p_mission_condition, sex});
		false ->
			SexFinal = Sex
	end,
	case Level =:= undefined of
		true ->
				LevelFinal = undefined,
				exit({required_field_not_assigned, p_mission_condition, level});
		false ->
			LevelFinal = Level
	end,
	case Job =:= undefined of
		true ->
				JobFinal = undefined,
				exit({required_field_not_assigned, p_mission_condition, job});
		false ->
			JobFinal = Job
	end,
	case Has_team =:= undefined of
		true ->
				Has_teamFinal = undefined,
				exit({required_field_not_assigned, p_mission_condition, has_team});
		false ->
		case Has_team of
			true ->
				Has_teamFinal = 1;
			false ->
				Has_teamFinal = 0
		end
	end,
	case Has_family =:= undefined of
		true ->
				Has_familyFinal = 0;
		false ->
		case Has_family of
			true ->
				Has_familyFinal = 1;
			false ->
				Has_familyFinal = 0
		end
	end,

	<<Role_idFinal:32/signed,FactionFinal:32/signed,SexFinal:32/signed,LevelFinal:32/signed,JobFinal:32/signed,Has_teamFinal:8,Has_familyFinal:8>>;
encode_p_mission_condition(_) -> 
	<<>>.

decode_p_mission_condition(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,Faction:32/signed,Sex:32/signed,Level:32/signed,Job:32/signed,Has_teamTmp:8,Has_familyTmp:8>> = Bin0,
case Has_teamTmp of 
	1 -> 
		Has_team = true;
	_ ->
		Has_team = false
end,
case Has_familyTmp of 
	1 -> 
		Has_family = true;
	_ ->
		Has_family = false
end,

	{p_mission_condition, Role_id,Faction,Sex,Level,Job,Has_team,Has_family};

decode_p_mission_condition(_) ->
	undefined.
encode_p_family_info_change(Record) when is_record(Record, p_family_info_change) ->
	#p_family_info_change{change_type=Change_type,new_value=New_value} = Record,
	case Change_type =:= undefined of
		true ->
				Change_typeFinal = undefined,
				exit({required_field_not_assigned, p_family_info_change, change_type});
		false ->
			Change_typeFinal = Change_type
	end,
	case New_value =:= undefined of
		true ->
				New_valueFinal = undefined,
				exit({required_field_not_assigned, p_family_info_change, new_value});
		false ->
			New_valueFinal = New_value
	end,

	<<Change_typeFinal:32/signed,New_valueFinal:32/signed>>;
encode_p_family_info_change(_) -> 
	<<>>.

decode_p_family_info_change(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Change_type:32/signed,New_value:32/signed>> = Bin0,

	{p_family_info_change, Change_type,New_value};

decode_p_family_info_change(_) ->
	undefined.
encode_p_family_info(Record) when is_record(Record, p_family_info) ->
	#p_family_info{family_id=Family_id,family_name=Family_name,faction_id=Faction_id,level=Level,create_role_id=Create_role_id,create_role_name=Create_role_name,owner_role_id=Owner_role_id,owner_role_name=Owner_role_name,second_owners=Second_owners,cur_members=Cur_members,active_points=Active_points,money=Money,request_list=Request_list,invite_list=Invite_list,public_notice=Public_notice,private_notice=Private_notice,members=Members,enable_map=Enable_map,kill_uplevel_boss=Kill_uplevel_boss,uplevel_boss_called=Uplevel_boss_called,gongxun=Gongxun,ybc_status=Ybc_status,ybc_begin_time=Ybc_begin_time,ybc_role_id_list=Ybc_role_id_list,ybc_type=Ybc_type,ybc_creator_id=Ybc_creator_id,hour=Hour,minute=Minute,seconds=Seconds,interiormanager=Interiormanager,leftprotector=Leftprotector,rightprotector=Rightprotector} = Record,
	case Family_id =:= undefined of
		true ->
				Family_idFinal = undefined,
				exit({required_field_not_assigned, p_family_info, family_id});
		false ->
			Family_idFinal = Family_id
	end,
	case Family_name =:= undefined of
		true ->
				Family_nameFinal = undefined,
				exit({required_field_not_assigned, p_family_info, family_name});
		false ->
			Family_nameFinal = Family_name
	end,
	case Faction_id =:= undefined of
		true ->
				Faction_idFinal = undefined,
				exit({required_field_not_assigned, p_family_info, faction_id});
		false ->
			Faction_idFinal = Faction_id
	end,
	case Level =:= undefined of
		true ->
				LevelFinal = undefined,
				exit({required_field_not_assigned, p_family_info, level});
		false ->
			LevelFinal = Level
	end,
	case Create_role_id =:= undefined of
		true ->
				Create_role_idFinal = undefined,
				exit({required_field_not_assigned, p_family_info, create_role_id});
		false ->
			Create_role_idFinal = Create_role_id
	end,
	case Create_role_name =:= undefined of
		true ->
				Create_role_nameFinal = undefined,
				exit({required_field_not_assigned, p_family_info, create_role_name});
		false ->
			Create_role_nameFinal = Create_role_name
	end,
	case Owner_role_id =:= undefined of
		true ->
				Owner_role_idFinal = undefined,
				exit({required_field_not_assigned, p_family_info, owner_role_id});
		false ->
			Owner_role_idFinal = Owner_role_id
	end,
	case Owner_role_name =:= undefined of
		true ->
				Owner_role_nameFinal = undefined,
				exit({required_field_not_assigned, p_family_info, owner_role_name});
		false ->
			Owner_role_nameFinal = Owner_role_name
	end,
	case Second_owners =:= undefined of
		true ->
			Second_ownersFinal = [];
		false ->
			Second_ownersFinal = Second_owners
	end,
	case Cur_members =:= undefined of
		true ->
				Cur_membersFinal = undefined,
				exit({required_field_not_assigned, p_family_info, cur_members});
		false ->
			Cur_membersFinal = Cur_members
	end,
	case Active_points =:= undefined of
		true ->
				Active_pointsFinal = undefined,
				exit({required_field_not_assigned, p_family_info, active_points});
		false ->
			Active_pointsFinal = Active_points
	end,
	case Money =:= undefined of
		true ->
				MoneyFinal = undefined,
				exit({required_field_not_assigned, p_family_info, money});
		false ->
			MoneyFinal = Money
	end,
	case Request_list =:= undefined of
		true ->
			Request_listFinal = [];
		false ->
			Request_listFinal = Request_list
	end,
	case Invite_list =:= undefined of
		true ->
			Invite_listFinal = [];
		false ->
			Invite_listFinal = Invite_list
	end,
	case Public_notice =:= undefined of
		true ->
				Public_noticeFinal = undefined,
				exit({required_field_not_assigned, p_family_info, public_notice});
		false ->
			Public_noticeFinal = Public_notice
	end,
	case Private_notice =:= undefined of
		true ->
				Private_noticeFinal = undefined,
				exit({required_field_not_assigned, p_family_info, private_notice});
		false ->
			Private_noticeFinal = Private_notice
	end,
	case Members =:= undefined of
		true ->
			MembersFinal = [];
		false ->
			MembersFinal = Members
	end,
	case Enable_map =:= undefined of
		true ->
				Enable_mapFinal = undefined,
				exit({required_field_not_assigned, p_family_info, enable_map});
		false ->
		case Enable_map of
			true ->
				Enable_mapFinal = 1;
			false ->
				Enable_mapFinal = 0
		end
	end,
	case Kill_uplevel_boss =:= undefined of
		true ->
				Kill_uplevel_bossFinal = undefined,
				exit({required_field_not_assigned, p_family_info, kill_uplevel_boss});
		false ->
		case Kill_uplevel_boss of
			true ->
				Kill_uplevel_bossFinal = 1;
			false ->
				Kill_uplevel_bossFinal = 0
		end
	end,
	case Uplevel_boss_called =:= undefined of
		true ->
				Uplevel_boss_calledFinal = undefined,
				exit({required_field_not_assigned, p_family_info, uplevel_boss_called});
		false ->
		case Uplevel_boss_called of
			true ->
				Uplevel_boss_calledFinal = 1;
			false ->
				Uplevel_boss_calledFinal = 0
		end
	end,
	case Gongxun =:= undefined of
		true ->
				GongxunFinal = 0;
		false ->
			GongxunFinal = Gongxun
	end,
	case Ybc_status =:= undefined of
		true ->
				Ybc_statusFinal = 0;
		false ->
			Ybc_statusFinal = Ybc_status
	end,
	case Ybc_begin_time =:= undefined of
		true ->
				Ybc_begin_timeFinal = 0;
		false ->
			Ybc_begin_timeFinal = Ybc_begin_time
	end,
	case Ybc_role_id_list =:= undefined of
		true ->
			Ybc_role_id_listFinal = [];
		false ->
			Ybc_role_id_listFinal = Ybc_role_id_list
	end,
	case Ybc_type =:= undefined of
		true ->
				Ybc_typeFinal = undefined,
				exit({required_field_not_assigned, p_family_info, ybc_type});
		false ->
			Ybc_typeFinal = Ybc_type
	end,
	case Ybc_creator_id =:= undefined of
		true ->
				Ybc_creator_idFinal = undefined,
				exit({required_field_not_assigned, p_family_info, ybc_creator_id});
		false ->
			Ybc_creator_idFinal = Ybc_creator_id
	end,
	case Hour =:= undefined of
		true ->
				HourFinal = 14;
		false ->
			HourFinal = Hour
	end,
	case Minute =:= undefined of
		true ->
				MinuteFinal = 30;
		false ->
			MinuteFinal = Minute
	end,
	case Seconds =:= undefined of
		true ->
				SecondsFinal = 0;
		false ->
			SecondsFinal = Seconds
	end,
	case Interiormanager =:= undefined of
		true ->
				InteriormanagerFinal = 0;
		false ->
			InteriormanagerFinal = Interiormanager
	end,
	case Leftprotector =:= undefined of
		true ->
				LeftprotectorFinal = 0;
		false ->
			LeftprotectorFinal = Leftprotector
	end,
	case Rightprotector =:= undefined of
		true ->
				RightprotectorFinal = 0;
		false ->
			RightprotectorFinal = Rightprotector
	end,
	Family_name2 = common_tool:to_binary(Family_nameFinal),
	Family_nameLen = erlang:byte_size(Family_name2),
	Create_role_name2 = common_tool:to_binary(Create_role_nameFinal),
	Create_role_nameLen = erlang:byte_size(Create_role_name2),
	Owner_role_name2 = common_tool:to_binary(Owner_role_nameFinal),
	Owner_role_nameLen = erlang:byte_size(Owner_role_name2),
	Second_owners_bin = encode_p_family_second_owners(Second_ownersFinal, <<>>),
	SizeSecond_ownersFinal = erlang:length(Second_ownersFinal),
	BinLen_second_owners = erlang:byte_size(Second_owners_bin),
	Request_list_bin = encode_p_family_requests(Request_listFinal, <<>>),
	SizeRequest_listFinal = erlang:length(Request_listFinal),
	BinLen_request_list = erlang:byte_size(Request_list_bin),
	Invite_list_bin = encode_p_family_invites(Invite_listFinal, <<>>),
	SizeInvite_listFinal = erlang:length(Invite_listFinal),
	BinLen_invite_list = erlang:byte_size(Invite_list_bin),
	Public_notice2 = common_tool:to_binary(Public_noticeFinal),
	Public_noticeLen = erlang:byte_size(Public_notice2),
	Private_notice2 = common_tool:to_binary(Private_noticeFinal),
	Private_noticeLen = erlang:byte_size(Private_notice2),
	Members_bin = encode_p_family_member_infos(MembersFinal, <<>>),
	SizeMembersFinal = erlang:length(MembersFinal),
	BinLen_members = erlang:byte_size(Members_bin),
	Ybc_role_id_list_bin = encode_int32s(Ybc_role_id_listFinal, <<>>),
	SizeYbc_role_id_listFinal = erlang:length(Ybc_role_id_listFinal),
	BinLen_ybc_role_id_list = erlang:byte_size(Ybc_role_id_list_bin),

	<<Family_idFinal:32/signed,Family_nameLen:16, Family_name2/binary,Faction_idFinal:32/signed,LevelFinal:32/signed,Create_role_idFinal:32/signed,Create_role_nameLen:16, Create_role_name2/binary,Owner_role_idFinal:32/signed,Owner_role_nameLen:16, Owner_role_name2/binary,SizeSecond_ownersFinal:16, BinLen_second_owners:32, Second_owners_bin/binary,Cur_membersFinal:32/signed,Active_pointsFinal:32/signed,MoneyFinal:32/signed,SizeRequest_listFinal:16, BinLen_request_list:32, Request_list_bin/binary,SizeInvite_listFinal:16, BinLen_invite_list:32, Invite_list_bin/binary,Public_noticeLen:16, Public_notice2/binary,Private_noticeLen:16, Private_notice2/binary,SizeMembersFinal:16, BinLen_members:32, Members_bin/binary,Enable_mapFinal:8,Kill_uplevel_bossFinal:8,Uplevel_boss_calledFinal:8,GongxunFinal:32/signed,Ybc_statusFinal:32/signed,Ybc_begin_timeFinal:32/signed,SizeYbc_role_id_listFinal:16, BinLen_ybc_role_id_list:32, Ybc_role_id_list_bin/binary,Ybc_typeFinal:32/signed,Ybc_creator_idFinal:32/signed,HourFinal:32/signed,MinuteFinal:32/signed,SecondsFinal:32/signed,InteriormanagerFinal:32/signed,LeftprotectorFinal:32/signed,RightprotectorFinal:32/signed>>;
encode_p_family_info(_) -> 
	<<>>.

decode_p_family_info(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Family_id:32/signed,Family_nameLen:16, Bin1/binary>> = Bin0,
	<<Family_name:Family_nameLen/binary,Faction_id:32/signed,Level:32/signed,Create_role_id:32/signed,Create_role_nameLen:16, Bin2/binary>> = Bin1,
	<<Create_role_name:Create_role_nameLen/binary,Owner_role_id:32/signed,Owner_role_nameLen:16, Bin3/binary>> = Bin2,
	<<Owner_role_name:Owner_role_nameLen/binary,_Sizesecond_owners:16, BinLensecond_owners:32, Bin4/binary>> = Bin3,
	<<SubBinsecond_owners:BinLensecond_owners/binary, Bin5/binary>> = Bin4, 
	Second_owners = lists:reverse(decode_p_family_second_owners(SubBinsecond_owners, [])),
	<<Cur_members:32/signed,Active_points:32/signed,Money:32/signed,_Sizerequest_list:16, BinLenrequest_list:32, Bin6/binary>> = Bin5,
	<<SubBinrequest_list:BinLenrequest_list/binary, Bin7/binary>> = Bin6, 
	Request_list = lists:reverse(decode_p_family_requests(SubBinrequest_list, [])),
	<<_Sizeinvite_list:16, BinLeninvite_list:32, Bin8/binary>> = Bin7,
	<<SubBininvite_list:BinLeninvite_list/binary, Bin9/binary>> = Bin8, 
	Invite_list = lists:reverse(decode_p_family_invites(SubBininvite_list, [])),
	<<Public_noticeLen:16, Bin10/binary>> = Bin9,
	<<Public_notice:Public_noticeLen/binary,Private_noticeLen:16, Bin11/binary>> = Bin10,
	<<Private_notice:Private_noticeLen/binary,_Sizemembers:16, BinLenmembers:32, Bin12/binary>> = Bin11,
	<<SubBinmembers:BinLenmembers/binary, Bin13/binary>> = Bin12, 
	Members = lists:reverse(decode_p_family_member_infos(SubBinmembers, [])),
<<Enable_mapTmp:8,Kill_uplevel_bossTmp:8,Uplevel_boss_calledTmp:8,Gongxun:32/signed,Ybc_status:32/signed,Ybc_begin_time:32/signed,_Sizeybc_role_id_list:16, BinLenybc_role_id_list:32, Bin14/binary>> = Bin13,
	<<SubBinybc_role_id_list:BinLenybc_role_id_list/binary, Bin15/binary>> = Bin14, 
	Ybc_role_id_list = lists:reverse(decode_int32s(SubBinybc_role_id_list, [])),
	<<Ybc_type:32/signed,Ybc_creator_id:32/signed,Hour:32/signed,Minute:32/signed,Seconds:32/signed,Interiormanager:32/signed,Leftprotector:32/signed,Rightprotector:32/signed>> = Bin15,
case Enable_mapTmp of 
	1 -> 
		Enable_map = true;
	_ ->
		Enable_map = false
end,
case Kill_uplevel_bossTmp of 
	1 -> 
		Kill_uplevel_boss = true;
	_ ->
		Kill_uplevel_boss = false
end,
case Uplevel_boss_calledTmp of 
	1 -> 
		Uplevel_boss_called = true;
	_ ->
		Uplevel_boss_called = false
end,

	{p_family_info, Family_id,common_tool:to_list(Family_name),Faction_id,Level,Create_role_id,common_tool:to_list(Create_role_name),Owner_role_id,common_tool:to_list(Owner_role_name),Second_owners,Cur_members,Active_points,Money,Request_list,Invite_list,common_tool:to_list(Public_notice),common_tool:to_list(Private_notice),Members,Enable_map,Kill_uplevel_boss,Uplevel_boss_called,Gongxun,Ybc_status,Ybc_begin_time,Ybc_role_id_list,Ybc_type,Ybc_creator_id,Hour,Minute,Seconds,Interiormanager,Leftprotector,Rightprotector};

decode_p_family_info(_) ->
	undefined.
encode_p_family_member_info(Record) when is_record(Record, p_family_member_info) ->
	#p_family_member_info{role_id=Role_id,role_name=Role_name,title=Title,office_name=Office_name,family_contribution=Family_contribution,sex=Sex,head=Head,online=Online,role_level=Role_level,last_login_time=Last_login_time} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, p_family_member_info, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = undefined,
				exit({required_field_not_assigned, p_family_member_info, role_name});
		false ->
			Role_nameFinal = Role_name
	end,
	case Title =:= undefined of
		true ->
				TitleFinal = undefined,
				exit({required_field_not_assigned, p_family_member_info, title});
		false ->
			TitleFinal = Title
	end,
	case Office_name =:= undefined of
		true ->
				Office_nameFinal = undefined,
				exit({required_field_not_assigned, p_family_member_info, office_name});
		false ->
			Office_nameFinal = Office_name
	end,
	case Family_contribution =:= undefined of
		true ->
				Family_contributionFinal = undefined,
				exit({required_field_not_assigned, p_family_member_info, family_contribution});
		false ->
			Family_contributionFinal = Family_contribution
	end,
	case Sex =:= undefined of
		true ->
				SexFinal = undefined,
				exit({required_field_not_assigned, p_family_member_info, sex});
		false ->
			SexFinal = Sex
	end,
	case Head =:= undefined of
		true ->
				HeadFinal = undefined,
				exit({required_field_not_assigned, p_family_member_info, head});
		false ->
			HeadFinal = Head
	end,
	case Online =:= undefined of
		true ->
				OnlineFinal = 0;
		false ->
		case Online of
			true ->
				OnlineFinal = 1;
			false ->
				OnlineFinal = 0
		end
	end,
	case Role_level =:= undefined of
		true ->
				Role_levelFinal = 0;
		false ->
			Role_levelFinal = Role_level
	end,
	case Last_login_time =:= undefined of
		true ->
				Last_login_timeFinal = 0;
		false ->
			Last_login_timeFinal = Last_login_time
	end,
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),
	Title2 = common_tool:to_binary(TitleFinal),
	TitleLen = erlang:byte_size(Title2),
	Office_name2 = common_tool:to_binary(Office_nameFinal),
	Office_nameLen = erlang:byte_size(Office_name2),

	<<Role_idFinal:32/signed,Role_nameLen:16, Role_name2/binary,TitleLen:16, Title2/binary,Office_nameLen:16, Office_name2/binary,Family_contributionFinal:32/signed,SexFinal:32/signed,HeadFinal:32/signed,OnlineFinal:8,Role_levelFinal:32/signed,Last_login_timeFinal:32/signed>>;
encode_p_family_member_info(_) -> 
	<<>>.

decode_p_family_member_info(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,Role_nameLen:16, Bin1/binary>> = Bin0,
	<<Role_name:Role_nameLen/binary,TitleLen:16, Bin2/binary>> = Bin1,
	<<Title:TitleLen/binary,Office_nameLen:16, Bin3/binary>> = Bin2,
	<<Office_name:Office_nameLen/binary,Family_contribution:32/signed,Sex:32/signed,Head:32/signed,OnlineTmp:8,Role_level:32/signed,Last_login_time:32/signed>> = Bin3,
case OnlineTmp of 
	1 -> 
		Online = true;
	_ ->
		Online = false
end,

	{p_family_member_info, Role_id,common_tool:to_list(Role_name),common_tool:to_list(Title),common_tool:to_list(Office_name),Family_contribution,Sex,Head,Online,Role_level,Last_login_time};

decode_p_family_member_info(_) ->
	undefined.
encode_p_family_second_owner(Record) when is_record(Record, p_family_second_owner) ->
	#p_family_second_owner{role_id=Role_id,role_name=Role_name} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, p_family_second_owner, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = undefined,
				exit({required_field_not_assigned, p_family_second_owner, role_name});
		false ->
			Role_nameFinal = Role_name
	end,
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),

	<<Role_idFinal:32/signed,Role_nameLen:16, Role_name2/binary>>;
encode_p_family_second_owner(_) -> 
	<<>>.

decode_p_family_second_owner(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,Role_nameLen:16, Bin1/binary>> = Bin0,
	<<Role_name:Role_nameLen/binary>> = Bin1,

	{p_family_second_owner, Role_id,common_tool:to_list(Role_name)};

decode_p_family_second_owner(_) ->
	undefined.
encode_p_family_request(Record) when is_record(Record, p_family_request) ->
	#p_family_request{role_id=Role_id,role_name=Role_name,office_name=Office_name,level=Level} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, p_family_request, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = undefined,
				exit({required_field_not_assigned, p_family_request, role_name});
		false ->
			Role_nameFinal = Role_name
	end,
	case Office_name =:= undefined of
		true ->
				Office_nameFinal = undefined,
				exit({required_field_not_assigned, p_family_request, office_name});
		false ->
			Office_nameFinal = Office_name
	end,
	case Level =:= undefined of
		true ->
				LevelFinal = undefined,
				exit({required_field_not_assigned, p_family_request, level});
		false ->
			LevelFinal = Level
	end,
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),
	Office_name2 = common_tool:to_binary(Office_nameFinal),
	Office_nameLen = erlang:byte_size(Office_name2),

	<<Role_idFinal:32/signed,Role_nameLen:16, Role_name2/binary,Office_nameLen:16, Office_name2/binary,LevelFinal:32/signed>>;
encode_p_family_request(_) -> 
	<<>>.

decode_p_family_request(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,Role_nameLen:16, Bin1/binary>> = Bin0,
	<<Role_name:Role_nameLen/binary,Office_nameLen:16, Bin2/binary>> = Bin1,
	<<Office_name:Office_nameLen/binary,Level:32/signed>> = Bin2,

	{p_family_request, Role_id,common_tool:to_list(Role_name),common_tool:to_list(Office_name),Level};

decode_p_family_request(_) ->
	undefined.
encode_p_family_invite(Record) when is_record(Record, p_family_invite) ->
	#p_family_invite{role_id=Role_id,role_name=Role_name,office_name=Office_name,level=Level} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, p_family_invite, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = undefined,
				exit({required_field_not_assigned, p_family_invite, role_name});
		false ->
			Role_nameFinal = Role_name
	end,
	case Office_name =:= undefined of
		true ->
				Office_nameFinal = <<>>;
		false ->
			Office_nameFinal = Office_name
	end,
	case Level =:= undefined of
		true ->
				LevelFinal = undefined,
				exit({required_field_not_assigned, p_family_invite, level});
		false ->
			LevelFinal = Level
	end,
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),
	Office_name2 = common_tool:to_binary(Office_nameFinal),
	Office_nameLen = erlang:byte_size(Office_name2),

	<<Role_idFinal:32/signed,Role_nameLen:16, Role_name2/binary,Office_nameLen:16, Office_name2/binary,LevelFinal:32/signed>>;
encode_p_family_invite(_) -> 
	<<>>.

decode_p_family_invite(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,Role_nameLen:16, Bin1/binary>> = Bin0,
	<<Role_name:Role_nameLen/binary,Office_nameLen:16, Bin2/binary>> = Bin1,
	<<Office_name:Office_nameLen/binary,Level:32/signed>> = Bin2,

	{p_family_invite, Role_id,common_tool:to_list(Role_name),common_tool:to_list(Office_name),Level};

decode_p_family_invite(_) ->
	undefined.
encode_p_rank_row(Record) when is_record(Record, p_rank_row) ->
	#p_rank_row{row_id=Row_id,role_id=Role_id,elements=Elements,int_list=Int_list} = Record,
	case Row_id =:= undefined of
		true ->
				Row_idFinal = undefined,
				exit({required_field_not_assigned, p_rank_row, row_id});
		false ->
			Row_idFinal = Row_id
	end,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = 0;
		false ->
			Role_idFinal = Role_id
	end,
	case Elements =:= undefined of
		true ->
			ElementsFinal = [];
		false ->
			ElementsFinal = Elements
	end,
	case Int_list =:= undefined of
		true ->
			Int_listFinal = [];
		false ->
			Int_listFinal = Int_list
	end,
	Elements_bin = encode_strings(ElementsFinal, <<>>),
	SizeElementsFinal = erlang:length(ElementsFinal),
	BinLen_elements = erlang:byte_size(Elements_bin),
	Int_list_bin = encode_int32s(Int_listFinal, <<>>),
	SizeInt_listFinal = erlang:length(Int_listFinal),
	BinLen_int_list = erlang:byte_size(Int_list_bin),

	<<Row_idFinal:32/signed,Role_idFinal:32/signed,SizeElementsFinal:16, BinLen_elements:32, Elements_bin/binary,SizeInt_listFinal:16, BinLen_int_list:32, Int_list_bin/binary>>;
encode_p_rank_row(_) -> 
	<<>>.

decode_p_rank_row(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Row_id:32/signed,Role_id:32/signed,_Sizeelements:16, BinLenelements:32, Bin1/binary>> = Bin0,
	<<SubBinelements:BinLenelements/binary, Bin2/binary>> = Bin1, 
	Elements = lists:reverse(decode_strings(SubBinelements, [])),
	<<_Sizeint_list:16, _BinLenint_list:32, SubBinint_list/binary>> = Bin2,
	Int_list = lists:reverse(decode_int32s(SubBinint_list, [])),

	{p_rank_row, Row_id,Role_id,Elements,Int_list};

decode_p_rank_row(_) ->
	undefined.
encode_p_role_family_donate_info(Record) when is_record(Record, p_role_family_donate_info) ->
	#p_role_family_donate_info{role_id=Role_id,role_name=Role_name,donate_amount=Donate_amount} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, p_role_family_donate_info, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = undefined,
				exit({required_field_not_assigned, p_role_family_donate_info, role_name});
		false ->
			Role_nameFinal = Role_name
	end,
	case Donate_amount =:= undefined of
		true ->
				Donate_amountFinal = 0;
		false ->
			Donate_amountFinal = Donate_amount
	end,
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),

	<<Role_idFinal:32/signed,Role_nameLen:16, Role_name2/binary,Donate_amountFinal:32/signed>>;
encode_p_role_family_donate_info(_) -> 
	<<>>.

decode_p_role_family_donate_info(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,Role_nameLen:16, Bin1/binary>> = Bin0,
	<<Role_name:Role_nameLen/binary,Donate_amount:32/signed>> = Bin1,

	{p_role_family_donate_info, Role_id,common_tool:to_list(Role_name),Donate_amount};

decode_p_role_family_donate_info(_) ->
	undefined.
encode_p_rank_element(Record) when is_record(Record, p_rank_element) ->
	#p_rank_element{element_name=Element_name,element_index=Element_index,element_color=Element_color} = Record,
	case Element_name =:= undefined of
		true ->
				Element_nameFinal = undefined,
				exit({required_field_not_assigned, p_rank_element, element_name});
		false ->
			Element_nameFinal = Element_name
	end,
	case Element_index =:= undefined of
		true ->
				Element_indexFinal = undefined,
				exit({required_field_not_assigned, p_rank_element, element_index});
		false ->
			Element_indexFinal = Element_index
	end,
	case Element_color =:= undefined of
		true ->
				Element_colorFinal = undefined,
				exit({required_field_not_assigned, p_rank_element, element_color});
		false ->
			Element_colorFinal = Element_color
	end,

	<<Element_nameFinal:32/signed,Element_indexFinal:32/signed,Element_colorFinal:32/signed>>;
encode_p_rank_element(_) -> 
	<<>>.

decode_p_rank_element(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Element_name:32/signed,Element_index:32/signed,Element_color:32/signed>> = Bin0,

	{p_rank_element, Element_name,Element_index,Element_color};

decode_p_rank_element(_) ->
	undefined.
encode_p_ranking(Record) when is_record(Record, p_ranking) ->
	#p_ranking{rank_id=Rank_id,rank_row=Rank_row,rank_column=Rank_column,rank_first_name=Rank_first_name,rank_second_name=Rank_second_name,capacity=Capacity,elements=Elements,refresh_type=Refresh_type,refresh_interval=Refresh_interval,rank_title=Rank_title} = Record,
	case Rank_id =:= undefined of
		true ->
				Rank_idFinal = undefined,
				exit({required_field_not_assigned, p_ranking, rank_id});
		false ->
			Rank_idFinal = Rank_id
	end,
	case Rank_row =:= undefined of
		true ->
				Rank_rowFinal = undefined,
				exit({required_field_not_assigned, p_ranking, rank_row});
		false ->
			Rank_rowFinal = Rank_row
	end,
	case Rank_column =:= undefined of
		true ->
				Rank_columnFinal = undefined,
				exit({required_field_not_assigned, p_ranking, rank_column});
		false ->
			Rank_columnFinal = Rank_column
	end,
	case Rank_first_name =:= undefined of
		true ->
				Rank_first_nameFinal = undefined,
				exit({required_field_not_assigned, p_ranking, rank_first_name});
		false ->
			Rank_first_nameFinal = Rank_first_name
	end,
	case Rank_second_name =:= undefined of
		true ->
				Rank_second_nameFinal = undefined,
				exit({required_field_not_assigned, p_ranking, rank_second_name});
		false ->
			Rank_second_nameFinal = Rank_second_name
	end,
	case Capacity =:= undefined of
		true ->
				CapacityFinal = undefined,
				exit({required_field_not_assigned, p_ranking, capacity});
		false ->
			CapacityFinal = Capacity
	end,
	case Elements =:= undefined of
		true ->
			ElementsFinal = [];
		false ->
			ElementsFinal = Elements
	end,
	case Refresh_type =:= undefined of
		true ->
				Refresh_typeFinal = undefined,
				exit({required_field_not_assigned, p_ranking, refresh_type});
		false ->
			Refresh_typeFinal = Refresh_type
	end,
	case Refresh_interval =:= undefined of
		true ->
				Refresh_intervalFinal = 0;
		false ->
			Refresh_intervalFinal = Refresh_interval
	end,
	case Rank_title =:= undefined of
		true ->
				Rank_titleFinal = 0;
		false ->
			Rank_titleFinal = Rank_title
	end,
	Rank_first_name2 = common_tool:to_binary(Rank_first_nameFinal),
	Rank_first_nameLen = erlang:byte_size(Rank_first_name2),
	Rank_second_name2 = common_tool:to_binary(Rank_second_nameFinal),
	Rank_second_nameLen = erlang:byte_size(Rank_second_name2),
	Elements_bin = encode_p_rank_elements(ElementsFinal, <<>>),
	SizeElementsFinal = erlang:length(ElementsFinal),
	BinLen_elements = erlang:byte_size(Elements_bin),
	Rank_title_bin = encode_p_title(Rank_titleFinal),
	BinLen_rank_title = erlang:byte_size(Rank_title_bin),

	<<Rank_idFinal:32/signed,Rank_rowFinal:32/signed,Rank_columnFinal:32/signed,Rank_first_nameLen:16, Rank_first_name2/binary,Rank_second_nameLen:16, Rank_second_name2/binary,CapacityFinal:32/signed,SizeElementsFinal:16, BinLen_elements:32, Elements_bin/binary,Refresh_typeFinal:32/signed,Refresh_intervalFinal:32/signed,BinLen_rank_title:32, Rank_title_bin/binary>>;
encode_p_ranking(_) -> 
	<<>>.

decode_p_ranking(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Rank_id:32/signed,Rank_row:32/signed,Rank_column:32/signed,Rank_first_nameLen:16, Bin1/binary>> = Bin0,
	<<Rank_first_name:Rank_first_nameLen/binary,Rank_second_nameLen:16, Bin2/binary>> = Bin1,
	<<Rank_second_name:Rank_second_nameLen/binary,Capacity:32/signed,_Sizeelements:16, BinLenelements:32, Bin3/binary>> = Bin2,
	<<SubBinelements:BinLenelements/binary, Bin4/binary>> = Bin3, 
	Elements = lists:reverse(decode_p_rank_elements(SubBinelements, [])),
	<<Refresh_type:32/signed,Refresh_interval:32/signed,_SubBinSizerank_title:32, SubBinrank_title/binary>> = Bin4,
	Rank_title = decode_p_title(SubBinrank_title),

	{p_ranking, Rank_id,Rank_row,Rank_column,common_tool:to_list(Rank_first_name),common_tool:to_list(Rank_second_name),Capacity,Elements,Refresh_type,Refresh_interval,Rank_title};

decode_p_ranking(_) ->
	undefined.
encode_p_role_level_rank(Record) when is_record(Record, p_role_level_rank) ->
	#p_role_level_rank{role_id=Role_id,role_name=Role_name,faction_id=Faction_id,family_name=Family_name,level=Level,ranking=Ranking,title=Title,exp=Exp,category=Category} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, p_role_level_rank, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = undefined,
				exit({required_field_not_assigned, p_role_level_rank, role_name});
		false ->
			Role_nameFinal = Role_name
	end,
	case Faction_id =:= undefined of
		true ->
				Faction_idFinal = undefined,
				exit({required_field_not_assigned, p_role_level_rank, faction_id});
		false ->
			Faction_idFinal = Faction_id
	end,
	case Family_name =:= undefined of
		true ->
				Family_nameFinal = <<>>;
		false ->
			Family_nameFinal = Family_name
	end,
	case Level =:= undefined of
		true ->
				LevelFinal = undefined,
				exit({required_field_not_assigned, p_role_level_rank, level});
		false ->
			LevelFinal = Level
	end,
	case Ranking =:= undefined of
		true ->
				RankingFinal = undefined,
				exit({required_field_not_assigned, p_role_level_rank, ranking});
		false ->
			RankingFinal = Ranking
	end,
	case Title =:= undefined of
		true ->
				TitleFinal = <<>>;
		false ->
			TitleFinal = Title
	end,
	case Exp =:= undefined of
		true ->
				ExpFinal = undefined,
				exit({required_field_not_assigned, p_role_level_rank, exp});
		false ->
			ExpFinal = Exp
	end,
	case Category =:= undefined of
		true ->
				CategoryFinal = undefined,
				exit({required_field_not_assigned, p_role_level_rank, category});
		false ->
			CategoryFinal = Category
	end,
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),
	Family_name2 = common_tool:to_binary(Family_nameFinal),
	Family_nameLen = erlang:byte_size(Family_name2),
	Title2 = common_tool:to_binary(TitleFinal),
	TitleLen = erlang:byte_size(Title2),

	<<Role_idFinal:32/signed,Role_nameLen:16, Role_name2/binary,Faction_idFinal:32/signed,Family_nameLen:16, Family_name2/binary,LevelFinal:32/signed,RankingFinal:32/signed,TitleLen:16, Title2/binary,ExpFinal:64/float,CategoryFinal:32/signed>>;
encode_p_role_level_rank(_) -> 
	<<>>.

decode_p_role_level_rank(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,Role_nameLen:16, Bin1/binary>> = Bin0,
	<<Role_name:Role_nameLen/binary,Faction_id:32/signed,Family_nameLen:16, Bin2/binary>> = Bin1,
	<<Family_name:Family_nameLen/binary,Level:32/signed,Ranking:32/signed,TitleLen:16, Bin3/binary>> = Bin2,
	<<Title:TitleLen/binary,Exp:64,Category:32/signed>> = Bin3,

	{p_role_level_rank, Role_id,common_tool:to_list(Role_name),Faction_id,common_tool:to_list(Family_name),Level,Ranking,common_tool:to_list(Title),Exp,Category};

decode_p_role_level_rank(_) ->
	undefined.
encode_p_role_pkpoint_rank(Record) when is_record(Record, p_role_pkpoint_rank) ->
	#p_role_pkpoint_rank{role_id=Role_id,role_name=Role_name,faction_id=Faction_id,family_name=Family_name,ranking=Ranking,title=Title,pk_points=Pk_points} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, p_role_pkpoint_rank, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = undefined,
				exit({required_field_not_assigned, p_role_pkpoint_rank, role_name});
		false ->
			Role_nameFinal = Role_name
	end,
	case Faction_id =:= undefined of
		true ->
				Faction_idFinal = undefined,
				exit({required_field_not_assigned, p_role_pkpoint_rank, faction_id});
		false ->
			Faction_idFinal = Faction_id
	end,
	case Family_name =:= undefined of
		true ->
				Family_nameFinal = <<>>;
		false ->
			Family_nameFinal = Family_name
	end,
	case Ranking =:= undefined of
		true ->
				RankingFinal = undefined,
				exit({required_field_not_assigned, p_role_pkpoint_rank, ranking});
		false ->
			RankingFinal = Ranking
	end,
	case Title =:= undefined of
		true ->
				TitleFinal = <<>>;
		false ->
			TitleFinal = Title
	end,
	case Pk_points =:= undefined of
		true ->
				Pk_pointsFinal = undefined,
				exit({required_field_not_assigned, p_role_pkpoint_rank, pk_points});
		false ->
			Pk_pointsFinal = Pk_points
	end,
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),
	Family_name2 = common_tool:to_binary(Family_nameFinal),
	Family_nameLen = erlang:byte_size(Family_name2),
	Title2 = common_tool:to_binary(TitleFinal),
	TitleLen = erlang:byte_size(Title2),

	<<Role_idFinal:32/signed,Role_nameLen:16, Role_name2/binary,Faction_idFinal:32/signed,Family_nameLen:16, Family_name2/binary,RankingFinal:32/signed,TitleLen:16, Title2/binary,Pk_pointsFinal:32/signed>>;
encode_p_role_pkpoint_rank(_) -> 
	<<>>.

decode_p_role_pkpoint_rank(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,Role_nameLen:16, Bin1/binary>> = Bin0,
	<<Role_name:Role_nameLen/binary,Faction_id:32/signed,Family_nameLen:16, Bin2/binary>> = Bin1,
	<<Family_name:Family_nameLen/binary,Ranking:32/signed,TitleLen:16, Bin3/binary>> = Bin2,
	<<Title:TitleLen/binary,Pk_points:32/signed>> = Bin3,

	{p_role_pkpoint_rank, Role_id,common_tool:to_list(Role_name),Faction_id,common_tool:to_list(Family_name),Ranking,common_tool:to_list(Title),Pk_points};

decode_p_role_pkpoint_rank(_) ->
	undefined.
encode_p_family_active_rank(Record) when is_record(Record, p_family_active_rank) ->
	#p_family_active_rank{family_id=Family_id,family_name=Family_name,owner_role_name=Owner_role_name,level=Level,ranking=Ranking,member_count=Member_count,active=Active,faction_id=Faction_id} = Record,
	case Family_id =:= undefined of
		true ->
				Family_idFinal = undefined,
				exit({required_field_not_assigned, p_family_active_rank, family_id});
		false ->
			Family_idFinal = Family_id
	end,
	case Family_name =:= undefined of
		true ->
				Family_nameFinal = undefined,
				exit({required_field_not_assigned, p_family_active_rank, family_name});
		false ->
			Family_nameFinal = Family_name
	end,
	case Owner_role_name =:= undefined of
		true ->
				Owner_role_nameFinal = undefined,
				exit({required_field_not_assigned, p_family_active_rank, owner_role_name});
		false ->
			Owner_role_nameFinal = Owner_role_name
	end,
	case Level =:= undefined of
		true ->
				LevelFinal = undefined,
				exit({required_field_not_assigned, p_family_active_rank, level});
		false ->
			LevelFinal = Level
	end,
	case Ranking =:= undefined of
		true ->
				RankingFinal = undefined,
				exit({required_field_not_assigned, p_family_active_rank, ranking});
		false ->
			RankingFinal = Ranking
	end,
	case Member_count =:= undefined of
		true ->
				Member_countFinal = undefined,
				exit({required_field_not_assigned, p_family_active_rank, member_count});
		false ->
			Member_countFinal = Member_count
	end,
	case Active =:= undefined of
		true ->
				ActiveFinal = undefined,
				exit({required_field_not_assigned, p_family_active_rank, active});
		false ->
			ActiveFinal = Active
	end,
	case Faction_id =:= undefined of
		true ->
				Faction_idFinal = undefined,
				exit({required_field_not_assigned, p_family_active_rank, faction_id});
		false ->
			Faction_idFinal = Faction_id
	end,
	Family_name2 = common_tool:to_binary(Family_nameFinal),
	Family_nameLen = erlang:byte_size(Family_name2),
	Owner_role_name2 = common_tool:to_binary(Owner_role_nameFinal),
	Owner_role_nameLen = erlang:byte_size(Owner_role_name2),

	<<Family_idFinal:32/signed,Family_nameLen:16, Family_name2/binary,Owner_role_nameLen:16, Owner_role_name2/binary,LevelFinal:32/signed,RankingFinal:32/signed,Member_countFinal:32/signed,ActiveFinal:32/signed,Faction_idFinal:32/signed>>;
encode_p_family_active_rank(_) -> 
	<<>>.

decode_p_family_active_rank(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Family_id:32/signed,Family_nameLen:16, Bin1/binary>> = Bin0,
	<<Family_name:Family_nameLen/binary,Owner_role_nameLen:16, Bin2/binary>> = Bin1,
	<<Owner_role_name:Owner_role_nameLen/binary,Level:32/signed,Ranking:32/signed,Member_count:32/signed,Active:32/signed,Faction_id:32/signed>> = Bin2,

	{p_family_active_rank, Family_id,common_tool:to_list(Family_name),common_tool:to_list(Owner_role_name),Level,Ranking,Member_count,Active,Faction_id};

decode_p_family_active_rank(_) ->
	undefined.
encode_p_family_gongxun_rank(Record) when is_record(Record, p_family_gongxun_rank) ->
	#p_family_gongxun_rank{family_id=Family_id,family_name=Family_name,owner_role_name=Owner_role_name,level=Level,ranking=Ranking,member_count=Member_count,active=Active,gongxun=Gongxun,lastweek_gongxun=Lastweek_gongxun,lastweek_ranking=Lastweek_ranking} = Record,
	case Family_id =:= undefined of
		true ->
				Family_idFinal = undefined,
				exit({required_field_not_assigned, p_family_gongxun_rank, family_id});
		false ->
			Family_idFinal = Family_id
	end,
	case Family_name =:= undefined of
		true ->
				Family_nameFinal = undefined,
				exit({required_field_not_assigned, p_family_gongxun_rank, family_name});
		false ->
			Family_nameFinal = Family_name
	end,
	case Owner_role_name =:= undefined of
		true ->
				Owner_role_nameFinal = undefined,
				exit({required_field_not_assigned, p_family_gongxun_rank, owner_role_name});
		false ->
			Owner_role_nameFinal = Owner_role_name
	end,
	case Level =:= undefined of
		true ->
				LevelFinal = undefined,
				exit({required_field_not_assigned, p_family_gongxun_rank, level});
		false ->
			LevelFinal = Level
	end,
	case Ranking =:= undefined of
		true ->
				RankingFinal = undefined,
				exit({required_field_not_assigned, p_family_gongxun_rank, ranking});
		false ->
			RankingFinal = Ranking
	end,
	case Member_count =:= undefined of
		true ->
				Member_countFinal = undefined,
				exit({required_field_not_assigned, p_family_gongxun_rank, member_count});
		false ->
			Member_countFinal = Member_count
	end,
	case Active =:= undefined of
		true ->
				ActiveFinal = undefined,
				exit({required_field_not_assigned, p_family_gongxun_rank, active});
		false ->
			ActiveFinal = Active
	end,
	case Gongxun =:= undefined of
		true ->
				GongxunFinal = undefined,
				exit({required_field_not_assigned, p_family_gongxun_rank, gongxun});
		false ->
			GongxunFinal = Gongxun
	end,
	case Lastweek_gongxun =:= undefined of
		true ->
				Lastweek_gongxunFinal = 0;
		false ->
			Lastweek_gongxunFinal = Lastweek_gongxun
	end,
	case Lastweek_ranking =:= undefined of
		true ->
				Lastweek_rankingFinal = 0;
		false ->
			Lastweek_rankingFinal = Lastweek_ranking
	end,
	Family_name2 = common_tool:to_binary(Family_nameFinal),
	Family_nameLen = erlang:byte_size(Family_name2),
	Owner_role_name2 = common_tool:to_binary(Owner_role_nameFinal),
	Owner_role_nameLen = erlang:byte_size(Owner_role_name2),

	<<Family_idFinal:32/signed,Family_nameLen:16, Family_name2/binary,Owner_role_nameLen:16, Owner_role_name2/binary,LevelFinal:32/signed,RankingFinal:32/signed,Member_countFinal:32/signed,ActiveFinal:32/signed,GongxunFinal:32/signed,Lastweek_gongxunFinal:32/signed,Lastweek_rankingFinal:32/signed>>;
encode_p_family_gongxun_rank(_) -> 
	<<>>.

decode_p_family_gongxun_rank(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Family_id:32/signed,Family_nameLen:16, Bin1/binary>> = Bin0,
	<<Family_name:Family_nameLen/binary,Owner_role_nameLen:16, Bin2/binary>> = Bin1,
	<<Owner_role_name:Owner_role_nameLen/binary,Level:32/signed,Ranking:32/signed,Member_count:32/signed,Active:32/signed,Gongxun:32/signed,Lastweek_gongxun:32/signed,Lastweek_ranking:32/signed>> = Bin2,

	{p_family_gongxun_rank, Family_id,common_tool:to_list(Family_name),common_tool:to_list(Owner_role_name),Level,Ranking,Member_count,Active,Gongxun,Lastweek_gongxun,Lastweek_ranking};

decode_p_family_gongxun_rank(_) ->
	undefined.
encode_p_family_gongxun_persistent_rank(Record) when is_record(Record, p_family_gongxun_persistent_rank) ->
	#p_family_gongxun_persistent_rank{key=Key,family_id=Family_id,total_gongxun=Total_gongxun,ranking=Ranking,date=Date} = Record,
	case Key =:= undefined of
		true ->
				KeyFinal = undefined,
				exit({required_field_not_assigned, p_family_gongxun_persistent_rank, key});
		false ->
			KeyFinal = Key
	end,
	case Family_id =:= undefined of
		true ->
				Family_idFinal = undefined,
				exit({required_field_not_assigned, p_family_gongxun_persistent_rank, family_id});
		false ->
			Family_idFinal = Family_id
	end,
	case Total_gongxun =:= undefined of
		true ->
				Total_gongxunFinal = 0;
		false ->
			Total_gongxunFinal = Total_gongxun
	end,
	case Ranking =:= undefined of
		true ->
				RankingFinal = 0;
		false ->
			RankingFinal = Ranking
	end,
	case Date =:= undefined of
		true ->
				DateFinal = undefined,
				exit({required_field_not_assigned, p_family_gongxun_persistent_rank, date});
		false ->
			DateFinal = Date
	end,

	<<KeyFinal:32/signed,Family_idFinal:32/signed,Total_gongxunFinal:32/signed,RankingFinal:32/signed,DateFinal:32/signed>>;
encode_p_family_gongxun_persistent_rank(_) -> 
	<<>>.

decode_p_family_gongxun_persistent_rank(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Key:32/signed,Family_id:32/signed,Total_gongxun:32/signed,Ranking:32/signed,Date:32/signed>> = Bin0,

	{p_family_gongxun_persistent_rank, Key,Family_id,Total_gongxun,Ranking,Date};

decode_p_family_gongxun_persistent_rank(_) ->
	undefined.
encode_p_equip_rank(Record) when is_record(Record, p_equip_rank) ->
	#p_equip_rank{goods_id=Goods_id,role_name=Role_name,type_id=Type_id,colour=Colour,quality=Quality,ranking=Ranking,faction_id=Faction_id,refining_score=Refining_score,reinforce_score=Reinforce_score,stone_score=Stone_score,role_id=Role_id} = Record,
	case Goods_id =:= undefined of
		true ->
				Goods_idFinal = undefined,
				exit({required_field_not_assigned, p_equip_rank, goods_id});
		false ->
			Goods_idFinal = Goods_id
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = <<>>;
		false ->
			Role_nameFinal = Role_name
	end,
	case Type_id =:= undefined of
		true ->
				Type_idFinal = undefined,
				exit({required_field_not_assigned, p_equip_rank, type_id});
		false ->
			Type_idFinal = Type_id
	end,
	case Colour =:= undefined of
		true ->
				ColourFinal = undefined,
				exit({required_field_not_assigned, p_equip_rank, colour});
		false ->
			ColourFinal = Colour
	end,
	case Quality =:= undefined of
		true ->
				QualityFinal = undefined,
				exit({required_field_not_assigned, p_equip_rank, quality});
		false ->
			QualityFinal = Quality
	end,
	case Ranking =:= undefined of
		true ->
				RankingFinal = undefined,
				exit({required_field_not_assigned, p_equip_rank, ranking});
		false ->
			RankingFinal = Ranking
	end,
	case Faction_id =:= undefined of
		true ->
				Faction_idFinal = 0;
		false ->
			Faction_idFinal = Faction_id
	end,
	case Refining_score =:= undefined of
		true ->
				Refining_scoreFinal = 0;
		false ->
			Refining_scoreFinal = Refining_score
	end,
	case Reinforce_score =:= undefined of
		true ->
				Reinforce_scoreFinal = 0;
		false ->
			Reinforce_scoreFinal = Reinforce_score
	end,
	case Stone_score =:= undefined of
		true ->
				Stone_scoreFinal = 0;
		false ->
			Stone_scoreFinal = Stone_score
	end,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = 0;
		false ->
			Role_idFinal = Role_id
	end,
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),

	<<Goods_idFinal:32/signed,Role_nameLen:16, Role_name2/binary,Type_idFinal:32/signed,ColourFinal:32/signed,QualityFinal:32/signed,RankingFinal:32/signed,Faction_idFinal:32/signed,Refining_scoreFinal:32/signed,Reinforce_scoreFinal:32/signed,Stone_scoreFinal:32/signed,Role_idFinal:32/signed>>;
encode_p_equip_rank(_) -> 
	<<>>.

decode_p_equip_rank(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Goods_id:32/signed,Role_nameLen:16, Bin1/binary>> = Bin0,
	<<Role_name:Role_nameLen/binary,Type_id:32/signed,Colour:32/signed,Quality:32/signed,Ranking:32/signed,Faction_id:32/signed,Refining_score:32/signed,Reinforce_score:32/signed,Stone_score:32/signed,Role_id:32/signed>> = Bin1,

	{p_equip_rank, Goods_id,common_tool:to_list(Role_name),Type_id,Colour,Quality,Ranking,Faction_id,Refining_score,Reinforce_score,Stone_score,Role_id};

decode_p_equip_rank(_) ->
	undefined.
encode_p_role_gongxun_rank(Record) when is_record(Record, p_role_gongxun_rank) ->
	#p_role_gongxun_rank{role_id=Role_id,role_name=Role_name,faction_id=Faction_id,family_name=Family_name,level=Level,ranking=Ranking,title=Title,exp=Exp,gongxun=Gongxun} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, p_role_gongxun_rank, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = undefined,
				exit({required_field_not_assigned, p_role_gongxun_rank, role_name});
		false ->
			Role_nameFinal = Role_name
	end,
	case Faction_id =:= undefined of
		true ->
				Faction_idFinal = undefined,
				exit({required_field_not_assigned, p_role_gongxun_rank, faction_id});
		false ->
			Faction_idFinal = Faction_id
	end,
	case Family_name =:= undefined of
		true ->
				Family_nameFinal = <<>>;
		false ->
			Family_nameFinal = Family_name
	end,
	case Level =:= undefined of
		true ->
				LevelFinal = undefined,
				exit({required_field_not_assigned, p_role_gongxun_rank, level});
		false ->
			LevelFinal = Level
	end,
	case Ranking =:= undefined of
		true ->
				RankingFinal = undefined,
				exit({required_field_not_assigned, p_role_gongxun_rank, ranking});
		false ->
			RankingFinal = Ranking
	end,
	case Title =:= undefined of
		true ->
				TitleFinal = <<>>;
		false ->
			TitleFinal = Title
	end,
	case Exp =:= undefined of
		true ->
				ExpFinal = undefined,
				exit({required_field_not_assigned, p_role_gongxun_rank, exp});
		false ->
			ExpFinal = Exp
	end,
	case Gongxun =:= undefined of
		true ->
				GongxunFinal = undefined,
				exit({required_field_not_assigned, p_role_gongxun_rank, gongxun});
		false ->
			GongxunFinal = Gongxun
	end,
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),
	Family_name2 = common_tool:to_binary(Family_nameFinal),
	Family_nameLen = erlang:byte_size(Family_name2),
	Title2 = common_tool:to_binary(TitleFinal),
	TitleLen = erlang:byte_size(Title2),

	<<Role_idFinal:32/signed,Role_nameLen:16, Role_name2/binary,Faction_idFinal:32/signed,Family_nameLen:16, Family_name2/binary,LevelFinal:32/signed,RankingFinal:32/signed,TitleLen:16, Title2/binary,ExpFinal:64/float,GongxunFinal:32/signed>>;
encode_p_role_gongxun_rank(_) -> 
	<<>>.

decode_p_role_gongxun_rank(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,Role_nameLen:16, Bin1/binary>> = Bin0,
	<<Role_name:Role_nameLen/binary,Faction_id:32/signed,Family_nameLen:16, Bin2/binary>> = Bin1,
	<<Family_name:Family_nameLen/binary,Level:32/signed,Ranking:32/signed,TitleLen:16, Bin3/binary>> = Bin2,
	<<Title:TitleLen/binary,Exp:64,Gongxun:32/signed>> = Bin3,

	{p_role_gongxun_rank, Role_id,common_tool:to_list(Role_name),Faction_id,common_tool:to_list(Family_name),Level,Ranking,common_tool:to_list(Title),Exp,Gongxun};

decode_p_role_gongxun_rank(_) ->
	undefined.
encode_p_role_all_rank(Record) when is_record(Record, p_role_all_rank) ->
	#p_role_all_rank{ranking=Ranking,rank_name=Rank_name,key_value=Key_value,key_name=Key_name} = Record,
	case Ranking =:= undefined of
		true ->
				RankingFinal = undefined,
				exit({required_field_not_assigned, p_role_all_rank, ranking});
		false ->
			RankingFinal = Ranking
	end,
	case Rank_name =:= undefined of
		true ->
				Rank_nameFinal = undefined,
				exit({required_field_not_assigned, p_role_all_rank, rank_name});
		false ->
			Rank_nameFinal = Rank_name
	end,
	case Key_value =:= undefined of
		true ->
				Key_valueFinal = undefined,
				exit({required_field_not_assigned, p_role_all_rank, key_value});
		false ->
			Key_valueFinal = Key_value
	end,
	case Key_name =:= undefined of
		true ->
				Key_nameFinal = undefined,
				exit({required_field_not_assigned, p_role_all_rank, key_name});
		false ->
			Key_nameFinal = Key_name
	end,
	Rank_name2 = common_tool:to_binary(Rank_nameFinal),
	Rank_nameLen = erlang:byte_size(Rank_name2),
	Key_name2 = common_tool:to_binary(Key_nameFinal),
	Key_nameLen = erlang:byte_size(Key_name2),

	<<RankingFinal:32/signed,Rank_nameLen:16, Rank_name2/binary,Key_valueFinal:32/signed,Key_nameLen:16, Key_name2/binary>>;
encode_p_role_all_rank(_) -> 
	<<>>.

decode_p_role_all_rank(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Ranking:32/signed,Rank_nameLen:16, Bin1/binary>> = Bin0,
	<<Rank_name:Rank_nameLen/binary,Key_value:32/signed,Key_nameLen:16, Bin2/binary>> = Bin1,
	<<Key_name:Key_nameLen/binary>> = Bin2,

	{p_role_all_rank, Ranking,common_tool:to_list(Rank_name),Key_value,common_tool:to_list(Key_name)};

decode_p_role_all_rank(_) ->
	undefined.
encode_p_role_give_flowers_rank(Record) when is_record(Record, p_role_give_flowers_rank) ->
	#p_role_give_flowers_rank{role_id=Role_id,ranking=Ranking,role_name=Role_name,level=Level,score=Score,family_id=Family_id,family_name=Family_name,faction_id=Faction_id,title=Title} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, p_role_give_flowers_rank, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Ranking =:= undefined of
		true ->
				RankingFinal = 0;
		false ->
			RankingFinal = Ranking
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = undefined,
				exit({required_field_not_assigned, p_role_give_flowers_rank, role_name});
		false ->
			Role_nameFinal = Role_name
	end,
	case Level =:= undefined of
		true ->
				LevelFinal = undefined,
				exit({required_field_not_assigned, p_role_give_flowers_rank, level});
		false ->
			LevelFinal = Level
	end,
	case Score =:= undefined of
		true ->
				ScoreFinal = undefined,
				exit({required_field_not_assigned, p_role_give_flowers_rank, score});
		false ->
			ScoreFinal = Score
	end,
	case Family_id =:= undefined of
		true ->
				Family_idFinal = undefined,
				exit({required_field_not_assigned, p_role_give_flowers_rank, family_id});
		false ->
			Family_idFinal = Family_id
	end,
	case Family_name =:= undefined of
		true ->
				Family_nameFinal = undefined,
				exit({required_field_not_assigned, p_role_give_flowers_rank, family_name});
		false ->
			Family_nameFinal = Family_name
	end,
	case Faction_id =:= undefined of
		true ->
				Faction_idFinal = undefined,
				exit({required_field_not_assigned, p_role_give_flowers_rank, faction_id});
		false ->
			Faction_idFinal = Faction_id
	end,
	case Title =:= undefined of
		true ->
				TitleFinal = <<>>;
		false ->
			TitleFinal = Title
	end,
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),
	Family_name2 = common_tool:to_binary(Family_nameFinal),
	Family_nameLen = erlang:byte_size(Family_name2),
	Title2 = common_tool:to_binary(TitleFinal),
	TitleLen = erlang:byte_size(Title2),

	<<Role_idFinal:32/signed,RankingFinal:32/signed,Role_nameLen:16, Role_name2/binary,LevelFinal:32/signed,ScoreFinal:32/signed,Family_idFinal:32/signed,Family_nameLen:16, Family_name2/binary,Faction_idFinal:32/signed,TitleLen:16, Title2/binary>>;
encode_p_role_give_flowers_rank(_) -> 
	<<>>.

decode_p_role_give_flowers_rank(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,Ranking:32/signed,Role_nameLen:16, Bin1/binary>> = Bin0,
	<<Role_name:Role_nameLen/binary,Level:32/signed,Score:32/signed,Family_id:32/signed,Family_nameLen:16, Bin2/binary>> = Bin1,
	<<Family_name:Family_nameLen/binary,Faction_id:32/signed,TitleLen:16, Bin3/binary>> = Bin2,
	<<Title:TitleLen/binary>> = Bin3,

	{p_role_give_flowers_rank, Role_id,Ranking,common_tool:to_list(Role_name),Level,Score,Family_id,common_tool:to_list(Family_name),Faction_id,common_tool:to_list(Title)};

decode_p_role_give_flowers_rank(_) ->
	undefined.
encode_p_role_give_flowers_today_rank(Record) when is_record(Record, p_role_give_flowers_today_rank) ->
	#p_role_give_flowers_today_rank{role_id=Role_id,ranking=Ranking,role_name=Role_name,level=Level,score=Score,family_id=Family_id,family_name=Family_name,faction_id=Faction_id,title=Title} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, p_role_give_flowers_today_rank, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Ranking =:= undefined of
		true ->
				RankingFinal = 0;
		false ->
			RankingFinal = Ranking
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = undefined,
				exit({required_field_not_assigned, p_role_give_flowers_today_rank, role_name});
		false ->
			Role_nameFinal = Role_name
	end,
	case Level =:= undefined of
		true ->
				LevelFinal = undefined,
				exit({required_field_not_assigned, p_role_give_flowers_today_rank, level});
		false ->
			LevelFinal = Level
	end,
	case Score =:= undefined of
		true ->
				ScoreFinal = undefined,
				exit({required_field_not_assigned, p_role_give_flowers_today_rank, score});
		false ->
			ScoreFinal = Score
	end,
	case Family_id =:= undefined of
		true ->
				Family_idFinal = undefined,
				exit({required_field_not_assigned, p_role_give_flowers_today_rank, family_id});
		false ->
			Family_idFinal = Family_id
	end,
	case Family_name =:= undefined of
		true ->
				Family_nameFinal = undefined,
				exit({required_field_not_assigned, p_role_give_flowers_today_rank, family_name});
		false ->
			Family_nameFinal = Family_name
	end,
	case Faction_id =:= undefined of
		true ->
				Faction_idFinal = undefined,
				exit({required_field_not_assigned, p_role_give_flowers_today_rank, faction_id});
		false ->
			Faction_idFinal = Faction_id
	end,
	case Title =:= undefined of
		true ->
				TitleFinal = <<>>;
		false ->
			TitleFinal = Title
	end,
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),
	Family_name2 = common_tool:to_binary(Family_nameFinal),
	Family_nameLen = erlang:byte_size(Family_name2),
	Title2 = common_tool:to_binary(TitleFinal),
	TitleLen = erlang:byte_size(Title2),

	<<Role_idFinal:32/signed,RankingFinal:32/signed,Role_nameLen:16, Role_name2/binary,LevelFinal:32/signed,ScoreFinal:32/signed,Family_idFinal:32/signed,Family_nameLen:16, Family_name2/binary,Faction_idFinal:32/signed,TitleLen:16, Title2/binary>>;
encode_p_role_give_flowers_today_rank(_) -> 
	<<>>.

decode_p_role_give_flowers_today_rank(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,Ranking:32/signed,Role_nameLen:16, Bin1/binary>> = Bin0,
	<<Role_name:Role_nameLen/binary,Level:32/signed,Score:32/signed,Family_id:32/signed,Family_nameLen:16, Bin2/binary>> = Bin1,
	<<Family_name:Family_nameLen/binary,Faction_id:32/signed,TitleLen:16, Bin3/binary>> = Bin2,
	<<Title:TitleLen/binary>> = Bin3,

	{p_role_give_flowers_today_rank, Role_id,Ranking,common_tool:to_list(Role_name),Level,Score,Family_id,common_tool:to_list(Family_name),Faction_id,common_tool:to_list(Title)};

decode_p_role_give_flowers_today_rank(_) ->
	undefined.
encode_p_role_give_flowers_yesterday_rank(Record) when is_record(Record, p_role_give_flowers_yesterday_rank) ->
	#p_role_give_flowers_yesterday_rank{role_id=Role_id,ranking=Ranking,role_name=Role_name,level=Level,score=Score,family_id=Family_id,family_name=Family_name,faction_id=Faction_id,title=Title} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, p_role_give_flowers_yesterday_rank, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Ranking =:= undefined of
		true ->
				RankingFinal = 0;
		false ->
			RankingFinal = Ranking
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = undefined,
				exit({required_field_not_assigned, p_role_give_flowers_yesterday_rank, role_name});
		false ->
			Role_nameFinal = Role_name
	end,
	case Level =:= undefined of
		true ->
				LevelFinal = undefined,
				exit({required_field_not_assigned, p_role_give_flowers_yesterday_rank, level});
		false ->
			LevelFinal = Level
	end,
	case Score =:= undefined of
		true ->
				ScoreFinal = undefined,
				exit({required_field_not_assigned, p_role_give_flowers_yesterday_rank, score});
		false ->
			ScoreFinal = Score
	end,
	case Family_id =:= undefined of
		true ->
				Family_idFinal = undefined,
				exit({required_field_not_assigned, p_role_give_flowers_yesterday_rank, family_id});
		false ->
			Family_idFinal = Family_id
	end,
	case Family_name =:= undefined of
		true ->
				Family_nameFinal = undefined,
				exit({required_field_not_assigned, p_role_give_flowers_yesterday_rank, family_name});
		false ->
			Family_nameFinal = Family_name
	end,
	case Faction_id =:= undefined of
		true ->
				Faction_idFinal = undefined,
				exit({required_field_not_assigned, p_role_give_flowers_yesterday_rank, faction_id});
		false ->
			Faction_idFinal = Faction_id
	end,
	case Title =:= undefined of
		true ->
				TitleFinal = <<>>;
		false ->
			TitleFinal = Title
	end,
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),
	Family_name2 = common_tool:to_binary(Family_nameFinal),
	Family_nameLen = erlang:byte_size(Family_name2),
	Title2 = common_tool:to_binary(TitleFinal),
	TitleLen = erlang:byte_size(Title2),

	<<Role_idFinal:32/signed,RankingFinal:32/signed,Role_nameLen:16, Role_name2/binary,LevelFinal:32/signed,ScoreFinal:32/signed,Family_idFinal:32/signed,Family_nameLen:16, Family_name2/binary,Faction_idFinal:32/signed,TitleLen:16, Title2/binary>>;
encode_p_role_give_flowers_yesterday_rank(_) -> 
	<<>>.

decode_p_role_give_flowers_yesterday_rank(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,Ranking:32/signed,Role_nameLen:16, Bin1/binary>> = Bin0,
	<<Role_name:Role_nameLen/binary,Level:32/signed,Score:32/signed,Family_id:32/signed,Family_nameLen:16, Bin2/binary>> = Bin1,
	<<Family_name:Family_nameLen/binary,Faction_id:32/signed,TitleLen:16, Bin3/binary>> = Bin2,
	<<Title:TitleLen/binary>> = Bin3,

	{p_role_give_flowers_yesterday_rank, Role_id,Ranking,common_tool:to_list(Role_name),Level,Score,Family_id,common_tool:to_list(Family_name),Faction_id,common_tool:to_list(Title)};

decode_p_role_give_flowers_yesterday_rank(_) ->
	undefined.
encode_p_role_give_flowers_last_week_rank(Record) when is_record(Record, p_role_give_flowers_last_week_rank) ->
	#p_role_give_flowers_last_week_rank{role_id=Role_id,ranking=Ranking,role_name=Role_name,level=Level,score=Score,family_id=Family_id,family_name=Family_name,faction_id=Faction_id,title=Title} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, p_role_give_flowers_last_week_rank, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Ranking =:= undefined of
		true ->
				RankingFinal = 0;
		false ->
			RankingFinal = Ranking
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = undefined,
				exit({required_field_not_assigned, p_role_give_flowers_last_week_rank, role_name});
		false ->
			Role_nameFinal = Role_name
	end,
	case Level =:= undefined of
		true ->
				LevelFinal = undefined,
				exit({required_field_not_assigned, p_role_give_flowers_last_week_rank, level});
		false ->
			LevelFinal = Level
	end,
	case Score =:= undefined of
		true ->
				ScoreFinal = undefined,
				exit({required_field_not_assigned, p_role_give_flowers_last_week_rank, score});
		false ->
			ScoreFinal = Score
	end,
	case Family_id =:= undefined of
		true ->
				Family_idFinal = undefined,
				exit({required_field_not_assigned, p_role_give_flowers_last_week_rank, family_id});
		false ->
			Family_idFinal = Family_id
	end,
	case Family_name =:= undefined of
		true ->
				Family_nameFinal = undefined,
				exit({required_field_not_assigned, p_role_give_flowers_last_week_rank, family_name});
		false ->
			Family_nameFinal = Family_name
	end,
	case Faction_id =:= undefined of
		true ->
				Faction_idFinal = undefined,
				exit({required_field_not_assigned, p_role_give_flowers_last_week_rank, faction_id});
		false ->
			Faction_idFinal = Faction_id
	end,
	case Title =:= undefined of
		true ->
				TitleFinal = <<>>;
		false ->
			TitleFinal = Title
	end,
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),
	Family_name2 = common_tool:to_binary(Family_nameFinal),
	Family_nameLen = erlang:byte_size(Family_name2),
	Title2 = common_tool:to_binary(TitleFinal),
	TitleLen = erlang:byte_size(Title2),

	<<Role_idFinal:32/signed,RankingFinal:32/signed,Role_nameLen:16, Role_name2/binary,LevelFinal:32/signed,ScoreFinal:32/signed,Family_idFinal:32/signed,Family_nameLen:16, Family_name2/binary,Faction_idFinal:32/signed,TitleLen:16, Title2/binary>>;
encode_p_role_give_flowers_last_week_rank(_) -> 
	<<>>.

decode_p_role_give_flowers_last_week_rank(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,Ranking:32/signed,Role_nameLen:16, Bin1/binary>> = Bin0,
	<<Role_name:Role_nameLen/binary,Level:32/signed,Score:32/signed,Family_id:32/signed,Family_nameLen:16, Bin2/binary>> = Bin1,
	<<Family_name:Family_nameLen/binary,Faction_id:32/signed,TitleLen:16, Bin3/binary>> = Bin2,
	<<Title:TitleLen/binary>> = Bin3,

	{p_role_give_flowers_last_week_rank, Role_id,Ranking,common_tool:to_list(Role_name),Level,Score,Family_id,common_tool:to_list(Family_name),Faction_id,common_tool:to_list(Title)};

decode_p_role_give_flowers_last_week_rank(_) ->
	undefined.
encode_p_role_give_flowers_this_week_rank(Record) when is_record(Record, p_role_give_flowers_this_week_rank) ->
	#p_role_give_flowers_this_week_rank{role_id=Role_id,ranking=Ranking,role_name=Role_name,level=Level,score=Score,family_id=Family_id,family_name=Family_name,faction_id=Faction_id,title=Title} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, p_role_give_flowers_this_week_rank, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Ranking =:= undefined of
		true ->
				RankingFinal = 0;
		false ->
			RankingFinal = Ranking
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = undefined,
				exit({required_field_not_assigned, p_role_give_flowers_this_week_rank, role_name});
		false ->
			Role_nameFinal = Role_name
	end,
	case Level =:= undefined of
		true ->
				LevelFinal = undefined,
				exit({required_field_not_assigned, p_role_give_flowers_this_week_rank, level});
		false ->
			LevelFinal = Level
	end,
	case Score =:= undefined of
		true ->
				ScoreFinal = undefined,
				exit({required_field_not_assigned, p_role_give_flowers_this_week_rank, score});
		false ->
			ScoreFinal = Score
	end,
	case Family_id =:= undefined of
		true ->
				Family_idFinal = undefined,
				exit({required_field_not_assigned, p_role_give_flowers_this_week_rank, family_id});
		false ->
			Family_idFinal = Family_id
	end,
	case Family_name =:= undefined of
		true ->
				Family_nameFinal = undefined,
				exit({required_field_not_assigned, p_role_give_flowers_this_week_rank, family_name});
		false ->
			Family_nameFinal = Family_name
	end,
	case Faction_id =:= undefined of
		true ->
				Faction_idFinal = undefined,
				exit({required_field_not_assigned, p_role_give_flowers_this_week_rank, faction_id});
		false ->
			Faction_idFinal = Faction_id
	end,
	case Title =:= undefined of
		true ->
				TitleFinal = <<>>;
		false ->
			TitleFinal = Title
	end,
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),
	Family_name2 = common_tool:to_binary(Family_nameFinal),
	Family_nameLen = erlang:byte_size(Family_name2),
	Title2 = common_tool:to_binary(TitleFinal),
	TitleLen = erlang:byte_size(Title2),

	<<Role_idFinal:32/signed,RankingFinal:32/signed,Role_nameLen:16, Role_name2/binary,LevelFinal:32/signed,ScoreFinal:32/signed,Family_idFinal:32/signed,Family_nameLen:16, Family_name2/binary,Faction_idFinal:32/signed,TitleLen:16, Title2/binary>>;
encode_p_role_give_flowers_this_week_rank(_) -> 
	<<>>.

decode_p_role_give_flowers_this_week_rank(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,Ranking:32/signed,Role_nameLen:16, Bin1/binary>> = Bin0,
	<<Role_name:Role_nameLen/binary,Level:32/signed,Score:32/signed,Family_id:32/signed,Family_nameLen:16, Bin2/binary>> = Bin1,
	<<Family_name:Family_nameLen/binary,Faction_id:32/signed,TitleLen:16, Bin3/binary>> = Bin2,
	<<Title:TitleLen/binary>> = Bin3,

	{p_role_give_flowers_this_week_rank, Role_id,Ranking,common_tool:to_list(Role_name),Level,Score,Family_id,common_tool:to_list(Family_name),Faction_id,common_tool:to_list(Title)};

decode_p_role_give_flowers_this_week_rank(_) ->
	undefined.
encode_p_role_rece_flowers_rank(Record) when is_record(Record, p_role_rece_flowers_rank) ->
	#p_role_rece_flowers_rank{role_id=Role_id,ranking=Ranking,role_name=Role_name,level=Level,charm=Charm,family_id=Family_id,family_name=Family_name,faction_id=Faction_id,title=Title} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, p_role_rece_flowers_rank, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Ranking =:= undefined of
		true ->
				RankingFinal = 0;
		false ->
			RankingFinal = Ranking
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = undefined,
				exit({required_field_not_assigned, p_role_rece_flowers_rank, role_name});
		false ->
			Role_nameFinal = Role_name
	end,
	case Level =:= undefined of
		true ->
				LevelFinal = undefined,
				exit({required_field_not_assigned, p_role_rece_flowers_rank, level});
		false ->
			LevelFinal = Level
	end,
	case Charm =:= undefined of
		true ->
				CharmFinal = undefined,
				exit({required_field_not_assigned, p_role_rece_flowers_rank, charm});
		false ->
			CharmFinal = Charm
	end,
	case Family_id =:= undefined of
		true ->
				Family_idFinal = undefined,
				exit({required_field_not_assigned, p_role_rece_flowers_rank, family_id});
		false ->
			Family_idFinal = Family_id
	end,
	case Family_name =:= undefined of
		true ->
				Family_nameFinal = undefined,
				exit({required_field_not_assigned, p_role_rece_flowers_rank, family_name});
		false ->
			Family_nameFinal = Family_name
	end,
	case Faction_id =:= undefined of
		true ->
				Faction_idFinal = undefined,
				exit({required_field_not_assigned, p_role_rece_flowers_rank, faction_id});
		false ->
			Faction_idFinal = Faction_id
	end,
	case Title =:= undefined of
		true ->
				TitleFinal = <<>>;
		false ->
			TitleFinal = Title
	end,
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),
	Family_name2 = common_tool:to_binary(Family_nameFinal),
	Family_nameLen = erlang:byte_size(Family_name2),
	Title2 = common_tool:to_binary(TitleFinal),
	TitleLen = erlang:byte_size(Title2),

	<<Role_idFinal:32/signed,RankingFinal:32/signed,Role_nameLen:16, Role_name2/binary,LevelFinal:32/signed,CharmFinal:32/signed,Family_idFinal:32/signed,Family_nameLen:16, Family_name2/binary,Faction_idFinal:32/signed,TitleLen:16, Title2/binary>>;
encode_p_role_rece_flowers_rank(_) -> 
	<<>>.

decode_p_role_rece_flowers_rank(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,Ranking:32/signed,Role_nameLen:16, Bin1/binary>> = Bin0,
	<<Role_name:Role_nameLen/binary,Level:32/signed,Charm:32/signed,Family_id:32/signed,Family_nameLen:16, Bin2/binary>> = Bin1,
	<<Family_name:Family_nameLen/binary,Faction_id:32/signed,TitleLen:16, Bin3/binary>> = Bin2,
	<<Title:TitleLen/binary>> = Bin3,

	{p_role_rece_flowers_rank, Role_id,Ranking,common_tool:to_list(Role_name),Level,Charm,Family_id,common_tool:to_list(Family_name),Faction_id,common_tool:to_list(Title)};

decode_p_role_rece_flowers_rank(_) ->
	undefined.
encode_p_role_rece_flowers_today_rank(Record) when is_record(Record, p_role_rece_flowers_today_rank) ->
	#p_role_rece_flowers_today_rank{role_id=Role_id,ranking=Ranking,role_name=Role_name,level=Level,charm=Charm,family_id=Family_id,family_name=Family_name,faction_id=Faction_id,title=Title} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, p_role_rece_flowers_today_rank, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Ranking =:= undefined of
		true ->
				RankingFinal = 0;
		false ->
			RankingFinal = Ranking
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = undefined,
				exit({required_field_not_assigned, p_role_rece_flowers_today_rank, role_name});
		false ->
			Role_nameFinal = Role_name
	end,
	case Level =:= undefined of
		true ->
				LevelFinal = undefined,
				exit({required_field_not_assigned, p_role_rece_flowers_today_rank, level});
		false ->
			LevelFinal = Level
	end,
	case Charm =:= undefined of
		true ->
				CharmFinal = undefined,
				exit({required_field_not_assigned, p_role_rece_flowers_today_rank, charm});
		false ->
			CharmFinal = Charm
	end,
	case Family_id =:= undefined of
		true ->
				Family_idFinal = undefined,
				exit({required_field_not_assigned, p_role_rece_flowers_today_rank, family_id});
		false ->
			Family_idFinal = Family_id
	end,
	case Family_name =:= undefined of
		true ->
				Family_nameFinal = undefined,
				exit({required_field_not_assigned, p_role_rece_flowers_today_rank, family_name});
		false ->
			Family_nameFinal = Family_name
	end,
	case Faction_id =:= undefined of
		true ->
				Faction_idFinal = undefined,
				exit({required_field_not_assigned, p_role_rece_flowers_today_rank, faction_id});
		false ->
			Faction_idFinal = Faction_id
	end,
	case Title =:= undefined of
		true ->
				TitleFinal = <<>>;
		false ->
			TitleFinal = Title
	end,
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),
	Family_name2 = common_tool:to_binary(Family_nameFinal),
	Family_nameLen = erlang:byte_size(Family_name2),
	Title2 = common_tool:to_binary(TitleFinal),
	TitleLen = erlang:byte_size(Title2),

	<<Role_idFinal:32/signed,RankingFinal:32/signed,Role_nameLen:16, Role_name2/binary,LevelFinal:32/signed,CharmFinal:32/signed,Family_idFinal:32/signed,Family_nameLen:16, Family_name2/binary,Faction_idFinal:32/signed,TitleLen:16, Title2/binary>>;
encode_p_role_rece_flowers_today_rank(_) -> 
	<<>>.

decode_p_role_rece_flowers_today_rank(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,Ranking:32/signed,Role_nameLen:16, Bin1/binary>> = Bin0,
	<<Role_name:Role_nameLen/binary,Level:32/signed,Charm:32/signed,Family_id:32/signed,Family_nameLen:16, Bin2/binary>> = Bin1,
	<<Family_name:Family_nameLen/binary,Faction_id:32/signed,TitleLen:16, Bin3/binary>> = Bin2,
	<<Title:TitleLen/binary>> = Bin3,

	{p_role_rece_flowers_today_rank, Role_id,Ranking,common_tool:to_list(Role_name),Level,Charm,Family_id,common_tool:to_list(Family_name),Faction_id,common_tool:to_list(Title)};

decode_p_role_rece_flowers_today_rank(_) ->
	undefined.
encode_p_role_rece_flowers_yesterday_rank(Record) when is_record(Record, p_role_rece_flowers_yesterday_rank) ->
	#p_role_rece_flowers_yesterday_rank{role_id=Role_id,ranking=Ranking,role_name=Role_name,level=Level,charm=Charm,family_id=Family_id,family_name=Family_name,faction_id=Faction_id,title=Title} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, p_role_rece_flowers_yesterday_rank, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Ranking =:= undefined of
		true ->
				RankingFinal = 0;
		false ->
			RankingFinal = Ranking
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = undefined,
				exit({required_field_not_assigned, p_role_rece_flowers_yesterday_rank, role_name});
		false ->
			Role_nameFinal = Role_name
	end,
	case Level =:= undefined of
		true ->
				LevelFinal = undefined,
				exit({required_field_not_assigned, p_role_rece_flowers_yesterday_rank, level});
		false ->
			LevelFinal = Level
	end,
	case Charm =:= undefined of
		true ->
				CharmFinal = undefined,
				exit({required_field_not_assigned, p_role_rece_flowers_yesterday_rank, charm});
		false ->
			CharmFinal = Charm
	end,
	case Family_id =:= undefined of
		true ->
				Family_idFinal = undefined,
				exit({required_field_not_assigned, p_role_rece_flowers_yesterday_rank, family_id});
		false ->
			Family_idFinal = Family_id
	end,
	case Family_name =:= undefined of
		true ->
				Family_nameFinal = undefined,
				exit({required_field_not_assigned, p_role_rece_flowers_yesterday_rank, family_name});
		false ->
			Family_nameFinal = Family_name
	end,
	case Faction_id =:= undefined of
		true ->
				Faction_idFinal = undefined,
				exit({required_field_not_assigned, p_role_rece_flowers_yesterday_rank, faction_id});
		false ->
			Faction_idFinal = Faction_id
	end,
	case Title =:= undefined of
		true ->
				TitleFinal = <<>>;
		false ->
			TitleFinal = Title
	end,
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),
	Family_name2 = common_tool:to_binary(Family_nameFinal),
	Family_nameLen = erlang:byte_size(Family_name2),
	Title2 = common_tool:to_binary(TitleFinal),
	TitleLen = erlang:byte_size(Title2),

	<<Role_idFinal:32/signed,RankingFinal:32/signed,Role_nameLen:16, Role_name2/binary,LevelFinal:32/signed,CharmFinal:32/signed,Family_idFinal:32/signed,Family_nameLen:16, Family_name2/binary,Faction_idFinal:32/signed,TitleLen:16, Title2/binary>>;
encode_p_role_rece_flowers_yesterday_rank(_) -> 
	<<>>.

decode_p_role_rece_flowers_yesterday_rank(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,Ranking:32/signed,Role_nameLen:16, Bin1/binary>> = Bin0,
	<<Role_name:Role_nameLen/binary,Level:32/signed,Charm:32/signed,Family_id:32/signed,Family_nameLen:16, Bin2/binary>> = Bin1,
	<<Family_name:Family_nameLen/binary,Faction_id:32/signed,TitleLen:16, Bin3/binary>> = Bin2,
	<<Title:TitleLen/binary>> = Bin3,

	{p_role_rece_flowers_yesterday_rank, Role_id,Ranking,common_tool:to_list(Role_name),Level,Charm,Family_id,common_tool:to_list(Family_name),Faction_id,common_tool:to_list(Title)};

decode_p_role_rece_flowers_yesterday_rank(_) ->
	undefined.
encode_p_role_rece_flowers_last_week_rank(Record) when is_record(Record, p_role_rece_flowers_last_week_rank) ->
	#p_role_rece_flowers_last_week_rank{role_id=Role_id,ranking=Ranking,role_name=Role_name,level=Level,charm=Charm,family_id=Family_id,family_name=Family_name,faction_id=Faction_id,title=Title} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, p_role_rece_flowers_last_week_rank, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Ranking =:= undefined of
		true ->
				RankingFinal = 0;
		false ->
			RankingFinal = Ranking
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = undefined,
				exit({required_field_not_assigned, p_role_rece_flowers_last_week_rank, role_name});
		false ->
			Role_nameFinal = Role_name
	end,
	case Level =:= undefined of
		true ->
				LevelFinal = undefined,
				exit({required_field_not_assigned, p_role_rece_flowers_last_week_rank, level});
		false ->
			LevelFinal = Level
	end,
	case Charm =:= undefined of
		true ->
				CharmFinal = undefined,
				exit({required_field_not_assigned, p_role_rece_flowers_last_week_rank, charm});
		false ->
			CharmFinal = Charm
	end,
	case Family_id =:= undefined of
		true ->
				Family_idFinal = undefined,
				exit({required_field_not_assigned, p_role_rece_flowers_last_week_rank, family_id});
		false ->
			Family_idFinal = Family_id
	end,
	case Family_name =:= undefined of
		true ->
				Family_nameFinal = undefined,
				exit({required_field_not_assigned, p_role_rece_flowers_last_week_rank, family_name});
		false ->
			Family_nameFinal = Family_name
	end,
	case Faction_id =:= undefined of
		true ->
				Faction_idFinal = undefined,
				exit({required_field_not_assigned, p_role_rece_flowers_last_week_rank, faction_id});
		false ->
			Faction_idFinal = Faction_id
	end,
	case Title =:= undefined of
		true ->
				TitleFinal = <<>>;
		false ->
			TitleFinal = Title
	end,
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),
	Family_name2 = common_tool:to_binary(Family_nameFinal),
	Family_nameLen = erlang:byte_size(Family_name2),
	Title2 = common_tool:to_binary(TitleFinal),
	TitleLen = erlang:byte_size(Title2),

	<<Role_idFinal:32/signed,RankingFinal:32/signed,Role_nameLen:16, Role_name2/binary,LevelFinal:32/signed,CharmFinal:32/signed,Family_idFinal:32/signed,Family_nameLen:16, Family_name2/binary,Faction_idFinal:32/signed,TitleLen:16, Title2/binary>>;
encode_p_role_rece_flowers_last_week_rank(_) -> 
	<<>>.

decode_p_role_rece_flowers_last_week_rank(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,Ranking:32/signed,Role_nameLen:16, Bin1/binary>> = Bin0,
	<<Role_name:Role_nameLen/binary,Level:32/signed,Charm:32/signed,Family_id:32/signed,Family_nameLen:16, Bin2/binary>> = Bin1,
	<<Family_name:Family_nameLen/binary,Faction_id:32/signed,TitleLen:16, Bin3/binary>> = Bin2,
	<<Title:TitleLen/binary>> = Bin3,

	{p_role_rece_flowers_last_week_rank, Role_id,Ranking,common_tool:to_list(Role_name),Level,Charm,Family_id,common_tool:to_list(Family_name),Faction_id,common_tool:to_list(Title)};

decode_p_role_rece_flowers_last_week_rank(_) ->
	undefined.
encode_p_role_rece_flowers_this_week_rank(Record) when is_record(Record, p_role_rece_flowers_this_week_rank) ->
	#p_role_rece_flowers_this_week_rank{role_id=Role_id,ranking=Ranking,role_name=Role_name,level=Level,charm=Charm,family_id=Family_id,family_name=Family_name,faction_id=Faction_id,title=Title} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, p_role_rece_flowers_this_week_rank, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Ranking =:= undefined of
		true ->
				RankingFinal = 0;
		false ->
			RankingFinal = Ranking
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = undefined,
				exit({required_field_not_assigned, p_role_rece_flowers_this_week_rank, role_name});
		false ->
			Role_nameFinal = Role_name
	end,
	case Level =:= undefined of
		true ->
				LevelFinal = undefined,
				exit({required_field_not_assigned, p_role_rece_flowers_this_week_rank, level});
		false ->
			LevelFinal = Level
	end,
	case Charm =:= undefined of
		true ->
				CharmFinal = undefined,
				exit({required_field_not_assigned, p_role_rece_flowers_this_week_rank, charm});
		false ->
			CharmFinal = Charm
	end,
	case Family_id =:= undefined of
		true ->
				Family_idFinal = undefined,
				exit({required_field_not_assigned, p_role_rece_flowers_this_week_rank, family_id});
		false ->
			Family_idFinal = Family_id
	end,
	case Family_name =:= undefined of
		true ->
				Family_nameFinal = undefined,
				exit({required_field_not_assigned, p_role_rece_flowers_this_week_rank, family_name});
		false ->
			Family_nameFinal = Family_name
	end,
	case Faction_id =:= undefined of
		true ->
				Faction_idFinal = undefined,
				exit({required_field_not_assigned, p_role_rece_flowers_this_week_rank, faction_id});
		false ->
			Faction_idFinal = Faction_id
	end,
	case Title =:= undefined of
		true ->
				TitleFinal = <<>>;
		false ->
			TitleFinal = Title
	end,
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),
	Family_name2 = common_tool:to_binary(Family_nameFinal),
	Family_nameLen = erlang:byte_size(Family_name2),
	Title2 = common_tool:to_binary(TitleFinal),
	TitleLen = erlang:byte_size(Title2),

	<<Role_idFinal:32/signed,RankingFinal:32/signed,Role_nameLen:16, Role_name2/binary,LevelFinal:32/signed,CharmFinal:32/signed,Family_idFinal:32/signed,Family_nameLen:16, Family_name2/binary,Faction_idFinal:32/signed,TitleLen:16, Title2/binary>>;
encode_p_role_rece_flowers_this_week_rank(_) -> 
	<<>>.

decode_p_role_rece_flowers_this_week_rank(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,Ranking:32/signed,Role_nameLen:16, Bin1/binary>> = Bin0,
	<<Role_name:Role_nameLen/binary,Level:32/signed,Charm:32/signed,Family_id:32/signed,Family_nameLen:16, Bin2/binary>> = Bin1,
	<<Family_name:Family_nameLen/binary,Faction_id:32/signed,TitleLen:16, Bin3/binary>> = Bin2,
	<<Title:TitleLen/binary>> = Bin3,

	{p_role_rece_flowers_this_week_rank, Role_id,Ranking,common_tool:to_list(Role_name),Level,Charm,Family_id,common_tool:to_list(Family_name),Faction_id,common_tool:to_list(Title)};

decode_p_role_rece_flowers_this_week_rank(_) ->
	undefined.
encode_p_role_pet_rank(Record) when is_record(Record, p_role_pet_rank) ->
	#p_role_pet_rank{pet_id=Pet_id,pet_type_name=Pet_type_name,role_id=Role_id,ranking=Ranking,role_name=Role_name,level=Level,color=Color,understanding=Understanding,score=Score,faction_id=Faction_id,title=Title,pet_name=Pet_name} = Record,
	case Pet_id =:= undefined of
		true ->
				Pet_idFinal = undefined,
				exit({required_field_not_assigned, p_role_pet_rank, pet_id});
		false ->
			Pet_idFinal = Pet_id
	end,
	case Pet_type_name =:= undefined of
		true ->
				Pet_type_nameFinal = undefined,
				exit({required_field_not_assigned, p_role_pet_rank, pet_type_name});
		false ->
			Pet_type_nameFinal = Pet_type_name
	end,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, p_role_pet_rank, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Ranking =:= undefined of
		true ->
				RankingFinal = 0;
		false ->
			RankingFinal = Ranking
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = undefined,
				exit({required_field_not_assigned, p_role_pet_rank, role_name});
		false ->
			Role_nameFinal = Role_name
	end,
	case Level =:= undefined of
		true ->
				LevelFinal = undefined,
				exit({required_field_not_assigned, p_role_pet_rank, level});
		false ->
			LevelFinal = Level
	end,
	case Color =:= undefined of
		true ->
				ColorFinal = undefined,
				exit({required_field_not_assigned, p_role_pet_rank, color});
		false ->
			ColorFinal = Color
	end,
	case Understanding =:= undefined of
		true ->
				UnderstandingFinal = undefined,
				exit({required_field_not_assigned, p_role_pet_rank, understanding});
		false ->
			UnderstandingFinal = Understanding
	end,
	case Score =:= undefined of
		true ->
				ScoreFinal = undefined,
				exit({required_field_not_assigned, p_role_pet_rank, score});
		false ->
			ScoreFinal = Score
	end,
	case Faction_id =:= undefined of
		true ->
				Faction_idFinal = undefined,
				exit({required_field_not_assigned, p_role_pet_rank, faction_id});
		false ->
			Faction_idFinal = Faction_id
	end,
	case Title =:= undefined of
		true ->
				TitleFinal = <<>>;
		false ->
			TitleFinal = Title
	end,
	case Pet_name =:= undefined of
		true ->
				Pet_nameFinal = <<>>;
		false ->
			Pet_nameFinal = Pet_name
	end,
	Pet_type_name2 = common_tool:to_binary(Pet_type_nameFinal),
	Pet_type_nameLen = erlang:byte_size(Pet_type_name2),
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),
	Title2 = common_tool:to_binary(TitleFinal),
	TitleLen = erlang:byte_size(Title2),
	Pet_name2 = common_tool:to_binary(Pet_nameFinal),
	Pet_nameLen = erlang:byte_size(Pet_name2),

	<<Pet_idFinal:32/signed,Pet_type_nameLen:16, Pet_type_name2/binary,Role_idFinal:32/signed,RankingFinal:32/signed,Role_nameLen:16, Role_name2/binary,LevelFinal:32/signed,ColorFinal:32/signed,UnderstandingFinal:32/signed,ScoreFinal:32/signed,Faction_idFinal:32/signed,TitleLen:16, Title2/binary,Pet_nameLen:16, Pet_name2/binary>>;
encode_p_role_pet_rank(_) -> 
	<<>>.

decode_p_role_pet_rank(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Pet_id:32/signed,Pet_type_nameLen:16, Bin1/binary>> = Bin0,
	<<Pet_type_name:Pet_type_nameLen/binary,Role_id:32/signed,Ranking:32/signed,Role_nameLen:16, Bin2/binary>> = Bin1,
	<<Role_name:Role_nameLen/binary,Level:32/signed,Color:32/signed,Understanding:32/signed,Score:32/signed,Faction_id:32/signed,TitleLen:16, Bin3/binary>> = Bin2,
	<<Title:TitleLen/binary,Pet_nameLen:16, Bin4/binary>> = Bin3,
	<<Pet_name:Pet_nameLen/binary>> = Bin4,

	{p_role_pet_rank, Pet_id,common_tool:to_list(Pet_type_name),Role_id,Ranking,common_tool:to_list(Role_name),Level,Color,Understanding,Score,Faction_id,common_tool:to_list(Title),common_tool:to_list(Pet_name)};

decode_p_role_pet_rank(_) ->
	undefined.
encode_p_hero_fb_rank(Record) when is_record(Record, p_hero_fb_rank) ->
	#p_hero_fb_rank{ranking=Ranking,role_id=Role_id,role_name=Role_name,faction_id=Faction_id,time_used=Time_used,barrier_id=Barrier_id,score=Score} = Record,
	case Ranking =:= undefined of
		true ->
				RankingFinal = 0;
		false ->
			RankingFinal = Ranking
	end,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, p_hero_fb_rank, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = undefined,
				exit({required_field_not_assigned, p_hero_fb_rank, role_name});
		false ->
			Role_nameFinal = Role_name
	end,
	case Faction_id =:= undefined of
		true ->
				Faction_idFinal = undefined,
				exit({required_field_not_assigned, p_hero_fb_rank, faction_id});
		false ->
			Faction_idFinal = Faction_id
	end,
	case Time_used =:= undefined of
		true ->
				Time_usedFinal = undefined,
				exit({required_field_not_assigned, p_hero_fb_rank, time_used});
		false ->
			Time_usedFinal = Time_used
	end,
	case Barrier_id =:= undefined of
		true ->
				Barrier_idFinal = undefined,
				exit({required_field_not_assigned, p_hero_fb_rank, barrier_id});
		false ->
			Barrier_idFinal = Barrier_id
	end,
	case Score =:= undefined of
		true ->
				ScoreFinal = undefined,
				exit({required_field_not_assigned, p_hero_fb_rank, score});
		false ->
			ScoreFinal = Score
	end,
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),

	<<RankingFinal:32/signed,Role_idFinal:32/signed,Role_nameLen:16, Role_name2/binary,Faction_idFinal:32/signed,Time_usedFinal:32/signed,Barrier_idFinal:32/signed,ScoreFinal:32/signed>>;
encode_p_hero_fb_rank(_) -> 
	<<>>.

decode_p_hero_fb_rank(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Ranking:32/signed,Role_id:32/signed,Role_nameLen:16, Bin1/binary>> = Bin0,
	<<Role_name:Role_nameLen/binary,Faction_id:32/signed,Time_used:32/signed,Barrier_id:32/signed,Score:32/signed>> = Bin1,

	{p_hero_fb_rank, Ranking,Role_id,common_tool:to_list(Role_name),Faction_id,Time_used,Barrier_id,Score};

decode_p_hero_fb_rank(_) ->
	undefined.
encode_p_recommend_member_info(Record) when is_record(Record, p_recommend_member_info) ->
	#p_recommend_member_info{role_id=Role_id,role_name=Role_name,level=Level,sex=Sex,category=Category} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, p_recommend_member_info, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = undefined,
				exit({required_field_not_assigned, p_recommend_member_info, role_name});
		false ->
			Role_nameFinal = Role_name
	end,
	case Level =:= undefined of
		true ->
				LevelFinal = undefined,
				exit({required_field_not_assigned, p_recommend_member_info, level});
		false ->
			LevelFinal = Level
	end,
	case Sex =:= undefined of
		true ->
				SexFinal = 0;
		false ->
			SexFinal = Sex
	end,
	case Category =:= undefined of
		true ->
				CategoryFinal = 0;
		false ->
			CategoryFinal = Category
	end,
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),

	<<Role_idFinal:32/signed,Role_nameLen:16, Role_name2/binary,LevelFinal:32/signed,SexFinal:32/signed,CategoryFinal:32/signed>>;
encode_p_recommend_member_info(_) -> 
	<<>>.

decode_p_recommend_member_info(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,Role_nameLen:16, Bin1/binary>> = Bin0,
	<<Role_name:Role_nameLen/binary,Level:32/signed,Sex:32/signed,Category:32/signed>> = Bin1,

	{p_recommend_member_info, Role_id,common_tool:to_list(Role_name),Level,Sex,Category};

decode_p_recommend_member_info(_) ->
	undefined.
encode_p_achievement_info(Record) when is_record(Record, p_achievement_info) ->
	#p_achievement_info{achieve_id=Achieve_id,status=Status,complete_time=Complete_time,cur_progress=Cur_progress,total_progress=Total_progress,points=Points,pop_type=Pop_type,achieve_type=Achieve_type,class_id=Class_id,group_id=Group_id,role_id=Role_id,role_name=Role_name,faction_id=Faction_id} = Record,
	case Achieve_id =:= undefined of
		true ->
				Achieve_idFinal = 0;
		false ->
			Achieve_idFinal = Achieve_id
	end,
	case Status =:= undefined of
		true ->
				StatusFinal = 0;
		false ->
			StatusFinal = Status
	end,
	case Complete_time =:= undefined of
		true ->
				Complete_timeFinal = 0;
		false ->
			Complete_timeFinal = Complete_time
	end,
	case Cur_progress =:= undefined of
		true ->
				Cur_progressFinal = 0;
		false ->
			Cur_progressFinal = Cur_progress
	end,
	case Total_progress =:= undefined of
		true ->
				Total_progressFinal = 0;
		false ->
			Total_progressFinal = Total_progress
	end,
	case Points =:= undefined of
		true ->
				PointsFinal = 0;
		false ->
			PointsFinal = Points
	end,
	case Pop_type =:= undefined of
		true ->
				Pop_typeFinal = 0;
		false ->
			Pop_typeFinal = Pop_type
	end,
	case Achieve_type =:= undefined of
		true ->
				Achieve_typeFinal = 0;
		false ->
			Achieve_typeFinal = Achieve_type
	end,
	case Class_id =:= undefined of
		true ->
				Class_idFinal = 0;
		false ->
			Class_idFinal = Class_id
	end,
	case Group_id =:= undefined of
		true ->
				Group_idFinal = 0;
		false ->
			Group_idFinal = Group_id
	end,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = 0;
		false ->
			Role_idFinal = Role_id
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = <<>>;
		false ->
			Role_nameFinal = Role_name
	end,
	case Faction_id =:= undefined of
		true ->
				Faction_idFinal = 0;
		false ->
			Faction_idFinal = Faction_id
	end,
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),

	<<Achieve_idFinal:32/signed,StatusFinal:32/signed,Complete_timeFinal:32/signed,Cur_progressFinal:32/signed,Total_progressFinal:32/signed,PointsFinal:32/signed,Pop_typeFinal:32/signed,Achieve_typeFinal:32/signed,Class_idFinal:32/signed,Group_idFinal:32/signed,Role_idFinal:32/signed,Role_nameLen:16, Role_name2/binary,Faction_idFinal:32/signed>>;
encode_p_achievement_info(_) -> 
	<<>>.

decode_p_achievement_info(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Achieve_id:32/signed,Status:32/signed,Complete_time:32/signed,Cur_progress:32/signed,Total_progress:32/signed,Points:32/signed,Pop_type:32/signed,Achieve_type:32/signed,Class_id:32/signed,Group_id:32/signed,Role_id:32/signed,Role_nameLen:16, Bin1/binary>> = Bin0,
	<<Role_name:Role_nameLen/binary,Faction_id:32/signed>> = Bin1,

	{p_achievement_info, Achieve_id,Status,Complete_time,Cur_progress,Total_progress,Points,Pop_type,Achieve_type,Class_id,Group_id,Role_id,common_tool:to_list(Role_name),Faction_id};

decode_p_achievement_info(_) ->
	undefined.
encode_p_achievement_stat_info(Record) when is_record(Record, p_achievement_stat_info) ->
	#p_achievement_stat_info{type=Type,cur_progress=Cur_progress,total_progress=Total_progress,award_point=Award_point} = Record,
	case Type =:= undefined of
		true ->
				TypeFinal = 0;
		false ->
			TypeFinal = Type
	end,
	case Cur_progress =:= undefined of
		true ->
				Cur_progressFinal = 0;
		false ->
			Cur_progressFinal = Cur_progress
	end,
	case Total_progress =:= undefined of
		true ->
				Total_progressFinal = 0;
		false ->
			Total_progressFinal = Total_progress
	end,
	case Award_point =:= undefined of
		true ->
				Award_pointFinal = 0;
		false ->
			Award_pointFinal = Award_point
	end,

	<<TypeFinal:32/signed,Cur_progressFinal:32/signed,Total_progressFinal:32/signed,Award_pointFinal:32/signed>>;
encode_p_achievement_stat_info(_) -> 
	<<>>.

decode_p_achievement_stat_info(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Type:32/signed,Cur_progress:32/signed,Total_progress:32/signed,Award_point:32/signed>> = Bin0,

	{p_achievement_stat_info, Type,Cur_progress,Total_progress,Award_point};

decode_p_achievement_stat_info(_) ->
	undefined.
encode_p_map_collect(Record) when is_record(Record, p_map_collect) ->
	#p_map_collect{id=Id,typeid=Typeid,name=Name,degree=Degree,demand=Demand,times=Times,goodslist=Goodslist,tool_typeid=Tool_typeid,point_id=Point_id,pos=Pos,roles=Roles} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, p_map_collect, id});
		false ->
			IdFinal = Id
	end,
	case Typeid =:= undefined of
		true ->
				TypeidFinal = undefined,
				exit({required_field_not_assigned, p_map_collect, typeid});
		false ->
			TypeidFinal = Typeid
	end,
	case Name =:= undefined of
		true ->
				NameFinal = <<>>;
		false ->
			NameFinal = Name
	end,
	case Degree =:= undefined of
		true ->
				DegreeFinal = 0;
		false ->
			DegreeFinal = Degree
	end,
	case Demand =:= undefined of
		true ->
				DemandFinal = 0;
		false ->
			DemandFinal = Demand
	end,
	case Times =:= undefined of
		true ->
				TimesFinal = 0;
		false ->
			TimesFinal = Times
	end,
	case Goodslist =:= undefined of
		true ->
				GoodslistFinal = 0;
		false ->
			GoodslistFinal = Goodslist
	end,
	case Tool_typeid =:= undefined of
		true ->
				Tool_typeidFinal = 0;
		false ->
			Tool_typeidFinal = Tool_typeid
	end,
	case Point_id =:= undefined of
		true ->
				Point_idFinal = 0;
		false ->
			Point_idFinal = Point_id
	end,
	case Pos =:= undefined of
		true ->
				PosFinal = 0;
		false ->
			PosFinal = Pos
	end,
	case Roles =:= undefined of
		true ->
			RolesFinal = [];
		false ->
			RolesFinal = Roles
	end,
	Name2 = common_tool:to_binary(NameFinal),
	NameLen = erlang:byte_size(Name2),
	Demand_bin = encode_p_collect_demand(DemandFinal),
	BinLen_demand = erlang:byte_size(Demand_bin),
	Goodslist_bin = encode_p_collect_goods(GoodslistFinal),
	BinLen_goodslist = erlang:byte_size(Goodslist_bin),
	Pos_bin = encode_p_pos(PosFinal),
	BinLen_pos = erlang:byte_size(Pos_bin),
	Roles_bin = encode_p_collect_roles(RolesFinal, <<>>),
	SizeRolesFinal = erlang:length(RolesFinal),
	BinLen_roles = erlang:byte_size(Roles_bin),

	<<IdFinal:32/signed,TypeidFinal:32/signed,NameLen:16, Name2/binary,DegreeFinal:32/signed,BinLen_demand:32, Demand_bin/binary,TimesFinal:32/signed,BinLen_goodslist:32, Goodslist_bin/binary,Tool_typeidFinal:32/signed,Point_idFinal:32/signed,BinLen_pos:32, Pos_bin/binary,SizeRolesFinal:16, BinLen_roles:32, Roles_bin/binary>>;
encode_p_map_collect(_) -> 
	<<>>.

decode_p_map_collect(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed,Typeid:32/signed,NameLen:16, Bin1/binary>> = Bin0,
	<<Name:NameLen/binary,Degree:32/signed,SubBinSizedemand:32, Bin2/binary>> = Bin1,
	<<SubBindemand:SubBinSizedemand/binary, Bin3/binary>> = Bin2,
	Demand = decode_p_collect_demand(SubBindemand),
	<<Times:32/signed,SubBinSizegoodslist:32, Bin4/binary>> = Bin3,
	<<SubBingoodslist:SubBinSizegoodslist/binary, Bin5/binary>> = Bin4,
	Goodslist = decode_p_collect_goods(SubBingoodslist),
	<<Tool_typeid:32/signed,Point_id:32/signed,SubBinSizepos:32, Bin6/binary>> = Bin5,
	<<SubBinpos:SubBinSizepos/binary, Bin7/binary>> = Bin6,
	Pos = decode_p_pos(SubBinpos),
	<<_Sizeroles:16, _BinLenroles:32, SubBinroles/binary>> = Bin7,
	Roles = lists:reverse(decode_p_collect_roles(SubBinroles, [])),

	{p_map_collect, Id,Typeid,common_tool:to_list(Name),Degree,Demand,Times,Goodslist,Tool_typeid,Point_id,Pos,Roles};

decode_p_map_collect(_) ->
	undefined.
encode_p_collect_role(Record) when is_record(Record, p_collect_role) ->
	#p_collect_role{roleid=Roleid,start_time=Start_time,end_time=End_time} = Record,
	case Roleid =:= undefined of
		true ->
				RoleidFinal = undefined,
				exit({required_field_not_assigned, p_collect_role, roleid});
		false ->
			RoleidFinal = Roleid
	end,
	case Start_time =:= undefined of
		true ->
				Start_timeFinal = undefined,
				exit({required_field_not_assigned, p_collect_role, start_time});
		false ->
			Start_timeFinal = Start_time
	end,
	case End_time =:= undefined of
		true ->
				End_timeFinal = undefined,
				exit({required_field_not_assigned, p_collect_role, end_time});
		false ->
			End_timeFinal = End_time
	end,

	<<RoleidFinal:32/signed,Start_timeFinal:32/signed,End_timeFinal:32/signed>>;
encode_p_collect_role(_) -> 
	<<>>.

decode_p_collect_role(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Roleid:32/signed,Start_time:32/signed,End_time:32/signed>> = Bin0,

	{p_collect_role, Roleid,Start_time,End_time};

decode_p_collect_role(_) ->
	undefined.
encode_p_collect_point(Record) when is_record(Record, p_collect_point) ->
	#p_collect_point{id=Id,typeid=Typeid,state=State,pos=Pos,start_time=Start_time,ripening_time=Ripening_time,end_time=End_time,refresh=Refresh,id_list=Id_list,drop_type=Drop_type,max_num=Max_num,grafts=Grafts} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, p_collect_point, id});
		false ->
			IdFinal = Id
	end,
	case Typeid =:= undefined of
		true ->
				TypeidFinal = undefined,
				exit({required_field_not_assigned, p_collect_point, typeid});
		false ->
			TypeidFinal = Typeid
	end,
	case State =:= undefined of
		true ->
				StateFinal = undefined,
				exit({required_field_not_assigned, p_collect_point, state});
		false ->
			StateFinal = State
	end,
	case Pos =:= undefined of
		true ->
				PosFinal = undefined,
				exit({required_field_not_assigned, p_collect_point, pos});
		false ->
			PosFinal = Pos
	end,
	case Start_time =:= undefined of
		true ->
				Start_timeFinal = undefined,
				exit({required_field_not_assigned, p_collect_point, start_time});
		false ->
			Start_timeFinal = Start_time
	end,
	case Ripening_time =:= undefined of
		true ->
				Ripening_timeFinal = undefined,
				exit({required_field_not_assigned, p_collect_point, ripening_time});
		false ->
			Ripening_timeFinal = Ripening_time
	end,
	case End_time =:= undefined of
		true ->
				End_timeFinal = undefined,
				exit({required_field_not_assigned, p_collect_point, end_time});
		false ->
			End_timeFinal = End_time
	end,
	case Refresh =:= undefined of
		true ->
				RefreshFinal = undefined,
				exit({required_field_not_assigned, p_collect_point, refresh});
		false ->
			RefreshFinal = Refresh
	end,
	case Id_list =:= undefined of
		true ->
			Id_listFinal = [];
		false ->
			Id_listFinal = Id_list
	end,
	case Drop_type =:= undefined of
		true ->
				Drop_typeFinal = undefined,
				exit({required_field_not_assigned, p_collect_point, drop_type});
		false ->
			Drop_typeFinal = Drop_type
	end,
	case Max_num =:= undefined of
		true ->
				Max_numFinal = undefined,
				exit({required_field_not_assigned, p_collect_point, max_num});
		false ->
			Max_numFinal = Max_num
	end,
	case Grafts =:= undefined of
		true ->
			GraftsFinal = [];
		false ->
			GraftsFinal = Grafts
	end,
	Pos_bin = encode_p_pos(PosFinal),
	BinLen_pos = erlang:byte_size(Pos_bin),
	Refresh_bin = encode_p_collect_refresh(RefreshFinal),
	BinLen_refresh = erlang:byte_size(Refresh_bin),
	Id_list_bin = encode_int32s(Id_listFinal, <<>>),
	SizeId_listFinal = erlang:length(Id_listFinal),
	BinLen_id_list = erlang:byte_size(Id_list_bin),
	Grafts_bin = encode_p_collects(GraftsFinal, <<>>),
	SizeGraftsFinal = erlang:length(GraftsFinal),
	BinLen_grafts = erlang:byte_size(Grafts_bin),

	<<IdFinal:32/signed,TypeidFinal:32/signed,StateFinal:32/signed,BinLen_pos:32, Pos_bin/binary,Start_timeFinal:32/signed,Ripening_timeFinal:32/signed,End_timeFinal:32/signed,BinLen_refresh:32, Refresh_bin/binary,SizeId_listFinal:16, BinLen_id_list:32, Id_list_bin/binary,Drop_typeFinal:32/signed,Max_numFinal:32/signed,SizeGraftsFinal:16, BinLen_grafts:32, Grafts_bin/binary>>;
encode_p_collect_point(_) -> 
	<<>>.

decode_p_collect_point(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed,Typeid:32/signed,State:32/signed,SubBinSizepos:32, Bin1/binary>> = Bin0,
	<<SubBinpos:SubBinSizepos/binary, Bin2/binary>> = Bin1,
	Pos = decode_p_pos(SubBinpos),
	<<Start_time:32/signed,Ripening_time:32/signed,End_time:32/signed,SubBinSizerefresh:32, Bin3/binary>> = Bin2,
	<<SubBinrefresh:SubBinSizerefresh/binary, Bin4/binary>> = Bin3,
	Refresh = decode_p_collect_refresh(SubBinrefresh),
	<<_Sizeid_list:16, BinLenid_list:32, Bin5/binary>> = Bin4,
	<<SubBinid_list:BinLenid_list/binary, Bin6/binary>> = Bin5, 
	Id_list = lists:reverse(decode_int32s(SubBinid_list, [])),
	<<Drop_type:32/signed,Max_num:32/signed,_Sizegrafts:16, _BinLengrafts:32, SubBingrafts/binary>> = Bin6,
	Grafts = lists:reverse(decode_p_collects(SubBingrafts, [])),

	{p_collect_point, Id,Typeid,State,Pos,Start_time,Ripening_time,End_time,Refresh,Id_list,Drop_type,Max_num,Grafts};

decode_p_collect_point(_) ->
	undefined.
encode_p_collect_point_base_info(Record) when is_record(Record, p_collect_point_base_info) ->
	#p_collect_point_base_info{id=Id,mapid=Mapid,drop_type=Drop_type,pos=Pos,max_num=Max_num,refresh=Refresh,ripening_time=Ripening_time,grafts=Grafts} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, p_collect_point_base_info, id});
		false ->
			IdFinal = Id
	end,
	case Mapid =:= undefined of
		true ->
				MapidFinal = undefined,
				exit({required_field_not_assigned, p_collect_point_base_info, mapid});
		false ->
			MapidFinal = Mapid
	end,
	case Drop_type =:= undefined of
		true ->
				Drop_typeFinal = undefined,
				exit({required_field_not_assigned, p_collect_point_base_info, drop_type});
		false ->
			Drop_typeFinal = Drop_type
	end,
	case Pos =:= undefined of
		true ->
				PosFinal = undefined,
				exit({required_field_not_assigned, p_collect_point_base_info, pos});
		false ->
			PosFinal = Pos
	end,
	case Max_num =:= undefined of
		true ->
				Max_numFinal = undefined,
				exit({required_field_not_assigned, p_collect_point_base_info, max_num});
		false ->
			Max_numFinal = Max_num
	end,
	case Refresh =:= undefined of
		true ->
				RefreshFinal = undefined,
				exit({required_field_not_assigned, p_collect_point_base_info, refresh});
		false ->
			RefreshFinal = Refresh
	end,
	case Ripening_time =:= undefined of
		true ->
				Ripening_timeFinal = undefined,
				exit({required_field_not_assigned, p_collect_point_base_info, ripening_time});
		false ->
			Ripening_timeFinal = Ripening_time
	end,
	case Grafts =:= undefined of
		true ->
			GraftsFinal = [];
		false ->
			GraftsFinal = Grafts
	end,
	Pos_bin = encode_p_pos(PosFinal),
	BinLen_pos = erlang:byte_size(Pos_bin),
	Refresh_bin = encode_p_collect_refresh(RefreshFinal),
	BinLen_refresh = erlang:byte_size(Refresh_bin),
	Grafts_bin = encode_p_collects(GraftsFinal, <<>>),
	SizeGraftsFinal = erlang:length(GraftsFinal),
	BinLen_grafts = erlang:byte_size(Grafts_bin),

	<<IdFinal:32/signed,MapidFinal:32/signed,Drop_typeFinal:32/signed,BinLen_pos:32, Pos_bin/binary,Max_numFinal:32/signed,BinLen_refresh:32, Refresh_bin/binary,Ripening_timeFinal:32/signed,SizeGraftsFinal:16, BinLen_grafts:32, Grafts_bin/binary>>;
encode_p_collect_point_base_info(_) -> 
	<<>>.

decode_p_collect_point_base_info(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed,Mapid:32/signed,Drop_type:32/signed,SubBinSizepos:32, Bin1/binary>> = Bin0,
	<<SubBinpos:SubBinSizepos/binary, Bin2/binary>> = Bin1,
	Pos = decode_p_pos(SubBinpos),
	<<Max_num:32/signed,SubBinSizerefresh:32, Bin3/binary>> = Bin2,
	<<SubBinrefresh:SubBinSizerefresh/binary, Bin4/binary>> = Bin3,
	Refresh = decode_p_collect_refresh(SubBinrefresh),
	<<Ripening_time:32/signed,_Sizegrafts:16, _BinLengrafts:32, SubBingrafts/binary>> = Bin4,
	Grafts = lists:reverse(decode_p_collects(SubBingrafts, [])),

	{p_collect_point_base_info, Id,Mapid,Drop_type,Pos,Max_num,Refresh,Ripening_time,Grafts};

decode_p_collect_point_base_info(_) ->
	undefined.
encode_p_collect(Record) when is_record(Record, p_collect) ->
	#p_collect{rate=Rate,typeid=Typeid} = Record,
	case Rate =:= undefined of
		true ->
				RateFinal = undefined,
				exit({required_field_not_assigned, p_collect, rate});
		false ->
			RateFinal = Rate
	end,
	case Typeid =:= undefined of
		true ->
				TypeidFinal = undefined,
				exit({required_field_not_assigned, p_collect, typeid});
		false ->
			TypeidFinal = Typeid
	end,

	<<RateFinal:32/signed,TypeidFinal:32/signed>>;
encode_p_collect(_) -> 
	<<>>.

decode_p_collect(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Rate:32/signed,Typeid:32/signed>> = Bin0,

	{p_collect, Rate,Typeid};

decode_p_collect(_) ->
	undefined.
encode_p_collect_refresh(Record) when is_record(Record, p_collect_refresh) ->
	#p_collect_refresh{type=Type,interval=Interval,start_time=Start_time,end_time=End_time} = Record,
	case Type =:= undefined of
		true ->
				TypeFinal = undefined,
				exit({required_field_not_assigned, p_collect_refresh, type});
		false ->
			TypeFinal = Type
	end,
	case Interval =:= undefined of
		true ->
				IntervalFinal = 0;
		false ->
			IntervalFinal = Interval
	end,
	case Start_time =:= undefined of
		true ->
				Start_timeFinal = 0;
		false ->
			Start_timeFinal = Start_time
	end,
	case End_time =:= undefined of
		true ->
				End_timeFinal = 0;
		false ->
			End_timeFinal = End_time
	end,

	<<TypeFinal:32/signed,IntervalFinal:32/signed,Start_timeFinal:32/signed,End_timeFinal:32/signed>>;
encode_p_collect_refresh(_) -> 
	<<>>.

decode_p_collect_refresh(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Type:32/signed,Interval:32/signed,Start_time:32/signed,End_time:32/signed>> = Bin0,

	{p_collect_refresh, Type,Interval,Start_time,End_time};

decode_p_collect_refresh(_) ->
	undefined.
encode_p_collect_base_info(Record) when is_record(Record, p_collect_base_info) ->
	#p_collect_base_info{id=Id,name=Name,degree=Degree,demand=Demand,times=Times,goodslist=Goodslist,tool_typeid=Tool_typeid} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, p_collect_base_info, id});
		false ->
			IdFinal = Id
	end,
	case Name =:= undefined of
		true ->
				NameFinal = undefined,
				exit({required_field_not_assigned, p_collect_base_info, name});
		false ->
			NameFinal = Name
	end,
	case Degree =:= undefined of
		true ->
				DegreeFinal = undefined,
				exit({required_field_not_assigned, p_collect_base_info, degree});
		false ->
			DegreeFinal = Degree
	end,
	case Demand =:= undefined of
		true ->
				DemandFinal = undefined,
				exit({required_field_not_assigned, p_collect_base_info, demand});
		false ->
			DemandFinal = Demand
	end,
	case Times =:= undefined of
		true ->
				TimesFinal = undefined,
				exit({required_field_not_assigned, p_collect_base_info, times});
		false ->
			TimesFinal = Times
	end,
	case Goodslist =:= undefined of
		true ->
			GoodslistFinal = [];
		false ->
			GoodslistFinal = Goodslist
	end,
	case Tool_typeid =:= undefined of
		true ->
				Tool_typeidFinal = undefined,
				exit({required_field_not_assigned, p_collect_base_info, tool_typeid});
		false ->
			Tool_typeidFinal = Tool_typeid
	end,
	Demand_bin = encode_p_collect_demand(DemandFinal),
	BinLen_demand = erlang:byte_size(Demand_bin),
	Goodslist_bin = encode_p_collect_goodss(GoodslistFinal, <<>>),
	SizeGoodslistFinal = erlang:length(GoodslistFinal),
	BinLen_goodslist = erlang:byte_size(Goodslist_bin),

	<<IdFinal:32/signed,NameFinal:32/signed,DegreeFinal:32/signed,BinLen_demand:32, Demand_bin/binary,TimesFinal:32/signed,SizeGoodslistFinal:16, BinLen_goodslist:32, Goodslist_bin/binary,Tool_typeidFinal:32/signed>>;
encode_p_collect_base_info(_) -> 
	<<>>.

decode_p_collect_base_info(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed,Name:32/signed,Degree:32/signed,SubBinSizedemand:32, Bin1/binary>> = Bin0,
	<<SubBindemand:SubBinSizedemand/binary, Bin2/binary>> = Bin1,
	Demand = decode_p_collect_demand(SubBindemand),
	<<Times:32/signed,_Sizegoodslist:16, BinLengoodslist:32, Bin3/binary>> = Bin2,
	<<SubBingoodslist:BinLengoodslist/binary, Bin4/binary>> = Bin3, 
	Goodslist = lists:reverse(decode_p_collect_goodss(SubBingoodslist, [])),
	<<Tool_typeid:32/signed>> = Bin4,

	{p_collect_base_info, Id,Name,Degree,Demand,Times,Goodslist,Tool_typeid};

decode_p_collect_base_info(_) ->
	undefined.
encode_p_collect_demand(Record) when is_record(Record, p_collect_demand) ->
	#p_collect_demand{min_level=Min_level,max_level=Max_level} = Record,
	case Min_level =:= undefined of
		true ->
				Min_levelFinal = undefined,
				exit({required_field_not_assigned, p_collect_demand, min_level});
		false ->
			Min_levelFinal = Min_level
	end,
	case Max_level =:= undefined of
		true ->
				Max_levelFinal = undefined,
				exit({required_field_not_assigned, p_collect_demand, max_level});
		false ->
			Max_levelFinal = Max_level
	end,

	<<Min_levelFinal:32/signed,Max_levelFinal:32/signed>>;
encode_p_collect_demand(_) -> 
	<<>>.

decode_p_collect_demand(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Min_level:32/signed,Max_level:32/signed>> = Bin0,

	{p_collect_demand, Min_level,Max_level};

decode_p_collect_demand(_) ->
	undefined.
encode_p_collect_goods(Record) when is_record(Record, p_collect_goods) ->
	#p_collect_goods{goods_type=Goods_type,goods_typeid=Goods_typeid,goods_start_time=Goods_start_time,goods_end_time=Goods_end_time,goods_num=Goods_num,goods_bind=Goods_bind,rate=Rate,is_broadcast=Is_broadcast} = Record,
	case Goods_type =:= undefined of
		true ->
				Goods_typeFinal = undefined,
				exit({required_field_not_assigned, p_collect_goods, goods_type});
		false ->
			Goods_typeFinal = Goods_type
	end,
	case Goods_typeid =:= undefined of
		true ->
				Goods_typeidFinal = undefined,
				exit({required_field_not_assigned, p_collect_goods, goods_typeid});
		false ->
			Goods_typeidFinal = Goods_typeid
	end,
	case Goods_start_time =:= undefined of
		true ->
				Goods_start_timeFinal = undefined,
				exit({required_field_not_assigned, p_collect_goods, goods_start_time});
		false ->
			Goods_start_timeFinal = Goods_start_time
	end,
	case Goods_end_time =:= undefined of
		true ->
				Goods_end_timeFinal = undefined,
				exit({required_field_not_assigned, p_collect_goods, goods_end_time});
		false ->
			Goods_end_timeFinal = Goods_end_time
	end,
	case Goods_num =:= undefined of
		true ->
				Goods_numFinal = undefined,
				exit({required_field_not_assigned, p_collect_goods, goods_num});
		false ->
			Goods_numFinal = Goods_num
	end,
	case Goods_bind =:= undefined of
		true ->
				Goods_bindFinal = undefined,
				exit({required_field_not_assigned, p_collect_goods, goods_bind});
		false ->
		case Goods_bind of
			true ->
				Goods_bindFinal = 1;
			false ->
				Goods_bindFinal = 0
		end
	end,
	case Rate =:= undefined of
		true ->
				RateFinal = undefined,
				exit({required_field_not_assigned, p_collect_goods, rate});
		false ->
			RateFinal = Rate
	end,
	case Is_broadcast =:= undefined of
		true ->
				Is_broadcastFinal = undefined,
				exit({required_field_not_assigned, p_collect_goods, is_broadcast});
		false ->
			Is_broadcastFinal = Is_broadcast
	end,

	<<Goods_typeFinal:32/signed,Goods_typeidFinal:32/signed,Goods_start_timeFinal:32/signed,Goods_end_timeFinal:32/signed,Goods_numFinal:32/signed,Goods_bindFinal:8,RateFinal:32/signed,Is_broadcastFinal:32/signed>>;
encode_p_collect_goods(_) -> 
	<<>>.

decode_p_collect_goods(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Goods_type:32/signed,Goods_typeid:32/signed,Goods_start_time:32/signed,Goods_end_time:32/signed,Goods_num:32/signed,Goods_bindTmp:8,Rate:32/signed,Is_broadcast:32/signed>> = Bin0,
case Goods_bindTmp of 
	1 -> 
		Goods_bind = true;
	_ ->
		Goods_bind = false
end,

	{p_collect_goods, Goods_type,Goods_typeid,Goods_start_time,Goods_end_time,Goods_num,Goods_bind,Rate,Is_broadcast};

decode_p_collect_goods(_) ->
	undefined.
encode_p_map_trap(Record) when is_record(Record, p_map_trap) ->
	#p_map_trap{trap_id=Trap_id,owner_id=Owner_id,owner_name=Owner_name,owner_type=Owner_type,faction_id=Faction_id,family_id=Family_id,team_id=Team_id,pk_mode=Pk_mode,target_area=Target_area,effects=Effects,buffs=Buffs,skill_id=Skill_id,pos=Pos,remove_time=Remove_time,trap_type=Trap_type} = Record,
	case Trap_id =:= undefined of
		true ->
				Trap_idFinal = undefined,
				exit({required_field_not_assigned, p_map_trap, trap_id});
		false ->
			Trap_idFinal = Trap_id
	end,
	case Owner_id =:= undefined of
		true ->
				Owner_idFinal = undefined,
				exit({required_field_not_assigned, p_map_trap, owner_id});
		false ->
			Owner_idFinal = Owner_id
	end,
	case Owner_name =:= undefined of
		true ->
				Owner_nameFinal = undefined,
				exit({required_field_not_assigned, p_map_trap, owner_name});
		false ->
			Owner_nameFinal = Owner_name
	end,
	case Owner_type =:= undefined of
		true ->
				Owner_typeFinal = undefined,
				exit({required_field_not_assigned, p_map_trap, owner_type});
		false ->
			Owner_typeFinal = Owner_type
	end,
	case Faction_id =:= undefined of
		true ->
				Faction_idFinal = 0;
		false ->
			Faction_idFinal = Faction_id
	end,
	case Family_id =:= undefined of
		true ->
				Family_idFinal = 0;
		false ->
			Family_idFinal = Family_id
	end,
	case Team_id =:= undefined of
		true ->
				Team_idFinal = 0;
		false ->
			Team_idFinal = Team_id
	end,
	case Pk_mode =:= undefined of
		true ->
				Pk_modeFinal = 0;
		false ->
			Pk_modeFinal = Pk_mode
	end,
	case Target_area =:= undefined of
		true ->
				Target_areaFinal = undefined,
				exit({required_field_not_assigned, p_map_trap, target_area});
		false ->
			Target_areaFinal = Target_area
	end,
	case Effects =:= undefined of
		true ->
			EffectsFinal = [];
		false ->
			EffectsFinal = Effects
	end,
	case Buffs =:= undefined of
		true ->
			BuffsFinal = [];
		false ->
			BuffsFinal = Buffs
	end,
	case Skill_id =:= undefined of
		true ->
				Skill_idFinal = 0;
		false ->
			Skill_idFinal = Skill_id
	end,
	case Pos =:= undefined of
		true ->
				PosFinal = undefined,
				exit({required_field_not_assigned, p_map_trap, pos});
		false ->
			PosFinal = Pos
	end,
	case Remove_time =:= undefined of
		true ->
				Remove_timeFinal = undefined,
				exit({required_field_not_assigned, p_map_trap, remove_time});
		false ->
			Remove_timeFinal = Remove_time
	end,
	case Trap_type =:= undefined of
		true ->
				Trap_typeFinal = undefined,
				exit({required_field_not_assigned, p_map_trap, trap_type});
		false ->
			Trap_typeFinal = Trap_type
	end,
	Owner_name2 = common_tool:to_binary(Owner_nameFinal),
	Owner_nameLen = erlang:byte_size(Owner_name2),
	Effects_bin = encode_int32s(EffectsFinal, <<>>),
	SizeEffectsFinal = erlang:length(EffectsFinal),
	BinLen_effects = erlang:byte_size(Effects_bin),
	Buffs_bin = encode_int32s(BuffsFinal, <<>>),
	SizeBuffsFinal = erlang:length(BuffsFinal),
	BinLen_buffs = erlang:byte_size(Buffs_bin),
	Pos_bin = encode_p_pos(PosFinal),
	BinLen_pos = erlang:byte_size(Pos_bin),

	<<Trap_idFinal:32/signed,Owner_idFinal:32/signed,Owner_nameLen:16, Owner_name2/binary,Owner_typeFinal:32/signed,Faction_idFinal:32/signed,Family_idFinal:32/signed,Team_idFinal:32/signed,Pk_modeFinal:32/signed,Target_areaFinal:32/signed,SizeEffectsFinal:16, BinLen_effects:32, Effects_bin/binary,SizeBuffsFinal:16, BinLen_buffs:32, Buffs_bin/binary,Skill_idFinal:32/signed,BinLen_pos:32, Pos_bin/binary,Remove_timeFinal:32/signed,Trap_typeFinal:32/signed>>;
encode_p_map_trap(_) -> 
	<<>>.

decode_p_map_trap(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Trap_id:32/signed,Owner_id:32/signed,Owner_nameLen:16, Bin1/binary>> = Bin0,
	<<Owner_name:Owner_nameLen/binary,Owner_type:32/signed,Faction_id:32/signed,Family_id:32/signed,Team_id:32/signed,Pk_mode:32/signed,Target_area:32/signed,_Sizeeffects:16, BinLeneffects:32, Bin2/binary>> = Bin1,
	<<SubBineffects:BinLeneffects/binary, Bin3/binary>> = Bin2, 
	Effects = lists:reverse(decode_int32s(SubBineffects, [])),
	<<_Sizebuffs:16, BinLenbuffs:32, Bin4/binary>> = Bin3,
	<<SubBinbuffs:BinLenbuffs/binary, Bin5/binary>> = Bin4, 
	Buffs = lists:reverse(decode_int32s(SubBinbuffs, [])),
	<<Skill_id:32/signed,SubBinSizepos:32, Bin6/binary>> = Bin5,
	<<SubBinpos:SubBinSizepos/binary, Bin7/binary>> = Bin6,
	Pos = decode_p_pos(SubBinpos),
	<<Remove_time:32/signed,Trap_type:32/signed>> = Bin7,

	{p_map_trap, Trap_id,Owner_id,common_tool:to_list(Owner_name),Owner_type,Faction_id,Family_id,Team_id,Pk_mode,Target_area,Effects,Buffs,Skill_id,Pos,Remove_time,Trap_type};

decode_p_map_trap(_) ->
	undefined.
encode_p_ybc_buff(Record) when is_record(Record, p_ybc_buff) ->
	#p_ybc_buff{type=Type,begin_time=Begin_time,end_time=End_time} = Record,
	case Type =:= undefined of
		true ->
				TypeFinal = undefined,
				exit({required_field_not_assigned, p_ybc_buff, type});
		false ->
			TypeFinal = Type
	end,
	case Begin_time =:= undefined of
		true ->
				Begin_timeFinal = undefined,
				exit({required_field_not_assigned, p_ybc_buff, begin_time});
		false ->
			Begin_timeFinal = Begin_time
	end,
	case End_time =:= undefined of
		true ->
				End_timeFinal = undefined,
				exit({required_field_not_assigned, p_ybc_buff, end_time});
		false ->
			End_timeFinal = End_time
	end,

	<<TypeFinal:32/signed,Begin_timeFinal:32/signed,End_timeFinal:32/signed>>;
encode_p_ybc_buff(_) -> 
	<<>>.

decode_p_ybc_buff(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Type:32/signed,Begin_time:32/signed,End_time:32/signed>> = Bin0,

	{p_ybc_buff, Type,Begin_time,End_time};

decode_p_ybc_buff(_) ->
	undefined.
encode_p_ybc_info(Record) when is_record(Record, p_ybc_info) ->
	#p_ybc_info{} = Record,

	<<>>;
encode_p_ybc_info(_) -> 
	<<>>.

decode_p_ybc_info(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{p_ybc_info};

decode_p_ybc_info(_) ->
	undefined.
encode_p_map_ybc(Record) when is_record(Record, p_map_ybc) ->
	#p_map_ybc{ybc_id=Ybc_id,status=Status,hp=Hp,max_hp=Max_hp,pos=Pos,move_speed=Move_speed,name=Name,create_type=Create_type,creator_id=Creator_id,color=Color,create_time=Create_time,end_time=End_time,buffs=Buffs,group_id=Group_id,group_type=Group_type,can_attack=Can_attack,faction_id=Faction_id,physical_defence=Physical_defence,magic_defence=Magic_defence,recover_speed=Recover_speed,level=Level} = Record,
	case Ybc_id =:= undefined of
		true ->
				Ybc_idFinal = undefined,
				exit({required_field_not_assigned, p_map_ybc, ybc_id});
		false ->
			Ybc_idFinal = Ybc_id
	end,
	case Status =:= undefined of
		true ->
				StatusFinal = undefined,
				exit({required_field_not_assigned, p_map_ybc, status});
		false ->
			StatusFinal = Status
	end,
	case Hp =:= undefined of
		true ->
				HpFinal = undefined,
				exit({required_field_not_assigned, p_map_ybc, hp});
		false ->
			HpFinal = Hp
	end,
	case Max_hp =:= undefined of
		true ->
				Max_hpFinal = undefined,
				exit({required_field_not_assigned, p_map_ybc, max_hp});
		false ->
			Max_hpFinal = Max_hp
	end,
	case Pos =:= undefined of
		true ->
				PosFinal = undefined,
				exit({required_field_not_assigned, p_map_ybc, pos});
		false ->
			PosFinal = Pos
	end,
	case Move_speed =:= undefined of
		true ->
				Move_speedFinal = undefined,
				exit({required_field_not_assigned, p_map_ybc, move_speed});
		false ->
			Move_speedFinal = Move_speed
	end,
	case Name =:= undefined of
		true ->
				NameFinal = undefined,
				exit({required_field_not_assigned, p_map_ybc, name});
		false ->
			NameFinal = Name
	end,
	case Create_type =:= undefined of
		true ->
				Create_typeFinal = undefined,
				exit({required_field_not_assigned, p_map_ybc, create_type});
		false ->
			Create_typeFinal = Create_type
	end,
	case Creator_id =:= undefined of
		true ->
				Creator_idFinal = undefined,
				exit({required_field_not_assigned, p_map_ybc, creator_id});
		false ->
			Creator_idFinal = Creator_id
	end,
	case Color =:= undefined of
		true ->
				ColorFinal = undefined,
				exit({required_field_not_assigned, p_map_ybc, color});
		false ->
			ColorFinal = Color
	end,
	case Create_time =:= undefined of
		true ->
				Create_timeFinal = undefined,
				exit({required_field_not_assigned, p_map_ybc, create_time});
		false ->
			Create_timeFinal = Create_time
	end,
	case End_time =:= undefined of
		true ->
				End_timeFinal = undefined,
				exit({required_field_not_assigned, p_map_ybc, end_time});
		false ->
			End_timeFinal = End_time
	end,
	case Buffs =:= undefined of
		true ->
			BuffsFinal = [];
		false ->
			BuffsFinal = Buffs
	end,
	case Group_id =:= undefined of
		true ->
				Group_idFinal = undefined,
				exit({required_field_not_assigned, p_map_ybc, group_id});
		false ->
			Group_idFinal = Group_id
	end,
	case Group_type =:= undefined of
		true ->
				Group_typeFinal = undefined,
				exit({required_field_not_assigned, p_map_ybc, group_type});
		false ->
			Group_typeFinal = Group_type
	end,
	case Can_attack =:= undefined of
		true ->
				Can_attackFinal = undefined,
				exit({required_field_not_assigned, p_map_ybc, can_attack});
		false ->
		case Can_attack of
			true ->
				Can_attackFinal = 1;
			false ->
				Can_attackFinal = 0
		end
	end,
	case Faction_id =:= undefined of
		true ->
				Faction_idFinal = undefined,
				exit({required_field_not_assigned, p_map_ybc, faction_id});
		false ->
			Faction_idFinal = Faction_id
	end,
	case Physical_defence =:= undefined of
		true ->
				Physical_defenceFinal = undefined,
				exit({required_field_not_assigned, p_map_ybc, physical_defence});
		false ->
			Physical_defenceFinal = Physical_defence
	end,
	case Magic_defence =:= undefined of
		true ->
				Magic_defenceFinal = undefined,
				exit({required_field_not_assigned, p_map_ybc, magic_defence});
		false ->
			Magic_defenceFinal = Magic_defence
	end,
	case Recover_speed =:= undefined of
		true ->
				Recover_speedFinal = undefined,
				exit({required_field_not_assigned, p_map_ybc, recover_speed});
		false ->
			Recover_speedFinal = Recover_speed
	end,
	case Level =:= undefined of
		true ->
				LevelFinal = undefined,
				exit({required_field_not_assigned, p_map_ybc, level});
		false ->
			LevelFinal = Level
	end,
	Pos_bin = encode_p_pos(PosFinal),
	BinLen_pos = erlang:byte_size(Pos_bin),
	Name2 = common_tool:to_binary(NameFinal),
	NameLen = erlang:byte_size(Name2),
	Buffs_bin = encode_p_actor_bufs(BuffsFinal, <<>>),
	SizeBuffsFinal = erlang:length(BuffsFinal),
	BinLen_buffs = erlang:byte_size(Buffs_bin),

	<<Ybc_idFinal:32/signed,StatusFinal:32/signed,HpFinal:32/signed,Max_hpFinal:32/signed,BinLen_pos:32, Pos_bin/binary,Move_speedFinal:32/signed,NameLen:16, Name2/binary,Create_typeFinal:32/signed,Creator_idFinal:32/signed,ColorFinal:32/signed,Create_timeFinal:32/signed,End_timeFinal:32/signed,SizeBuffsFinal:16, BinLen_buffs:32, Buffs_bin/binary,Group_idFinal:32/signed,Group_typeFinal:32/signed,Can_attackFinal:8,Faction_idFinal:32/signed,Physical_defenceFinal:32/signed,Magic_defenceFinal:32/signed,Recover_speedFinal:32/signed,LevelFinal:32/signed>>;
encode_p_map_ybc(_) -> 
	<<>>.

decode_p_map_ybc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Ybc_id:32/signed,Status:32/signed,Hp:32/signed,Max_hp:32/signed,SubBinSizepos:32, Bin1/binary>> = Bin0,
	<<SubBinpos:SubBinSizepos/binary, Bin2/binary>> = Bin1,
	Pos = decode_p_pos(SubBinpos),
	<<Move_speed:32/signed,NameLen:16, Bin3/binary>> = Bin2,
	<<Name:NameLen/binary,Create_type:32/signed,Creator_id:32/signed,Color:32/signed,Create_time:32/signed,End_time:32/signed,_Sizebuffs:16, BinLenbuffs:32, Bin4/binary>> = Bin3,
	<<SubBinbuffs:BinLenbuffs/binary, Bin5/binary>> = Bin4, 
	Buffs = lists:reverse(decode_p_actor_bufs(SubBinbuffs, [])),
	<<Group_id:32/signed,Group_type:32/signed,Can_attackTmp:8,Faction_id:32/signed,Physical_defence:32/signed,Magic_defence:32/signed,Recover_speed:32/signed,Level:32/signed>> = Bin5,
case Can_attackTmp of 
	1 -> 
		Can_attack = true;
	_ ->
		Can_attack = false
end,

	{p_map_ybc, Ybc_id,Status,Hp,Max_hp,Pos,Move_speed,common_tool:to_list(Name),Create_type,Creator_id,Color,Create_time,End_time,Buffs,Group_id,Group_type,Can_attack,Faction_id,Physical_defence,Magic_defence,Recover_speed,Level};

decode_p_map_ybc(_) ->
	undefined.
encode_p_server_npc(Record) when is_record(Record, p_server_npc) ->
	#p_server_npc{npc_id=Npc_id,type_id=Type_id,npc_name=Npc_name,npc_type=Npc_type,state=State,map_id=Map_id,level=Level,hp=Hp,mp=Mp,reborn_pos=Reborn_pos,first_enemies=First_enemies,second_enemies=Second_enemies,third_enemies=Third_enemies,max_mp=Max_mp,max_hp=Max_hp,buffs=Buffs,npc_country=Npc_country,is_undead=Is_undead,phy_defence=Phy_defence,magic_defence=Magic_defence,blood_resume_speed=Blood_resume_speed,magic_resume_speed=Magic_resume_speed,dead_attack=Dead_attack,lucky=Lucky,move_speed=Move_speed,attack_speed=Attack_speed,miss=Miss,no_defence=No_defence,min_attack=Min_attack,max_attack=Max_attack,phy_anti=Phy_anti,magic_anti=Magic_anti,poisoning_resist=Poisoning_resist,dizzy_resist=Dizzy_resist,freeze_resist=Freeze_resist,equip_score=Equip_score,spec_score_one=Spec_score_one,spec_score_two=Spec_score_two,hit_rate=Hit_rate} = Record,
	case Npc_id =:= undefined of
		true ->
				Npc_idFinal = undefined,
				exit({required_field_not_assigned, p_server_npc, npc_id});
		false ->
			Npc_idFinal = Npc_id
	end,
	case Type_id =:= undefined of
		true ->
				Type_idFinal = undefined,
				exit({required_field_not_assigned, p_server_npc, type_id});
		false ->
			Type_idFinal = Type_id
	end,
	case Npc_name =:= undefined of
		true ->
				Npc_nameFinal = undefined,
				exit({required_field_not_assigned, p_server_npc, npc_name});
		false ->
			Npc_nameFinal = Npc_name
	end,
	case Npc_type =:= undefined of
		true ->
				Npc_typeFinal = undefined,
				exit({required_field_not_assigned, p_server_npc, npc_type});
		false ->
			Npc_typeFinal = Npc_type
	end,
	case State =:= undefined of
		true ->
				StateFinal = 0;
		false ->
			StateFinal = State
	end,
	case Map_id =:= undefined of
		true ->
				Map_idFinal = undefined,
				exit({required_field_not_assigned, p_server_npc, map_id});
		false ->
			Map_idFinal = Map_id
	end,
	case Level =:= undefined of
		true ->
				LevelFinal = undefined,
				exit({required_field_not_assigned, p_server_npc, level});
		false ->
			LevelFinal = Level
	end,
	case Hp =:= undefined of
		true ->
				HpFinal = undefined,
				exit({required_field_not_assigned, p_server_npc, hp});
		false ->
			HpFinal = Hp
	end,
	case Mp =:= undefined of
		true ->
				MpFinal = undefined,
				exit({required_field_not_assigned, p_server_npc, mp});
		false ->
			MpFinal = Mp
	end,
	case Reborn_pos =:= undefined of
		true ->
				Reborn_posFinal = undefined,
				exit({required_field_not_assigned, p_server_npc, reborn_pos});
		false ->
			Reborn_posFinal = Reborn_pos
	end,
	case First_enemies =:= undefined of
		true ->
			First_enemiesFinal = [];
		false ->
			First_enemiesFinal = First_enemies
	end,
	case Second_enemies =:= undefined of
		true ->
			Second_enemiesFinal = [];
		false ->
			Second_enemiesFinal = Second_enemies
	end,
	case Third_enemies =:= undefined of
		true ->
			Third_enemiesFinal = [];
		false ->
			Third_enemiesFinal = Third_enemies
	end,
	case Max_mp =:= undefined of
		true ->
				Max_mpFinal = undefined,
				exit({required_field_not_assigned, p_server_npc, max_mp});
		false ->
			Max_mpFinal = Max_mp
	end,
	case Max_hp =:= undefined of
		true ->
				Max_hpFinal = undefined,
				exit({required_field_not_assigned, p_server_npc, max_hp});
		false ->
			Max_hpFinal = Max_hp
	end,
	case Buffs =:= undefined of
		true ->
			BuffsFinal = [];
		false ->
			BuffsFinal = Buffs
	end,
	case Npc_country =:= undefined of
		true ->
				Npc_countryFinal = undefined,
				exit({required_field_not_assigned, p_server_npc, npc_country});
		false ->
			Npc_countryFinal = Npc_country
	end,
	case Is_undead =:= undefined of
		true ->
				Is_undeadFinal = undefined,
				exit({required_field_not_assigned, p_server_npc, is_undead});
		false ->
		case Is_undead of
			true ->
				Is_undeadFinal = 1;
			false ->
				Is_undeadFinal = 0
		end
	end,
	case Phy_defence =:= undefined of
		true ->
				Phy_defenceFinal = undefined,
				exit({required_field_not_assigned, p_server_npc, phy_defence});
		false ->
			Phy_defenceFinal = Phy_defence
	end,
	case Magic_defence =:= undefined of
		true ->
				Magic_defenceFinal = undefined,
				exit({required_field_not_assigned, p_server_npc, magic_defence});
		false ->
			Magic_defenceFinal = Magic_defence
	end,
	case Blood_resume_speed =:= undefined of
		true ->
				Blood_resume_speedFinal = undefined,
				exit({required_field_not_assigned, p_server_npc, blood_resume_speed});
		false ->
			Blood_resume_speedFinal = Blood_resume_speed
	end,
	case Magic_resume_speed =:= undefined of
		true ->
				Magic_resume_speedFinal = undefined,
				exit({required_field_not_assigned, p_server_npc, magic_resume_speed});
		false ->
			Magic_resume_speedFinal = Magic_resume_speed
	end,
	case Dead_attack =:= undefined of
		true ->
				Dead_attackFinal = undefined,
				exit({required_field_not_assigned, p_server_npc, dead_attack});
		false ->
			Dead_attackFinal = Dead_attack
	end,
	case Lucky =:= undefined of
		true ->
				LuckyFinal = undefined,
				exit({required_field_not_assigned, p_server_npc, lucky});
		false ->
			LuckyFinal = Lucky
	end,
	case Move_speed =:= undefined of
		true ->
				Move_speedFinal = undefined,
				exit({required_field_not_assigned, p_server_npc, move_speed});
		false ->
			Move_speedFinal = Move_speed
	end,
	case Attack_speed =:= undefined of
		true ->
				Attack_speedFinal = undefined,
				exit({required_field_not_assigned, p_server_npc, attack_speed});
		false ->
			Attack_speedFinal = Attack_speed
	end,
	case Miss =:= undefined of
		true ->
				MissFinal = undefined,
				exit({required_field_not_assigned, p_server_npc, miss});
		false ->
			MissFinal = Miss
	end,
	case No_defence =:= undefined of
		true ->
				No_defenceFinal = undefined,
				exit({required_field_not_assigned, p_server_npc, no_defence});
		false ->
			No_defenceFinal = No_defence
	end,
	case Min_attack =:= undefined of
		true ->
				Min_attackFinal = undefined,
				exit({required_field_not_assigned, p_server_npc, min_attack});
		false ->
			Min_attackFinal = Min_attack
	end,
	case Max_attack =:= undefined of
		true ->
				Max_attackFinal = undefined,
				exit({required_field_not_assigned, p_server_npc, max_attack});
		false ->
			Max_attackFinal = Max_attack
	end,
	case Phy_anti =:= undefined of
		true ->
				Phy_antiFinal = undefined,
				exit({required_field_not_assigned, p_server_npc, phy_anti});
		false ->
			Phy_antiFinal = Phy_anti
	end,
	case Magic_anti =:= undefined of
		true ->
				Magic_antiFinal = undefined,
				exit({required_field_not_assigned, p_server_npc, magic_anti});
		false ->
			Magic_antiFinal = Magic_anti
	end,
	case Poisoning_resist =:= undefined of
		true ->
				Poisoning_resistFinal = 0;
		false ->
			Poisoning_resistFinal = Poisoning_resist
	end,
	case Dizzy_resist =:= undefined of
		true ->
				Dizzy_resistFinal = 0;
		false ->
			Dizzy_resistFinal = Dizzy_resist
	end,
	case Freeze_resist =:= undefined of
		true ->
				Freeze_resistFinal = 0;
		false ->
			Freeze_resistFinal = Freeze_resist
	end,
	case Equip_score =:= undefined of
		true ->
				Equip_scoreFinal = 0;
		false ->
			Equip_scoreFinal = Equip_score
	end,
	case Spec_score_one =:= undefined of
		true ->
				Spec_score_oneFinal = 0;
		false ->
			Spec_score_oneFinal = Spec_score_one
	end,
	case Spec_score_two =:= undefined of
		true ->
				Spec_score_twoFinal = 0;
		false ->
			Spec_score_twoFinal = Spec_score_two
	end,
	case Hit_rate =:= undefined of
		true ->
				Hit_rateFinal = 10000;
		false ->
			Hit_rateFinal = Hit_rate
	end,
	Npc_name2 = common_tool:to_binary(Npc_nameFinal),
	Npc_nameLen = erlang:byte_size(Npc_name2),
	Reborn_pos_bin = encode_p_pos(Reborn_posFinal),
	BinLen_reborn_pos = erlang:byte_size(Reborn_pos_bin),
	First_enemies_bin = encode_p_enemys(First_enemiesFinal, <<>>),
	SizeFirst_enemiesFinal = erlang:length(First_enemiesFinal),
	BinLen_first_enemies = erlang:byte_size(First_enemies_bin),
	Second_enemies_bin = encode_p_enemys(Second_enemiesFinal, <<>>),
	SizeSecond_enemiesFinal = erlang:length(Second_enemiesFinal),
	BinLen_second_enemies = erlang:byte_size(Second_enemies_bin),
	Third_enemies_bin = encode_p_enemys(Third_enemiesFinal, <<>>),
	SizeThird_enemiesFinal = erlang:length(Third_enemiesFinal),
	BinLen_third_enemies = erlang:byte_size(Third_enemies_bin),
	Buffs_bin = encode_p_actor_bufs(BuffsFinal, <<>>),
	SizeBuffsFinal = erlang:length(BuffsFinal),
	BinLen_buffs = erlang:byte_size(Buffs_bin),

	<<Npc_idFinal:32/signed,Type_idFinal:32/signed,Npc_nameLen:16, Npc_name2/binary,Npc_typeFinal:32/signed,StateFinal:32/signed,Map_idFinal:32/signed,LevelFinal:32/signed,HpFinal:32/signed,MpFinal:32/signed,BinLen_reborn_pos:32, Reborn_pos_bin/binary,SizeFirst_enemiesFinal:16, BinLen_first_enemies:32, First_enemies_bin/binary,SizeSecond_enemiesFinal:16, BinLen_second_enemies:32, Second_enemies_bin/binary,SizeThird_enemiesFinal:16, BinLen_third_enemies:32, Third_enemies_bin/binary,Max_mpFinal:32/signed,Max_hpFinal:32/signed,SizeBuffsFinal:16, BinLen_buffs:32, Buffs_bin/binary,Npc_countryFinal:32/signed,Is_undeadFinal:8,Phy_defenceFinal:32/signed,Magic_defenceFinal:32/signed,Blood_resume_speedFinal:32/signed,Magic_resume_speedFinal:32/signed,Dead_attackFinal:32/signed,LuckyFinal:32/signed,Move_speedFinal:32/signed,Attack_speedFinal:32/signed,MissFinal:32/signed,No_defenceFinal:32/signed,Min_attackFinal:32/signed,Max_attackFinal:32/signed,Phy_antiFinal:32/signed,Magic_antiFinal:32/signed,Poisoning_resistFinal:32/signed,Dizzy_resistFinal:32/signed,Freeze_resistFinal:32/signed,Equip_scoreFinal:32/signed,Spec_score_oneFinal:32/signed,Spec_score_twoFinal:32/signed,Hit_rateFinal:32/signed>>;
encode_p_server_npc(_) -> 
	<<>>.

decode_p_server_npc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Npc_id:32/signed,Type_id:32/signed,Npc_nameLen:16, Bin1/binary>> = Bin0,
	<<Npc_name:Npc_nameLen/binary,Npc_type:32/signed,State:32/signed,Map_id:32/signed,Level:32/signed,Hp:32/signed,Mp:32/signed,SubBinSizereborn_pos:32, Bin2/binary>> = Bin1,
	<<SubBinreborn_pos:SubBinSizereborn_pos/binary, Bin3/binary>> = Bin2,
	Reborn_pos = decode_p_pos(SubBinreborn_pos),
	<<_Sizefirst_enemies:16, BinLenfirst_enemies:32, Bin4/binary>> = Bin3,
	<<SubBinfirst_enemies:BinLenfirst_enemies/binary, Bin5/binary>> = Bin4, 
	First_enemies = lists:reverse(decode_p_enemys(SubBinfirst_enemies, [])),
	<<_Sizesecond_enemies:16, BinLensecond_enemies:32, Bin6/binary>> = Bin5,
	<<SubBinsecond_enemies:BinLensecond_enemies/binary, Bin7/binary>> = Bin6, 
	Second_enemies = lists:reverse(decode_p_enemys(SubBinsecond_enemies, [])),
	<<_Sizethird_enemies:16, BinLenthird_enemies:32, Bin8/binary>> = Bin7,
	<<SubBinthird_enemies:BinLenthird_enemies/binary, Bin9/binary>> = Bin8, 
	Third_enemies = lists:reverse(decode_p_enemys(SubBinthird_enemies, [])),
	<<Max_mp:32/signed,Max_hp:32/signed,_Sizebuffs:16, BinLenbuffs:32, Bin10/binary>> = Bin9,
	<<SubBinbuffs:BinLenbuffs/binary, Bin11/binary>> = Bin10, 
	Buffs = lists:reverse(decode_p_actor_bufs(SubBinbuffs, [])),
	<<Npc_country:32/signed,Is_undeadTmp:8,Phy_defence:32/signed,Magic_defence:32/signed,Blood_resume_speed:32/signed,Magic_resume_speed:32/signed,Dead_attack:32/signed,Lucky:32/signed,Move_speed:32/signed,Attack_speed:32/signed,Miss:32/signed,No_defence:32/signed,Min_attack:32/signed,Max_attack:32/signed,Phy_anti:32/signed,Magic_anti:32/signed,Poisoning_resist:32/signed,Dizzy_resist:32/signed,Freeze_resist:32/signed,Equip_score:32/signed,Spec_score_one:32/signed,Spec_score_two:32/signed,Hit_rate:32/signed>> = Bin11,
case Is_undeadTmp of 
	1 -> 
		Is_undead = true;
	_ ->
		Is_undead = false
end,

	{p_server_npc, Npc_id,Type_id,common_tool:to_list(Npc_name),Npc_type,State,Map_id,Level,Hp,Mp,Reborn_pos,First_enemies,Second_enemies,Third_enemies,Max_mp,Max_hp,Buffs,Npc_country,Is_undead,Phy_defence,Magic_defence,Blood_resume_speed,Magic_resume_speed,Dead_attack,Lucky,Move_speed,Attack_speed,Miss,No_defence,Min_attack,Max_attack,Phy_anti,Magic_anti,Poisoning_resist,Dizzy_resist,Freeze_resist,Equip_score,Spec_score_one,Spec_score_two,Hit_rate};

decode_p_server_npc(_) ->
	undefined.
encode_p_map_server_npc(Record) when is_record(Record, p_map_server_npc) ->
	#p_map_server_npc{npc_id=Npc_id,type_id=Type_id,npc_name=Npc_name,npc_type=Npc_type,state=State,max_mp=Max_mp,max_hp=Max_hp,hp=Hp,mp=Mp,map_id=Map_id,pos=Pos,move_speed=Move_speed,last_walk_path=Last_walk_path,state_buffs=State_buffs,is_undead=Is_undead,npc_country=Npc_country} = Record,
	case Npc_id =:= undefined of
		true ->
				Npc_idFinal = undefined,
				exit({required_field_not_assigned, p_map_server_npc, npc_id});
		false ->
			Npc_idFinal = Npc_id
	end,
	case Type_id =:= undefined of
		true ->
				Type_idFinal = undefined,
				exit({required_field_not_assigned, p_map_server_npc, type_id});
		false ->
			Type_idFinal = Type_id
	end,
	case Npc_name =:= undefined of
		true ->
				Npc_nameFinal = undefined,
				exit({required_field_not_assigned, p_map_server_npc, npc_name});
		false ->
			Npc_nameFinal = Npc_name
	end,
	case Npc_type =:= undefined of
		true ->
				Npc_typeFinal = undefined,
				exit({required_field_not_assigned, p_map_server_npc, npc_type});
		false ->
			Npc_typeFinal = Npc_type
	end,
	case State =:= undefined of
		true ->
				StateFinal = 0;
		false ->
			StateFinal = State
	end,
	case Max_mp =:= undefined of
		true ->
				Max_mpFinal = undefined,
				exit({required_field_not_assigned, p_map_server_npc, max_mp});
		false ->
			Max_mpFinal = Max_mp
	end,
	case Max_hp =:= undefined of
		true ->
				Max_hpFinal = undefined,
				exit({required_field_not_assigned, p_map_server_npc, max_hp});
		false ->
			Max_hpFinal = Max_hp
	end,
	case Hp =:= undefined of
		true ->
				HpFinal = undefined,
				exit({required_field_not_assigned, p_map_server_npc, hp});
		false ->
			HpFinal = Hp
	end,
	case Mp =:= undefined of
		true ->
				MpFinal = undefined,
				exit({required_field_not_assigned, p_map_server_npc, mp});
		false ->
			MpFinal = Mp
	end,
	case Map_id =:= undefined of
		true ->
				Map_idFinal = undefined,
				exit({required_field_not_assigned, p_map_server_npc, map_id});
		false ->
			Map_idFinal = Map_id
	end,
	case Pos =:= undefined of
		true ->
				PosFinal = undefined,
				exit({required_field_not_assigned, p_map_server_npc, pos});
		false ->
			PosFinal = Pos
	end,
	case Move_speed =:= undefined of
		true ->
				Move_speedFinal = undefined,
				exit({required_field_not_assigned, p_map_server_npc, move_speed});
		false ->
			Move_speedFinal = Move_speed
	end,
	case Last_walk_path =:= undefined of
		true ->
				Last_walk_pathFinal = 0;
		false ->
			Last_walk_pathFinal = Last_walk_path
	end,
	case State_buffs =:= undefined of
		true ->
			State_buffsFinal = [];
		false ->
			State_buffsFinal = State_buffs
	end,
	case Is_undead =:= undefined of
		true ->
				Is_undeadFinal = 1;
		false ->
		case Is_undead of
			true ->
				Is_undeadFinal = 1;
			false ->
				Is_undeadFinal = 0
		end
	end,
	case Npc_country =:= undefined of
		true ->
				Npc_countryFinal = undefined,
				exit({required_field_not_assigned, p_map_server_npc, npc_country});
		false ->
			Npc_countryFinal = Npc_country
	end,
	Npc_name2 = common_tool:to_binary(Npc_nameFinal),
	Npc_nameLen = erlang:byte_size(Npc_name2),
	Pos_bin = encode_p_pos(PosFinal),
	BinLen_pos = erlang:byte_size(Pos_bin),
	Last_walk_path_bin = encode_p_walk_path(Last_walk_pathFinal),
	BinLen_last_walk_path = erlang:byte_size(Last_walk_path_bin),
	State_buffs_bin = encode_p_actor_bufs(State_buffsFinal, <<>>),
	SizeState_buffsFinal = erlang:length(State_buffsFinal),
	BinLen_state_buffs = erlang:byte_size(State_buffs_bin),

	<<Npc_idFinal:32/signed,Type_idFinal:32/signed,Npc_nameLen:16, Npc_name2/binary,Npc_typeFinal:32/signed,StateFinal:32/signed,Max_mpFinal:32/signed,Max_hpFinal:32/signed,HpFinal:32/signed,MpFinal:32/signed,Map_idFinal:32/signed,BinLen_pos:32, Pos_bin/binary,Move_speedFinal:32/signed,BinLen_last_walk_path:32, Last_walk_path_bin/binary,SizeState_buffsFinal:16, BinLen_state_buffs:32, State_buffs_bin/binary,Is_undeadFinal:8,Npc_countryFinal:32/signed>>;
encode_p_map_server_npc(_) -> 
	<<>>.

decode_p_map_server_npc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Npc_id:32/signed,Type_id:32/signed,Npc_nameLen:16, Bin1/binary>> = Bin0,
	<<Npc_name:Npc_nameLen/binary,Npc_type:32/signed,State:32/signed,Max_mp:32/signed,Max_hp:32/signed,Hp:32/signed,Mp:32/signed,Map_id:32/signed,SubBinSizepos:32, Bin2/binary>> = Bin1,
	<<SubBinpos:SubBinSizepos/binary, Bin3/binary>> = Bin2,
	Pos = decode_p_pos(SubBinpos),
	<<Move_speed:32/signed,SubBinSizelast_walk_path:32, Bin4/binary>> = Bin3,
	<<SubBinlast_walk_path:SubBinSizelast_walk_path/binary, Bin5/binary>> = Bin4,
	Last_walk_path = decode_p_walk_path(SubBinlast_walk_path),
	<<_Sizestate_buffs:16, BinLenstate_buffs:32, Bin6/binary>> = Bin5,
	<<SubBinstate_buffs:BinLenstate_buffs/binary, Bin7/binary>> = Bin6, 
	State_buffs = lists:reverse(decode_p_actor_bufs(SubBinstate_buffs, [])),
<<Is_undeadTmp:8,Npc_country:32/signed>> = Bin7,
case Is_undeadTmp of 
	1 -> 
		Is_undead = true;
	_ ->
		Is_undead = false
end,

	{p_map_server_npc, Npc_id,Type_id,common_tool:to_list(Npc_name),Npc_type,State,Max_mp,Max_hp,Hp,Mp,Map_id,Pos,Move_speed,Last_walk_path,State_buffs,Is_undead,Npc_country};

decode_p_map_server_npc(_) ->
	undefined.
encode_p_server_npc_base_info(Record) when is_record(Record, p_server_npc_base_info) ->
	#p_server_npc_base_info{type_id=Type_id,npc_name=Npc_name,npc_country=Npc_country,npc_type=Npc_type,level=Level,max_hp=Max_hp,max_mp=Max_mp,min_attack=Min_attack,max_attack=Max_attack,phy_defence=Phy_defence,magic_defence=Magic_defence,blood_resume_speed=Blood_resume_speed,magic_resume_speed=Magic_resume_speed,dead_attack=Dead_attack,lucky=Lucky,move_speed=Move_speed,attack_speed=Attack_speed,miss=Miss,no_defence=No_defence,phy_anti=Phy_anti,magic_anti=Magic_anti,poisoning_resist=Poisoning_resist,dizzy_resist=Dizzy_resist,freeze_resist=Freeze_resist,equip_score=Equip_score,spec_score_one=Spec_score_one,spec_score_two=Spec_score_two,hit_rate=Hit_rate,attack_type=Attack_type,is_undead=Is_undead,guard_radius=Guard_radius,attention_radius=Attention_radius,activity_radius=Activity_radius,refresh=Refresh,skills=Skills,gongxun=Gongxun} = Record,
	case Type_id =:= undefined of
		true ->
				Type_idFinal = undefined,
				exit({required_field_not_assigned, p_server_npc_base_info, type_id});
		false ->
			Type_idFinal = Type_id
	end,
	case Npc_name =:= undefined of
		true ->
				Npc_nameFinal = undefined,
				exit({required_field_not_assigned, p_server_npc_base_info, npc_name});
		false ->
			Npc_nameFinal = Npc_name
	end,
	case Npc_country =:= undefined of
		true ->
				Npc_countryFinal = undefined,
				exit({required_field_not_assigned, p_server_npc_base_info, npc_country});
		false ->
			Npc_countryFinal = Npc_country
	end,
	case Npc_type =:= undefined of
		true ->
				Npc_typeFinal = undefined,
				exit({required_field_not_assigned, p_server_npc_base_info, npc_type});
		false ->
			Npc_typeFinal = Npc_type
	end,
	case Level =:= undefined of
		true ->
				LevelFinal = undefined,
				exit({required_field_not_assigned, p_server_npc_base_info, level});
		false ->
			LevelFinal = Level
	end,
	case Max_hp =:= undefined of
		true ->
				Max_hpFinal = undefined,
				exit({required_field_not_assigned, p_server_npc_base_info, max_hp});
		false ->
			Max_hpFinal = Max_hp
	end,
	case Max_mp =:= undefined of
		true ->
				Max_mpFinal = undefined,
				exit({required_field_not_assigned, p_server_npc_base_info, max_mp});
		false ->
			Max_mpFinal = Max_mp
	end,
	case Min_attack =:= undefined of
		true ->
				Min_attackFinal = undefined,
				exit({required_field_not_assigned, p_server_npc_base_info, min_attack});
		false ->
			Min_attackFinal = Min_attack
	end,
	case Max_attack =:= undefined of
		true ->
				Max_attackFinal = undefined,
				exit({required_field_not_assigned, p_server_npc_base_info, max_attack});
		false ->
			Max_attackFinal = Max_attack
	end,
	case Phy_defence =:= undefined of
		true ->
				Phy_defenceFinal = undefined,
				exit({required_field_not_assigned, p_server_npc_base_info, phy_defence});
		false ->
			Phy_defenceFinal = Phy_defence
	end,
	case Magic_defence =:= undefined of
		true ->
				Magic_defenceFinal = undefined,
				exit({required_field_not_assigned, p_server_npc_base_info, magic_defence});
		false ->
			Magic_defenceFinal = Magic_defence
	end,
	case Blood_resume_speed =:= undefined of
		true ->
				Blood_resume_speedFinal = undefined,
				exit({required_field_not_assigned, p_server_npc_base_info, blood_resume_speed});
		false ->
			Blood_resume_speedFinal = Blood_resume_speed
	end,
	case Magic_resume_speed =:= undefined of
		true ->
				Magic_resume_speedFinal = undefined,
				exit({required_field_not_assigned, p_server_npc_base_info, magic_resume_speed});
		false ->
			Magic_resume_speedFinal = Magic_resume_speed
	end,
	case Dead_attack =:= undefined of
		true ->
				Dead_attackFinal = undefined,
				exit({required_field_not_assigned, p_server_npc_base_info, dead_attack});
		false ->
			Dead_attackFinal = Dead_attack
	end,
	case Lucky =:= undefined of
		true ->
				LuckyFinal = undefined,
				exit({required_field_not_assigned, p_server_npc_base_info, lucky});
		false ->
			LuckyFinal = Lucky
	end,
	case Move_speed =:= undefined of
		true ->
				Move_speedFinal = undefined,
				exit({required_field_not_assigned, p_server_npc_base_info, move_speed});
		false ->
			Move_speedFinal = Move_speed
	end,
	case Attack_speed =:= undefined of
		true ->
				Attack_speedFinal = undefined,
				exit({required_field_not_assigned, p_server_npc_base_info, attack_speed});
		false ->
			Attack_speedFinal = Attack_speed
	end,
	case Miss =:= undefined of
		true ->
				MissFinal = undefined,
				exit({required_field_not_assigned, p_server_npc_base_info, miss});
		false ->
			MissFinal = Miss
	end,
	case No_defence =:= undefined of
		true ->
				No_defenceFinal = undefined,
				exit({required_field_not_assigned, p_server_npc_base_info, no_defence});
		false ->
			No_defenceFinal = No_defence
	end,
	case Phy_anti =:= undefined of
		true ->
				Phy_antiFinal = undefined,
				exit({required_field_not_assigned, p_server_npc_base_info, phy_anti});
		false ->
			Phy_antiFinal = Phy_anti
	end,
	case Magic_anti =:= undefined of
		true ->
				Magic_antiFinal = undefined,
				exit({required_field_not_assigned, p_server_npc_base_info, magic_anti});
		false ->
			Magic_antiFinal = Magic_anti
	end,
	case Poisoning_resist =:= undefined of
		true ->
				Poisoning_resistFinal = 0;
		false ->
			Poisoning_resistFinal = Poisoning_resist
	end,
	case Dizzy_resist =:= undefined of
		true ->
				Dizzy_resistFinal = 0;
		false ->
			Dizzy_resistFinal = Dizzy_resist
	end,
	case Freeze_resist =:= undefined of
		true ->
				Freeze_resistFinal = 0;
		false ->
			Freeze_resistFinal = Freeze_resist
	end,
	case Equip_score =:= undefined of
		true ->
				Equip_scoreFinal = 0;
		false ->
			Equip_scoreFinal = Equip_score
	end,
	case Spec_score_one =:= undefined of
		true ->
				Spec_score_oneFinal = 0;
		false ->
			Spec_score_oneFinal = Spec_score_one
	end,
	case Spec_score_two =:= undefined of
		true ->
				Spec_score_twoFinal = 0;
		false ->
			Spec_score_twoFinal = Spec_score_two
	end,
	case Hit_rate =:= undefined of
		true ->
				Hit_rateFinal = 10000;
		false ->
			Hit_rateFinal = Hit_rate
	end,
	case Attack_type =:= undefined of
		true ->
				Attack_typeFinal = undefined,
				exit({required_field_not_assigned, p_server_npc_base_info, attack_type});
		false ->
			Attack_typeFinal = Attack_type
	end,
	case Is_undead =:= undefined of
		true ->
				Is_undeadFinal = undefined,
				exit({required_field_not_assigned, p_server_npc_base_info, is_undead});
		false ->
		case Is_undead of
			true ->
				Is_undeadFinal = 1;
			false ->
				Is_undeadFinal = 0
		end
	end,
	case Guard_radius =:= undefined of
		true ->
				Guard_radiusFinal = undefined,
				exit({required_field_not_assigned, p_server_npc_base_info, guard_radius});
		false ->
			Guard_radiusFinal = Guard_radius
	end,
	case Attention_radius =:= undefined of
		true ->
				Attention_radiusFinal = undefined,
				exit({required_field_not_assigned, p_server_npc_base_info, attention_radius});
		false ->
			Attention_radiusFinal = Attention_radius
	end,
	case Activity_radius =:= undefined of
		true ->
				Activity_radiusFinal = undefined,
				exit({required_field_not_assigned, p_server_npc_base_info, activity_radius});
		false ->
			Activity_radiusFinal = Activity_radius
	end,
	case Refresh =:= undefined of
		true ->
				RefreshFinal = undefined,
				exit({required_field_not_assigned, p_server_npc_base_info, refresh});
		false ->
			RefreshFinal = Refresh
	end,
	case Skills =:= undefined of
		true ->
			SkillsFinal = [];
		false ->
			SkillsFinal = Skills
	end,
	case Gongxun =:= undefined of
		true ->
				GongxunFinal = undefined,
				exit({required_field_not_assigned, p_server_npc_base_info, gongxun});
		false ->
			GongxunFinal = Gongxun
	end,
	Npc_name2 = common_tool:to_binary(Npc_nameFinal),
	Npc_nameLen = erlang:byte_size(Npc_name2),
	Refresh_bin = encode_p_refresh_info(RefreshFinal),
	BinLen_refresh = erlang:byte_size(Refresh_bin),
	Skills_bin = encode_p_monster_skills(SkillsFinal, <<>>),
	SizeSkillsFinal = erlang:length(SkillsFinal),
	BinLen_skills = erlang:byte_size(Skills_bin),

	<<Type_idFinal:32/signed,Npc_nameLen:16, Npc_name2/binary,Npc_countryFinal:32/signed,Npc_typeFinal:32/signed,LevelFinal:32/signed,Max_hpFinal:32/signed,Max_mpFinal:32/signed,Min_attackFinal:32/signed,Max_attackFinal:32/signed,Phy_defenceFinal:32/signed,Magic_defenceFinal:32/signed,Blood_resume_speedFinal:32/signed,Magic_resume_speedFinal:32/signed,Dead_attackFinal:32/signed,LuckyFinal:32/signed,Move_speedFinal:32/signed,Attack_speedFinal:32/signed,MissFinal:32/signed,No_defenceFinal:32/signed,Phy_antiFinal:32/signed,Magic_antiFinal:32/signed,Poisoning_resistFinal:32/signed,Dizzy_resistFinal:32/signed,Freeze_resistFinal:32/signed,Equip_scoreFinal:32/signed,Spec_score_oneFinal:32/signed,Spec_score_twoFinal:32/signed,Hit_rateFinal:32/signed,Attack_typeFinal:32/signed,Is_undeadFinal:8,Guard_radiusFinal:32/signed,Attention_radiusFinal:32/signed,Activity_radiusFinal:32/signed,BinLen_refresh:32, Refresh_bin/binary,SizeSkillsFinal:16, BinLen_skills:32, Skills_bin/binary,GongxunFinal:32/signed>>;
encode_p_server_npc_base_info(_) -> 
	<<>>.

decode_p_server_npc_base_info(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Type_id:32/signed,Npc_nameLen:16, Bin1/binary>> = Bin0,
	<<Npc_name:Npc_nameLen/binary,Npc_country:32/signed,Npc_type:32/signed,Level:32/signed,Max_hp:32/signed,Max_mp:32/signed,Min_attack:32/signed,Max_attack:32/signed,Phy_defence:32/signed,Magic_defence:32/signed,Blood_resume_speed:32/signed,Magic_resume_speed:32/signed,Dead_attack:32/signed,Lucky:32/signed,Move_speed:32/signed,Attack_speed:32/signed,Miss:32/signed,No_defence:32/signed,Phy_anti:32/signed,Magic_anti:32/signed,Poisoning_resist:32/signed,Dizzy_resist:32/signed,Freeze_resist:32/signed,Equip_score:32/signed,Spec_score_one:32/signed,Spec_score_two:32/signed,Hit_rate:32/signed,Attack_type:32/signed,Is_undeadTmp:8,Guard_radius:32/signed,Attention_radius:32/signed,Activity_radius:32/signed,SubBinSizerefresh:32, Bin2/binary>> = Bin1,
	<<SubBinrefresh:SubBinSizerefresh/binary, Bin3/binary>> = Bin2,
	Refresh = decode_p_refresh_info(SubBinrefresh),
	<<_Sizeskills:16, BinLenskills:32, Bin4/binary>> = Bin3,
	<<SubBinskills:BinLenskills/binary, Bin5/binary>> = Bin4, 
	Skills = lists:reverse(decode_p_monster_skills(SubBinskills, [])),
	<<Gongxun:32/signed>> = Bin5,
case Is_undeadTmp of 
	1 -> 
		Is_undead = true;
	_ ->
		Is_undead = false
end,

	{p_server_npc_base_info, Type_id,common_tool:to_list(Npc_name),Npc_country,Npc_type,Level,Max_hp,Max_mp,Min_attack,Max_attack,Phy_defence,Magic_defence,Blood_resume_speed,Magic_resume_speed,Dead_attack,Lucky,Move_speed,Attack_speed,Miss,No_defence,Phy_anti,Magic_anti,Poisoning_resist,Dizzy_resist,Freeze_resist,Equip_score,Spec_score_one,Spec_score_two,Hit_rate,Attack_type,Is_undead,Guard_radius,Attention_radius,Activity_radius,Refresh,Skills,Gongxun};

decode_p_server_npc_base_info(_) ->
	undefined.
encode_p_equip_onekey_info(Record) when is_record(Record, p_equip_onekey_info) ->
	#p_equip_onekey_info{equips_id=Equips_id,equips_name=Equips_name,equips_list=Equips_list,equips_id_list=Equips_id_list} = Record,
	case Equips_id =:= undefined of
		true ->
				Equips_idFinal = undefined,
				exit({required_field_not_assigned, p_equip_onekey_info, equips_id});
		false ->
			Equips_idFinal = Equips_id
	end,
	case Equips_name =:= undefined of
		true ->
				Equips_nameFinal = undefined,
				exit({required_field_not_assigned, p_equip_onekey_info, equips_name});
		false ->
			Equips_nameFinal = Equips_name
	end,
	case Equips_list =:= undefined of
		true ->
			Equips_listFinal = [];
		false ->
			Equips_listFinal = Equips_list
	end,
	case Equips_id_list =:= undefined of
		true ->
			Equips_id_listFinal = [];
		false ->
			Equips_id_listFinal = Equips_id_list
	end,
	Equips_name2 = common_tool:to_binary(Equips_nameFinal),
	Equips_nameLen = erlang:byte_size(Equips_name2),
	Equips_list_bin = encode_p_goodss(Equips_listFinal, <<>>),
	SizeEquips_listFinal = erlang:length(Equips_listFinal),
	BinLen_equips_list = erlang:byte_size(Equips_list_bin),
	Equips_id_list_bin = encode_p_equip_onekey_simples(Equips_id_listFinal, <<>>),
	SizeEquips_id_listFinal = erlang:length(Equips_id_listFinal),
	BinLen_equips_id_list = erlang:byte_size(Equips_id_list_bin),

	<<Equips_idFinal:32/signed,Equips_nameLen:16, Equips_name2/binary,SizeEquips_listFinal:16, BinLen_equips_list:32, Equips_list_bin/binary,SizeEquips_id_listFinal:16, BinLen_equips_id_list:32, Equips_id_list_bin/binary>>;
encode_p_equip_onekey_info(_) -> 
	<<>>.

decode_p_equip_onekey_info(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Equips_id:32/signed,Equips_nameLen:16, Bin1/binary>> = Bin0,
	<<Equips_name:Equips_nameLen/binary,_Sizeequips_list:16, BinLenequips_list:32, Bin2/binary>> = Bin1,
	<<SubBinequips_list:BinLenequips_list/binary, Bin3/binary>> = Bin2, 
	Equips_list = lists:reverse(decode_p_goodss(SubBinequips_list, [])),
	<<_Sizeequips_id_list:16, _BinLenequips_id_list:32, SubBinequips_id_list/binary>> = Bin3,
	Equips_id_list = lists:reverse(decode_p_equip_onekey_simples(SubBinequips_id_list, [])),

	{p_equip_onekey_info, Equips_id,common_tool:to_list(Equips_name),Equips_list,Equips_id_list};

decode_p_equip_onekey_info(_) ->
	undefined.
encode_p_equip_onekey_simple(Record) when is_record(Record, p_equip_onekey_simple) ->
	#p_equip_onekey_simple{slot_num=Slot_num,equip_id=Equip_id,equip_typeid=Equip_typeid} = Record,
	case Slot_num =:= undefined of
		true ->
				Slot_numFinal = undefined,
				exit({required_field_not_assigned, p_equip_onekey_simple, slot_num});
		false ->
			Slot_numFinal = Slot_num
	end,
	case Equip_id =:= undefined of
		true ->
				Equip_idFinal = undefined,
				exit({required_field_not_assigned, p_equip_onekey_simple, equip_id});
		false ->
			Equip_idFinal = Equip_id
	end,
	case Equip_typeid =:= undefined of
		true ->
				Equip_typeidFinal = undefined,
				exit({required_field_not_assigned, p_equip_onekey_simple, equip_typeid});
		false ->
			Equip_typeidFinal = Equip_typeid
	end,

	<<Slot_numFinal:32/signed,Equip_idFinal:32/signed,Equip_typeidFinal:32/signed>>;
encode_p_equip_onekey_simple(_) -> 
	<<>>.

decode_p_equip_onekey_simple(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Slot_num:32/signed,Equip_id:32/signed,Equip_typeid:32/signed>> = Bin0,

	{p_equip_onekey_simple, Slot_num,Equip_id,Equip_typeid};

decode_p_equip_onekey_simple(_) ->
	undefined.
encode_p_activity_info(Record) when is_record(Record, p_activity_info) ->
	#p_activity_info{id=Id,type=Type,order_id=Order_id,status=Status,done_times=Done_times,total_times=Total_times} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, p_activity_info, id});
		false ->
			IdFinal = Id
	end,
	case Type =:= undefined of
		true ->
				TypeFinal = undefined,
				exit({required_field_not_assigned, p_activity_info, type});
		false ->
			TypeFinal = Type
	end,
	case Order_id =:= undefined of
		true ->
				Order_idFinal = 0;
		false ->
			Order_idFinal = Order_id
	end,
	case Status =:= undefined of
		true ->
				StatusFinal = 0;
		false ->
			StatusFinal = Status
	end,
	case Done_times =:= undefined of
		true ->
				Done_timesFinal = 0;
		false ->
			Done_timesFinal = Done_times
	end,
	case Total_times =:= undefined of
		true ->
				Total_timesFinal = 0;
		false ->
			Total_timesFinal = Total_times
	end,

	<<IdFinal:32/signed,TypeFinal:32/signed,Order_idFinal:32/signed,StatusFinal:32/signed,Done_timesFinal:32/signed,Total_timesFinal:32/signed>>;
encode_p_activity_info(_) -> 
	<<>>.

decode_p_activity_info(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed,Type:32/signed,Order_id:32/signed,Status:32/signed,Done_times:32/signed,Total_times:32/signed>> = Bin0,

	{p_activity_info, Id,Type,Order_id,Status,Done_times,Total_times};

decode_p_activity_info(_) ->
	undefined.
encode_p_actpoint_info(Record) when is_record(Record, p_actpoint_info) ->
	#p_actpoint_info{id=Id,cur_ap=Cur_ap,max_ap=Max_ap} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, p_actpoint_info, id});
		false ->
			IdFinal = Id
	end,
	case Cur_ap =:= undefined of
		true ->
				Cur_apFinal = undefined,
				exit({required_field_not_assigned, p_actpoint_info, cur_ap});
		false ->
			Cur_apFinal = Cur_ap
	end,
	case Max_ap =:= undefined of
		true ->
				Max_apFinal = undefined,
				exit({required_field_not_assigned, p_actpoint_info, max_ap});
		false ->
			Max_apFinal = Max_ap
	end,

	<<IdFinal:32/signed,Cur_apFinal:32/signed,Max_apFinal:32/signed>>;
encode_p_actpoint_info(_) -> 
	<<>>.

decode_p_actpoint_info(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed,Cur_ap:32/signed,Max_ap:32/signed>> = Bin0,

	{p_actpoint_info, Id,Cur_ap,Max_ap};

decode_p_actpoint_info(_) ->
	undefined.
encode_p_trading_goods_base_info(Record) when is_record(Record, p_trading_goods_base_info) ->
	#p_trading_goods_base_info{type_id=Type_id,order_index=Order_index,name=Name,prices=Prices,number=Number} = Record,
	case Type_id =:= undefined of
		true ->
				Type_idFinal = undefined,
				exit({required_field_not_assigned, p_trading_goods_base_info, type_id});
		false ->
			Type_idFinal = Type_id
	end,
	case Order_index =:= undefined of
		true ->
				Order_indexFinal = undefined,
				exit({required_field_not_assigned, p_trading_goods_base_info, order_index});
		false ->
			Order_indexFinal = Order_index
	end,
	case Name =:= undefined of
		true ->
				NameFinal = undefined,
				exit({required_field_not_assigned, p_trading_goods_base_info, name});
		false ->
			NameFinal = Name
	end,
	case Prices =:= undefined of
		true ->
			PricesFinal = [];
		false ->
			PricesFinal = Prices
	end,
	case Number =:= undefined of
		true ->
				NumberFinal = undefined,
				exit({required_field_not_assigned, p_trading_goods_base_info, number});
		false ->
			NumberFinal = Number
	end,
	Name2 = common_tool:to_binary(NameFinal),
	NameLen = erlang:byte_size(Name2),
	Prices_bin = encode_int32s(PricesFinal, <<>>),
	SizePricesFinal = erlang:length(PricesFinal),
	BinLen_prices = erlang:byte_size(Prices_bin),

	<<Type_idFinal:32/signed,Order_indexFinal:32/signed,NameLen:16, Name2/binary,SizePricesFinal:16, BinLen_prices:32, Prices_bin/binary,NumberFinal:32/signed>>;
encode_p_trading_goods_base_info(_) -> 
	<<>>.

decode_p_trading_goods_base_info(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Type_id:32/signed,Order_index:32/signed,NameLen:16, Bin1/binary>> = Bin0,
	<<Name:NameLen/binary,_Sizeprices:16, BinLenprices:32, Bin2/binary>> = Bin1,
	<<SubBinprices:BinLenprices/binary, Bin3/binary>> = Bin2, 
	Prices = lists:reverse(decode_int32s(SubBinprices, [])),
	<<Number:32/signed>> = Bin3,

	{p_trading_goods_base_info, Type_id,Order_index,common_tool:to_list(Name),Prices,Number};

decode_p_trading_goods_base_info(_) ->
	undefined.
encode_p_trading_goods(Record) when is_record(Record, p_trading_goods) ->
	#p_trading_goods{type_id=Type_id,order_index=Order_index,name=Name,price=Price,number=Number,sale_price=Sale_price} = Record,
	case Type_id =:= undefined of
		true ->
				Type_idFinal = undefined,
				exit({required_field_not_assigned, p_trading_goods, type_id});
		false ->
			Type_idFinal = Type_id
	end,
	case Order_index =:= undefined of
		true ->
				Order_indexFinal = undefined,
				exit({required_field_not_assigned, p_trading_goods, order_index});
		false ->
			Order_indexFinal = Order_index
	end,
	case Name =:= undefined of
		true ->
				NameFinal = undefined,
				exit({required_field_not_assigned, p_trading_goods, name});
		false ->
			NameFinal = Name
	end,
	case Price =:= undefined of
		true ->
				PriceFinal = undefined,
				exit({required_field_not_assigned, p_trading_goods, price});
		false ->
			PriceFinal = Price
	end,
	case Number =:= undefined of
		true ->
				NumberFinal = undefined,
				exit({required_field_not_assigned, p_trading_goods, number});
		false ->
			NumberFinal = Number
	end,
	case Sale_price =:= undefined of
		true ->
				Sale_priceFinal = 0;
		false ->
			Sale_priceFinal = Sale_price
	end,
	Name2 = common_tool:to_binary(NameFinal),
	NameLen = erlang:byte_size(Name2),

	<<Type_idFinal:32/signed,Order_indexFinal:32/signed,NameLen:16, Name2/binary,PriceFinal:32/signed,NumberFinal:32/signed,Sale_priceFinal:32/signed>>;
encode_p_trading_goods(_) -> 
	<<>>.

decode_p_trading_goods(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Type_id:32/signed,Order_index:32/signed,NameLen:16, Bin1/binary>> = Bin0,
	<<Name:NameLen/binary,Price:32/signed,Number:32/signed,Sale_price:32/signed>> = Bin1,

	{p_trading_goods, Type_id,Order_index,common_tool:to_list(Name),Price,Number,Sale_price};

decode_p_trading_goods(_) ->
	undefined.
encode_p_family_ybc_money(Record) when is_record(Record, p_family_ybc_money) ->
	#p_family_ybc_money{level=Level,common=Common,advance=Advance} = Record,
	case Level =:= undefined of
		true ->
				LevelFinal = undefined,
				exit({required_field_not_assigned, p_family_ybc_money, level});
		false ->
			LevelFinal = Level
	end,
	case Common =:= undefined of
		true ->
				CommonFinal = undefined,
				exit({required_field_not_assigned, p_family_ybc_money, common});
		false ->
			CommonFinal = Common
	end,
	case Advance =:= undefined of
		true ->
				AdvanceFinal = undefined,
				exit({required_field_not_assigned, p_family_ybc_money, advance});
		false ->
			AdvanceFinal = Advance
	end,

	<<LevelFinal:32/signed,CommonFinal:32/signed,AdvanceFinal:32/signed>>;
encode_p_family_ybc_money(_) -> 
	<<>>.

decode_p_family_ybc_money(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Level:32/signed,Common:32/signed,Advance:32/signed>> = Bin0,

	{p_family_ybc_money, Level,Common,Advance};

decode_p_family_ybc_money(_) ->
	undefined.
encode_p_map_farm(Record) when is_record(Record, p_map_farm) ->
	#p_map_farm{farm_id=Farm_id,status=Status,planter_id=Planter_id,seed_id=Seed_id,seed_name=Seed_name,seed_type=Seed_type,sow_time=Sow_time,harvest_time=Harvest_time,harvest_segment=Harvest_segment} = Record,
	case Farm_id =:= undefined of
		true ->
				Farm_idFinal = undefined,
				exit({required_field_not_assigned, p_map_farm, farm_id});
		false ->
			Farm_idFinal = Farm_id
	end,
	case Status =:= undefined of
		true ->
				StatusFinal = 0;
		false ->
			StatusFinal = Status
	end,
	case Planter_id =:= undefined of
		true ->
				Planter_idFinal = 0;
		false ->
			Planter_idFinal = Planter_id
	end,
	case Seed_id =:= undefined of
		true ->
				Seed_idFinal = 0;
		false ->
			Seed_idFinal = Seed_id
	end,
	case Seed_name =:= undefined of
		true ->
				Seed_nameFinal = <<>>;
		false ->
			Seed_nameFinal = Seed_name
	end,
	case Seed_type =:= undefined of
		true ->
				Seed_typeFinal = 0;
		false ->
			Seed_typeFinal = Seed_type
	end,
	case Sow_time =:= undefined of
		true ->
				Sow_timeFinal = 0;
		false ->
			Sow_timeFinal = Sow_time
	end,
	case Harvest_time =:= undefined of
		true ->
				Harvest_timeFinal = 0;
		false ->
			Harvest_timeFinal = Harvest_time
	end,
	case Harvest_segment =:= undefined of
		true ->
				Harvest_segmentFinal = 0;
		false ->
			Harvest_segmentFinal = Harvest_segment
	end,
	Seed_name2 = common_tool:to_binary(Seed_nameFinal),
	Seed_nameLen = erlang:byte_size(Seed_name2),

	<<Farm_idFinal:32/signed,StatusFinal:32/signed,Planter_idFinal:32/signed,Seed_idFinal:32/signed,Seed_nameLen:16, Seed_name2/binary,Seed_typeFinal:32/signed,Sow_timeFinal:32/signed,Harvest_timeFinal:32/signed,Harvest_segmentFinal:32/signed>>;
encode_p_map_farm(_) -> 
	<<>>.

decode_p_map_farm(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Farm_id:32/signed,Status:32/signed,Planter_id:32/signed,Seed_id:32/signed,Seed_nameLen:16, Bin1/binary>> = Bin0,
	<<Seed_name:Seed_nameLen/binary,Seed_type:32/signed,Sow_time:32/signed,Harvest_time:32/signed,Harvest_segment:32/signed>> = Bin1,

	{p_map_farm, Farm_id,Status,Planter_id,Seed_id,common_tool:to_list(Seed_name),Seed_type,Sow_time,Harvest_time,Harvest_segment};

decode_p_map_farm(_) ->
	undefined.
encode_p_seed_info(Record) when is_record(Record, p_seed_info) ->
	#p_seed_info{seed_id=Seed_id,seed_name=Seed_name,seed_type=Seed_type,level=Level} = Record,
	case Seed_id =:= undefined of
		true ->
				Seed_idFinal = undefined,
				exit({required_field_not_assigned, p_seed_info, seed_id});
		false ->
			Seed_idFinal = Seed_id
	end,
	case Seed_name =:= undefined of
		true ->
				Seed_nameFinal = undefined,
				exit({required_field_not_assigned, p_seed_info, seed_name});
		false ->
			Seed_nameFinal = Seed_name
	end,
	case Seed_type =:= undefined of
		true ->
				Seed_typeFinal = 0;
		false ->
			Seed_typeFinal = Seed_type
	end,
	case Level =:= undefined of
		true ->
				LevelFinal = undefined,
				exit({required_field_not_assigned, p_seed_info, level});
		false ->
			LevelFinal = Level
	end,
	Seed_name2 = common_tool:to_binary(Seed_nameFinal),
	Seed_nameLen = erlang:byte_size(Seed_name2),

	<<Seed_idFinal:32/signed,Seed_nameLen:16, Seed_name2/binary,Seed_typeFinal:32/signed,LevelFinal:32/signed>>;
encode_p_seed_info(_) -> 
	<<>>.

decode_p_seed_info(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Seed_id:32/signed,Seed_nameLen:16, Bin1/binary>> = Bin0,
	<<Seed_name:Seed_nameLen/binary,Seed_type:32/signed,Level:32/signed>> = Bin1,

	{p_seed_info, Seed_id,common_tool:to_list(Seed_name),Seed_type,Level};

decode_p_seed_info(_) ->
	undefined.
encode_p_waroffaction_record(Record) when is_record(Record, p_waroffaction_record) ->
	#p_waroffaction_record{id=Id,faction_id=Faction_id,tick=Tick,content=Content} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, p_waroffaction_record, id});
		false ->
			IdFinal = Id
	end,
	case Faction_id =:= undefined of
		true ->
				Faction_idFinal = undefined,
				exit({required_field_not_assigned, p_waroffaction_record, faction_id});
		false ->
			Faction_idFinal = Faction_id
	end,
	case Tick =:= undefined of
		true ->
				TickFinal = undefined,
				exit({required_field_not_assigned, p_waroffaction_record, tick});
		false ->
			TickFinal = Tick
	end,
	case Content =:= undefined of
		true ->
				ContentFinal = undefined,
				exit({required_field_not_assigned, p_waroffaction_record, content});
		false ->
			ContentFinal = Content
	end,
	Content2 = common_tool:to_binary(ContentFinal),
	ContentLen = erlang:byte_size(Content2),

	<<IdFinal:32/signed,Faction_idFinal:32/signed,TickFinal:32/signed,ContentLen:16, Content2/binary>>;
encode_p_waroffaction_record(_) -> 
	<<>>.

decode_p_waroffaction_record(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed,Faction_id:32/signed,Tick:32/signed,ContentLen:16, Bin1/binary>> = Bin0,
	<<Content:ContentLen/binary>> = Bin1,

	{p_waroffaction_record, Id,Faction_id,Tick,common_tool:to_list(Content)};

decode_p_waroffaction_record(_) ->
	undefined.
encode_p_waroffaction_rank(Record) when is_record(Record, p_waroffaction_rank) ->
	#p_waroffaction_rank{role_id=Role_id,faction_id=Faction_id,score=Score,role_name=Role_name} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, p_waroffaction_rank, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Faction_id =:= undefined of
		true ->
				Faction_idFinal = undefined,
				exit({required_field_not_assigned, p_waroffaction_rank, faction_id});
		false ->
			Faction_idFinal = Faction_id
	end,
	case Score =:= undefined of
		true ->
				ScoreFinal = undefined,
				exit({required_field_not_assigned, p_waroffaction_rank, score});
		false ->
			ScoreFinal = Score
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = undefined,
				exit({required_field_not_assigned, p_waroffaction_rank, role_name});
		false ->
			Role_nameFinal = Role_name
	end,
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),

	<<Role_idFinal:32/signed,Faction_idFinal:32/signed,ScoreFinal:32/signed,Role_nameLen:16, Role_name2/binary>>;
encode_p_waroffaction_rank(_) -> 
	<<>>.

decode_p_waroffaction_rank(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,Faction_id:32/signed,Score:32/signed,Role_nameLen:16, Bin1/binary>> = Bin0,
	<<Role_name:Role_nameLen/binary>> = Bin1,

	{p_waroffaction_rank, Role_id,Faction_id,Score,common_tool:to_list(Role_name)};

decode_p_waroffaction_rank(_) ->
	undefined.
encode_p_pet_base_info(Record) when is_record(Record, p_pet_base_info) ->
	#p_pet_base_info{type_id=Type_id,pet_name=Pet_name,carry_level=Carry_level,attack_type=Attack_type} = Record,
	case Type_id =:= undefined of
		true ->
				Type_idFinal = undefined,
				exit({required_field_not_assigned, p_pet_base_info, type_id});
		false ->
			Type_idFinal = Type_id
	end,
	case Pet_name =:= undefined of
		true ->
				Pet_nameFinal = undefined,
				exit({required_field_not_assigned, p_pet_base_info, pet_name});
		false ->
			Pet_nameFinal = Pet_name
	end,
	case Carry_level =:= undefined of
		true ->
				Carry_levelFinal = undefined,
				exit({required_field_not_assigned, p_pet_base_info, carry_level});
		false ->
			Carry_levelFinal = Carry_level
	end,
	case Attack_type =:= undefined of
		true ->
				Attack_typeFinal = undefined,
				exit({required_field_not_assigned, p_pet_base_info, attack_type});
		false ->
			Attack_typeFinal = Attack_type
	end,
	Pet_name2 = common_tool:to_binary(Pet_nameFinal),
	Pet_nameLen = erlang:byte_size(Pet_name2),

	<<Type_idFinal:32/signed,Pet_nameLen:16, Pet_name2/binary,Carry_levelFinal:32/signed,Attack_typeFinal:32/signed>>;
encode_p_pet_base_info(_) -> 
	<<>>.

decode_p_pet_base_info(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Type_id:32/signed,Pet_nameLen:16, Bin1/binary>> = Bin0,
	<<Pet_name:Pet_nameLen/binary,Carry_level:32/signed,Attack_type:32/signed>> = Bin1,

	{p_pet_base_info, Type_id,common_tool:to_list(Pet_name),Carry_level,Attack_type};

decode_p_pet_base_info(_) ->
	undefined.
encode_p_pet_skill(Record) when is_record(Record, p_pet_skill) ->
	#p_pet_skill{skill_id=Skill_id,skill_type=Skill_type,skill_level=Skill_level} = Record,
	case Skill_id =:= undefined of
		true ->
				Skill_idFinal = undefined,
				exit({required_field_not_assigned, p_pet_skill, skill_id});
		false ->
			Skill_idFinal = Skill_id
	end,
	case Skill_type =:= undefined of
		true ->
				Skill_typeFinal = undefined,
				exit({required_field_not_assigned, p_pet_skill, skill_type});
		false ->
			Skill_typeFinal = Skill_type
	end,
	case Skill_level =:= undefined of
		true ->
				Skill_levelFinal = 1;
		false ->
			Skill_levelFinal = Skill_level
	end,

	<<Skill_idFinal:32/signed,Skill_typeFinal:32/signed,Skill_levelFinal:32/signed>>;
encode_p_pet_skill(_) -> 
	<<>>.

decode_p_pet_skill(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Skill_id:32/signed,Skill_type:32/signed,Skill_level:32/signed>> = Bin0,

	{p_pet_skill, Skill_id,Skill_type,Skill_level};

decode_p_pet_skill(_) ->
	undefined.
encode_p_pet(Record) when is_record(Record, p_pet) ->
	#p_pet{pet_id=Pet_id,type_id=Type_id,role_id=Role_id,role_name=Role_name,hp=Hp,max_hp=Max_hp,pet_name=Pet_name,color=Color,understanding=Understanding,sex=Sex,pk_mode=Pk_mode,bind=Bind,mate_id=Mate_id,mate_name=Mate_name,level=Level,exp=Exp,life=Life,generated=Generated,buffs=Buffs,str=Str,int2=Int2,con=Con,dex=Dex,men=Men,base_str=Base_str,base_int2=Base_int2,base_con=Base_con,base_dex=Base_dex,base_men=Base_men,remain_attr_points=Remain_attr_points,phy_defence=Phy_defence,magic_defence=Magic_defence,phy_attack=Phy_attack,magic_attack=Magic_attack,double_attack=Double_attack,hit_rate=Hit_rate,miss=Miss,attack_speed=Attack_speed,equip_score=Equip_score,spec_score_one=Spec_score_one,spec_score_two=Spec_score_two,attack_type=Attack_type,period=Period,skills=Skills,title=Title,max_hp_aptitude=Max_hp_aptitude,phy_defence_aptitude=Phy_defence_aptitude,magic_defence_aptitude=Magic_defence_aptitude,phy_attack_aptitude=Phy_attack_aptitude,magic_attack_aptitude=Magic_attack_aptitude,double_attack_aptitude=Double_attack_aptitude,get_tick=Get_tick,next_level_exp=Next_level_exp,state=State,max_hp_grow_add=Max_hp_grow_add,phy_defence_grow_add=Phy_defence_grow_add,magic_defence_grow_add=Magic_defence_grow_add,phy_attack_grow_add=Phy_attack_grow_add,magic_attack_grow_add=Magic_attack_grow_add,max_skill_grid=Max_skill_grid} = Record,
	case Pet_id =:= undefined of
		true ->
				Pet_idFinal = undefined,
				exit({required_field_not_assigned, p_pet, pet_id});
		false ->
			Pet_idFinal = Pet_id
	end,
	case Type_id =:= undefined of
		true ->
				Type_idFinal = undefined,
				exit({required_field_not_assigned, p_pet, type_id});
		false ->
			Type_idFinal = Type_id
	end,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = 0;
		false ->
			Role_idFinal = Role_id
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = <<>>;
		false ->
			Role_nameFinal = Role_name
	end,
	case Hp =:= undefined of
		true ->
				HpFinal = undefined,
				exit({required_field_not_assigned, p_pet, hp});
		false ->
			HpFinal = Hp
	end,
	case Max_hp =:= undefined of
		true ->
				Max_hpFinal = undefined,
				exit({required_field_not_assigned, p_pet, max_hp});
		false ->
			Max_hpFinal = Max_hp
	end,
	case Pet_name =:= undefined of
		true ->
				Pet_nameFinal = undefined,
				exit({required_field_not_assigned, p_pet, pet_name});
		false ->
			Pet_nameFinal = Pet_name
	end,
	case Color =:= undefined of
		true ->
				ColorFinal = undefined,
				exit({required_field_not_assigned, p_pet, color});
		false ->
			ColorFinal = Color
	end,
	case Understanding =:= undefined of
		true ->
				UnderstandingFinal = undefined,
				exit({required_field_not_assigned, p_pet, understanding});
		false ->
			UnderstandingFinal = Understanding
	end,
	case Sex =:= undefined of
		true ->
				SexFinal = undefined,
				exit({required_field_not_assigned, p_pet, sex});
		false ->
			SexFinal = Sex
	end,
	case Pk_mode =:= undefined of
		true ->
				Pk_modeFinal = 0;
		false ->
			Pk_modeFinal = Pk_mode
	end,
	case Bind =:= undefined of
		true ->
				BindFinal = 0;
		false ->
			case Bind of
				true ->
					BindFinal = 1;
				false ->
					BindFinal = 0
			end
	end,
	case Mate_id =:= undefined of
		true ->
				Mate_idFinal = 0;
		false ->
			Mate_idFinal = Mate_id
	end,
	case Mate_name =:= undefined of
		true ->
				Mate_nameFinal = <<>>;
		false ->
			Mate_nameFinal = Mate_name
	end,
	case Level =:= undefined of
		true ->
				LevelFinal = undefined,
				exit({required_field_not_assigned, p_pet, level});
		false ->
			LevelFinal = Level
	end,
	case Exp =:= undefined of
		true ->
				ExpFinal = undefined,
				exit({required_field_not_assigned, p_pet, exp});
		false ->
			ExpFinal = Exp
	end,
	case Life =:= undefined of
		true ->
				LifeFinal = undefined,
				exit({required_field_not_assigned, p_pet, life});
		false ->
			LifeFinal = Life
	end,
	case Generated =:= undefined of
		true ->
				GeneratedFinal = 0;
		false ->
		case Generated of
			true ->
				GeneratedFinal = 1;
			false ->
				GeneratedFinal = 0
		end
	end,
	case Buffs =:= undefined of
		true ->
			BuffsFinal = [];
		false ->
			BuffsFinal = Buffs
	end,
	case Str =:= undefined of
		true ->
				StrFinal = undefined,
				exit({required_field_not_assigned, p_pet, str});
		false ->
			StrFinal = Str
	end,
	case Int2 =:= undefined of
		true ->
				Int2Final = undefined,
				exit({required_field_not_assigned, p_pet, int2});
		false ->
			Int2Final = Int2
	end,
	case Con =:= undefined of
		true ->
				ConFinal = undefined,
				exit({required_field_not_assigned, p_pet, con});
		false ->
			ConFinal = Con
	end,
	case Dex =:= undefined of
		true ->
				DexFinal = undefined,
				exit({required_field_not_assigned, p_pet, dex});
		false ->
			DexFinal = Dex
	end,
	case Men =:= undefined of
		true ->
				MenFinal = undefined,
				exit({required_field_not_assigned, p_pet, men});
		false ->
			MenFinal = Men
	end,
	case Base_str =:= undefined of
		true ->
				Base_strFinal = undefined,
				exit({required_field_not_assigned, p_pet, base_str});
		false ->
			Base_strFinal = Base_str
	end,
	case Base_int2 =:= undefined of
		true ->
				Base_int2Final = undefined,
				exit({required_field_not_assigned, p_pet, base_int2});
		false ->
			Base_int2Final = Base_int2
	end,
	case Base_con =:= undefined of
		true ->
				Base_conFinal = undefined,
				exit({required_field_not_assigned, p_pet, base_con});
		false ->
			Base_conFinal = Base_con
	end,
	case Base_dex =:= undefined of
		true ->
				Base_dexFinal = undefined,
				exit({required_field_not_assigned, p_pet, base_dex});
		false ->
			Base_dexFinal = Base_dex
	end,
	case Base_men =:= undefined of
		true ->
				Base_menFinal = undefined,
				exit({required_field_not_assigned, p_pet, base_men});
		false ->
			Base_menFinal = Base_men
	end,
	case Remain_attr_points =:= undefined of
		true ->
				Remain_attr_pointsFinal = 0;
		false ->
			Remain_attr_pointsFinal = Remain_attr_points
	end,
	case Phy_defence =:= undefined of
		true ->
				Phy_defenceFinal = undefined,
				exit({required_field_not_assigned, p_pet, phy_defence});
		false ->
			Phy_defenceFinal = Phy_defence
	end,
	case Magic_defence =:= undefined of
		true ->
				Magic_defenceFinal = undefined,
				exit({required_field_not_assigned, p_pet, magic_defence});
		false ->
			Magic_defenceFinal = Magic_defence
	end,
	case Phy_attack =:= undefined of
		true ->
				Phy_attackFinal = undefined,
				exit({required_field_not_assigned, p_pet, phy_attack});
		false ->
			Phy_attackFinal = Phy_attack
	end,
	case Magic_attack =:= undefined of
		true ->
				Magic_attackFinal = undefined,
				exit({required_field_not_assigned, p_pet, magic_attack});
		false ->
			Magic_attackFinal = Magic_attack
	end,
	case Double_attack =:= undefined of
		true ->
				Double_attackFinal = undefined,
				exit({required_field_not_assigned, p_pet, double_attack});
		false ->
			Double_attackFinal = Double_attack
	end,
	case Hit_rate =:= undefined of
		true ->
				Hit_rateFinal = 0;
		false ->
			Hit_rateFinal = Hit_rate
	end,
	case Miss =:= undefined of
		true ->
				MissFinal = 0;
		false ->
			MissFinal = Miss
	end,
	case Attack_speed =:= undefined of
		true ->
				Attack_speedFinal = undefined,
				exit({required_field_not_assigned, p_pet, attack_speed});
		false ->
			Attack_speedFinal = Attack_speed
	end,
	case Equip_score =:= undefined of
		true ->
				Equip_scoreFinal = 0;
		false ->
			Equip_scoreFinal = Equip_score
	end,
	case Spec_score_one =:= undefined of
		true ->
				Spec_score_oneFinal = 0;
		false ->
			Spec_score_oneFinal = Spec_score_one
	end,
	case Spec_score_two =:= undefined of
		true ->
				Spec_score_twoFinal = 0;
		false ->
			Spec_score_twoFinal = Spec_score_two
	end,
	case Attack_type =:= undefined of
		true ->
				Attack_typeFinal = 0;
		false ->
			Attack_typeFinal = Attack_type
	end,
	case Period =:= undefined of
		true ->
				PeriodFinal = 1;
		false ->
			PeriodFinal = Period
	end,
	case Skills =:= undefined of
		true ->
			SkillsFinal = [];
		false ->
			SkillsFinal = Skills
	end,
	case Title =:= undefined of
		true ->
				TitleFinal = <<>>;
		false ->
			TitleFinal = Title
	end,
	case Max_hp_aptitude =:= undefined of
		true ->
				Max_hp_aptitudeFinal = undefined,
				exit({required_field_not_assigned, p_pet, max_hp_aptitude});
		false ->
			Max_hp_aptitudeFinal = Max_hp_aptitude
	end,
	case Phy_defence_aptitude =:= undefined of
		true ->
				Phy_defence_aptitudeFinal = undefined,
				exit({required_field_not_assigned, p_pet, phy_defence_aptitude});
		false ->
			Phy_defence_aptitudeFinal = Phy_defence_aptitude
	end,
	case Magic_defence_aptitude =:= undefined of
		true ->
				Magic_defence_aptitudeFinal = undefined,
				exit({required_field_not_assigned, p_pet, magic_defence_aptitude});
		false ->
			Magic_defence_aptitudeFinal = Magic_defence_aptitude
	end,
	case Phy_attack_aptitude =:= undefined of
		true ->
				Phy_attack_aptitudeFinal = undefined,
				exit({required_field_not_assigned, p_pet, phy_attack_aptitude});
		false ->
			Phy_attack_aptitudeFinal = Phy_attack_aptitude
	end,
	case Magic_attack_aptitude =:= undefined of
		true ->
				Magic_attack_aptitudeFinal = undefined,
				exit({required_field_not_assigned, p_pet, magic_attack_aptitude});
		false ->
			Magic_attack_aptitudeFinal = Magic_attack_aptitude
	end,
	case Double_attack_aptitude =:= undefined of
		true ->
				Double_attack_aptitudeFinal = undefined,
				exit({required_field_not_assigned, p_pet, double_attack_aptitude});
		false ->
			Double_attack_aptitudeFinal = Double_attack_aptitude
	end,
	case Get_tick =:= undefined of
		true ->
				Get_tickFinal = 0;
		false ->
			Get_tickFinal = Get_tick
	end,
	case Next_level_exp =:= undefined of
		true ->
				Next_level_expFinal = 0.0;
		false ->
			Next_level_expFinal = Next_level_exp
	end,
	case State =:= undefined of
		true ->
				StateFinal = 1;
		false ->
			StateFinal = State
	end,
	case Max_hp_grow_add =:= undefined of
		true ->
				Max_hp_grow_addFinal = 0;
		false ->
			Max_hp_grow_addFinal = Max_hp_grow_add
	end,
	case Phy_defence_grow_add =:= undefined of
		true ->
				Phy_defence_grow_addFinal = 0;
		false ->
			Phy_defence_grow_addFinal = Phy_defence_grow_add
	end,
	case Magic_defence_grow_add =:= undefined of
		true ->
				Magic_defence_grow_addFinal = 0;
		false ->
			Magic_defence_grow_addFinal = Magic_defence_grow_add
	end,
	case Phy_attack_grow_add =:= undefined of
		true ->
				Phy_attack_grow_addFinal = 0;
		false ->
			Phy_attack_grow_addFinal = Phy_attack_grow_add
	end,
	case Magic_attack_grow_add =:= undefined of
		true ->
				Magic_attack_grow_addFinal = 0;
		false ->
			Magic_attack_grow_addFinal = Magic_attack_grow_add
	end,
	case Max_skill_grid =:= undefined of
		true ->
				Max_skill_gridFinal = 4;
		false ->
			Max_skill_gridFinal = Max_skill_grid
	end,
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),
	Pet_name2 = common_tool:to_binary(Pet_nameFinal),
	Pet_nameLen = erlang:byte_size(Pet_name2),
	Mate_name2 = common_tool:to_binary(Mate_nameFinal),
	Mate_nameLen = erlang:byte_size(Mate_name2),
	Buffs_bin = encode_p_actor_bufs(BuffsFinal, <<>>),
	SizeBuffsFinal = erlang:length(BuffsFinal),
	BinLen_buffs = erlang:byte_size(Buffs_bin),
	Skills_bin = encode_p_pet_skills(SkillsFinal, <<>>),
	SizeSkillsFinal = erlang:length(SkillsFinal),
	BinLen_skills = erlang:byte_size(Skills_bin),
	Title2 = common_tool:to_binary(TitleFinal),
	TitleLen = erlang:byte_size(Title2),

	<<Pet_idFinal:32/signed,Type_idFinal:32/signed,Role_idFinal:32/signed,Role_nameLen:16, Role_name2/binary,HpFinal:32/signed,Max_hpFinal:32/signed,Pet_nameLen:16, Pet_name2/binary,ColorFinal:32/signed,UnderstandingFinal:32/signed,SexFinal:32/signed,Pk_modeFinal:32/signed,BindFinal:8,Mate_idFinal:32/signed,Mate_nameLen:16, Mate_name2/binary,LevelFinal:32/signed,ExpFinal:64/float,LifeFinal:32/signed,GeneratedFinal:8,SizeBuffsFinal:16, BinLen_buffs:32, Buffs_bin/binary,StrFinal:32/signed,Int2Final:32/signed,ConFinal:32/signed,DexFinal:32/signed,MenFinal:32/signed,Base_strFinal:32/signed,Base_int2Final:32/signed,Base_conFinal:32/signed,Base_dexFinal:32/signed,Base_menFinal:32/signed,Remain_attr_pointsFinal:32/signed,Phy_defenceFinal:32/signed,Magic_defenceFinal:32/signed,Phy_attackFinal:32/signed,Magic_attackFinal:32/signed,Double_attackFinal:32/signed,Hit_rateFinal:32/signed,MissFinal:32/signed,Attack_speedFinal:32/signed,Equip_scoreFinal:32/signed,Spec_score_oneFinal:32/signed,Spec_score_twoFinal:32/signed,Attack_typeFinal:32/signed,PeriodFinal:32/signed,SizeSkillsFinal:16, BinLen_skills:32, Skills_bin/binary,TitleLen:16, Title2/binary,Max_hp_aptitudeFinal:32/signed,Phy_defence_aptitudeFinal:32/signed,Magic_defence_aptitudeFinal:32/signed,Phy_attack_aptitudeFinal:32/signed,Magic_attack_aptitudeFinal:32/signed,Double_attack_aptitudeFinal:32/signed,Get_tickFinal:32/signed,Next_level_expFinal:64/float,StateFinal:32/signed,Max_hp_grow_addFinal:32/signed,Phy_defence_grow_addFinal:32/signed,Magic_defence_grow_addFinal:32/signed,Phy_attack_grow_addFinal:32/signed,Magic_attack_grow_addFinal:32/signed,Max_skill_gridFinal:32/signed>>;
encode_p_pet(_) -> 
	<<>>.

decode_p_pet(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Pet_id:32/signed,Type_id:32/signed,Role_id:32/signed,Role_nameLen:16, Bin1/binary>> = Bin0,
	<<Role_name:Role_nameLen/binary,Hp:32/signed,Max_hp:32/signed,Pet_nameLen:16, Bin2/binary>> = Bin1,
	<<Pet_name:Pet_nameLen/binary,Color:32/signed,Understanding:32/signed,Sex:32/signed,Pk_mode:32/signed,BindTmp:8,Mate_id:32/signed,Mate_nameLen:16, Bin3/binary>> = Bin2,
	<<Mate_name:Mate_nameLen/binary,Level:32/signed,Exp:64,Life:32/signed,GeneratedTmp:8,_Sizebuffs:16, BinLenbuffs:32, Bin4/binary>> = Bin3,
	<<SubBinbuffs:BinLenbuffs/binary, Bin5/binary>> = Bin4, 
	Buffs = lists:reverse(decode_p_actor_bufs(SubBinbuffs, [])),
	<<Str:32/signed,Int2:32/signed,Con:32/signed,Dex:32/signed,Men:32/signed,Base_str:32/signed,Base_int2:32/signed,Base_con:32/signed,Base_dex:32/signed,Base_men:32/signed,Remain_attr_points:32/signed,Phy_defence:32/signed,Magic_defence:32/signed,Phy_attack:32/signed,Magic_attack:32/signed,Double_attack:32/signed,Hit_rate:32/signed,Miss:32/signed,Attack_speed:32/signed,Equip_score:32/signed,Spec_score_one:32/signed,Spec_score_two:32/signed,Attack_type:32/signed,Period:32/signed,_Sizeskills:16, BinLenskills:32, Bin6/binary>> = Bin5,
	<<SubBinskills:BinLenskills/binary, Bin7/binary>> = Bin6, 
	Skills = lists:reverse(decode_p_pet_skills(SubBinskills, [])),
	<<TitleLen:16, Bin8/binary>> = Bin7,
	<<Title:TitleLen/binary,Max_hp_aptitude:32/signed,Phy_defence_aptitude:32/signed,Magic_defence_aptitude:32/signed,Phy_attack_aptitude:32/signed,Magic_attack_aptitude:32/signed,Double_attack_aptitude:32/signed,Get_tick:32/signed,Next_level_exp:64,State:32/signed,Max_hp_grow_add:32/signed,Phy_defence_grow_add:32/signed,Magic_defence_grow_add:32/signed,Phy_attack_grow_add:32/signed,Magic_attack_grow_add:32/signed,Max_skill_grid:32/signed>> = Bin8,
case BindTmp of 
	1 -> 
		Bind = true;
	_ ->
		Bind = false
end,
case GeneratedTmp of 
	1 -> 
		Generated = true;
	_ ->
		Generated = false
end,

	{p_pet, Pet_id,Type_id,Role_id,common_tool:to_list(Role_name),Hp,Max_hp,common_tool:to_list(Pet_name),Color,Understanding,Sex,Pk_mode,Bind,Mate_id,common_tool:to_list(Mate_name),Level,Exp,Life,Generated,Buffs,Str,Int2,Con,Dex,Men,Base_str,Base_int2,Base_con,Base_dex,Base_men,Remain_attr_points,Phy_defence,Magic_defence,Phy_attack,Magic_attack,Double_attack,Hit_rate,Miss,Attack_speed,Equip_score,Spec_score_one,Spec_score_two,Attack_type,Period,Skills,common_tool:to_list(Title),Max_hp_aptitude,Phy_defence_aptitude,Magic_defence_aptitude,Phy_attack_aptitude,Magic_attack_aptitude,Double_attack_aptitude,Get_tick,Next_level_exp,State,Max_hp_grow_add,Phy_defence_grow_add,Magic_defence_grow_add,Phy_attack_grow_add,Magic_attack_grow_add,Max_skill_grid};

decode_p_pet(_) ->
	undefined.
encode_p_map_pet(Record) when is_record(Record, p_map_pet) ->
	#p_map_pet{pet_id=Pet_id,type_id=Type_id,pet_name=Pet_name,state=State,hp=Hp,pos=Pos,attack_speed=Attack_speed,max_hp=Max_hp,level=Level,role_id=Role_id,state_buffs=State_buffs,title=Title,color=Color} = Record,
	case Pet_id =:= undefined of
		true ->
				Pet_idFinal = undefined,
				exit({required_field_not_assigned, p_map_pet, pet_id});
		false ->
			Pet_idFinal = Pet_id
	end,
	case Type_id =:= undefined of
		true ->
				Type_idFinal = undefined,
				exit({required_field_not_assigned, p_map_pet, type_id});
		false ->
			Type_idFinal = Type_id
	end,
	case Pet_name =:= undefined of
		true ->
				Pet_nameFinal = <<>>;
		false ->
			Pet_nameFinal = Pet_name
	end,
	case State =:= undefined of
		true ->
				StateFinal = 1;
		false ->
			StateFinal = State
	end,
	case Hp =:= undefined of
		true ->
				HpFinal = undefined,
				exit({required_field_not_assigned, p_map_pet, hp});
		false ->
			HpFinal = Hp
	end,
	case Pos =:= undefined of
		true ->
				PosFinal = undefined,
				exit({required_field_not_assigned, p_map_pet, pos});
		false ->
			PosFinal = Pos
	end,
	case Attack_speed =:= undefined of
		true ->
				Attack_speedFinal = undefined,
				exit({required_field_not_assigned, p_map_pet, attack_speed});
		false ->
			Attack_speedFinal = Attack_speed
	end,
	case Max_hp =:= undefined of
		true ->
				Max_hpFinal = undefined,
				exit({required_field_not_assigned, p_map_pet, max_hp});
		false ->
			Max_hpFinal = Max_hp
	end,
	case Level =:= undefined of
		true ->
				LevelFinal = undefined,
				exit({required_field_not_assigned, p_map_pet, level});
		false ->
			LevelFinal = Level
	end,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, p_map_pet, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case State_buffs =:= undefined of
		true ->
			State_buffsFinal = [];
		false ->
			State_buffsFinal = State_buffs
	end,
	case Title =:= undefined of
		true ->
				TitleFinal = <<>>;
		false ->
			TitleFinal = Title
	end,
	case Color =:= undefined of
		true ->
				ColorFinal = 0;
		false ->
			ColorFinal = Color
	end,
	Pet_name2 = common_tool:to_binary(Pet_nameFinal),
	Pet_nameLen = erlang:byte_size(Pet_name2),
	Pos_bin = encode_p_pos(PosFinal),
	BinLen_pos = erlang:byte_size(Pos_bin),
	State_buffs_bin = encode_p_actor_bufs(State_buffsFinal, <<>>),
	SizeState_buffsFinal = erlang:length(State_buffsFinal),
	BinLen_state_buffs = erlang:byte_size(State_buffs_bin),
	Title2 = common_tool:to_binary(TitleFinal),
	TitleLen = erlang:byte_size(Title2),

	<<Pet_idFinal:32/signed,Type_idFinal:32/signed,Pet_nameLen:16, Pet_name2/binary,StateFinal:32/signed,HpFinal:32/signed,BinLen_pos:32, Pos_bin/binary,Attack_speedFinal:32/signed,Max_hpFinal:32/signed,LevelFinal:32/signed,Role_idFinal:32/signed,SizeState_buffsFinal:16, BinLen_state_buffs:32, State_buffs_bin/binary,TitleLen:16, Title2/binary,ColorFinal:32/signed>>;
encode_p_map_pet(_) -> 
	<<>>.

decode_p_map_pet(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Pet_id:32/signed,Type_id:32/signed,Pet_nameLen:16, Bin1/binary>> = Bin0,
	<<Pet_name:Pet_nameLen/binary,State:32/signed,Hp:32/signed,SubBinSizepos:32, Bin2/binary>> = Bin1,
	<<SubBinpos:SubBinSizepos/binary, Bin3/binary>> = Bin2,
	Pos = decode_p_pos(SubBinpos),
	<<Attack_speed:32/signed,Max_hp:32/signed,Level:32/signed,Role_id:32/signed,_Sizestate_buffs:16, BinLenstate_buffs:32, Bin4/binary>> = Bin3,
	<<SubBinstate_buffs:BinLenstate_buffs/binary, Bin5/binary>> = Bin4, 
	State_buffs = lists:reverse(decode_p_actor_bufs(SubBinstate_buffs, [])),
	<<TitleLen:16, Bin6/binary>> = Bin5,
	<<Title:TitleLen/binary,Color:32/signed>> = Bin6,

	{p_map_pet, Pet_id,Type_id,common_tool:to_list(Pet_name),State,Hp,Pos,Attack_speed,Max_hp,Level,Role_id,State_buffs,common_tool:to_list(Title),Color};

decode_p_map_pet(_) ->
	undefined.
encode_p_pet_id_name(Record) when is_record(Record, p_pet_id_name) ->
	#p_pet_id_name{pet_id=Pet_id,name=Name,color=Color,type_id=Type_id,index=Index,exp=Exp,next_level_exp=Next_level_exp} = Record,
	case Pet_id =:= undefined of
		true ->
				Pet_idFinal = undefined,
				exit({required_field_not_assigned, p_pet_id_name, pet_id});
		false ->
			Pet_idFinal = Pet_id
	end,
	case Name =:= undefined of
		true ->
				NameFinal = undefined,
				exit({required_field_not_assigned, p_pet_id_name, name});
		false ->
			NameFinal = Name
	end,
	case Color =:= undefined of
		true ->
				ColorFinal = 2;
		false ->
			ColorFinal = Color
	end,
	case Type_id =:= undefined of
		true ->
				Type_idFinal = 0;
		false ->
			Type_idFinal = Type_id
	end,
	case Index =:= undefined of
		true ->
				IndexFinal = 0;
		false ->
			IndexFinal = Index
	end,
	case Exp =:= undefined of
		true ->
				ExpFinal = 0;
		false ->
			ExpFinal = Exp
	end,
	case Next_level_exp =:= undefined of
		true ->
				Next_level_expFinal = 0;
		false ->
			Next_level_expFinal = Next_level_exp
	end,
	Name2 = common_tool:to_binary(NameFinal),
	NameLen = erlang:byte_size(Name2),

	<<Pet_idFinal:32/signed,NameLen:16, Name2/binary,ColorFinal:32/signed,Type_idFinal:32/signed,IndexFinal:32/signed,ExpFinal:64/float,Next_level_expFinal:64/float>>;
encode_p_pet_id_name(_) -> 
	<<>>.

decode_p_pet_id_name(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Pet_id:32/signed,NameLen:16, Bin1/binary>> = Bin0,
	<<Name:NameLen/binary,Color:32/signed,Type_id:32/signed,Index:32/signed,Exp:64,Next_level_exp:64>> = Bin1,

	{p_pet_id_name, Pet_id,common_tool:to_list(Name),Color,Type_id,Index,Exp,Next_level_exp};

decode_p_pet_id_name(_) ->
	undefined.
encode_p_role_pet_bag(Record) when is_record(Record, p_role_pet_bag) ->
	#p_role_pet_bag{role_id=Role_id,content=Content,pets=Pets} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, p_role_pet_bag, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Content =:= undefined of
		true ->
				ContentFinal = undefined,
				exit({required_field_not_assigned, p_role_pet_bag, content});
		false ->
			ContentFinal = Content
	end,
	case Pets =:= undefined of
		true ->
			PetsFinal = [];
		false ->
			PetsFinal = Pets
	end,
	Pets_bin = encode_p_pet_id_names(PetsFinal, <<>>),
	SizePetsFinal = erlang:length(PetsFinal),
	BinLen_pets = erlang:byte_size(Pets_bin),

	<<Role_idFinal:32/signed,ContentFinal:32/signed,SizePetsFinal:16, BinLen_pets:32, Pets_bin/binary>>;
encode_p_role_pet_bag(_) -> 
	<<>>.

decode_p_role_pet_bag(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,Content:32/signed,_Sizepets:16, _BinLenpets:32, SubBinpets/binary>> = Bin0,
	Pets = lists:reverse(decode_p_pet_id_names(SubBinpets, [])),

	{p_role_pet_bag, Role_id,Content,Pets};

decode_p_role_pet_bag(_) ->
	undefined.
encode_p_pet_attr_assign(Record) when is_record(Record, p_pet_attr_assign) ->
	#p_pet_attr_assign{assign_type=Assign_type,assign_value=Assign_value} = Record,
	case Assign_type =:= undefined of
		true ->
				Assign_typeFinal = undefined,
				exit({required_field_not_assigned, p_pet_attr_assign, assign_type});
		false ->
			Assign_typeFinal = Assign_type
	end,
	case Assign_value =:= undefined of
		true ->
				Assign_valueFinal = undefined,
				exit({required_field_not_assigned, p_pet_attr_assign, assign_value});
		false ->
			Assign_valueFinal = Assign_value
	end,

	<<Assign_typeFinal:32/signed,Assign_valueFinal:32/signed>>;
encode_p_pet_attr_assign(_) -> 
	<<>>.

decode_p_pet_attr_assign(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Assign_type:32/signed,Assign_value:32/signed>> = Bin0,

	{p_pet_attr_assign, Assign_type,Assign_value};

decode_p_pet_attr_assign(_) ->
	undefined.
encode_p_pet_feed(Record) when is_record(Record, p_pet_feed) ->
	#p_pet_feed{role_id=Role_id,state=State,star_level=Star_level,last_feed_day=Last_feed_day,feed_time=Feed_time,last_feed_exp=Last_feed_exp,feed_over_flag=Feed_over_flag,feed_over_tick=Feed_over_tick,feed_tick=Feed_tick,free_star_up_flag=Free_star_up_flag,feed_type=Feed_type,pet_id=Pet_id,star_up_fail_time=Star_up_fail_time,last_clear_star_week=Last_clear_star_week,star_up_flag=Star_up_flag} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, p_pet_feed, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case State =:= undefined of
		true ->
				StateFinal = 1;
		false ->
			StateFinal = State
	end,
	case Star_level =:= undefined of
		true ->
				Star_levelFinal = 1;
		false ->
			Star_levelFinal = Star_level
	end,
	case Last_feed_day =:= undefined of
		true ->
				Last_feed_dayFinal = 0;
		false ->
			Last_feed_dayFinal = Last_feed_day
	end,
	case Feed_time =:= undefined of
		true ->
				Feed_timeFinal = 0;
		false ->
			Feed_timeFinal = Feed_time
	end,
	case Last_feed_exp =:= undefined of
		true ->
				Last_feed_expFinal = 0;
		false ->
			Last_feed_expFinal = Last_feed_exp
	end,
	case Feed_over_flag =:= undefined of
		true ->
				Feed_over_flagFinal = 0;
		false ->
		case Feed_over_flag of
			true ->
				Feed_over_flagFinal = 1;
			false ->
				Feed_over_flagFinal = 0
		end
	end,
	case Feed_over_tick =:= undefined of
		true ->
				Feed_over_tickFinal = 0;
		false ->
			Feed_over_tickFinal = Feed_over_tick
	end,
	case Feed_tick =:= undefined of
		true ->
				Feed_tickFinal = 0;
		false ->
			Feed_tickFinal = Feed_tick
	end,
	case Free_star_up_flag =:= undefined of
		true ->
				Free_star_up_flagFinal = 1;
		false ->
		case Free_star_up_flag of
			true ->
				Free_star_up_flagFinal = 1;
			false ->
				Free_star_up_flagFinal = 0
		end
	end,
	case Feed_type =:= undefined of
		true ->
				Feed_typeFinal = 0;
		false ->
			Feed_typeFinal = Feed_type
	end,
	case Pet_id =:= undefined of
		true ->
				Pet_idFinal = 0;
		false ->
			Pet_idFinal = Pet_id
	end,
	case Star_up_fail_time =:= undefined of
		true ->
				Star_up_fail_timeFinal = 0;
		false ->
			Star_up_fail_timeFinal = Star_up_fail_time
	end,
	case Last_clear_star_week =:= undefined of
		true ->
				Last_clear_star_weekFinal = 0;
		false ->
			Last_clear_star_weekFinal = Last_clear_star_week
	end,
	case Star_up_flag =:= undefined of
		true ->
				Star_up_flagFinal = 0;
		false ->
		case Star_up_flag of
			true ->
				Star_up_flagFinal = 1;
			false ->
				Star_up_flagFinal = 0
		end
	end,

	<<Role_idFinal:32/signed,StateFinal:32/signed,Star_levelFinal:32/signed,Last_feed_dayFinal:32/signed,Feed_timeFinal:32/signed,Last_feed_expFinal:64/float,Feed_over_flagFinal:8,Feed_over_tickFinal:32/signed,Feed_tickFinal:32/signed,Free_star_up_flagFinal:8,Feed_typeFinal:32/signed,Pet_idFinal:32/signed,Star_up_fail_timeFinal:32/signed,Last_clear_star_weekFinal:32/signed,Star_up_flagFinal:8>>;
encode_p_pet_feed(_) -> 
	<<>>.

decode_p_pet_feed(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,State:32/signed,Star_level:32/signed,Last_feed_day:32/signed,Feed_time:32/signed,Last_feed_exp:64,Feed_over_flagTmp:8,Feed_over_tick:32/signed,Feed_tick:32/signed,Free_star_up_flagTmp:8,Feed_type:32/signed,Pet_id:32/signed,Star_up_fail_time:32/signed,Last_clear_star_week:32/signed,Star_up_flagTmp:8>> = Bin0,
case Feed_over_flagTmp of 
	1 -> 
		Feed_over_flag = true;
	_ ->
		Feed_over_flag = false
end,
case Free_star_up_flagTmp of 
	1 -> 
		Free_star_up_flag = true;
	_ ->
		Free_star_up_flag = false
end,
case Star_up_flagTmp of 
	1 -> 
		Star_up_flag = true;
	_ ->
		Star_up_flag = false
end,

	{p_pet_feed, Role_id,State,Star_level,Last_feed_day,Feed_time,Last_feed_exp,Feed_over_flag,Feed_over_tick,Feed_tick,Free_star_up_flag,Feed_type,Pet_id,Star_up_fail_time,Last_clear_star_week,Star_up_flag};

decode_p_pet_feed(_) ->
	undefined.
encode_p_pet_training_info(Record) when is_record(Record, p_pet_training_info) ->
	#p_pet_training_info{pet_id=Pet_id,training_start_time=Training_start_time,training_end_time=Training_end_time,training_mode=Training_mode,fly_cd_end_time=Fly_cd_end_time,total_get_exp=Total_get_exp} = Record,
	case Pet_id =:= undefined of
		true ->
				Pet_idFinal = undefined,
				exit({required_field_not_assigned, p_pet_training_info, pet_id});
		false ->
			Pet_idFinal = Pet_id
	end,
	case Training_start_time =:= undefined of
		true ->
				Training_start_timeFinal = 0;
		false ->
			Training_start_timeFinal = Training_start_time
	end,
	case Training_end_time =:= undefined of
		true ->
				Training_end_timeFinal = 0;
		false ->
			Training_end_timeFinal = Training_end_time
	end,
	case Training_mode =:= undefined of
		true ->
				Training_modeFinal = 1;
		false ->
			Training_modeFinal = Training_mode
	end,
	case Fly_cd_end_time =:= undefined of
		true ->
				Fly_cd_end_timeFinal = 0;
		false ->
			Fly_cd_end_timeFinal = Fly_cd_end_time
	end,
	case Total_get_exp =:= undefined of
		true ->
				Total_get_expFinal = 0;
		false ->
			Total_get_expFinal = Total_get_exp
	end,

	<<Pet_idFinal:32/signed,Training_start_timeFinal:32/signed,Training_end_timeFinal:32/signed,Training_modeFinal:32/signed,Fly_cd_end_timeFinal:32/signed,Total_get_expFinal:32/signed>>;
encode_p_pet_training_info(_) -> 
	<<>>.

decode_p_pet_training_info(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Pet_id:32/signed,Training_start_time:32/signed,Training_end_time:32/signed,Training_mode:32/signed,Fly_cd_end_time:32/signed,Total_get_exp:32/signed>> = Bin0,

	{p_pet_training_info, Pet_id,Training_start_time,Training_end_time,Training_mode,Fly_cd_end_time,Total_get_exp};

decode_p_pet_training_info(_) ->
	undefined.
encode_p_role_pet_grow(Record) when is_record(Record, p_role_pet_grow) ->
	#p_role_pet_grow{role_id=Role_id,state=State,grow_type=Grow_type,grow_over_tick=Grow_over_tick,grow_tick=Grow_tick,con_level=Con_level,phy_defence_level=Phy_defence_level,magic_defence_level=Magic_defence_level,phy_attack_level=Phy_attack_level,magic_attack_level=Magic_attack_level} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, p_role_pet_grow, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case State =:= undefined of
		true ->
				StateFinal = 1;
		false ->
			StateFinal = State
	end,
	case Grow_type =:= undefined of
		true ->
				Grow_typeFinal = 0;
		false ->
			Grow_typeFinal = Grow_type
	end,
	case Grow_over_tick =:= undefined of
		true ->
				Grow_over_tickFinal = 0;
		false ->
			Grow_over_tickFinal = Grow_over_tick
	end,
	case Grow_tick =:= undefined of
		true ->
				Grow_tickFinal = 0;
		false ->
			Grow_tickFinal = Grow_tick
	end,
	case Con_level =:= undefined of
		true ->
				Con_levelFinal = 0;
		false ->
			Con_levelFinal = Con_level
	end,
	case Phy_defence_level =:= undefined of
		true ->
				Phy_defence_levelFinal = 0;
		false ->
			Phy_defence_levelFinal = Phy_defence_level
	end,
	case Magic_defence_level =:= undefined of
		true ->
				Magic_defence_levelFinal = 0;
		false ->
			Magic_defence_levelFinal = Magic_defence_level
	end,
	case Phy_attack_level =:= undefined of
		true ->
				Phy_attack_levelFinal = 0;
		false ->
			Phy_attack_levelFinal = Phy_attack_level
	end,
	case Magic_attack_level =:= undefined of
		true ->
				Magic_attack_levelFinal = 0;
		false ->
			Magic_attack_levelFinal = Magic_attack_level
	end,

	<<Role_idFinal:32/signed,StateFinal:32/signed,Grow_typeFinal:32/signed,Grow_over_tickFinal:32/signed,Grow_tickFinal:32/signed,Con_levelFinal:32/signed,Phy_defence_levelFinal:32/signed,Magic_defence_levelFinal:32/signed,Phy_attack_levelFinal:32/signed,Magic_attack_levelFinal:32/signed>>;
encode_p_role_pet_grow(_) -> 
	<<>>.

decode_p_role_pet_grow(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,State:32/signed,Grow_type:32/signed,Grow_over_tick:32/signed,Grow_tick:32/signed,Con_level:32/signed,Phy_defence_level:32/signed,Magic_defence_level:32/signed,Phy_attack_level:32/signed,Magic_attack_level:32/signed>> = Bin0,

	{p_role_pet_grow, Role_id,State,Grow_type,Grow_over_tick,Grow_tick,Con_level,Phy_defence_level,Magic_defence_level,Phy_attack_level,Magic_attack_level};

decode_p_role_pet_grow(_) ->
	undefined.
encode_p_grow_info(Record) when is_record(Record, p_grow_info) ->
	#p_grow_info{type=Type,level=Level,need_level=Need_level,need_silver=Need_silver,add_value=Add_value,need_tick=Need_tick,cur_add_value=Cur_add_value} = Record,
	case Type =:= undefined of
		true ->
				TypeFinal = undefined,
				exit({required_field_not_assigned, p_grow_info, type});
		false ->
			TypeFinal = Type
	end,
	case Level =:= undefined of
		true ->
				LevelFinal = 1;
		false ->
			LevelFinal = Level
	end,
	case Need_level =:= undefined of
		true ->
				Need_levelFinal = 0;
		false ->
			Need_levelFinal = Need_level
	end,
	case Need_silver =:= undefined of
		true ->
				Need_silverFinal = 0;
		false ->
			Need_silverFinal = Need_silver
	end,
	case Add_value =:= undefined of
		true ->
				Add_valueFinal = 0;
		false ->
			Add_valueFinal = Add_value
	end,
	case Need_tick =:= undefined of
		true ->
				Need_tickFinal = 0;
		false ->
			Need_tickFinal = Need_tick
	end,
	case Cur_add_value =:= undefined of
		true ->
				Cur_add_valueFinal = 0;
		false ->
			Cur_add_valueFinal = Cur_add_value
	end,

	<<TypeFinal:32/signed,LevelFinal:32/signed,Need_levelFinal:32/signed,Need_silverFinal:32/signed,Add_valueFinal:32/signed,Need_tickFinal:32/signed,Cur_add_valueFinal:32/signed>>;
encode_p_grow_info(_) -> 
	<<>>.

decode_p_grow_info(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Type:32/signed,Level:32/signed,Need_level:32/signed,Need_silver:32/signed,Add_value:32/signed,Need_tick:32/signed,Cur_add_value:32/signed>> = Bin0,

	{p_grow_info, Type,Level,Need_level,Need_silver,Add_value,Need_tick,Cur_add_value};

decode_p_grow_info(_) ->
	undefined.
encode_p_pet_refining(Record) when is_record(Record, p_pet_refining) ->
	#p_pet_refining{id=Id,exp=Exp} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, p_pet_refining, id});
		false ->
			IdFinal = Id
	end,
	case Exp =:= undefined of
		true ->
				ExpFinal = 1;
		false ->
			ExpFinal = Exp
	end,

	<<IdFinal:32/signed,ExpFinal:64/float>>;
encode_p_pet_refining(_) -> 
	<<>>.

decode_p_pet_refining(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed,Exp:64>> = Bin0,

	{p_pet_refining, Id,Exp};

decode_p_pet_refining(_) ->
	undefined.
encode_p_role_pet_egg_type_list(Record) when is_record(Record, p_role_pet_egg_type_list) ->
	#p_role_pet_egg_type_list{role_id=Role_id,type_id_list=Type_id_list,refresh_num=Refresh_num} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, p_role_pet_egg_type_list, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Type_id_list =:= undefined of
		true ->
			Type_id_listFinal = [];
		false ->
			Type_id_listFinal = Type_id_list
	end,
	case Refresh_num =:= undefined of
		true ->
				Refresh_numFinal = 0;
		false ->
			Refresh_numFinal = Refresh_num
	end,
	Type_id_list_bin = encode_int32s(Type_id_listFinal, <<>>),
	SizeType_id_listFinal = erlang:length(Type_id_listFinal),
	BinLen_type_id_list = erlang:byte_size(Type_id_list_bin),

	<<Role_idFinal:32/signed,SizeType_id_listFinal:16, BinLen_type_id_list:32, Type_id_list_bin/binary,Refresh_numFinal:32/signed>>;
encode_p_role_pet_egg_type_list(_) -> 
	<<>>.

decode_p_role_pet_egg_type_list(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,_Sizetype_id_list:16, BinLentype_id_list:32, Bin1/binary>> = Bin0,
	<<SubBintype_id_list:BinLentype_id_list/binary, Bin2/binary>> = Bin1, 
	Type_id_list = lists:reverse(decode_int32s(SubBintype_id_list, [])),
	<<Refresh_num:32/signed>> = Bin2,

	{p_role_pet_egg_type_list, Role_id,Type_id_list,Refresh_num};

decode_p_role_pet_egg_type_list(_) ->
	undefined.
encode_p_educate_fb_item(Record) when is_record(Record, p_educate_fb_item) ->
	#p_educate_fb_item{item_id=Item_id,use_tx=Use_tx,use_ty=Use_ty,role_id=Role_id,role_name=Role_name,status=Status} = Record,
	case Item_id =:= undefined of
		true ->
				Item_idFinal = undefined,
				exit({required_field_not_assigned, p_educate_fb_item, item_id});
		false ->
			Item_idFinal = Item_id
	end,
	case Use_tx =:= undefined of
		true ->
				Use_txFinal = undefined,
				exit({required_field_not_assigned, p_educate_fb_item, use_tx});
		false ->
			Use_txFinal = Use_tx
	end,
	case Use_ty =:= undefined of
		true ->
				Use_tyFinal = undefined,
				exit({required_field_not_assigned, p_educate_fb_item, use_ty});
		false ->
			Use_tyFinal = Use_ty
	end,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, p_educate_fb_item, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = undefined,
				exit({required_field_not_assigned, p_educate_fb_item, role_name});
		false ->
			Role_nameFinal = Role_name
	end,
	case Status =:= undefined of
		true ->
				StatusFinal = undefined,
				exit({required_field_not_assigned, p_educate_fb_item, status});
		false ->
			StatusFinal = Status
	end,
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),

	<<Item_idFinal:32/signed,Use_txFinal:32/signed,Use_tyFinal:32/signed,Role_idFinal:32/signed,Role_nameLen:16, Role_name2/binary,StatusFinal:32/signed>>;
encode_p_educate_fb_item(_) -> 
	<<>>.

decode_p_educate_fb_item(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Item_id:32/signed,Use_tx:32/signed,Use_ty:32/signed,Role_id:32/signed,Role_nameLen:16, Bin1/binary>> = Bin0,
	<<Role_name:Role_nameLen/binary,Status:32/signed>> = Bin1,

	{p_educate_fb_item, Item_id,Use_tx,Use_ty,Role_id,common_tool:to_list(Role_name),Status};

decode_p_educate_fb_item(_) ->
	undefined.
encode_p_educate_fb_award(Record) when is_record(Record, p_educate_fb_award) ->
	#p_educate_fb_award{min_count=Min_count,max_count=Max_count,award_number=Award_number} = Record,
	case Min_count =:= undefined of
		true ->
				Min_countFinal = undefined,
				exit({required_field_not_assigned, p_educate_fb_award, min_count});
		false ->
			Min_countFinal = Min_count
	end,
	case Max_count =:= undefined of
		true ->
				Max_countFinal = undefined,
				exit({required_field_not_assigned, p_educate_fb_award, max_count});
		false ->
			Max_countFinal = Max_count
	end,
	case Award_number =:= undefined of
		true ->
				Award_numberFinal = undefined,
				exit({required_field_not_assigned, p_educate_fb_award, award_number});
		false ->
			Award_numberFinal = Award_number
	end,

	<<Min_countFinal:32/signed,Max_countFinal:32/signed,Award_numberFinal:32/signed>>;
encode_p_educate_fb_award(_) -> 
	<<>>.

decode_p_educate_fb_award(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Min_count:32/signed,Max_count:32/signed,Award_number:32/signed>> = Bin0,

	{p_educate_fb_award, Min_count,Max_count,Award_number};

decode_p_educate_fb_award(_) ->
	undefined.
encode_p_present_info(Record) when is_record(Record, p_present_info) ->
	#p_present_info{present_id=Present_id,title=Title,is_direct_get=Is_direct_get,item_list=Item_list,npc_id=Npc_id} = Record,
	case Present_id =:= undefined of
		true ->
				Present_idFinal = undefined,
				exit({required_field_not_assigned, p_present_info, present_id});
		false ->
			Present_idFinal = Present_id
	end,
	case Title =:= undefined of
		true ->
				TitleFinal = undefined,
				exit({required_field_not_assigned, p_present_info, title});
		false ->
			TitleFinal = Title
	end,
	case Is_direct_get =:= undefined of
		true ->
				Is_direct_getFinal = 1;
		false ->
		case Is_direct_get of
			true ->
				Is_direct_getFinal = 1;
			false ->
				Is_direct_getFinal = 0
		end
	end,
	case Item_list =:= undefined of
		true ->
			Item_listFinal = [];
		false ->
			Item_listFinal = Item_list
	end,
	case Npc_id =:= undefined of
		true ->
				Npc_idFinal = 0;
		false ->
			Npc_idFinal = Npc_id
	end,
	Title2 = common_tool:to_binary(TitleFinal),
	TitleLen = erlang:byte_size(Title2),
	Item_list_bin = encode_int32s(Item_listFinal, <<>>),
	SizeItem_listFinal = erlang:length(Item_listFinal),
	BinLen_item_list = erlang:byte_size(Item_list_bin),

	<<Present_idFinal:32/signed,TitleLen:16, Title2/binary,Is_direct_getFinal:8,SizeItem_listFinal:16, BinLen_item_list:32, Item_list_bin/binary,Npc_idFinal:32/signed>>;
encode_p_present_info(_) -> 
	<<>>.

decode_p_present_info(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Present_id:32/signed,TitleLen:16, Bin1/binary>> = Bin0,
	<<Title:TitleLen/binary,Is_direct_getTmp:8,_Sizeitem_list:16, BinLenitem_list:32, Bin2/binary>> = Bin1,
	<<SubBinitem_list:BinLenitem_list/binary, Bin3/binary>> = Bin2, 
	Item_list = lists:reverse(decode_int32s(SubBinitem_list, [])),
	<<Npc_id:32/signed>> = Bin3,
case Is_direct_getTmp of 
	1 -> 
		Is_direct_get = true;
	_ ->
		Is_direct_get = false
end,

	{p_present_info, Present_id,common_tool:to_list(Title),Is_direct_get,Item_list,Npc_id};

decode_p_present_info(_) ->
	undefined.
encode_p_conlogin_reward(Record) when is_record(Record, p_conlogin_reward) ->
	#p_conlogin_reward{id=Id,type=Type,type_id=Type_id,min_level=Min_level,max_level=Max_level,need_payed=Need_payed,num=Num,silver=Silver,gold=Gold,bind=Bind,need_vip_level=Need_vip_level} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, p_conlogin_reward, id});
		false ->
			IdFinal = Id
	end,
	case Type =:= undefined of
		true ->
				TypeFinal = undefined,
				exit({required_field_not_assigned, p_conlogin_reward, type});
		false ->
			TypeFinal = Type
	end,
	case Type_id =:= undefined of
		true ->
				Type_idFinal = undefined,
				exit({required_field_not_assigned, p_conlogin_reward, type_id});
		false ->
			Type_idFinal = Type_id
	end,
	case Min_level =:= undefined of
		true ->
				Min_levelFinal = undefined,
				exit({required_field_not_assigned, p_conlogin_reward, min_level});
		false ->
			Min_levelFinal = Min_level
	end,
	case Max_level =:= undefined of
		true ->
				Max_levelFinal = undefined,
				exit({required_field_not_assigned, p_conlogin_reward, max_level});
		false ->
			Max_levelFinal = Max_level
	end,
	case Need_payed =:= undefined of
		true ->
				Need_payedFinal = undefined,
				exit({required_field_not_assigned, p_conlogin_reward, need_payed});
		false ->
		case Need_payed of
			true ->
				Need_payedFinal = 1;
			false ->
				Need_payedFinal = 0
		end
	end,
	case Num =:= undefined of
		true ->
				NumFinal = undefined,
				exit({required_field_not_assigned, p_conlogin_reward, num});
		false ->
			NumFinal = Num
	end,
	case Silver =:= undefined of
		true ->
				SilverFinal = undefined,
				exit({required_field_not_assigned, p_conlogin_reward, silver});
		false ->
			SilverFinal = Silver
	end,
	case Gold =:= undefined of
		true ->
				GoldFinal = undefined,
				exit({required_field_not_assigned, p_conlogin_reward, gold});
		false ->
			GoldFinal = Gold
	end,
	case Bind =:= undefined of
		true ->
				BindFinal = undefined,
				exit({required_field_not_assigned, p_conlogin_reward, bind});
		false ->
		case Bind of
			true ->
				BindFinal = 1;
			false ->
				BindFinal = 0
		end
	end,
	case Need_vip_level =:= undefined of
		true ->
				Need_vip_levelFinal = undefined,
				exit({required_field_not_assigned, p_conlogin_reward, need_vip_level});
		false ->
			Need_vip_levelFinal = Need_vip_level
	end,

	<<IdFinal:32/signed,TypeFinal:32/signed,Type_idFinal:32/signed,Min_levelFinal:32/signed,Max_levelFinal:32/signed,Need_payedFinal:8,NumFinal:32/signed,SilverFinal:32/signed,GoldFinal:32/signed,BindFinal:8,Need_vip_levelFinal:32/signed>>;
encode_p_conlogin_reward(_) -> 
	<<>>.

decode_p_conlogin_reward(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed,Type:32/signed,Type_id:32/signed,Min_level:32/signed,Max_level:32/signed,Need_payedTmp:8,Num:32/signed,Silver:32/signed,Gold:32/signed,BindTmp:8,Need_vip_level:32/signed>> = Bin0,
case Need_payedTmp of 
	1 -> 
		Need_payed = true;
	_ ->
		Need_payed = false
end,
case BindTmp of 
	1 -> 
		Bind = true;
	_ ->
		Bind = false
end,

	{p_conlogin_reward, Id,Type,Type_id,Min_level,Max_level,Need_payed,Num,Silver,Gold,Bind,Need_vip_level};

decode_p_conlogin_reward(_) ->
	undefined.
encode_p_accumulate_exp_info(Record) when is_record(Record, p_accumulate_exp_info) ->
	#p_accumulate_exp_info{id=Id,day=Day,exp=Exp,max_exp=Max_exp,times_per_day=Times_per_day,need_gold=Need_gold,status=Status,next_exp=Next_exp,rate=Rate} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, p_accumulate_exp_info, id});
		false ->
			IdFinal = Id
	end,
	case Day =:= undefined of
		true ->
				DayFinal = 0;
		false ->
			DayFinal = Day
	end,
	case Exp =:= undefined of
		true ->
				ExpFinal = 0.0;
		false ->
			ExpFinal = Exp
	end,
	case Max_exp =:= undefined of
		true ->
				Max_expFinal = 0.0;
		false ->
			Max_expFinal = Max_exp
	end,
	case Times_per_day =:= undefined of
		true ->
				Times_per_dayFinal = 0;
		false ->
			Times_per_dayFinal = Times_per_day
	end,
	case Need_gold =:= undefined of
		true ->
				Need_goldFinal = 0;
		false ->
			Need_goldFinal = Need_gold
	end,
	case Status =:= undefined of
		true ->
				StatusFinal = 0;
		false ->
			StatusFinal = Status
	end,
	case Next_exp =:= undefined of
		true ->
				Next_expFinal = 0.0;
		false ->
			Next_expFinal = Next_exp
	end,
	case Rate =:= undefined of
		true ->
				RateFinal = 0;
		false ->
			RateFinal = Rate
	end,

	<<IdFinal:32/signed,DayFinal:32/signed,ExpFinal:64/float,Max_expFinal:64/float,Times_per_dayFinal:32/signed,Need_goldFinal:32/signed,StatusFinal:32/signed,Next_expFinal:64/float,RateFinal:32/signed>>;
encode_p_accumulate_exp_info(_) -> 
	<<>>.

decode_p_accumulate_exp_info(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed,Day:32/signed,Exp:64,Max_exp:64,Times_per_day:32/signed,Need_gold:32/signed,Status:32/signed,Next_exp:64,Rate:32/signed>> = Bin0,

	{p_accumulate_exp_info, Id,Day,Exp,Max_exp,Times_per_day,Need_gold,Status,Next_exp,Rate};

decode_p_accumulate_exp_info(_) ->
	undefined.
encode_p_fml_buff(Record) when is_record(Record, p_fml_buff) ->
	#p_fml_buff{fml_buff_id=Fml_buff_id,level=Level} = Record,
	case Fml_buff_id =:= undefined of
		true ->
				Fml_buff_idFinal = undefined,
				exit({required_field_not_assigned, p_fml_buff, fml_buff_id});
		false ->
			Fml_buff_idFinal = Fml_buff_id
	end,
	case Level =:= undefined of
		true ->
				LevelFinal = undefined,
				exit({required_field_not_assigned, p_fml_buff, level});
		false ->
			LevelFinal = Level
	end,

	<<Fml_buff_idFinal:32/signed,LevelFinal:32/signed>>;
encode_p_fml_buff(_) -> 
	<<>>.

decode_p_fml_buff(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Fml_buff_id:32/signed,Level:32/signed>> = Bin0,

	{p_fml_buff, Fml_buff_id,Level};

decode_p_fml_buff(_) ->
	undefined.
encode_p_role_vip(Record) when is_record(Record, p_role_vip) ->
	#p_role_vip{role_id=Role_id,end_time=End_time,total_time=Total_time,vip_level=Vip_level,multi_exp_times=Multi_exp_times,accumulate_exp_times=Accumulate_exp_times,mission_transfer_times=Mission_transfer_times,is_transfer_notice_free=Is_transfer_notice_free,is_transfer_notice=Is_transfer_notice,last_reset_time=Last_reset_time,is_expire=Is_expire,pet_training_times=Pet_training_times,remote_depot_num=Remote_depot_num,last_get_prestige_time=Last_get_prestige_time} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, p_role_vip, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case End_time =:= undefined of
		true ->
				End_timeFinal = undefined,
				exit({required_field_not_assigned, p_role_vip, end_time});
		false ->
			End_timeFinal = End_time
	end,
	case Total_time =:= undefined of
		true ->
				Total_timeFinal = undefined,
				exit({required_field_not_assigned, p_role_vip, total_time});
		false ->
			Total_timeFinal = Total_time
	end,
	case Vip_level =:= undefined of
		true ->
				Vip_levelFinal = undefined,
				exit({required_field_not_assigned, p_role_vip, vip_level});
		false ->
			Vip_levelFinal = Vip_level
	end,
	case Multi_exp_times =:= undefined of
		true ->
				Multi_exp_timesFinal = undefined,
				exit({required_field_not_assigned, p_role_vip, multi_exp_times});
		false ->
			Multi_exp_timesFinal = Multi_exp_times
	end,
	case Accumulate_exp_times =:= undefined of
		true ->
				Accumulate_exp_timesFinal = undefined,
				exit({required_field_not_assigned, p_role_vip, accumulate_exp_times});
		false ->
			Accumulate_exp_timesFinal = Accumulate_exp_times
	end,
	case Mission_transfer_times =:= undefined of
		true ->
				Mission_transfer_timesFinal = undefined,
				exit({required_field_not_assigned, p_role_vip, mission_transfer_times});
		false ->
			Mission_transfer_timesFinal = Mission_transfer_times
	end,
	case Is_transfer_notice_free =:= undefined of
		true ->
				Is_transfer_notice_freeFinal = undefined,
				exit({required_field_not_assigned, p_role_vip, is_transfer_notice_free});
		false ->
		case Is_transfer_notice_free of
			true ->
				Is_transfer_notice_freeFinal = 1;
			false ->
				Is_transfer_notice_freeFinal = 0
		end
	end,
	case Is_transfer_notice =:= undefined of
		true ->
				Is_transfer_noticeFinal = undefined,
				exit({required_field_not_assigned, p_role_vip, is_transfer_notice});
		false ->
		case Is_transfer_notice of
			true ->
				Is_transfer_noticeFinal = 1;
			false ->
				Is_transfer_noticeFinal = 0
		end
	end,
	case Last_reset_time =:= undefined of
		true ->
				Last_reset_timeFinal = undefined,
				exit({required_field_not_assigned, p_role_vip, last_reset_time});
		false ->
			Last_reset_timeFinal = Last_reset_time
	end,
	case Is_expire =:= undefined of
		true ->
				Is_expireFinal = undefined,
				exit({required_field_not_assigned, p_role_vip, is_expire});
		false ->
		case Is_expire of
			true ->
				Is_expireFinal = 1;
			false ->
				Is_expireFinal = 0
		end
	end,
	case Pet_training_times =:= undefined of
		true ->
				Pet_training_timesFinal = undefined,
				exit({required_field_not_assigned, p_role_vip, pet_training_times});
		false ->
			Pet_training_timesFinal = Pet_training_times
	end,
	case Remote_depot_num =:= undefined of
		true ->
				Remote_depot_numFinal = undefined,
				exit({required_field_not_assigned, p_role_vip, remote_depot_num});
		false ->
			Remote_depot_numFinal = Remote_depot_num
	end,
	case Last_get_prestige_time =:= undefined of
		true ->
				Last_get_prestige_timeFinal = 0;
		false ->
			Last_get_prestige_timeFinal = Last_get_prestige_time
	end,

	<<Role_idFinal:32/signed,End_timeFinal:32/signed,Total_timeFinal:32/signed,Vip_levelFinal:32/signed,Multi_exp_timesFinal:32/signed,Accumulate_exp_timesFinal:32/signed,Mission_transfer_timesFinal:32/signed,Is_transfer_notice_freeFinal:8,Is_transfer_noticeFinal:8,Last_reset_timeFinal:32/signed,Is_expireFinal:8,Pet_training_timesFinal:32/signed,Remote_depot_numFinal:32/signed,Last_get_prestige_timeFinal:32/signed>>;
encode_p_role_vip(_) -> 
	<<>>.

decode_p_role_vip(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,End_time:32/signed,Total_time:32/signed,Vip_level:32/signed,Multi_exp_times:32/signed,Accumulate_exp_times:32/signed,Mission_transfer_times:32/signed,Is_transfer_notice_freeTmp:8,Is_transfer_noticeTmp:8,Last_reset_time:32/signed,Is_expireTmp:8,Pet_training_times:32/signed,Remote_depot_num:32/signed,Last_get_prestige_time:32/signed>> = Bin0,
case Is_transfer_notice_freeTmp of 
	1 -> 
		Is_transfer_notice_free = true;
	_ ->
		Is_transfer_notice_free = false
end,
case Is_transfer_noticeTmp of 
	1 -> 
		Is_transfer_notice = true;
	_ ->
		Is_transfer_notice = false
end,
case Is_expireTmp of 
	1 -> 
		Is_expire = true;
	_ ->
		Is_expire = false
end,

	{p_role_vip, Role_id,End_time,Total_time,Vip_level,Multi_exp_times,Accumulate_exp_times,Mission_transfer_times,Is_transfer_notice_free,Is_transfer_notice,Last_reset_time,Is_expire,Pet_training_times,Remote_depot_num,Last_get_prestige_time};

decode_p_role_vip(_) ->
	undefined.
encode_p_vip_list_info(Record) when is_record(Record, p_vip_list_info) ->
	#p_vip_list_info{role_id=Role_id,role_name=Role_name,skin_id=Skin_id,level=Level,faction_id=Faction_id,family_name=Family_name,total_time=Total_time,is_online=Is_online} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, p_vip_list_info, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = undefined,
				exit({required_field_not_assigned, p_vip_list_info, role_name});
		false ->
			Role_nameFinal = Role_name
	end,
	case Skin_id =:= undefined of
		true ->
				Skin_idFinal = undefined,
				exit({required_field_not_assigned, p_vip_list_info, skin_id});
		false ->
			Skin_idFinal = Skin_id
	end,
	case Level =:= undefined of
		true ->
				LevelFinal = undefined,
				exit({required_field_not_assigned, p_vip_list_info, level});
		false ->
			LevelFinal = Level
	end,
	case Faction_id =:= undefined of
		true ->
				Faction_idFinal = undefined,
				exit({required_field_not_assigned, p_vip_list_info, faction_id});
		false ->
			Faction_idFinal = Faction_id
	end,
	case Family_name =:= undefined of
		true ->
				Family_nameFinal = undefined,
				exit({required_field_not_assigned, p_vip_list_info, family_name});
		false ->
			Family_nameFinal = Family_name
	end,
	case Total_time =:= undefined of
		true ->
				Total_timeFinal = undefined,
				exit({required_field_not_assigned, p_vip_list_info, total_time});
		false ->
			Total_timeFinal = Total_time
	end,
	case Is_online =:= undefined of
		true ->
				Is_onlineFinal = undefined,
				exit({required_field_not_assigned, p_vip_list_info, is_online});
		false ->
		case Is_online of
			true ->
				Is_onlineFinal = 1;
			false ->
				Is_onlineFinal = 0
		end
	end,
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),
	Family_name2 = common_tool:to_binary(Family_nameFinal),
	Family_nameLen = erlang:byte_size(Family_name2),

	<<Role_idFinal:32/signed,Role_nameLen:16, Role_name2/binary,Skin_idFinal:32/signed,LevelFinal:32/signed,Faction_idFinal:32/signed,Family_nameLen:16, Family_name2/binary,Total_timeFinal:32/signed,Is_onlineFinal:8>>;
encode_p_vip_list_info(_) -> 
	<<>>.

decode_p_vip_list_info(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,Role_nameLen:16, Bin1/binary>> = Bin0,
	<<Role_name:Role_nameLen/binary,Skin_id:32/signed,Level:32/signed,Faction_id:32/signed,Family_nameLen:16, Bin2/binary>> = Bin1,
	<<Family_name:Family_nameLen/binary,Total_time:32/signed,Is_onlineTmp:8>> = Bin2,
case Is_onlineTmp of 
	1 -> 
		Is_online = true;
	_ ->
		Is_online = false
end,

	{p_vip_list_info, Role_id,common_tool:to_list(Role_name),Skin_id,Level,Faction_id,common_tool:to_list(Family_name),Total_time,Is_online};

decode_p_vip_list_info(_) ->
	undefined.
encode_p_fmldepot_log(Record) when is_record(Record, p_fmldepot_log) ->
	#p_fmldepot_log{log_time=Log_time,role_name=Role_name,item_type_id=Item_type_id,item_color=Item_color,item_num=Item_num} = Record,
	case Log_time =:= undefined of
		true ->
				Log_timeFinal = undefined,
				exit({required_field_not_assigned, p_fmldepot_log, log_time});
		false ->
			Log_timeFinal = Log_time
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = undefined,
				exit({required_field_not_assigned, p_fmldepot_log, role_name});
		false ->
			Role_nameFinal = Role_name
	end,
	case Item_type_id =:= undefined of
		true ->
				Item_type_idFinal = undefined,
				exit({required_field_not_assigned, p_fmldepot_log, item_type_id});
		false ->
			Item_type_idFinal = Item_type_id
	end,
	case Item_color =:= undefined of
		true ->
				Item_colorFinal = undefined,
				exit({required_field_not_assigned, p_fmldepot_log, item_color});
		false ->
			Item_colorFinal = Item_color
	end,
	case Item_num =:= undefined of
		true ->
				Item_numFinal = undefined,
				exit({required_field_not_assigned, p_fmldepot_log, item_num});
		false ->
			Item_numFinal = Item_num
	end,
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),

	<<Log_timeFinal:32/signed,Role_nameLen:16, Role_name2/binary,Item_type_idFinal:32/signed,Item_colorFinal:32/signed,Item_numFinal:32/signed>>;
encode_p_fmldepot_log(_) -> 
	<<>>.

decode_p_fmldepot_log(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Log_time:32/signed,Role_nameLen:16, Bin1/binary>> = Bin0,
	<<Role_name:Role_nameLen/binary,Item_type_id:32/signed,Item_color:32/signed,Item_num:32/signed>> = Bin1,

	{p_fmldepot_log, Log_time,common_tool:to_list(Role_name),Item_type_id,Item_color,Item_num};

decode_p_fmldepot_log(_) ->
	undefined.
encode_p_fmldepot_bag(Record) when is_record(Record, p_fmldepot_bag) ->
	#p_fmldepot_bag{bag_id=Bag_id,goods_list=Goods_list} = Record,
	case Bag_id =:= undefined of
		true ->
				Bag_idFinal = undefined,
				exit({required_field_not_assigned, p_fmldepot_bag, bag_id});
		false ->
			Bag_idFinal = Bag_id
	end,
	case Goods_list =:= undefined of
		true ->
			Goods_listFinal = [];
		false ->
			Goods_listFinal = Goods_list
	end,
	Goods_list_bin = encode_p_goodss(Goods_listFinal, <<>>),
	SizeGoods_listFinal = erlang:length(Goods_listFinal),
	BinLen_goods_list = erlang:byte_size(Goods_list_bin),

	<<Bag_idFinal:32/signed,SizeGoods_listFinal:16, BinLen_goods_list:32, Goods_list_bin/binary>>;
encode_p_fmldepot_bag(_) -> 
	<<>>.

decode_p_fmldepot_bag(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Bag_id:32/signed,_Sizegoods_list:16, _BinLengoods_list:32, SubBingoods_list/binary>> = Bin0,
	Goods_list = lists:reverse(decode_p_goodss(SubBingoods_list, [])),

	{p_fmldepot_bag, Bag_id,Goods_list};

decode_p_fmldepot_bag(_) ->
	undefined.
encode_p_equip_mount_renewal(Record) when is_record(Record, p_equip_mount_renewal) ->
	#p_equip_mount_renewal{type_id=Type_id,renewal_type=Renewal_type,renewal_days=Renewal_days,renewal_fee=Renewal_fee} = Record,
	case Type_id =:= undefined of
		true ->
				Type_idFinal = undefined,
				exit({required_field_not_assigned, p_equip_mount_renewal, type_id});
		false ->
			Type_idFinal = Type_id
	end,
	case Renewal_type =:= undefined of
		true ->
				Renewal_typeFinal = 0;
		false ->
			Renewal_typeFinal = Renewal_type
	end,
	case Renewal_days =:= undefined of
		true ->
				Renewal_daysFinal = 0;
		false ->
			Renewal_daysFinal = Renewal_days
	end,
	case Renewal_fee =:= undefined of
		true ->
				Renewal_feeFinal = 0;
		false ->
			Renewal_feeFinal = Renewal_fee
	end,

	<<Type_idFinal:32/signed,Renewal_typeFinal:32/signed,Renewal_daysFinal:32/signed,Renewal_feeFinal:32/signed>>;
encode_p_equip_mount_renewal(_) -> 
	<<>>.

decode_p_equip_mount_renewal(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Type_id:32/signed,Renewal_type:32/signed,Renewal_days:32/signed,Renewal_fee:32/signed>> = Bin0,

	{p_equip_mount_renewal, Type_id,Renewal_type,Renewal_days,Renewal_fee};

decode_p_equip_mount_renewal(_) ->
	undefined.
encode_p_scene_war_fb_link(Record) when is_record(Record, p_scene_war_fb_link) ->
	#p_scene_war_fb_link{fb_type=Fb_type,fb_level=Fb_level,fb_id=Fb_id,fb_seconds=Fb_seconds,enter_fee=Enter_fee,fb_times=Fb_times,fb_max_times=Fb_max_times} = Record,
	case Fb_type =:= undefined of
		true ->
				Fb_typeFinal = 0;
		false ->
			Fb_typeFinal = Fb_type
	end,
	case Fb_level =:= undefined of
		true ->
				Fb_levelFinal = 0;
		false ->
			Fb_levelFinal = Fb_level
	end,
	case Fb_id =:= undefined of
		true ->
				Fb_idFinal = 0;
		false ->
			Fb_idFinal = Fb_id
	end,
	case Fb_seconds =:= undefined of
		true ->
				Fb_secondsFinal = 0;
		false ->
			Fb_secondsFinal = Fb_seconds
	end,
	case Enter_fee =:= undefined of
		true ->
				Enter_feeFinal = 0;
		false ->
			Enter_feeFinal = Enter_fee
	end,
	case Fb_times =:= undefined of
		true ->
				Fb_timesFinal = 0;
		false ->
			Fb_timesFinal = Fb_times
	end,
	case Fb_max_times =:= undefined of
		true ->
				Fb_max_timesFinal = 0;
		false ->
			Fb_max_timesFinal = Fb_max_times
	end,

	<<Fb_typeFinal:32/signed,Fb_levelFinal:32/signed,Fb_idFinal:32/signed,Fb_secondsFinal:32/signed,Enter_feeFinal:32/signed,Fb_timesFinal:32/signed,Fb_max_timesFinal:32/signed>>;
encode_p_scene_war_fb_link(_) -> 
	<<>>.

decode_p_scene_war_fb_link(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Fb_type:32/signed,Fb_level:32/signed,Fb_id:32/signed,Fb_seconds:32/signed,Enter_fee:32/signed,Fb_times:32/signed,Fb_max_times:32/signed>> = Bin0,

	{p_scene_war_fb_link, Fb_type,Fb_level,Fb_id,Fb_seconds,Enter_fee,Fb_times,Fb_max_times};

decode_p_scene_war_fb_link(_) ->
	undefined.
encode_p_scene_war_fb_role_info(Record) when is_record(Record, p_scene_war_fb_role_info) ->
	#p_scene_war_fb_role_info{roleid=Roleid,name=Name,level=Level} = Record,
	case Roleid =:= undefined of
		true ->
				RoleidFinal = undefined,
				exit({required_field_not_assigned, p_scene_war_fb_role_info, roleid});
		false ->
			RoleidFinal = Roleid
	end,
	case Name =:= undefined of
		true ->
				NameFinal = undefined,
				exit({required_field_not_assigned, p_scene_war_fb_role_info, name});
		false ->
			NameFinal = Name
	end,
	case Level =:= undefined of
		true ->
				LevelFinal = undefined,
				exit({required_field_not_assigned, p_scene_war_fb_role_info, level});
		false ->
			LevelFinal = Level
	end,
	Name2 = common_tool:to_binary(NameFinal),
	NameLen = erlang:byte_size(Name2),

	<<RoleidFinal:32/signed,NameLen:16, Name2/binary,LevelFinal:32/signed>>;
encode_p_scene_war_fb_role_info(_) -> 
	<<>>.

decode_p_scene_war_fb_role_info(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Roleid:32/signed,NameLen:16, Bin1/binary>> = Bin0,
	<<Name:NameLen/binary,Level:32/signed>> = Bin1,

	{p_scene_war_fb_role_info, Roleid,common_tool:to_list(Name),Level};

decode_p_scene_war_fb_role_info(_) ->
	undefined.
encode_p_scene_war_fb_team_info(Record) when is_record(Record, p_scene_war_fb_team_info) ->
	#p_scene_war_fb_team_info{teamid=Teamid,leader=Leader,members=Members,fb_type=Fb_type,fb_level=Fb_level,faction=Faction,creator=Creator} = Record,
	case Teamid =:= undefined of
		true ->
				TeamidFinal = undefined,
				exit({required_field_not_assigned, p_scene_war_fb_team_info, teamid});
		false ->
			TeamidFinal = Teamid
	end,
	case Leader =:= undefined of
		true ->
				LeaderFinal = 0;
		false ->
			LeaderFinal = Leader
	end,
	case Members =:= undefined of
		true ->
			MembersFinal = [];
		false ->
			MembersFinal = Members
	end,
	case Fb_type =:= undefined of
		true ->
				Fb_typeFinal = undefined,
				exit({required_field_not_assigned, p_scene_war_fb_team_info, fb_type});
		false ->
			Fb_typeFinal = Fb_type
	end,
	case Fb_level =:= undefined of
		true ->
				Fb_levelFinal = undefined,
				exit({required_field_not_assigned, p_scene_war_fb_team_info, fb_level});
		false ->
			Fb_levelFinal = Fb_level
	end,
	case Faction =:= undefined of
		true ->
				FactionFinal = undefined,
				exit({required_field_not_assigned, p_scene_war_fb_team_info, faction});
		false ->
			FactionFinal = Faction
	end,
	case Creator =:= undefined of
		true ->
				CreatorFinal = undefined,
				exit({required_field_not_assigned, p_scene_war_fb_team_info, creator});
		false ->
			CreatorFinal = Creator
	end,
	Leader_bin = encode_p_scene_war_fb_role_info(LeaderFinal),
	BinLen_leader = erlang:byte_size(Leader_bin),
	Members_bin = encode_p_scene_war_fb_role_infos(MembersFinal, <<>>),
	SizeMembersFinal = erlang:length(MembersFinal),
	BinLen_members = erlang:byte_size(Members_bin),

	<<TeamidFinal:32/signed,BinLen_leader:32, Leader_bin/binary,SizeMembersFinal:16, BinLen_members:32, Members_bin/binary,Fb_typeFinal:32/signed,Fb_levelFinal:32/signed,FactionFinal:32/signed,CreatorFinal:32/signed>>;
encode_p_scene_war_fb_team_info(_) -> 
	<<>>.

decode_p_scene_war_fb_team_info(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Teamid:32/signed,SubBinSizeleader:32, Bin1/binary>> = Bin0,
	<<SubBinleader:SubBinSizeleader/binary, Bin2/binary>> = Bin1,
	Leader = decode_p_scene_war_fb_role_info(SubBinleader),
	<<_Sizemembers:16, BinLenmembers:32, Bin3/binary>> = Bin2,
	<<SubBinmembers:BinLenmembers/binary, Bin4/binary>> = Bin3, 
	Members = lists:reverse(decode_p_scene_war_fb_role_infos(SubBinmembers, [])),
	<<Fb_type:32/signed,Fb_level:32/signed,Faction:32/signed,Creator:32/signed>> = Bin4,

	{p_scene_war_fb_team_info, Teamid,Leader,Members,Fb_type,Fb_level,Faction,Creator};

decode_p_scene_war_fb_team_info(_) ->
	undefined.
encode_p_family_collect_role_prize_info(Record) when is_record(Record, p_family_collect_role_prize_info) ->
	#p_family_collect_role_prize_info{role_id=Role_id,color=Color,base_exp=Base_exp,total_score=Total_score} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, p_family_collect_role_prize_info, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Color =:= undefined of
		true ->
				ColorFinal = 1;
		false ->
			ColorFinal = Color
	end,
	case Base_exp =:= undefined of
		true ->
				Base_expFinal = 0;
		false ->
			Base_expFinal = Base_exp
	end,
	case Total_score =:= undefined of
		true ->
				Total_scoreFinal = 0;
		false ->
			Total_scoreFinal = Total_score
	end,

	<<Role_idFinal:32/signed,ColorFinal:32/signed,Base_expFinal:32/signed,Total_scoreFinal:32/signed>>;
encode_p_family_collect_role_prize_info(_) -> 
	<<>>.

decode_p_family_collect_role_prize_info(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,Color:32/signed,Base_exp:32/signed,Total_score:32/signed>> = Bin0,

	{p_family_collect_role_prize_info, Role_id,Color,Base_exp,Total_score};

decode_p_family_collect_role_prize_info(_) ->
	undefined.
encode_p_gift_goods(Record) when is_record(Record, p_gift_goods) ->
	#p_gift_goods{id=Id,type=Type,typeid=Typeid,bind=Bind,start_time=Start_time,end_time=End_time,num=Num,rate=Rate,color=Color} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, p_gift_goods, id});
		false ->
			IdFinal = Id
	end,
	case Type =:= undefined of
		true ->
				TypeFinal = undefined,
				exit({required_field_not_assigned, p_gift_goods, type});
		false ->
			TypeFinal = Type
	end,
	case Typeid =:= undefined of
		true ->
				TypeidFinal = undefined,
				exit({required_field_not_assigned, p_gift_goods, typeid});
		false ->
			TypeidFinal = Typeid
	end,
	case Bind =:= undefined of
		true ->
				BindFinal = undefined,
				exit({required_field_not_assigned, p_gift_goods, bind});
		false ->
		case Bind of
			true ->
				BindFinal = 1;
			false ->
				BindFinal = 0
		end
	end,
	case Start_time =:= undefined of
		true ->
				Start_timeFinal = undefined,
				exit({required_field_not_assigned, p_gift_goods, start_time});
		false ->
			Start_timeFinal = Start_time
	end,
	case End_time =:= undefined of
		true ->
				End_timeFinal = undefined,
				exit({required_field_not_assigned, p_gift_goods, end_time});
		false ->
			End_timeFinal = End_time
	end,
	case Num =:= undefined of
		true ->
				NumFinal = undefined,
				exit({required_field_not_assigned, p_gift_goods, num});
		false ->
			NumFinal = Num
	end,
	case Rate =:= undefined of
		true ->
				RateFinal = undefined,
				exit({required_field_not_assigned, p_gift_goods, rate});
		false ->
			RateFinal = Rate
	end,
	case Color =:= undefined of
		true ->
				ColorFinal = undefined,
				exit({required_field_not_assigned, p_gift_goods, color});
		false ->
			ColorFinal = Color
	end,

	<<IdFinal:32/signed,TypeFinal:32/signed,TypeidFinal:32/signed,BindFinal:8,Start_timeFinal:32/signed,End_timeFinal:32/signed,NumFinal:32/signed,RateFinal:32/signed,ColorFinal:32/signed>>;
encode_p_gift_goods(_) -> 
	<<>>.

decode_p_gift_goods(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed,Type:32/signed,Typeid:32/signed,BindTmp:8,Start_time:32/signed,End_time:32/signed,Num:32/signed,Rate:32/signed,Color:32/signed>> = Bin0,
case BindTmp of 
	1 -> 
		Bind = true;
	_ ->
		Bind = false
end,

	{p_gift_goods, Id,Type,Typeid,Bind,Start_time,End_time,Num,Rate,Color};

decode_p_gift_goods(_) ->
	undefined.
encode_p_map_bonfire(Record) when is_record(Record, p_map_bonfire) ->
	#p_map_bonfire{id=Id,state=State,pos=Pos,start_time=Start_time,end_time=End_time,rate=Rate,members=Members,fagot=Fagot} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, p_map_bonfire, id});
		false ->
			IdFinal = Id
	end,
	case State =:= undefined of
		true ->
				StateFinal = undefined,
				exit({required_field_not_assigned, p_map_bonfire, state});
		false ->
			StateFinal = State
	end,
	case Pos =:= undefined of
		true ->
				PosFinal = undefined,
				exit({required_field_not_assigned, p_map_bonfire, pos});
		false ->
			PosFinal = Pos
	end,
	case Start_time =:= undefined of
		true ->
				Start_timeFinal = undefined,
				exit({required_field_not_assigned, p_map_bonfire, start_time});
		false ->
			Start_timeFinal = Start_time
	end,
	case End_time =:= undefined of
		true ->
				End_timeFinal = undefined,
				exit({required_field_not_assigned, p_map_bonfire, end_time});
		false ->
			End_timeFinal = End_time
	end,
	case Rate =:= undefined of
		true ->
				RateFinal = undefined,
				exit({required_field_not_assigned, p_map_bonfire, rate});
		false ->
			RateFinal = Rate
	end,
	case Members =:= undefined of
		true ->
				MembersFinal = 0;
		false ->
			MembersFinal = Members
	end,
	case Fagot =:= undefined of
		true ->
				FagotFinal = 0;
		false ->
			FagotFinal = Fagot
	end,
	Pos_bin = encode_p_pos(PosFinal),
	BinLen_pos = erlang:byte_size(Pos_bin),

	<<IdFinal:32/signed,StateFinal:32/signed,BinLen_pos:32, Pos_bin/binary,Start_timeFinal:32/signed,End_timeFinal:32/signed,RateFinal:32/signed,MembersFinal:32/signed,FagotFinal:32/signed>>;
encode_p_map_bonfire(_) -> 
	<<>>.

decode_p_map_bonfire(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed,State:32/signed,SubBinSizepos:32, Bin1/binary>> = Bin0,
	<<SubBinpos:SubBinSizepos/binary, Bin2/binary>> = Bin1,
	Pos = decode_p_pos(SubBinpos),
	<<Start_time:32/signed,End_time:32/signed,Rate:32/signed,Members:32/signed,Fagot:32/signed>> = Bin2,

	{p_map_bonfire, Id,State,Pos,Start_time,End_time,Rate,Members,Fagot};

decode_p_map_bonfire(_) ->
	undefined.
encode_p_family_task(Record) when is_record(Record, p_family_task) ->
	#p_family_task{id=Id,status=Status} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, p_family_task, id});
		false ->
			IdFinal = Id
	end,
	case Status =:= undefined of
		true ->
				StatusFinal = 0;
		false ->
			StatusFinal = Status
	end,

	<<IdFinal:32/signed,StatusFinal:32/signed>>;
encode_p_family_task(_) -> 
	<<>>.

decode_p_family_task(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed,Status:32/signed>> = Bin0,

	{p_family_task, Id,Status};

decode_p_family_task(_) ->
	undefined.
encode_p_role_hero_fb_info(Record) when is_record(Record, p_role_hero_fb_info) ->
	#p_role_hero_fb_info{role_id=Role_id,last_enter_time=Last_enter_time,today_count=Today_count,progress=Progress,rewards=Rewards,fb_record=Fb_record,max_enter_times=Max_enter_times,buy_count=Buy_count,enter_mapid=Enter_mapid,enter_pos=Enter_pos,fail_code=Fail_code} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, p_role_hero_fb_info, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Last_enter_time =:= undefined of
		true ->
				Last_enter_timeFinal = 0;
		false ->
			Last_enter_timeFinal = Last_enter_time
	end,
	case Today_count =:= undefined of
		true ->
				Today_countFinal = undefined,
				exit({required_field_not_assigned, p_role_hero_fb_info, today_count});
		false ->
			Today_countFinal = Today_count
	end,
	case Progress =:= undefined of
		true ->
				ProgressFinal = 0;
		false ->
			ProgressFinal = Progress
	end,
	case Rewards =:= undefined of
		true ->
			RewardsFinal = [];
		false ->
			RewardsFinal = Rewards
	end,
	case Fb_record =:= undefined of
		true ->
			Fb_recordFinal = [];
		false ->
			Fb_recordFinal = Fb_record
	end,
	case Max_enter_times =:= undefined of
		true ->
				Max_enter_timesFinal = 0;
		false ->
			Max_enter_timesFinal = Max_enter_times
	end,
	case Buy_count =:= undefined of
		true ->
				Buy_countFinal = 0;
		false ->
			Buy_countFinal = Buy_count
	end,
	case Enter_mapid =:= undefined of
		true ->
				Enter_mapidFinal = 0;
		false ->
			Enter_mapidFinal = Enter_mapid
	end,
	case Enter_pos =:= undefined of
		true ->
				Enter_posFinal = 0;
		false ->
			Enter_posFinal = Enter_pos
	end,
	case Fail_code =:= undefined of
		true ->
				Fail_codeFinal = 1;
		false ->
			Fail_codeFinal = Fail_code
	end,
	Rewards_bin = encode_int32s(RewardsFinal, <<>>),
	SizeRewardsFinal = erlang:length(RewardsFinal),
	BinLen_rewards = erlang:byte_size(Rewards_bin),
	Fb_record_bin = encode_p_hero_fb_barriers(Fb_recordFinal, <<>>),
	SizeFb_recordFinal = erlang:length(Fb_recordFinal),
	BinLen_fb_record = erlang:byte_size(Fb_record_bin),
	Enter_pos_bin = encode_p_pos(Enter_posFinal),
	BinLen_enter_pos = erlang:byte_size(Enter_pos_bin),

	<<Role_idFinal:32/signed,Last_enter_timeFinal:32/signed,Today_countFinal:32/signed,ProgressFinal:32/signed,SizeRewardsFinal:16, BinLen_rewards:32, Rewards_bin/binary,SizeFb_recordFinal:16, BinLen_fb_record:32, Fb_record_bin/binary,Max_enter_timesFinal:32/signed,Buy_countFinal:32/signed,Enter_mapidFinal:32/signed,BinLen_enter_pos:32, Enter_pos_bin/binary,Fail_codeFinal:32/signed>>;
encode_p_role_hero_fb_info(_) -> 
	<<>>.

decode_p_role_hero_fb_info(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,Last_enter_time:32/signed,Today_count:32/signed,Progress:32/signed,_Sizerewards:16, BinLenrewards:32, Bin1/binary>> = Bin0,
	<<SubBinrewards:BinLenrewards/binary, Bin2/binary>> = Bin1, 
	Rewards = lists:reverse(decode_int32s(SubBinrewards, [])),
	<<_Sizefb_record:16, BinLenfb_record:32, Bin3/binary>> = Bin2,
	<<SubBinfb_record:BinLenfb_record/binary, Bin4/binary>> = Bin3, 
	Fb_record = lists:reverse(decode_p_hero_fb_barriers(SubBinfb_record, [])),
	<<Max_enter_times:32/signed,Buy_count:32/signed,Enter_mapid:32/signed,SubBinSizeenter_pos:32, Bin5/binary>> = Bin4,
	<<SubBinenter_pos:SubBinSizeenter_pos/binary, Bin6/binary>> = Bin5,
	Enter_pos = decode_p_pos(SubBinenter_pos),
	<<Fail_code:32/signed>> = Bin6,

	{p_role_hero_fb_info, Role_id,Last_enter_time,Today_count,Progress,Rewards,Fb_record,Max_enter_times,Buy_count,Enter_mapid,Enter_pos,Fail_code};

decode_p_role_hero_fb_info(_) ->
	undefined.
encode_p_hero_fb_barrier(Record) when is_record(Record, p_hero_fb_barrier) ->
	#p_hero_fb_barrier{barrier_id=Barrier_id,time_used=Time_used,star_level=Star_level,score=Score,fight_times=Fight_times,order=Order} = Record,
	case Barrier_id =:= undefined of
		true ->
				Barrier_idFinal = undefined,
				exit({required_field_not_assigned, p_hero_fb_barrier, barrier_id});
		false ->
			Barrier_idFinal = Barrier_id
	end,
	case Time_used =:= undefined of
		true ->
				Time_usedFinal = 0;
		false ->
			Time_usedFinal = Time_used
	end,
	case Star_level =:= undefined of
		true ->
				Star_levelFinal = 0;
		false ->
			Star_levelFinal = Star_level
	end,
	case Score =:= undefined of
		true ->
				ScoreFinal = 0;
		false ->
			ScoreFinal = Score
	end,
	case Fight_times =:= undefined of
		true ->
				Fight_timesFinal = 0;
		false ->
			Fight_timesFinal = Fight_times
	end,
	case Order =:= undefined of
		true ->
				OrderFinal = 0;
		false ->
			OrderFinal = Order
	end,

	<<Barrier_idFinal:32/signed,Time_usedFinal:32/signed,Star_levelFinal:32/signed,ScoreFinal:32/signed,Fight_timesFinal:32/signed,OrderFinal:32/signed>>;
encode_p_hero_fb_barrier(_) -> 
	<<>>.

decode_p_hero_fb_barrier(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Barrier_id:32/signed,Time_used:32/signed,Star_level:32/signed,Score:32/signed,Fight_times:32/signed,Order:32/signed>> = Bin0,

	{p_hero_fb_barrier, Barrier_id,Time_used,Star_level,Score,Fight_times,Order};

decode_p_hero_fb_barrier(_) ->
	undefined.
encode_p_hero_fb_record(Record) when is_record(Record, p_hero_fb_record) ->
	#p_hero_fb_record{role_id=Role_id,role_name=Role_name,faction_id=Faction_id,time_used=Time_used,score=Score,star_level=Star_level,order=Order} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, p_hero_fb_record, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = undefined,
				exit({required_field_not_assigned, p_hero_fb_record, role_name});
		false ->
			Role_nameFinal = Role_name
	end,
	case Faction_id =:= undefined of
		true ->
				Faction_idFinal = undefined,
				exit({required_field_not_assigned, p_hero_fb_record, faction_id});
		false ->
			Faction_idFinal = Faction_id
	end,
	case Time_used =:= undefined of
		true ->
				Time_usedFinal = undefined,
				exit({required_field_not_assigned, p_hero_fb_record, time_used});
		false ->
			Time_usedFinal = Time_used
	end,
	case Score =:= undefined of
		true ->
				ScoreFinal = 0;
		false ->
			ScoreFinal = Score
	end,
	case Star_level =:= undefined of
		true ->
				Star_levelFinal = undefined,
				exit({required_field_not_assigned, p_hero_fb_record, star_level});
		false ->
			Star_levelFinal = Star_level
	end,
	case Order =:= undefined of
		true ->
				OrderFinal = 0;
		false ->
			OrderFinal = Order
	end,
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),

	<<Role_idFinal:32/signed,Role_nameLen:16, Role_name2/binary,Faction_idFinal:32/signed,Time_usedFinal:32/signed,ScoreFinal:32/signed,Star_levelFinal:32/signed,OrderFinal:32/signed>>;
encode_p_hero_fb_record(_) -> 
	<<>>.

decode_p_hero_fb_record(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,Role_nameLen:16, Bin1/binary>> = Bin0,
	<<Role_name:Role_nameLen/binary,Faction_id:32/signed,Time_used:32/signed,Score:32/signed,Star_level:32/signed,Order:32/signed>> = Bin1,

	{p_hero_fb_record, Role_id,common_tool:to_list(Role_name),Faction_id,Time_used,Score,Star_level,Order};

decode_p_hero_fb_record(_) ->
	undefined.
encode_p_hero_fb_poker_reward(Record) when is_record(Record, p_hero_fb_poker_reward) ->
	#p_hero_fb_poker_reward{reward_type=Reward_type,reward_value=Reward_value,reward_level=Reward_level,reward_list=Reward_list} = Record,
	case Reward_type =:= undefined of
		true ->
				Reward_typeFinal = 0;
		false ->
			Reward_typeFinal = Reward_type
	end,
	case Reward_value =:= undefined of
		true ->
				Reward_valueFinal = 0;
		false ->
			Reward_valueFinal = Reward_value
	end,
	case Reward_level =:= undefined of
		true ->
				Reward_levelFinal = 0;
		false ->
			Reward_levelFinal = Reward_level
	end,
	case Reward_list =:= undefined of
		true ->
			Reward_listFinal = [];
		false ->
			Reward_listFinal = Reward_list
	end,
	Reward_list_bin = encode_p_goodss(Reward_listFinal, <<>>),
	SizeReward_listFinal = erlang:length(Reward_listFinal),
	BinLen_reward_list = erlang:byte_size(Reward_list_bin),

	<<Reward_typeFinal:32/signed,Reward_valueFinal:32/signed,Reward_levelFinal:32/signed,SizeReward_listFinal:16, BinLen_reward_list:32, Reward_list_bin/binary>>;
encode_p_hero_fb_poker_reward(_) -> 
	<<>>.

decode_p_hero_fb_poker_reward(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Reward_type:32/signed,Reward_value:32/signed,Reward_level:32/signed,_Sizereward_list:16, _BinLenreward_list:32, SubBinreward_list/binary>> = Bin0,
	Reward_list = lists:reverse(decode_p_goodss(SubBinreward_list, [])),

	{p_hero_fb_poker_reward, Reward_type,Reward_value,Reward_level,Reward_list};

decode_p_hero_fb_poker_reward(_) ->
	undefined.
encode_p_refining(Record) when is_record(Record, p_refining) ->
	#p_refining{firing_type=Firing_type,goods_id=Goods_id,goods_type=Goods_type,goods_type_id=Goods_type_id,goods_number=Goods_number} = Record,
	case Firing_type =:= undefined of
		true ->
				Firing_typeFinal = undefined,
				exit({required_field_not_assigned, p_refining, firing_type});
		false ->
			Firing_typeFinal = Firing_type
	end,
	case Goods_id =:= undefined of
		true ->
				Goods_idFinal = undefined,
				exit({required_field_not_assigned, p_refining, goods_id});
		false ->
			Goods_idFinal = Goods_id
	end,
	case Goods_type =:= undefined of
		true ->
				Goods_typeFinal = undefined,
				exit({required_field_not_assigned, p_refining, goods_type});
		false ->
			Goods_typeFinal = Goods_type
	end,
	case Goods_type_id =:= undefined of
		true ->
				Goods_type_idFinal = undefined,
				exit({required_field_not_assigned, p_refining, goods_type_id});
		false ->
			Goods_type_idFinal = Goods_type_id
	end,
	case Goods_number =:= undefined of
		true ->
				Goods_numberFinal = undefined,
				exit({required_field_not_assigned, p_refining, goods_number});
		false ->
			Goods_numberFinal = Goods_number
	end,

	<<Firing_typeFinal:32/signed,Goods_idFinal:32/signed,Goods_typeFinal:32/signed,Goods_type_idFinal:32/signed,Goods_numberFinal:32/signed>>;
encode_p_refining(_) -> 
	<<>>.

decode_p_refining(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Firing_type:32/signed,Goods_id:32/signed,Goods_type:32/signed,Goods_type_id:32/signed,Goods_number:32/signed>> = Bin0,

	{p_refining, Firing_type,Goods_id,Goods_type,Goods_type_id,Goods_number};

decode_p_refining(_) ->
	undefined.
encode_p_refining_box_log(Record) when is_record(Record, p_refining_box_log) ->
	#p_refining_box_log{role_id=Role_id,role_sex=Role_sex,role_name=Role_name,faction_id=Faction_id,award_time=Award_time,box_list=Box_list} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, p_refining_box_log, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Role_sex =:= undefined of
		true ->
				Role_sexFinal = undefined,
				exit({required_field_not_assigned, p_refining_box_log, role_sex});
		false ->
			Role_sexFinal = Role_sex
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = undefined,
				exit({required_field_not_assigned, p_refining_box_log, role_name});
		false ->
			Role_nameFinal = Role_name
	end,
	case Faction_id =:= undefined of
		true ->
				Faction_idFinal = undefined,
				exit({required_field_not_assigned, p_refining_box_log, faction_id});
		false ->
			Faction_idFinal = Faction_id
	end,
	case Award_time =:= undefined of
		true ->
				Award_timeFinal = undefined,
				exit({required_field_not_assigned, p_refining_box_log, award_time});
		false ->
			Award_timeFinal = Award_time
	end,
	case Box_list =:= undefined of
		true ->
			Box_listFinal = [];
		false ->
			Box_listFinal = Box_list
	end,
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),
	Box_list_bin = encode_p_goodss(Box_listFinal, <<>>),
	SizeBox_listFinal = erlang:length(Box_listFinal),
	BinLen_box_list = erlang:byte_size(Box_list_bin),

	<<Role_idFinal:32/signed,Role_sexFinal:32/signed,Role_nameLen:16, Role_name2/binary,Faction_idFinal:32/signed,Award_timeFinal:32/signed,SizeBox_listFinal:16, BinLen_box_list:32, Box_list_bin/binary>>;
encode_p_refining_box_log(_) -> 
	<<>>.

decode_p_refining_box_log(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,Role_sex:32/signed,Role_nameLen:16, Bin1/binary>> = Bin0,
	<<Role_name:Role_nameLen/binary,Faction_id:32/signed,Award_time:32/signed,_Sizebox_list:16, _BinLenbox_list:32, SubBinbox_list/binary>> = Bin1,
	Box_list = lists:reverse(decode_p_goodss(SubBinbox_list, [])),

	{p_refining_box_log, Role_id,Role_sex,common_tool:to_list(Role_name),Faction_id,Award_time,Box_list};

decode_p_refining_box_log(_) ->
	undefined.
encode_p_online_info(Record) when is_record(Record, p_online_info) ->
	#p_online_info{memberid=Memberid,otherattr=Otherattr} = Record,
	case Memberid =:= undefined of
		true ->
				MemberidFinal = 0;
		false ->
			MemberidFinal = Memberid
	end,
	case Otherattr =:= undefined of
		true ->
				OtherattrFinal = 0;
		false ->
			OtherattrFinal = Otherattr
	end,

	<<MemberidFinal:32/signed,OtherattrFinal:32/signed>>;
encode_p_online_info(_) -> 
	<<>>.

decode_p_online_info(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Memberid:32/signed,Otherattr:32/signed>> = Bin0,

	{p_online_info, Memberid,Otherattr};

decode_p_online_info(_) ->
	undefined.
encode_p_role_goal(Record) when is_record(Record, p_role_goal) ->
	#p_role_goal{role_id=Role_id,goals=Goals,days=Days} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, p_role_goal, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Goals =:= undefined of
		true ->
			GoalsFinal = [];
		false ->
			GoalsFinal = Goals
	end,
	case Days =:= undefined of
		true ->
				DaysFinal = undefined,
				exit({required_field_not_assigned, p_role_goal, days});
		false ->
			DaysFinal = Days
	end,
	Goals_bin = encode_p_role_goal_items(GoalsFinal, <<>>),
	SizeGoalsFinal = erlang:length(GoalsFinal),
	BinLen_goals = erlang:byte_size(Goals_bin),

	<<Role_idFinal:32/signed,SizeGoalsFinal:16, BinLen_goals:32, Goals_bin/binary,DaysFinal:32/signed>>;
encode_p_role_goal(_) -> 
	<<>>.

decode_p_role_goal(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,_Sizegoals:16, BinLengoals:32, Bin1/binary>> = Bin0,
	<<SubBingoals:BinLengoals/binary, Bin2/binary>> = Bin1, 
	Goals = lists:reverse(decode_p_role_goal_items(SubBingoals, [])),
	<<Days:32/signed>> = Bin2,

	{p_role_goal, Role_id,Goals,Days};

decode_p_role_goal(_) ->
	undefined.
encode_p_role_goal_item(Record) when is_record(Record, p_role_goal_item) ->
	#p_role_goal_item{goal_id=Goal_id,finished=Finished,process_num=Process_num,fetched=Fetched} = Record,
	case Goal_id =:= undefined of
		true ->
				Goal_idFinal = undefined,
				exit({required_field_not_assigned, p_role_goal_item, goal_id});
		false ->
			Goal_idFinal = Goal_id
	end,
	case Finished =:= undefined of
		true ->
				FinishedFinal = 0;
		false ->
		case Finished of
			true ->
				FinishedFinal = 1;
			false ->
				FinishedFinal = 0
		end
	end,
	case Process_num =:= undefined of
		true ->
				Process_numFinal = 0;
		false ->
			Process_numFinal = Process_num
	end,
	case Fetched =:= undefined of
		true ->
				FetchedFinal = 0;
		false ->
		case Fetched of
			true ->
				FetchedFinal = 1;
			false ->
				FetchedFinal = 0
		end
	end,

	<<Goal_idFinal:32/signed,FinishedFinal:8,Process_numFinal:32/signed,FetchedFinal:8>>;
encode_p_role_goal_item(_) -> 
	<<>>.

decode_p_role_goal_item(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Goal_id:32/signed,FinishedTmp:8,Process_num:32/signed,FetchedTmp:8>> = Bin0,
case FinishedTmp of 
	1 -> 
		Finished = true;
	_ ->
		Finished = false
end,
case FetchedTmp of 
	1 -> 
		Fetched = true;
	_ ->
		Fetched = false
end,

	{p_role_goal_item, Goal_id,Finished,Process_num,Fetched};

decode_p_role_goal_item(_) ->
	undefined.
encode_p_goal_config(Record) when is_record(Record, p_goal_config) ->
	#p_goal_config{goal_id=Goal_id,gold_bind=Gold_bind,gold=Gold,silver_bind=Silver_bind,silver=Silver,exp=Exp,items=Items,num=Num,day=Day} = Record,
	case Goal_id =:= undefined of
		true ->
				Goal_idFinal = undefined,
				exit({required_field_not_assigned, p_goal_config, goal_id});
		false ->
			Goal_idFinal = Goal_id
	end,
	case Gold_bind =:= undefined of
		true ->
				Gold_bindFinal = 0;
		false ->
			Gold_bindFinal = Gold_bind
	end,
	case Gold =:= undefined of
		true ->
				GoldFinal = 0;
		false ->
			GoldFinal = Gold
	end,
	case Silver_bind =:= undefined of
		true ->
				Silver_bindFinal = 0;
		false ->
			Silver_bindFinal = Silver_bind
	end,
	case Silver =:= undefined of
		true ->
				SilverFinal = 0;
		false ->
			SilverFinal = Silver
	end,
	case Exp =:= undefined of
		true ->
				ExpFinal = 0;
		false ->
			ExpFinal = Exp
	end,
	case Items =:= undefined of
		true ->
			ItemsFinal = [];
		false ->
			ItemsFinal = Items
	end,
	case Num =:= undefined of
		true ->
				NumFinal = 1;
		false ->
			NumFinal = Num
	end,
	case Day =:= undefined of
		true ->
				DayFinal = undefined,
				exit({required_field_not_assigned, p_goal_config, day});
		false ->
			DayFinal = Day
	end,
	Items_bin = encode_p_goal_items(ItemsFinal, <<>>),
	SizeItemsFinal = erlang:length(ItemsFinal),
	BinLen_items = erlang:byte_size(Items_bin),

	<<Goal_idFinal:32/signed,Gold_bindFinal:32/signed,GoldFinal:32/signed,Silver_bindFinal:32/signed,SilverFinal:32/signed,ExpFinal:32/signed,SizeItemsFinal:16, BinLen_items:32, Items_bin/binary,NumFinal:32/signed,DayFinal:32/signed>>;
encode_p_goal_config(_) -> 
	<<>>.

decode_p_goal_config(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Goal_id:32/signed,Gold_bind:32/signed,Gold:32/signed,Silver_bind:32/signed,Silver:32/signed,Exp:32/signed,_Sizeitems:16, BinLenitems:32, Bin1/binary>> = Bin0,
	<<SubBinitems:BinLenitems/binary, Bin2/binary>> = Bin1, 
	Items = lists:reverse(decode_p_goal_items(SubBinitems, [])),
	<<Num:32/signed,Day:32/signed>> = Bin2,

	{p_goal_config, Goal_id,Gold_bind,Gold,Silver_bind,Silver,Exp,Items,Num,Day};

decode_p_goal_config(_) ->
	undefined.
encode_p_goal_item(Record) when is_record(Record, p_goal_item) ->
	#p_goal_item{item_id=Item_id,item_type=Item_type,color=Color,quality=Quality,bind=Bind,end_time=End_time,num=Num} = Record,
	case Item_id =:= undefined of
		true ->
				Item_idFinal = undefined,
				exit({required_field_not_assigned, p_goal_item, item_id});
		false ->
			Item_idFinal = Item_id
	end,
	case Item_type =:= undefined of
		true ->
				Item_typeFinal = undefined,
				exit({required_field_not_assigned, p_goal_item, item_type});
		false ->
			Item_typeFinal = Item_type
	end,
	case Color =:= undefined of
		true ->
				ColorFinal = 1;
		false ->
			ColorFinal = Color
	end,
	case Quality =:= undefined of
		true ->
				QualityFinal = 1;
		false ->
			QualityFinal = Quality
	end,
	case Bind =:= undefined of
		true ->
				BindFinal = 1;
		false ->
		case Bind of
			true ->
				BindFinal = 1;
			false ->
				BindFinal = 0
		end
	end,
	case End_time =:= undefined of
		true ->
				End_timeFinal = 0;
		false ->
			End_timeFinal = End_time
	end,
	case Num =:= undefined of
		true ->
				NumFinal = 1;
		false ->
			NumFinal = Num
	end,

	<<Item_idFinal:32/signed,Item_typeFinal:32/signed,ColorFinal:32/signed,QualityFinal:32/signed,BindFinal:8,End_timeFinal:32/signed,NumFinal:32/signed>>;
encode_p_goal_item(_) -> 
	<<>>.

decode_p_goal_item(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Item_id:32/signed,Item_type:32/signed,Color:32/signed,Quality:32/signed,BindTmp:8,End_time:32/signed,Num:32/signed>> = Bin0,
case BindTmp of 
	1 -> 
		Bind = true;
	_ ->
		Bind = false
end,

	{p_goal_item, Item_id,Item_type,Color,Quality,Bind,End_time,Num};

decode_p_goal_item(_) ->
	undefined.
encode_p_prestige_item(Record) when is_record(Record, p_prestige_item) ->
	#p_prestige_item{group_id=Group_id,class_id=Class_id,key=Key,need_prestige=Need_prestige,min_level=Min_level,max_level=Max_level,item=Item} = Record,
	case Group_id =:= undefined of
		true ->
				Group_idFinal = 0;
		false ->
			Group_idFinal = Group_id
	end,
	case Class_id =:= undefined of
		true ->
				Class_idFinal = 0;
		false ->
			Class_idFinal = Class_id
	end,
	case Key =:= undefined of
		true ->
				KeyFinal = 0;
		false ->
			KeyFinal = Key
	end,
	case Need_prestige =:= undefined of
		true ->
				Need_prestigeFinal = 0;
		false ->
			Need_prestigeFinal = Need_prestige
	end,
	case Min_level =:= undefined of
		true ->
				Min_levelFinal = 0;
		false ->
			Min_levelFinal = Min_level
	end,
	case Max_level =:= undefined of
		true ->
				Max_levelFinal = 0;
		false ->
			Max_levelFinal = Max_level
	end,
	case Item =:= undefined of
		true ->
				ItemFinal = undefined,
				exit({required_field_not_assigned, p_prestige_item, item});
		false ->
			ItemFinal = Item
	end,
	Item_bin = encode_p_goods(ItemFinal),
	BinLen_item = erlang:byte_size(Item_bin),

	<<Group_idFinal:32/signed,Class_idFinal:32/signed,KeyFinal:32/signed,Need_prestigeFinal:32/signed,Min_levelFinal:32/signed,Max_levelFinal:32/signed,BinLen_item:32, Item_bin/binary>>;
encode_p_prestige_item(_) -> 
	<<>>.

decode_p_prestige_item(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Group_id:32/signed,Class_id:32/signed,Key:32/signed,Need_prestige:32/signed,Min_level:32/signed,Max_level:32/signed,_SubBinSizeitem:32, SubBinitem/binary>> = Bin0,
	Item = decode_p_goods(SubBinitem),

	{p_prestige_item, Group_id,Class_id,Key,Need_prestige,Min_level,Max_level,Item};

decode_p_prestige_item(_) ->
	undefined.
encode_p_activity_condition(Record) when is_record(Record, p_activity_condition) ->
	#p_activity_condition{condition_id=Condition_id,condition=Condition,multi=Multi,simple_goods=Simple_goods,able=Able} = Record,
	case Condition_id =:= undefined of
		true ->
				Condition_idFinal = undefined,
				exit({required_field_not_assigned, p_activity_condition, condition_id});
		false ->
			Condition_idFinal = Condition_id
	end,
	case Condition =:= undefined of
		true ->
				ConditionFinal = undefined,
				exit({required_field_not_assigned, p_activity_condition, condition});
		false ->
			ConditionFinal = Condition
	end,
	case Multi =:= undefined of
		true ->
				MultiFinal = undefined,
				exit({required_field_not_assigned, p_activity_condition, multi});
		false ->
			MultiFinal = Multi
	end,
	case Simple_goods =:= undefined of
		true ->
			Simple_goodsFinal = [];
		false ->
			Simple_goodsFinal = Simple_goods
	end,
	case Able =:= undefined of
		true ->
				AbleFinal = undefined,
				exit({required_field_not_assigned, p_activity_condition, able});
		false ->
			AbleFinal = Able
	end,
	Condition2 = common_tool:to_binary(ConditionFinal),
	ConditionLen = erlang:byte_size(Condition2),
	Simple_goods_bin = encode_p_activity_prize_goodss(Simple_goodsFinal, <<>>),
	SizeSimple_goodsFinal = erlang:length(Simple_goodsFinal),
	BinLen_simple_goods = erlang:byte_size(Simple_goods_bin),

	<<Condition_idFinal:32/signed,ConditionLen:16, Condition2/binary,MultiFinal:32/signed,SizeSimple_goodsFinal:16, BinLen_simple_goods:32, Simple_goods_bin/binary,AbleFinal:32/signed>>;
encode_p_activity_condition(_) -> 
	<<>>.

decode_p_activity_condition(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Condition_id:32/signed,ConditionLen:16, Bin1/binary>> = Bin0,
	<<Condition:ConditionLen/binary,Multi:32/signed,_Sizesimple_goods:16, BinLensimple_goods:32, Bin2/binary>> = Bin1,
	<<SubBinsimple_goods:BinLensimple_goods/binary, Bin3/binary>> = Bin2, 
	Simple_goods = lists:reverse(decode_p_activity_prize_goodss(SubBinsimple_goods, [])),
	<<Able:32/signed>> = Bin3,

	{p_activity_condition, Condition_id,common_tool:to_list(Condition),Multi,Simple_goods,Able};

decode_p_activity_condition(_) ->
	undefined.
encode_p_activity_prize_goods(Record) when is_record(Record, p_activity_prize_goods) ->
	#p_activity_prize_goods{type_id=Type_id,num=Num,color=Color,quality=Quality,bind=Bind,last_time=Last_time} = Record,
	case Type_id =:= undefined of
		true ->
				Type_idFinal = undefined,
				exit({required_field_not_assigned, p_activity_prize_goods, type_id});
		false ->
			Type_idFinal = Type_id
	end,
	case Num =:= undefined of
		true ->
				NumFinal = undefined,
				exit({required_field_not_assigned, p_activity_prize_goods, num});
		false ->
			NumFinal = Num
	end,
	case Color =:= undefined of
		true ->
				ColorFinal = undefined,
				exit({required_field_not_assigned, p_activity_prize_goods, color});
		false ->
			ColorFinal = Color
	end,
	case Quality =:= undefined of
		true ->
				QualityFinal = undefined,
				exit({required_field_not_assigned, p_activity_prize_goods, quality});
		false ->
			QualityFinal = Quality
	end,
	case Bind =:= undefined of
		true ->
				BindFinal = 1;
		false ->
		case Bind of
			true ->
				BindFinal = 1;
			false ->
				BindFinal = 0
		end
	end,
	case Last_time =:= undefined of
		true ->
				Last_timeFinal = undefined,
				exit({required_field_not_assigned, p_activity_prize_goods, last_time});
		false ->
			Last_timeFinal = Last_time
	end,

	<<Type_idFinal:32/signed,NumFinal:32/signed,ColorFinal:32/signed,QualityFinal:32/signed,BindFinal:8,Last_timeFinal:32/signed>>;
encode_p_activity_prize_goods(_) -> 
	<<>>.

decode_p_activity_prize_goods(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Type_id:32/signed,Num:32/signed,Color:32/signed,Quality:32/signed,BindTmp:8,Last_time:32/signed>> = Bin0,
case BindTmp of 
	1 -> 
		Bind = true;
	_ ->
		Bind = false
end,

	{p_activity_prize_goods, Type_id,Num,Color,Quality,Bind,Last_time};

decode_p_activity_prize_goods(_) ->
	undefined.
encode_p_boss_group(Record) when is_record(Record, p_boss_group) ->
	#p_boss_group{boss_id=Boss_id,start_time=Start_time,end_time=End_time,last_time=Last_time,space_time=Space_time,map_id=Map_id,tx=Tx,ty=Ty} = Record,
	case Boss_id =:= undefined of
		true ->
				Boss_idFinal = undefined,
				exit({required_field_not_assigned, p_boss_group, boss_id});
		false ->
			Boss_idFinal = Boss_id
	end,
	case Start_time =:= undefined of
		true ->
				Start_timeFinal = 0;
		false ->
			Start_timeFinal = Start_time
	end,
	case End_time =:= undefined of
		true ->
				End_timeFinal = 0;
		false ->
			End_timeFinal = End_time
	end,
	case Last_time =:= undefined of
		true ->
				Last_timeFinal = 0;
		false ->
			Last_timeFinal = Last_time
	end,
	case Space_time =:= undefined of
		true ->
				Space_timeFinal = 0;
		false ->
			Space_timeFinal = Space_time
	end,
	case Map_id =:= undefined of
		true ->
				Map_idFinal = 0;
		false ->
			Map_idFinal = Map_id
	end,
	case Tx =:= undefined of
		true ->
				TxFinal = 0;
		false ->
			TxFinal = Tx
	end,
	case Ty =:= undefined of
		true ->
				TyFinal = 0;
		false ->
			TyFinal = Ty
	end,

	<<Boss_idFinal:32/signed,Start_timeFinal:32/signed,End_timeFinal:32/signed,Last_timeFinal:32/signed,Space_timeFinal:32/signed,Map_idFinal:32/signed,TxFinal:32/signed,TyFinal:32/signed>>;
encode_p_boss_group(_) -> 
	<<>>.

decode_p_boss_group(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Boss_id:32/signed,Start_time:32/signed,End_time:32/signed,Last_time:32/signed,Space_time:32/signed,Map_id:32/signed,Tx:32/signed,Ty:32/signed>> = Bin0,

	{p_boss_group, Boss_id,Start_time,End_time,Last_time,Space_time,Map_id,Tx,Ty};

decode_p_boss_group(_) ->
	undefined.
encode_p_reward_prop(Record) when is_record(Record, p_reward_prop) ->
	#p_reward_prop{prop_id=Prop_id,prop_type=Prop_type,prop_num=Prop_num,bind=Bind} = Record,
	case Prop_id =:= undefined of
		true ->
				Prop_idFinal = undefined,
				exit({required_field_not_assigned, p_reward_prop, prop_id});
		false ->
			Prop_idFinal = Prop_id
	end,
	case Prop_type =:= undefined of
		true ->
				Prop_typeFinal = undefined,
				exit({required_field_not_assigned, p_reward_prop, prop_type});
		false ->
			Prop_typeFinal = Prop_type
	end,
	case Prop_num =:= undefined of
		true ->
				Prop_numFinal = undefined,
				exit({required_field_not_assigned, p_reward_prop, prop_num});
		false ->
			Prop_numFinal = Prop_num
	end,
	case Bind =:= undefined of
		true ->
				BindFinal = undefined,
				exit({required_field_not_assigned, p_reward_prop, bind});
		false ->
		case Bind of
			true ->
				BindFinal = 1;
			false ->
				BindFinal = 0
		end
	end,

	<<Prop_idFinal:32/signed,Prop_typeFinal:32/signed,Prop_numFinal:32/signed,BindFinal:8>>;
encode_p_reward_prop(_) -> 
	<<>>.

decode_p_reward_prop(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Prop_id:32/signed,Prop_type:32/signed,Prop_num:32/signed,BindTmp:8>> = Bin0,
case BindTmp of 
	1 -> 
		Bind = true;
	_ ->
		Bind = false
end,

	{p_reward_prop, Prop_id,Prop_type,Prop_num,Bind};

decode_p_reward_prop(_) ->
	undefined.
encode_p_equip_item(Record) when is_record(Record, p_equip_item) ->
	#p_equip_item{typeid=Typeid,color=Color,quality=Quality,isbind=Isbind,timelimit=Timelimit} = Record,
	case Typeid =:= undefined of
		true ->
				TypeidFinal = 0;
		false ->
			TypeidFinal = Typeid
	end,
	case Color =:= undefined of
		true ->
				ColorFinal = 0;
		false ->
			ColorFinal = Color
	end,
	case Quality =:= undefined of
		true ->
				QualityFinal = 0;
		false ->
			QualityFinal = Quality
	end,
	case Isbind =:= undefined of
		true ->
				IsbindFinal = 0;
		false ->
			IsbindFinal = Isbind
	end,
	case Timelimit =:= undefined of
		true ->
				TimelimitFinal = 0;
		false ->
			TimelimitFinal = Timelimit
	end,

	<<TypeidFinal:32/signed,ColorFinal:32/signed,QualityFinal:32/signed,IsbindFinal:32/signed,TimelimitFinal:32/signed>>;
encode_p_equip_item(_) -> 
	<<>>.

decode_p_equip_item(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Typeid:32/signed,Color:32/signed,Quality:32/signed,Isbind:32/signed,Timelimit:32/signed>> = Bin0,

	{p_equip_item, Typeid,Color,Quality,Isbind,Timelimit};

decode_p_equip_item(_) ->
	undefined.
encode_m_chat_auth_tos(Record) when is_record(Record, m_chat_auth_tos) ->
	#m_chat_auth_tos{account=Account,roleid=Roleid,key=Key,timestamp=Timestamp} = Record,
	case Account =:= undefined of
		true ->
				AccountFinal = undefined,
				exit({required_field_not_assigned, m_chat_auth_tos, account});
		false ->
			AccountFinal = Account
	end,
	case Roleid =:= undefined of
		true ->
				RoleidFinal = undefined,
				exit({required_field_not_assigned, m_chat_auth_tos, roleid});
		false ->
			RoleidFinal = Roleid
	end,
	case Key =:= undefined of
		true ->
				KeyFinal = undefined,
				exit({required_field_not_assigned, m_chat_auth_tos, key});
		false ->
			KeyFinal = Key
	end,
	case Timestamp =:= undefined of
		true ->
				TimestampFinal = undefined,
				exit({required_field_not_assigned, m_chat_auth_tos, timestamp});
		false ->
			TimestampFinal = Timestamp
	end,
	Account2 = common_tool:to_binary(AccountFinal),
	AccountLen = erlang:byte_size(Account2),
	Key2 = common_tool:to_binary(KeyFinal),
	KeyLen = erlang:byte_size(Key2),

	<<AccountLen:16, Account2/binary,RoleidFinal:32/signed,KeyLen:16, Key2/binary,TimestampFinal:32/signed>>;
encode_m_chat_auth_tos(_) -> 
	<<>>.

decode_m_chat_auth_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<AccountLen:16, Bin1/binary>> = Bin0,
	<<Account:AccountLen/binary,Roleid:32/signed,KeyLen:16, Bin2/binary>> = Bin1,
	<<Key:KeyLen/binary,Timestamp:32/signed>> = Bin2,

	{m_chat_auth_tos, common_tool:to_list(Account),Roleid,common_tool:to_list(Key),Timestamp};

decode_m_chat_auth_tos(_) ->
	undefined.
encode_m_chat_auth_toc(Record) when is_record(Record, m_chat_auth_toc) ->
	#m_chat_auth_toc{succ=Succ,reason=Reason,channel_list=Channel_list,black_list=Black_list,gm_auth=Gm_auth} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Channel_list =:= undefined of
		true ->
			Channel_listFinal = [];
		false ->
			Channel_listFinal = Channel_list
	end,
	case Black_list =:= undefined of
		true ->
			Black_listFinal = [];
		false ->
			Black_listFinal = Black_list
	end,
	case Gm_auth =:= undefined of
		true ->
			Gm_authFinal = [];
		false ->
			Gm_authFinal = Gm_auth
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Channel_list_bin = encode_p_channel_infos(Channel_listFinal, <<>>),
	SizeChannel_listFinal = erlang:length(Channel_listFinal),
	BinLen_channel_list = erlang:byte_size(Channel_list_bin),
	Black_list_bin = encode_p_chat_roles(Black_listFinal, <<>>),
	SizeBlack_listFinal = erlang:length(Black_listFinal),
	BinLen_black_list = erlang:byte_size(Black_list_bin),
	Gm_auth_bin = encode_strings(Gm_authFinal, <<>>),
	SizeGm_authFinal = erlang:length(Gm_authFinal),
	BinLen_gm_auth = erlang:byte_size(Gm_auth_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,SizeChannel_listFinal:16, BinLen_channel_list:32, Channel_list_bin/binary,SizeBlack_listFinal:16, BinLen_black_list:32, Black_list_bin/binary,SizeGm_authFinal:16, BinLen_gm_auth:32, Gm_auth_bin/binary>>;
encode_m_chat_auth_toc(_) -> 
	<<>>.

decode_m_chat_auth_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_Sizechannel_list:16, BinLenchannel_list:32, Bin2/binary>> = Bin1,
	<<SubBinchannel_list:BinLenchannel_list/binary, Bin3/binary>> = Bin2, 
	Channel_list = lists:reverse(decode_p_channel_infos(SubBinchannel_list, [])),
	<<_Sizeblack_list:16, BinLenblack_list:32, Bin4/binary>> = Bin3,
	<<SubBinblack_list:BinLenblack_list/binary, Bin5/binary>> = Bin4, 
	Black_list = lists:reverse(decode_p_chat_roles(SubBinblack_list, [])),
	<<_Sizegm_auth:16, _BinLengm_auth:32, SubBingm_auth/binary>> = Bin5,
	Gm_auth = lists:reverse(decode_strings(SubBingm_auth, [])),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_chat_auth_toc, Succ,common_tool:to_list(Reason),Channel_list,Black_list,Gm_auth};

decode_m_chat_auth_toc(_) ->
	undefined.
encode_m_chat_join_channel_toc(Record) when is_record(Record, m_chat_join_channel_toc) ->
	#m_chat_join_channel_toc{channel_info=Channel_info,role_info=Role_info} = Record,
	case Channel_info =:= undefined of
		true ->
				Channel_infoFinal = undefined,
				exit({required_field_not_assigned, m_chat_join_channel_toc, channel_info});
		false ->
			Channel_infoFinal = Channel_info
	end,
	case Role_info =:= undefined of
		true ->
				Role_infoFinal = 0;
		false ->
			Role_infoFinal = Role_info
	end,
	Channel_info_bin = encode_p_channel_info(Channel_infoFinal),
	BinLen_channel_info = erlang:byte_size(Channel_info_bin),
	Role_info_bin = encode_p_chat_role(Role_infoFinal),
	BinLen_role_info = erlang:byte_size(Role_info_bin),

	<<BinLen_channel_info:32, Channel_info_bin/binary,BinLen_role_info:32, Role_info_bin/binary>>;
encode_m_chat_join_channel_toc(_) -> 
	<<>>.

decode_m_chat_join_channel_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SubBinSizechannel_info:32, Bin1/binary>> = Bin0,
	<<SubBinchannel_info:SubBinSizechannel_info/binary, Bin2/binary>> = Bin1,
	Channel_info = decode_p_channel_info(SubBinchannel_info),
	<<_SubBinSizerole_info:32, SubBinrole_info/binary>> = Bin2,
	Role_info = decode_p_chat_role(SubBinrole_info),

	{m_chat_join_channel_toc, Channel_info,Role_info};

decode_m_chat_join_channel_toc(_) ->
	undefined.
encode_m_chat_leave_channel_toc(Record) when is_record(Record, m_chat_leave_channel_toc) ->
	#m_chat_leave_channel_toc{channel_sign=Channel_sign,channel_type=Channel_type} = Record,
	case Channel_sign =:= undefined of
		true ->
				Channel_signFinal = undefined,
				exit({required_field_not_assigned, m_chat_leave_channel_toc, channel_sign});
		false ->
			Channel_signFinal = Channel_sign
	end,
	case Channel_type =:= undefined of
		true ->
				Channel_typeFinal = undefined,
				exit({required_field_not_assigned, m_chat_leave_channel_toc, channel_type});
		false ->
			Channel_typeFinal = Channel_type
	end,
	Channel_sign2 = common_tool:to_binary(Channel_signFinal),
	Channel_signLen = erlang:byte_size(Channel_sign2),

	<<Channel_signLen:16, Channel_sign2/binary,Channel_typeFinal:32/signed>>;
encode_m_chat_leave_channel_toc(_) -> 
	<<>>.

decode_m_chat_leave_channel_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Channel_signLen:16, Bin1/binary>> = Bin0,
	<<Channel_sign:Channel_signLen/binary,Channel_type:32/signed>> = Bin1,

	{m_chat_leave_channel_toc, common_tool:to_list(Channel_sign),Channel_type};

decode_m_chat_leave_channel_toc(_) ->
	undefined.
encode_m_chat_in_channel_tos(Record) when is_record(Record, m_chat_in_channel_tos) ->
	#m_chat_in_channel_tos{channel_sign=Channel_sign,msg=Msg} = Record,
	case Channel_sign =:= undefined of
		true ->
				Channel_signFinal = undefined,
				exit({required_field_not_assigned, m_chat_in_channel_tos, channel_sign});
		false ->
			Channel_signFinal = Channel_sign
	end,
	case Msg =:= undefined of
		true ->
				MsgFinal = undefined,
				exit({required_field_not_assigned, m_chat_in_channel_tos, msg});
		false ->
			MsgFinal = Msg
	end,
	Channel_sign2 = common_tool:to_binary(Channel_signFinal),
	Channel_signLen = erlang:byte_size(Channel_sign2),
	Msg2 = common_tool:to_binary(MsgFinal),
	MsgLen = erlang:byte_size(Msg2),

	<<Channel_signLen:16, Channel_sign2/binary,MsgLen:16, Msg2/binary>>;
encode_m_chat_in_channel_tos(_) -> 
	<<>>.

decode_m_chat_in_channel_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Channel_signLen:16, Bin1/binary>> = Bin0,
	<<Channel_sign:Channel_signLen/binary,MsgLen:16, Bin2/binary>> = Bin1,
	<<Msg:MsgLen/binary>> = Bin2,

	{m_chat_in_channel_tos, common_tool:to_list(Channel_sign),common_tool:to_list(Msg)};

decode_m_chat_in_channel_tos(_) ->
	undefined.
encode_m_chat_in_channel_toc(Record) when is_record(Record, m_chat_in_channel_toc) ->
	#m_chat_in_channel_toc{succ=Succ,reason=Reason,channel_sign=Channel_sign,msg=Msg,role_info=Role_info,tstamp=Tstamp} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Channel_sign =:= undefined of
		true ->
				Channel_signFinal = <<>>;
		false ->
			Channel_signFinal = Channel_sign
	end,
	case Msg =:= undefined of
		true ->
				MsgFinal = <<>>;
		false ->
			MsgFinal = Msg
	end,
	case Role_info =:= undefined of
		true ->
				Role_infoFinal = 0;
		false ->
			Role_infoFinal = Role_info
	end,
	case Tstamp =:= undefined of
		true ->
				TstampFinal = 0;
		false ->
			TstampFinal = Tstamp
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Channel_sign2 = common_tool:to_binary(Channel_signFinal),
	Channel_signLen = erlang:byte_size(Channel_sign2),
	Msg2 = common_tool:to_binary(MsgFinal),
	MsgLen = erlang:byte_size(Msg2),
	Role_info_bin = encode_p_chat_role(Role_infoFinal),
	BinLen_role_info = erlang:byte_size(Role_info_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Channel_signLen:16, Channel_sign2/binary,MsgLen:16, Msg2/binary,BinLen_role_info:32, Role_info_bin/binary,TstampFinal:32/signed>>;
encode_m_chat_in_channel_toc(_) -> 
	<<>>.

decode_m_chat_in_channel_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Channel_signLen:16, Bin2/binary>> = Bin1,
	<<Channel_sign:Channel_signLen/binary,MsgLen:16, Bin3/binary>> = Bin2,
	<<Msg:MsgLen/binary,SubBinSizerole_info:32, Bin4/binary>> = Bin3,
	<<SubBinrole_info:SubBinSizerole_info/binary, Bin5/binary>> = Bin4,
	Role_info = decode_p_chat_role(SubBinrole_info),
	<<Tstamp:32/signed>> = Bin5,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_chat_in_channel_toc, Succ,common_tool:to_list(Reason),common_tool:to_list(Channel_sign),common_tool:to_list(Msg),Role_info,Tstamp};

decode_m_chat_in_channel_toc(_) ->
	undefined.
encode_m_chat_in_pairs_tos(Record) when is_record(Record, m_chat_in_pairs_tos) ->
	#m_chat_in_pairs_tos{msg=Msg,to_rolename=To_rolename,show_type=Show_type} = Record,
	case Msg =:= undefined of
		true ->
				MsgFinal = undefined,
				exit({required_field_not_assigned, m_chat_in_pairs_tos, msg});
		false ->
			MsgFinal = Msg
	end,
	case To_rolename =:= undefined of
		true ->
				To_rolenameFinal = undefined,
				exit({required_field_not_assigned, m_chat_in_pairs_tos, to_rolename});
		false ->
			To_rolenameFinal = To_rolename
	end,
	case Show_type =:= undefined of
		true ->
				Show_typeFinal = 1;
		false ->
			Show_typeFinal = Show_type
	end,
	Msg2 = common_tool:to_binary(MsgFinal),
	MsgLen = erlang:byte_size(Msg2),
	To_rolename2 = common_tool:to_binary(To_rolenameFinal),
	To_rolenameLen = erlang:byte_size(To_rolename2),

	<<MsgLen:16, Msg2/binary,To_rolenameLen:16, To_rolename2/binary,Show_typeFinal:32/signed>>;
encode_m_chat_in_pairs_tos(_) -> 
	<<>>.

decode_m_chat_in_pairs_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<MsgLen:16, Bin1/binary>> = Bin0,
	<<Msg:MsgLen/binary,To_rolenameLen:16, Bin2/binary>> = Bin1,
	<<To_rolename:To_rolenameLen/binary,Show_type:32/signed>> = Bin2,

	{m_chat_in_pairs_tos, common_tool:to_list(Msg),common_tool:to_list(To_rolename),Show_type};

decode_m_chat_in_pairs_tos(_) ->
	undefined.
encode_m_chat_in_pairs_toc(Record) when is_record(Record, m_chat_in_pairs_toc) ->
	#m_chat_in_pairs_toc{succ=Succ,show_type=Show_type,reason=Reason,msg=Msg,from_role_info=From_role_info,to_role_info=To_role_info,tstamp=Tstamp,error_code=Error_code,to_role_id=To_role_id} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Show_type =:= undefined of
		true ->
				Show_typeFinal = 1;
		false ->
			Show_typeFinal = Show_type
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Msg =:= undefined of
		true ->
				MsgFinal = <<>>;
		false ->
			MsgFinal = Msg
	end,
	case From_role_info =:= undefined of
		true ->
				From_role_infoFinal = 0;
		false ->
			From_role_infoFinal = From_role_info
	end,
	case To_role_info =:= undefined of
		true ->
				To_role_infoFinal = 0;
		false ->
			To_role_infoFinal = To_role_info
	end,
	case Tstamp =:= undefined of
		true ->
				TstampFinal = 0;
		false ->
			TstampFinal = Tstamp
	end,
	case Error_code =:= undefined of
		true ->
				Error_codeFinal = 0;
		false ->
			Error_codeFinal = Error_code
	end,
	case To_role_id =:= undefined of
		true ->
				To_role_idFinal = 0;
		false ->
			To_role_idFinal = To_role_id
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Msg2 = common_tool:to_binary(MsgFinal),
	MsgLen = erlang:byte_size(Msg2),
	From_role_info_bin = encode_p_chat_role(From_role_infoFinal),
	BinLen_from_role_info = erlang:byte_size(From_role_info_bin),
	To_role_info_bin = encode_p_chat_role(To_role_infoFinal),
	BinLen_to_role_info = erlang:byte_size(To_role_info_bin),

	<<SuccFinal:8,Show_typeFinal:32/signed,ReasonLen:16, Reason2/binary,MsgLen:16, Msg2/binary,BinLen_from_role_info:32, From_role_info_bin/binary,BinLen_to_role_info:32, To_role_info_bin/binary,TstampFinal:32/signed,Error_codeFinal:32/signed,To_role_idFinal:32/signed>>;
encode_m_chat_in_pairs_toc(_) -> 
	<<>>.

decode_m_chat_in_pairs_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,Show_type:32/signed,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,MsgLen:16, Bin2/binary>> = Bin1,
	<<Msg:MsgLen/binary,SubBinSizefrom_role_info:32, Bin3/binary>> = Bin2,
	<<SubBinfrom_role_info:SubBinSizefrom_role_info/binary, Bin4/binary>> = Bin3,
	From_role_info = decode_p_chat_role(SubBinfrom_role_info),
	<<SubBinSizeto_role_info:32, Bin5/binary>> = Bin4,
	<<SubBinto_role_info:SubBinSizeto_role_info/binary, Bin6/binary>> = Bin5,
	To_role_info = decode_p_chat_role(SubBinto_role_info),
	<<Tstamp:32/signed,Error_code:32/signed,To_role_id:32/signed>> = Bin6,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_chat_in_pairs_toc, Succ,Show_type,common_tool:to_list(Reason),common_tool:to_list(Msg),From_role_info,To_role_info,Tstamp,Error_code,To_role_id};

decode_m_chat_in_pairs_toc(_) ->
	undefined.
encode_m_chat_add_black_tos(Record) when is_record(Record, m_chat_add_black_tos) ->
	#m_chat_add_black_tos{rolename=Rolename} = Record,
	case Rolename =:= undefined of
		true ->
				RolenameFinal = undefined,
				exit({required_field_not_assigned, m_chat_add_black_tos, rolename});
		false ->
			RolenameFinal = Rolename
	end,
	Rolename2 = common_tool:to_binary(RolenameFinal),
	RolenameLen = erlang:byte_size(Rolename2),

	<<RolenameLen:16, Rolename2/binary>>;
encode_m_chat_add_black_tos(_) -> 
	<<>>.

decode_m_chat_add_black_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<RolenameLen:16, Bin1/binary>> = Bin0,
	<<Rolename:RolenameLen/binary>> = Bin1,

	{m_chat_add_black_tos, common_tool:to_list(Rolename)};

decode_m_chat_add_black_tos(_) ->
	undefined.
encode_m_chat_add_black_toc(Record) when is_record(Record, m_chat_add_black_toc) ->
	#m_chat_add_black_toc{succ=Succ,reason=Reason,role_info=Role_info} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_chat_add_black_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Role_info =:= undefined of
		true ->
				Role_infoFinal = 0;
		false ->
			Role_infoFinal = Role_info
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Role_info_bin = encode_p_chat_role(Role_infoFinal),
	BinLen_role_info = erlang:byte_size(Role_info_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_role_info:32, Role_info_bin/binary>>;
encode_m_chat_add_black_toc(_) -> 
	<<>>.

decode_m_chat_add_black_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_SubBinSizerole_info:32, SubBinrole_info/binary>> = Bin1,
	Role_info = decode_p_chat_role(SubBinrole_info),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_chat_add_black_toc, Succ,common_tool:to_list(Reason),Role_info};

decode_m_chat_add_black_toc(_) ->
	undefined.
encode_m_chat_remove_black_tos(Record) when is_record(Record, m_chat_remove_black_tos) ->
	#m_chat_remove_black_tos{rolename=Rolename} = Record,
	case Rolename =:= undefined of
		true ->
				RolenameFinal = undefined,
				exit({required_field_not_assigned, m_chat_remove_black_tos, rolename});
		false ->
			RolenameFinal = Rolename
	end,
	Rolename2 = common_tool:to_binary(RolenameFinal),
	RolenameLen = erlang:byte_size(Rolename2),

	<<RolenameLen:16, Rolename2/binary>>;
encode_m_chat_remove_black_tos(_) -> 
	<<>>.

decode_m_chat_remove_black_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<RolenameLen:16, Bin1/binary>> = Bin0,
	<<Rolename:RolenameLen/binary>> = Bin1,

	{m_chat_remove_black_tos, common_tool:to_list(Rolename)};

decode_m_chat_remove_black_tos(_) ->
	undefined.
encode_m_chat_remove_black_toc(Record) when is_record(Record, m_chat_remove_black_toc) ->
	#m_chat_remove_black_toc{succ=Succ,reason=Reason,role_info=Role_info} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_chat_remove_black_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Role_info =:= undefined of
		true ->
				Role_infoFinal = 0;
		false ->
			Role_infoFinal = Role_info
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Role_info_bin = encode_p_chat_role(Role_infoFinal),
	BinLen_role_info = erlang:byte_size(Role_info_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_role_info:32, Role_info_bin/binary>>;
encode_m_chat_remove_black_toc(_) -> 
	<<>>.

decode_m_chat_remove_black_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_SubBinSizerole_info:32, SubBinrole_info/binary>> = Bin1,
	Role_info = decode_p_chat_role(SubBinrole_info),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_chat_remove_black_toc, Succ,common_tool:to_list(Reason),Role_info};

decode_m_chat_remove_black_toc(_) ->
	undefined.
encode_m_chat_get_black_toc(Record) when is_record(Record, m_chat_get_black_toc) ->
	#m_chat_get_black_toc{succ=Succ,reason=Reason,role_list=Role_list} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_chat_get_black_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Role_list =:= undefined of
		true ->
			Role_listFinal = [];
		false ->
			Role_listFinal = Role_list
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Role_list_bin = encode_p_chat_roles(Role_listFinal, <<>>),
	SizeRole_listFinal = erlang:length(Role_listFinal),
	BinLen_role_list = erlang:byte_size(Role_list_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,SizeRole_listFinal:16, BinLen_role_list:32, Role_list_bin/binary>>;
encode_m_chat_get_black_toc(_) -> 
	<<>>.

decode_m_chat_get_black_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_Sizerole_list:16, _BinLenrole_list:32, SubBinrole_list/binary>> = Bin1,
	Role_list = lists:reverse(decode_p_chat_roles(SubBinrole_list, [])),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_chat_get_black_toc, Succ,common_tool:to_list(Reason),Role_list};

decode_m_chat_get_black_toc(_) ->
	undefined.
encode_m_chat_manage_mute_tos(Record) when is_record(Record, m_chat_manage_mute_tos) ->
	#m_chat_manage_mute_tos{rolename=Rolename,duration=Duration} = Record,
	case Rolename =:= undefined of
		true ->
				RolenameFinal = undefined,
				exit({required_field_not_assigned, m_chat_manage_mute_tos, rolename});
		false ->
			RolenameFinal = Rolename
	end,
	case Duration =:= undefined of
		true ->
				DurationFinal = undefined,
				exit({required_field_not_assigned, m_chat_manage_mute_tos, duration});
		false ->
			DurationFinal = Duration
	end,
	Rolename2 = common_tool:to_binary(RolenameFinal),
	RolenameLen = erlang:byte_size(Rolename2),

	<<RolenameLen:16, Rolename2/binary,DurationFinal:32/signed>>;
encode_m_chat_manage_mute_tos(_) -> 
	<<>>.

decode_m_chat_manage_mute_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<RolenameLen:16, Bin1/binary>> = Bin0,
	<<Rolename:RolenameLen/binary,Duration:32/signed>> = Bin1,

	{m_chat_manage_mute_tos, common_tool:to_list(Rolename),Duration};

decode_m_chat_manage_mute_tos(_) ->
	undefined.
encode_m_chat_manage_mute_toc(Record) when is_record(Record, m_chat_manage_mute_toc) ->
	#m_chat_manage_mute_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_chat_manage_mute_toc(_) -> 
	<<>>.

decode_m_chat_manage_mute_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_chat_manage_mute_toc, Succ,common_tool:to_list(Reason)};

decode_m_chat_manage_mute_toc(_) ->
	undefined.
encode_m_chat_manage_kick_tos(Record) when is_record(Record, m_chat_manage_kick_tos) ->
	#m_chat_manage_kick_tos{rolename=Rolename} = Record,
	case Rolename =:= undefined of
		true ->
				RolenameFinal = undefined,
				exit({required_field_not_assigned, m_chat_manage_kick_tos, rolename});
		false ->
			RolenameFinal = Rolename
	end,
	Rolename2 = common_tool:to_binary(RolenameFinal),
	RolenameLen = erlang:byte_size(Rolename2),

	<<RolenameLen:16, Rolename2/binary>>;
encode_m_chat_manage_kick_tos(_) -> 
	<<>>.

decode_m_chat_manage_kick_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<RolenameLen:16, Bin1/binary>> = Bin0,
	<<Rolename:RolenameLen/binary>> = Bin1,

	{m_chat_manage_kick_tos, common_tool:to_list(Rolename)};

decode_m_chat_manage_kick_tos(_) ->
	undefined.
encode_m_chat_manage_kick_toc(Record) when is_record(Record, m_chat_manage_kick_toc) ->
	#m_chat_manage_kick_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_chat_manage_kick_toc(_) -> 
	<<>>.

decode_m_chat_manage_kick_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_chat_manage_kick_toc, Succ,common_tool:to_list(Reason)};

decode_m_chat_manage_kick_toc(_) ->
	undefined.
encode_m_chat_manage_ban_tos(Record) when is_record(Record, m_chat_manage_ban_tos) ->
	#m_chat_manage_ban_tos{rolename=Rolename,duration=Duration} = Record,
	case Rolename =:= undefined of
		true ->
				RolenameFinal = undefined,
				exit({required_field_not_assigned, m_chat_manage_ban_tos, rolename});
		false ->
			RolenameFinal = Rolename
	end,
	case Duration =:= undefined of
		true ->
				DurationFinal = undefined,
				exit({required_field_not_assigned, m_chat_manage_ban_tos, duration});
		false ->
			DurationFinal = Duration
	end,
	Rolename2 = common_tool:to_binary(RolenameFinal),
	RolenameLen = erlang:byte_size(Rolename2),

	<<RolenameLen:16, Rolename2/binary,DurationFinal:32/signed>>;
encode_m_chat_manage_ban_tos(_) -> 
	<<>>.

decode_m_chat_manage_ban_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<RolenameLen:16, Bin1/binary>> = Bin0,
	<<Rolename:RolenameLen/binary,Duration:32/signed>> = Bin1,

	{m_chat_manage_ban_tos, common_tool:to_list(Rolename),Duration};

decode_m_chat_manage_ban_tos(_) ->
	undefined.
encode_m_chat_manage_ban_toc(Record) when is_record(Record, m_chat_manage_ban_toc) ->
	#m_chat_manage_ban_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_chat_manage_ban_toc(_) -> 
	<<>>.

decode_m_chat_manage_ban_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_chat_manage_ban_toc, Succ,common_tool:to_list(Reason)};

decode_m_chat_manage_ban_toc(_) ->
	undefined.
encode_m_chat_limit_notify_toc(Record) when is_record(Record, m_chat_limit_notify_toc) ->
	#m_chat_limit_notify_toc{limit_type=Limit_type,reason=Reason} = Record,
	case Limit_type =:= undefined of
		true ->
				Limit_typeFinal = undefined,
				exit({required_field_not_assigned, m_chat_limit_notify_toc, limit_type});
		false ->
			Limit_typeFinal = Limit_type
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = undefined,
				exit({required_field_not_assigned, m_chat_limit_notify_toc, reason});
		false ->
			ReasonFinal = Reason
	end,
	Limit_type2 = common_tool:to_binary(Limit_typeFinal),
	Limit_typeLen = erlang:byte_size(Limit_type2),
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<Limit_typeLen:16, Limit_type2/binary,ReasonLen:16, Reason2/binary>>;
encode_m_chat_limit_notify_toc(_) -> 
	<<>>.

decode_m_chat_limit_notify_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Limit_typeLen:16, Bin1/binary>> = Bin0,
	<<Limit_type:Limit_typeLen/binary,ReasonLen:16, Bin2/binary>> = Bin1,
	<<Reason:ReasonLen/binary>> = Bin2,

	{m_chat_limit_notify_toc, common_tool:to_list(Limit_type),common_tool:to_list(Reason)};

decode_m_chat_limit_notify_toc(_) ->
	undefined.
encode_m_chat_status_change_toc(Record) when is_record(Record, m_chat_status_change_toc) ->
	#m_chat_status_change_toc{role_id=Role_id,channel_sign=Channel_sign,channel_type=Channel_type,status=Status} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, m_chat_status_change_toc, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Channel_sign =:= undefined of
		true ->
				Channel_signFinal = undefined,
				exit({required_field_not_assigned, m_chat_status_change_toc, channel_sign});
		false ->
			Channel_signFinal = Channel_sign
	end,
	case Channel_type =:= undefined of
		true ->
				Channel_typeFinal = undefined,
				exit({required_field_not_assigned, m_chat_status_change_toc, channel_type});
		false ->
			Channel_typeFinal = Channel_type
	end,
	case Status =:= undefined of
		true ->
				StatusFinal = undefined,
				exit({required_field_not_assigned, m_chat_status_change_toc, status});
		false ->
			StatusFinal = Status
	end,
	Channel_sign2 = common_tool:to_binary(Channel_signFinal),
	Channel_signLen = erlang:byte_size(Channel_sign2),

	<<Role_idFinal:32/signed,Channel_signLen:16, Channel_sign2/binary,Channel_typeFinal:32/signed,StatusFinal:32/signed>>;
encode_m_chat_status_change_toc(_) -> 
	<<>>.

decode_m_chat_status_change_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,Channel_signLen:16, Bin1/binary>> = Bin0,
	<<Channel_sign:Channel_signLen/binary,Channel_type:32/signed,Status:32/signed>> = Bin1,

	{m_chat_status_change_toc, Role_id,common_tool:to_list(Channel_sign),Channel_type,Status};

decode_m_chat_status_change_toc(_) ->
	undefined.
encode_m_chat_quick_toc(Record) when is_record(Record, m_chat_quick_toc) ->
	#m_chat_quick_toc{role_id=Role_id,channel_sign=Channel_sign,channel_type=Channel_type} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, m_chat_quick_toc, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Channel_sign =:= undefined of
		true ->
				Channel_signFinal = undefined,
				exit({required_field_not_assigned, m_chat_quick_toc, channel_sign});
		false ->
			Channel_signFinal = Channel_sign
	end,
	case Channel_type =:= undefined of
		true ->
				Channel_typeFinal = undefined,
				exit({required_field_not_assigned, m_chat_quick_toc, channel_type});
		false ->
			Channel_typeFinal = Channel_type
	end,
	Channel_sign2 = common_tool:to_binary(Channel_signFinal),
	Channel_signLen = erlang:byte_size(Channel_sign2),

	<<Role_idFinal:32/signed,Channel_signLen:16, Channel_sign2/binary,Channel_typeFinal:32/signed>>;
encode_m_chat_quick_toc(_) -> 
	<<>>.

decode_m_chat_quick_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,Channel_signLen:16, Bin1/binary>> = Bin0,
	<<Channel_sign:Channel_signLen/binary,Channel_type:32/signed>> = Bin1,

	{m_chat_quick_toc, Role_id,common_tool:to_list(Channel_sign),Channel_type};

decode_m_chat_quick_toc(_) ->
	undefined.
encode_m_chat_new_join_toc(Record) when is_record(Record, m_chat_new_join_toc) ->
	#m_chat_new_join_toc{role_info=Role_info,channel_sign=Channel_sign,channel_type=Channel_type} = Record,
	case Role_info =:= undefined of
		true ->
				Role_infoFinal = undefined,
				exit({required_field_not_assigned, m_chat_new_join_toc, role_info});
		false ->
			Role_infoFinal = Role_info
	end,
	case Channel_sign =:= undefined of
		true ->
				Channel_signFinal = undefined,
				exit({required_field_not_assigned, m_chat_new_join_toc, channel_sign});
		false ->
			Channel_signFinal = Channel_sign
	end,
	case Channel_type =:= undefined of
		true ->
				Channel_typeFinal = undefined,
				exit({required_field_not_assigned, m_chat_new_join_toc, channel_type});
		false ->
			Channel_typeFinal = Channel_type
	end,
	Role_info_bin = encode_p_chat_channel_role_info(Role_infoFinal),
	BinLen_role_info = erlang:byte_size(Role_info_bin),
	Channel_sign2 = common_tool:to_binary(Channel_signFinal),
	Channel_signLen = erlang:byte_size(Channel_sign2),

	<<BinLen_role_info:32, Role_info_bin/binary,Channel_signLen:16, Channel_sign2/binary,Channel_typeFinal:32/signed>>;
encode_m_chat_new_join_toc(_) -> 
	<<>>.

decode_m_chat_new_join_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SubBinSizerole_info:32, Bin1/binary>> = Bin0,
	<<SubBinrole_info:SubBinSizerole_info/binary, Bin2/binary>> = Bin1,
	Role_info = decode_p_chat_channel_role_info(SubBinrole_info),
	<<Channel_signLen:16, Bin3/binary>> = Bin2,
	<<Channel_sign:Channel_signLen/binary,Channel_type:32/signed>> = Bin3,

	{m_chat_new_join_toc, Role_info,common_tool:to_list(Channel_sign),Channel_type};

decode_m_chat_new_join_toc(_) ->
	undefined.
encode_m_chat_get_roles_tos(Record) when is_record(Record, m_chat_get_roles_tos) ->
	#m_chat_get_roles_tos{channel_sign=Channel_sign} = Record,
	case Channel_sign =:= undefined of
		true ->
				Channel_signFinal = undefined,
				exit({required_field_not_assigned, m_chat_get_roles_tos, channel_sign});
		false ->
			Channel_signFinal = Channel_sign
	end,
	Channel_sign2 = common_tool:to_binary(Channel_signFinal),
	Channel_signLen = erlang:byte_size(Channel_sign2),

	<<Channel_signLen:16, Channel_sign2/binary>>;
encode_m_chat_get_roles_tos(_) -> 
	<<>>.

decode_m_chat_get_roles_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Channel_signLen:16, Bin1/binary>> = Bin0,
	<<Channel_sign:Channel_signLen/binary>> = Bin1,

	{m_chat_get_roles_tos, common_tool:to_list(Channel_sign)};

decode_m_chat_get_roles_tos(_) ->
	undefined.
encode_m_chat_get_roles_toc(Record) when is_record(Record, m_chat_get_roles_toc) ->
	#m_chat_get_roles_toc{succ=Succ,reason=Reason,channel_sign=Channel_sign,channel_type=Channel_type,roles=Roles} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_chat_get_roles_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Channel_sign =:= undefined of
		true ->
				Channel_signFinal = <<>>;
		false ->
			Channel_signFinal = Channel_sign
	end,
	case Channel_type =:= undefined of
		true ->
				Channel_typeFinal = 0;
		false ->
			Channel_typeFinal = Channel_type
	end,
	case Roles =:= undefined of
		true ->
			RolesFinal = [];
		false ->
			RolesFinal = Roles
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Channel_sign2 = common_tool:to_binary(Channel_signFinal),
	Channel_signLen = erlang:byte_size(Channel_sign2),
	Roles_bin = encode_p_chat_channel_role_infos(RolesFinal, <<>>),
	SizeRolesFinal = erlang:length(RolesFinal),
	BinLen_roles = erlang:byte_size(Roles_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Channel_signLen:16, Channel_sign2/binary,Channel_typeFinal:32/signed,SizeRolesFinal:16, BinLen_roles:32, Roles_bin/binary>>;
encode_m_chat_get_roles_toc(_) -> 
	<<>>.

decode_m_chat_get_roles_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Channel_signLen:16, Bin2/binary>> = Bin1,
	<<Channel_sign:Channel_signLen/binary,Channel_type:32/signed,_Sizeroles:16, _BinLenroles:32, SubBinroles/binary>> = Bin2,
	Roles = lists:reverse(decode_p_chat_channel_role_infos(SubBinroles, [])),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_chat_get_roles_toc, Succ,common_tool:to_list(Reason),common_tool:to_list(Channel_sign),Channel_type,Roles};

decode_m_chat_get_roles_toc(_) ->
	undefined.
encode_m_chat_warofking_toc(Record) when is_record(Record, m_chat_warofking_toc) ->
	#m_chat_warofking_toc{family_name=Family_name,role_name=Role_name} = Record,
	case Family_name =:= undefined of
		true ->
				Family_nameFinal = undefined,
				exit({required_field_not_assigned, m_chat_warofking_toc, family_name});
		false ->
			Family_nameFinal = Family_name
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = undefined,
				exit({required_field_not_assigned, m_chat_warofking_toc, role_name});
		false ->
			Role_nameFinal = Role_name
	end,
	Family_name2 = common_tool:to_binary(Family_nameFinal),
	Family_nameLen = erlang:byte_size(Family_name2),
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),

	<<Family_nameLen:16, Family_name2/binary,Role_nameLen:16, Role_name2/binary>>;
encode_m_chat_warofking_toc(_) -> 
	<<>>.

decode_m_chat_warofking_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Family_nameLen:16, Bin1/binary>> = Bin0,
	<<Family_name:Family_nameLen/binary,Role_nameLen:16, Bin2/binary>> = Bin1,
	<<Role_name:Role_nameLen/binary>> = Bin2,

	{m_chat_warofking_toc, common_tool:to_list(Family_name),common_tool:to_list(Role_name)};

decode_m_chat_warofking_toc(_) ->
	undefined.
encode_m_chat_get_goods_tos(Record) when is_record(Record, m_chat_get_goods_tos) ->
	#m_chat_get_goods_tos{goods_id=Goods_id} = Record,
	case Goods_id =:= undefined of
		true ->
				Goods_idFinal = undefined,
				exit({required_field_not_assigned, m_chat_get_goods_tos, goods_id});
		false ->
			Goods_idFinal = Goods_id
	end,

	<<Goods_idFinal:32/signed>>;
encode_m_chat_get_goods_tos(_) -> 
	<<>>.

decode_m_chat_get_goods_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Goods_id:32/signed>> = Bin0,

	{m_chat_get_goods_tos, Goods_id};

decode_m_chat_get_goods_tos(_) ->
	undefined.
encode_m_chat_get_goods_toc(Record) when is_record(Record, m_chat_get_goods_toc) ->
	#m_chat_get_goods_toc{succ=Succ,goods_id=Goods_id,goods_info=Goods_info,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Goods_id =:= undefined of
		true ->
				Goods_idFinal = 0;
		false ->
			Goods_idFinal = Goods_id
	end,
	case Goods_info =:= undefined of
		true ->
				Goods_infoFinal = 0;
		false ->
			Goods_infoFinal = Goods_info
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Goods_info_bin = encode_p_goods(Goods_infoFinal),
	BinLen_goods_info = erlang:byte_size(Goods_info_bin),
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,Goods_idFinal:32/signed,BinLen_goods_info:32, Goods_info_bin/binary,ReasonLen:16, Reason2/binary>>;
encode_m_chat_get_goods_toc(_) -> 
	<<>>.

decode_m_chat_get_goods_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,Goods_id:32/signed,SubBinSizegoods_info:32, Bin1/binary>> = Bin0,
	<<SubBingoods_info:SubBinSizegoods_info/binary, Bin2/binary>> = Bin1,
	Goods_info = decode_p_goods(SubBingoods_info),
	<<ReasonLen:16, Bin3/binary>> = Bin2,
	<<Reason:ReasonLen/binary>> = Bin3,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_chat_get_goods_toc, Succ,Goods_id,Goods_info,common_tool:to_list(Reason)};

decode_m_chat_get_goods_toc(_) ->
	undefined.
encode_m_chat_reconnect_tos(Record) when is_record(Record, m_chat_reconnect_tos) ->
	#m_chat_reconnect_tos{} = Record,

	<<>>;
encode_m_chat_reconnect_tos(_) -> 
	<<>>.

decode_m_chat_reconnect_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_chat_reconnect_tos};

decode_m_chat_reconnect_tos(_) ->
	undefined.
encode_m_chat_reconnect_toc(Record) when is_record(Record, m_chat_reconnect_toc) ->
	#m_chat_reconnect_toc{succ=Succ,reason=Reason,account=Account,roleid=Roleid,timestamp=Timestamp,key=Key} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_chat_reconnect_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Account =:= undefined of
		true ->
				AccountFinal = <<>>;
		false ->
			AccountFinal = Account
	end,
	case Roleid =:= undefined of
		true ->
				RoleidFinal = 0;
		false ->
			RoleidFinal = Roleid
	end,
	case Timestamp =:= undefined of
		true ->
				TimestampFinal = 0;
		false ->
			TimestampFinal = Timestamp
	end,
	case Key =:= undefined of
		true ->
				KeyFinal = <<>>;
		false ->
			KeyFinal = Key
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Account2 = common_tool:to_binary(AccountFinal),
	AccountLen = erlang:byte_size(Account2),
	Key2 = common_tool:to_binary(KeyFinal),
	KeyLen = erlang:byte_size(Key2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,AccountLen:16, Account2/binary,RoleidFinal:32/signed,TimestampFinal:32/signed,KeyLen:16, Key2/binary>>;
encode_m_chat_reconnect_toc(_) -> 
	<<>>.

decode_m_chat_reconnect_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,AccountLen:16, Bin2/binary>> = Bin1,
	<<Account:AccountLen/binary,Roleid:32/signed,Timestamp:32/signed,KeyLen:16, Bin3/binary>> = Bin2,
	<<Key:KeyLen/binary>> = Bin3,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_chat_reconnect_toc, Succ,common_tool:to_list(Reason),common_tool:to_list(Account),Roleid,Timestamp,common_tool:to_list(Key)};

decode_m_chat_reconnect_toc(_) ->
	undefined.
encode_m_chat_king_ban_tos(Record) when is_record(Record, m_chat_king_ban_tos) ->
	#m_chat_king_ban_tos{roleid=Roleid,rolename=Rolename,total_times=Total_times} = Record,
	case Roleid =:= undefined of
		true ->
				RoleidFinal = undefined,
				exit({required_field_not_assigned, m_chat_king_ban_tos, roleid});
		false ->
			RoleidFinal = Roleid
	end,
	case Rolename =:= undefined of
		true ->
				RolenameFinal = undefined,
				exit({required_field_not_assigned, m_chat_king_ban_tos, rolename});
		false ->
			RolenameFinal = Rolename
	end,
	case Total_times =:= undefined of
		true ->
				Total_timesFinal = undefined,
				exit({required_field_not_assigned, m_chat_king_ban_tos, total_times});
		false ->
			Total_timesFinal = Total_times
	end,
	Rolename2 = common_tool:to_binary(RolenameFinal),
	RolenameLen = erlang:byte_size(Rolename2),

	<<RoleidFinal:32/signed,RolenameLen:16, Rolename2/binary,Total_timesFinal:32/signed>>;
encode_m_chat_king_ban_tos(_) -> 
	<<>>.

decode_m_chat_king_ban_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Roleid:32/signed,RolenameLen:16, Bin1/binary>> = Bin0,
	<<Rolename:RolenameLen/binary,Total_times:32/signed>> = Bin1,

	{m_chat_king_ban_tos, Roleid,common_tool:to_list(Rolename),Total_times};

decode_m_chat_king_ban_tos(_) ->
	undefined.
encode_m_chat_king_ban_toc(Record) when is_record(Record, m_chat_king_ban_toc) ->
	#m_chat_king_ban_toc{succ=Succ,reason=Reason,bantimes=Bantimes} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Bantimes =:= undefined of
		true ->
				BantimesFinal = 0;
		false ->
			BantimesFinal = Bantimes
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BantimesFinal:32/signed>>;
encode_m_chat_king_ban_toc(_) -> 
	<<>>.

decode_m_chat_king_ban_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Bantimes:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_chat_king_ban_toc, Succ,common_tool:to_list(Reason),Bantimes};

decode_m_chat_king_ban_toc(_) ->
	undefined.
encode_m_login_flash_tos(Record) when is_record(Record, m_login_flash_tos) ->
	#m_login_flash_tos{account=Account,tstamp=Tstamp,agent_id=Agent_id,server_id=Server_id,fcm=Fcm,ticket=Ticket} = Record,
	case Account =:= undefined of
		true ->
				AccountFinal = undefined,
				exit({required_field_not_assigned, m_login_flash_tos, account});
		false ->
			AccountFinal = Account
	end,
	case Tstamp =:= undefined of
		true ->
				TstampFinal = undefined,
				exit({required_field_not_assigned, m_login_flash_tos, tstamp});
		false ->
			TstampFinal = Tstamp
	end,
	case Agent_id =:= undefined of
		true ->
				Agent_idFinal = undefined,
				exit({required_field_not_assigned, m_login_flash_tos, agent_id});
		false ->
			Agent_idFinal = Agent_id
	end,
	case Server_id =:= undefined of
		true ->
				Server_idFinal = undefined,
				exit({required_field_not_assigned, m_login_flash_tos, server_id});
		false ->
			Server_idFinal = Server_id
	end,
	case Fcm =:= undefined of
		true ->
				FcmFinal = undefined,
				exit({required_field_not_assigned, m_login_flash_tos, fcm});
		false ->
			FcmFinal = Fcm
	end,
	case Ticket =:= undefined of
		true ->
				TicketFinal = undefined,
				exit({required_field_not_assigned, m_login_flash_tos, ticket});
		false ->
			TicketFinal = Ticket
	end,
	Account2 = common_tool:to_binary(AccountFinal),
	AccountLen = erlang:byte_size(Account2),
	Ticket2 = common_tool:to_binary(TicketFinal),
	TicketLen = erlang:byte_size(Ticket2),

	<<AccountLen:16, Account2/binary,TstampFinal:32/signed,Agent_idFinal:32/signed,Server_idFinal:32/signed,FcmFinal:32/signed,TicketLen:16, Ticket2/binary>>;
encode_m_login_flash_tos(_) -> 
	<<>>.

decode_m_login_flash_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<AccountLen:16, Bin1/binary>> = Bin0,
	<<Account:AccountLen/binary,Tstamp:32/signed,Agent_id:32/signed,Server_id:32/signed,Fcm:32/signed,TicketLen:16, Bin2/binary>> = Bin1,
	<<Ticket:TicketLen/binary>> = Bin2,

	{m_login_flash_tos, common_tool:to_list(Account),Tstamp,Agent_id,Server_id,Fcm,common_tool:to_list(Ticket)};

decode_m_login_flash_tos(_) ->
	undefined.
encode_m_login_flash_toc(Record) when is_record(Record, m_login_flash_toc) ->
	#m_login_flash_toc{succ=Succ,reason=Reason,result=Result,faction_id=Faction_id} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Result =:= undefined of
		true ->
			ResultFinal = [];
		false ->
			ResultFinal = Result
	end,
	case Faction_id =:= undefined of
		true ->
				Faction_idFinal = 1;
		false ->
			Faction_idFinal = Faction_id
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Result_bin = encode_p_roles(ResultFinal, <<>>),
	SizeResultFinal = erlang:length(ResultFinal),
	BinLen_result = erlang:byte_size(Result_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,SizeResultFinal:16, BinLen_result:32, Result_bin/binary,Faction_idFinal:32/signed>>;
encode_m_login_flash_toc(_) -> 
	<<>>.

decode_m_login_flash_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_Sizeresult:16, BinLenresult:32, Bin2/binary>> = Bin1,
	<<SubBinresult:BinLenresult/binary, Bin3/binary>> = Bin2, 
	Result = lists:reverse(decode_p_roles(SubBinresult, [])),
	<<Faction_id:32/signed>> = Bin3,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_login_flash_toc, Succ,common_tool:to_list(Reason),Result,Faction_id};

decode_m_login_flash_toc(_) ->
	undefined.
encode_m_line_list_tos(Record) when is_record(Record, m_line_list_tos) ->
	#m_line_list_tos{roleid=Roleid} = Record,
	case Roleid =:= undefined of
		true ->
				RoleidFinal = undefined,
				exit({required_field_not_assigned, m_line_list_tos, roleid});
		false ->
			RoleidFinal = Roleid
	end,

	<<RoleidFinal:32/signed>>;
encode_m_line_list_tos(_) -> 
	<<>>.

decode_m_line_list_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Roleid:32/signed>> = Bin0,

	{m_line_list_tos, Roleid};

decode_m_line_list_tos(_) ->
	undefined.
encode_m_line_list_toc(Record) when is_record(Record, m_line_list_toc) ->
	#m_line_list_toc{succ=Succ,msg=Msg,lines=Lines} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Msg =:= undefined of
		true ->
				MsgFinal = <<>>;
		false ->
			MsgFinal = Msg
	end,
	case Lines =:= undefined of
		true ->
			LinesFinal = [];
		false ->
			LinesFinal = Lines
	end,
	Msg2 = common_tool:to_binary(MsgFinal),
	MsgLen = erlang:byte_size(Msg2),
	Lines_bin = encode_p_line_infos(LinesFinal, <<>>),
	SizeLinesFinal = erlang:length(LinesFinal),
	BinLen_lines = erlang:byte_size(Lines_bin),

	<<SuccFinal:8,MsgLen:16, Msg2/binary,SizeLinesFinal:16, BinLen_lines:32, Lines_bin/binary>>;
encode_m_line_list_toc(_) -> 
	<<>>.

decode_m_line_list_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,MsgLen:16, Bin1/binary>> = Bin0,
	<<Msg:MsgLen/binary,_Sizelines:16, _BinLenlines:32, SubBinlines/binary>> = Bin1,
	Lines = lists:reverse(decode_p_line_infos(SubBinlines, [])),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_line_list_toc, Succ,common_tool:to_list(Msg),Lines};

decode_m_line_list_toc(_) ->
	undefined.
encode_p_line_info(Record) when is_record(Record, p_line_info) ->
	#p_line_info{guid=Guid,ip=Ip,port=Port,line=Line} = Record,
	case Guid =:= undefined of
		true ->
				GuidFinal = undefined,
				exit({required_field_not_assigned, p_line_info, guid});
		false ->
			GuidFinal = Guid
	end,
	case Ip =:= undefined of
		true ->
				IpFinal = undefined,
				exit({required_field_not_assigned, p_line_info, ip});
		false ->
			IpFinal = Ip
	end,
	case Port =:= undefined of
		true ->
				PortFinal = undefined,
				exit({required_field_not_assigned, p_line_info, port});
		false ->
			PortFinal = Port
	end,
	case Line =:= undefined of
		true ->
				LineFinal = undefined,
				exit({required_field_not_assigned, p_line_info, line});
		false ->
			LineFinal = Line
	end,
	Guid2 = common_tool:to_binary(GuidFinal),
	GuidLen = erlang:byte_size(Guid2),
	Ip2 = common_tool:to_binary(IpFinal),
	IpLen = erlang:byte_size(Ip2),
	Line2 = common_tool:to_binary(LineFinal),
	LineLen = erlang:byte_size(Line2),

	<<GuidLen:16, Guid2/binary,IpLen:16, Ip2/binary,PortFinal:32/signed,LineLen:16, Line2/binary>>;
encode_p_line_info(_) -> 
	<<>>.

decode_p_line_info(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<GuidLen:16, Bin1/binary>> = Bin0,
	<<Guid:GuidLen/binary,IpLen:16, Bin2/binary>> = Bin1,
	<<Ip:IpLen/binary,Port:32/signed,LineLen:16, Bin3/binary>> = Bin2,
	<<Line:LineLen/binary>> = Bin3,

	{p_line_info, common_tool:to_list(Guid),common_tool:to_list(Ip),Port,common_tool:to_list(Line)};

decode_p_line_info(_) ->
	undefined.
encode_m_role_list_toc(Record) when is_record(Record, m_role_list_toc) ->
	#m_role_list_toc{succ=Succ,reason=Reason,result=Result} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Result =:= undefined of
		true ->
			ResultFinal = [];
		false ->
			ResultFinal = Result
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Result_bin = encode_p_roles(ResultFinal, <<>>),
	SizeResultFinal = erlang:length(ResultFinal),
	BinLen_result = erlang:byte_size(Result_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,SizeResultFinal:16, BinLen_result:32, Result_bin/binary>>;
encode_m_role_list_toc(_) -> 
	<<>>.

decode_m_role_list_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_Sizeresult:16, _BinLenresult:32, SubBinresult/binary>> = Bin1,
	Result = lists:reverse(decode_p_roles(SubBinresult, [])),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_role_list_toc, Succ,common_tool:to_list(Reason),Result};

decode_m_role_list_toc(_) ->
	undefined.
encode_m_role_add_tos(Record) when is_record(Record, m_role_add_tos) ->
	#m_role_add_tos{role_name=Role_name,sex=Sex,faction_id=Faction_id,head=Head,hair_type=Hair_type,hair_color=Hair_color} = Record,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = undefined,
				exit({required_field_not_assigned, m_role_add_tos, role_name});
		false ->
			Role_nameFinal = Role_name
	end,
	case Sex =:= undefined of
		true ->
				SexFinal = undefined,
				exit({required_field_not_assigned, m_role_add_tos, sex});
		false ->
			SexFinal = Sex
	end,
	case Faction_id =:= undefined of
		true ->
				Faction_idFinal = undefined,
				exit({required_field_not_assigned, m_role_add_tos, faction_id});
		false ->
			Faction_idFinal = Faction_id
	end,
	case Head =:= undefined of
		true ->
				HeadFinal = undefined,
				exit({required_field_not_assigned, m_role_add_tos, head});
		false ->
			HeadFinal = Head
	end,
	case Hair_type =:= undefined of
		true ->
				Hair_typeFinal = undefined,
				exit({required_field_not_assigned, m_role_add_tos, hair_type});
		false ->
			Hair_typeFinal = Hair_type
	end,
	case Hair_color =:= undefined of
		true ->
				Hair_colorFinal = 0;
		false ->
			Hair_colorFinal = Hair_color
	end,
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),

	<<Role_nameLen:16, Role_name2/binary,SexFinal:32/signed,Faction_idFinal:32/signed,HeadFinal:32/signed,Hair_typeFinal:32/signed,Hair_colorFinal:32/signed>>;
encode_m_role_add_tos(_) -> 
	<<>>.

decode_m_role_add_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_nameLen:16, Bin1/binary>> = Bin0,
	<<Role_name:Role_nameLen/binary,Sex:32/signed,Faction_id:32/signed,Head:32/signed,Hair_type:32/signed,Hair_color:32/signed>> = Bin1,

	{m_role_add_tos, common_tool:to_list(Role_name),Sex,Faction_id,Head,Hair_type,Hair_color};

decode_m_role_add_tos(_) ->
	undefined.
encode_m_role_add_toc(Record) when is_record(Record, m_role_add_toc) ->
	#m_role_add_toc{succ=Succ,reason=Reason,result=Result} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Result =:= undefined of
		true ->
			ResultFinal = [];
		false ->
			ResultFinal = Result
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Result_bin = encode_p_roles(ResultFinal, <<>>),
	SizeResultFinal = erlang:length(ResultFinal),
	BinLen_result = erlang:byte_size(Result_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,SizeResultFinal:16, BinLen_result:32, Result_bin/binary>>;
encode_m_role_add_toc(_) -> 
	<<>>.

decode_m_role_add_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_Sizeresult:16, _BinLenresult:32, SubBinresult/binary>> = Bin1,
	Result = lists:reverse(decode_p_roles(SubBinresult, [])),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_role_add_toc, Succ,common_tool:to_list(Reason),Result};

decode_m_role_add_toc(_) ->
	undefined.
encode_m_role_del_tos(Record) when is_record(Record, m_role_del_tos) ->
	#m_role_del_tos{roleid=Roleid} = Record,
	case Roleid =:= undefined of
		true ->
				RoleidFinal = undefined,
				exit({required_field_not_assigned, m_role_del_tos, roleid});
		false ->
			RoleidFinal = Roleid
	end,

	<<RoleidFinal:32/signed>>;
encode_m_role_del_tos(_) -> 
	<<>>.

decode_m_role_del_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Roleid:32/signed>> = Bin0,

	{m_role_del_tos, Roleid};

decode_m_role_del_tos(_) ->
	undefined.
encode_m_role_del_toc(Record) when is_record(Record, m_role_del_toc) ->
	#m_role_del_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_role_del_toc(_) -> 
	<<>>.

decode_m_role_del_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_role_del_toc, Succ,common_tool:to_list(Reason)};

decode_m_role_del_toc(_) ->
	undefined.
encode_m_role_chose_tos(Record) when is_record(Record, m_role_chose_tos) ->
	#m_role_chose_tos{roleid=Roleid} = Record,
	case Roleid =:= undefined of
		true ->
				RoleidFinal = undefined,
				exit({required_field_not_assigned, m_role_chose_tos, roleid});
		false ->
			RoleidFinal = Roleid
	end,

	<<RoleidFinal:32/signed>>;
encode_m_role_chose_tos(_) -> 
	<<>>.

decode_m_role_chose_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Roleid:32/signed>> = Bin0,

	{m_role_chose_tos, Roleid};

decode_m_role_chose_tos(_) ->
	undefined.
encode_m_role_chose_toc(Record) when is_record(Record, m_role_chose_toc) ->
	#m_role_chose_toc{succ=Succ,msg=Msg,key=Key,lines=Lines,wait_second=Wait_second} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_role_chose_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Msg =:= undefined of
		true ->
				MsgFinal = <<>>;
		false ->
			MsgFinal = Msg
	end,
	case Key =:= undefined of
		true ->
				KeyFinal = <<>>;
		false ->
			KeyFinal = Key
	end,
	case Lines =:= undefined of
		true ->
			LinesFinal = [];
		false ->
			LinesFinal = Lines
	end,
	case Wait_second =:= undefined of
		true ->
				Wait_secondFinal = 0;
		false ->
			Wait_secondFinal = Wait_second
	end,
	Msg2 = common_tool:to_binary(MsgFinal),
	MsgLen = erlang:byte_size(Msg2),
	Key2 = common_tool:to_binary(KeyFinal),
	KeyLen = erlang:byte_size(Key2),
	Lines_bin = encode_p_line_infos(LinesFinal, <<>>),
	SizeLinesFinal = erlang:length(LinesFinal),
	BinLen_lines = erlang:byte_size(Lines_bin),

	<<SuccFinal:8,MsgLen:16, Msg2/binary,KeyLen:16, Key2/binary,SizeLinesFinal:16, BinLen_lines:32, Lines_bin/binary,Wait_secondFinal:32/signed>>;
encode_m_role_chose_toc(_) -> 
	<<>>.

decode_m_role_chose_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,MsgLen:16, Bin1/binary>> = Bin0,
	<<Msg:MsgLen/binary,KeyLen:16, Bin2/binary>> = Bin1,
	<<Key:KeyLen/binary,_Sizelines:16, BinLenlines:32, Bin3/binary>> = Bin2,
	<<SubBinlines:BinLenlines/binary, Bin4/binary>> = Bin3, 
	Lines = lists:reverse(decode_p_line_infos(SubBinlines, [])),
	<<Wait_second:32/signed>> = Bin4,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_role_chose_toc, Succ,common_tool:to_list(Msg),common_tool:to_list(Key),Lines,Wait_second};

decode_m_role_chose_toc(_) ->
	undefined.
encode_m_auth_key_tos(Record) when is_record(Record, m_auth_key_tos) ->
	#m_auth_key_tos{account_name=Account_name,role_id=Role_id,key=Key,time=Time} = Record,
	case Account_name =:= undefined of
		true ->
				Account_nameFinal = undefined,
				exit({required_field_not_assigned, m_auth_key_tos, account_name});
		false ->
			Account_nameFinal = Account_name
	end,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, m_auth_key_tos, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Key =:= undefined of
		true ->
				KeyFinal = undefined,
				exit({required_field_not_assigned, m_auth_key_tos, key});
		false ->
			KeyFinal = Key
	end,
	case Time =:= undefined of
		true ->
				TimeFinal = undefined,
				exit({required_field_not_assigned, m_auth_key_tos, time});
		false ->
			TimeFinal = Time
	end,
	Account_name2 = common_tool:to_binary(Account_nameFinal),
	Account_nameLen = erlang:byte_size(Account_name2),
	Key2 = common_tool:to_binary(KeyFinal),
	KeyLen = erlang:byte_size(Key2),

	<<Account_nameLen:16, Account_name2/binary,Role_idFinal:32/signed,KeyLen:16, Key2/binary,TimeFinal:32/signed>>;
encode_m_auth_key_tos(_) -> 
	<<>>.

decode_m_auth_key_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Account_nameLen:16, Bin1/binary>> = Bin0,
	<<Account_name:Account_nameLen/binary,Role_id:32/signed,KeyLen:16, Bin2/binary>> = Bin1,
	<<Key:KeyLen/binary,Time:32/signed>> = Bin2,

	{m_auth_key_tos, common_tool:to_list(Account_name),Role_id,common_tool:to_list(Key),Time};

decode_m_auth_key_tos(_) ->
	undefined.
encode_m_auth_key_toc(Record) when is_record(Record, m_auth_key_toc) ->
	#m_auth_key_toc{succ=Succ,reason=Reason,role_details=Role_details,bags=Bags,family=Family,server_time=Server_time} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_auth_key_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Role_details =:= undefined of
		true ->
				Role_detailsFinal = 0;
		false ->
			Role_detailsFinal = Role_details
	end,
	case Bags =:= undefined of
		true ->
			BagsFinal = [];
		false ->
			BagsFinal = Bags
	end,
	case Family =:= undefined of
		true ->
				FamilyFinal = 0;
		false ->
			FamilyFinal = Family
	end,
	case Server_time =:= undefined of
		true ->
				Server_timeFinal = 0;
		false ->
			Server_timeFinal = Server_time
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Role_details_bin = encode_p_role(Role_detailsFinal),
	BinLen_role_details = erlang:byte_size(Role_details_bin),
	Bags_bin = encode_p_bag_contents(BagsFinal, <<>>),
	SizeBagsFinal = erlang:length(BagsFinal),
	BinLen_bags = erlang:byte_size(Bags_bin),
	Family_bin = encode_p_family_info(FamilyFinal),
	BinLen_family = erlang:byte_size(Family_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_role_details:32, Role_details_bin/binary,SizeBagsFinal:16, BinLen_bags:32, Bags_bin/binary,BinLen_family:32, Family_bin/binary,Server_timeFinal:32/signed>>;
encode_m_auth_key_toc(_) -> 
	<<>>.

decode_m_auth_key_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,SubBinSizerole_details:32, Bin2/binary>> = Bin1,
	<<SubBinrole_details:SubBinSizerole_details/binary, Bin3/binary>> = Bin2,
	Role_details = decode_p_role(SubBinrole_details),
	<<_Sizebags:16, BinLenbags:32, Bin4/binary>> = Bin3,
	<<SubBinbags:BinLenbags/binary, Bin5/binary>> = Bin4, 
	Bags = lists:reverse(decode_p_bag_contents(SubBinbags, [])),
	<<SubBinSizefamily:32, Bin6/binary>> = Bin5,
	<<SubBinfamily:SubBinSizefamily/binary, Bin7/binary>> = Bin6,
	Family = decode_p_family_info(SubBinfamily),
	<<Server_time:32/signed>> = Bin7,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_auth_key_toc, Succ,common_tool:to_list(Reason),Role_details,Bags,Family,Server_time};

decode_m_auth_key_toc(_) ->
	undefined.
encode_m_auth_chat_key_tos(Record) when is_record(Record, m_auth_chat_key_tos) ->
	#m_auth_chat_key_tos{times=Times} = Record,
	case Times =:= undefined of
		true ->
				TimesFinal = 1;
		false ->
			TimesFinal = Times
	end,

	<<TimesFinal:32/signed>>;
encode_m_auth_chat_key_tos(_) -> 
	<<>>.

decode_m_auth_chat_key_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Times:32/signed>> = Bin0,

	{m_auth_chat_key_tos, Times};

decode_m_auth_chat_key_tos(_) ->
	undefined.
encode_m_auth_chat_key_toc(Record) when is_record(Record, m_auth_chat_key_toc) ->
	#m_auth_chat_key_toc{succ=Succ,times=Times,reason=Reason,account=Account,roleid=Roleid,timestamp=Timestamp,key=Key} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_auth_chat_key_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Times =:= undefined of
		true ->
				TimesFinal = undefined,
				exit({required_field_not_assigned, m_auth_chat_key_toc, times});
		false ->
			TimesFinal = Times
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Account =:= undefined of
		true ->
				AccountFinal = <<>>;
		false ->
			AccountFinal = Account
	end,
	case Roleid =:= undefined of
		true ->
				RoleidFinal = 0;
		false ->
			RoleidFinal = Roleid
	end,
	case Timestamp =:= undefined of
		true ->
				TimestampFinal = 0;
		false ->
			TimestampFinal = Timestamp
	end,
	case Key =:= undefined of
		true ->
				KeyFinal = <<>>;
		false ->
			KeyFinal = Key
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Account2 = common_tool:to_binary(AccountFinal),
	AccountLen = erlang:byte_size(Account2),
	Key2 = common_tool:to_binary(KeyFinal),
	KeyLen = erlang:byte_size(Key2),

	<<SuccFinal:8,TimesFinal:32/signed,ReasonLen:16, Reason2/binary,AccountLen:16, Account2/binary,RoleidFinal:32/signed,TimestampFinal:32/signed,KeyLen:16, Key2/binary>>;
encode_m_auth_chat_key_toc(_) -> 
	<<>>.

decode_m_auth_chat_key_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,Times:32/signed,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,AccountLen:16, Bin2/binary>> = Bin1,
	<<Account:AccountLen/binary,Roleid:32/signed,Timestamp:32/signed,KeyLen:16, Bin3/binary>> = Bin2,
	<<Key:KeyLen/binary>> = Bin3,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_auth_chat_key_toc, Succ,Times,common_tool:to_list(Reason),common_tool:to_list(Account),Roleid,Timestamp,common_tool:to_list(Key)};

decode_m_auth_chat_key_toc(_) ->
	undefined.
encode_p_bag_content(Record) when is_record(Record, p_bag_content) ->
	#p_bag_content{bag_id=Bag_id,goods=Goods,rows=Rows,columns=Columns,typeid=Typeid,grid_number=Grid_number} = Record,
	case Bag_id =:= undefined of
		true ->
				Bag_idFinal = undefined,
				exit({required_field_not_assigned, p_bag_content, bag_id});
		false ->
			Bag_idFinal = Bag_id
	end,
	case Goods =:= undefined of
		true ->
			GoodsFinal = [];
		false ->
			GoodsFinal = Goods
	end,
	case Rows =:= undefined of
		true ->
				RowsFinal = 0;
		false ->
			RowsFinal = Rows
	end,
	case Columns =:= undefined of
		true ->
				ColumnsFinal = 0;
		false ->
			ColumnsFinal = Columns
	end,
	case Typeid =:= undefined of
		true ->
				TypeidFinal = 0;
		false ->
			TypeidFinal = Typeid
	end,
	case Grid_number =:= undefined of
		true ->
				Grid_numberFinal = 0;
		false ->
			Grid_numberFinal = Grid_number
	end,
	Goods_bin = encode_p_goodss(GoodsFinal, <<>>),
	SizeGoodsFinal = erlang:length(GoodsFinal),
	BinLen_goods = erlang:byte_size(Goods_bin),

	<<Bag_idFinal:32/signed,SizeGoodsFinal:16, BinLen_goods:32, Goods_bin/binary,RowsFinal:32/signed,ColumnsFinal:32/signed,TypeidFinal:32/signed,Grid_numberFinal:32/signed>>;
encode_p_bag_content(_) -> 
	<<>>.

decode_p_bag_content(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Bag_id:32/signed,_Sizegoods:16, BinLengoods:32, Bin1/binary>> = Bin0,
	<<SubBingoods:BinLengoods/binary, Bin2/binary>> = Bin1, 
	Goods = lists:reverse(decode_p_goodss(SubBingoods, [])),
	<<Rows:32/signed,Columns:32/signed,Typeid:32/signed,Grid_number:32/signed>> = Bin2,

	{p_bag_content, Bag_id,Goods,Rows,Columns,Typeid,Grid_number};

decode_p_bag_content(_) ->
	undefined.
encode_p_skill_pos(Record) when is_record(Record, p_skill_pos) ->
	#p_skill_pos{pos=Pos,skill_id=Skill_id} = Record,
	case Pos =:= undefined of
		true ->
				PosFinal = undefined,
				exit({required_field_not_assigned, p_skill_pos, pos});
		false ->
			PosFinal = Pos
	end,
	case Skill_id =:= undefined of
		true ->
				Skill_idFinal = undefined,
				exit({required_field_not_assigned, p_skill_pos, skill_id});
		false ->
			Skill_idFinal = Skill_id
	end,

	<<PosFinal:32/signed,Skill_idFinal:32/signed>>;
encode_p_skill_pos(_) -> 
	<<>>.

decode_p_skill_pos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Pos:32/signed,Skill_id:32/signed>> = Bin0,

	{p_skill_pos, Pos,Skill_id};

decode_p_skill_pos(_) ->
	undefined.
encode_m_map_enter_tos(Record) when is_record(Record, m_map_enter_tos) ->
	#m_map_enter_tos{map_id=Map_id} = Record,
	case Map_id =:= undefined of
		true ->
				Map_idFinal = undefined,
				exit({required_field_not_assigned, m_map_enter_tos, map_id});
		false ->
			Map_idFinal = Map_id
	end,

	<<Map_idFinal:32/signed>>;
encode_m_map_enter_tos(_) -> 
	<<>>.

decode_m_map_enter_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Map_id:32/signed>> = Bin0,

	{m_map_enter_tos, Map_id};

decode_m_map_enter_tos(_) ->
	undefined.
encode_m_map_enter_toc(Record) when is_record(Record, m_map_enter_toc) ->
	#m_map_enter_toc{succ=Succ,return_self=Return_self,reason=Reason,roles=Roles,monsters=Monsters,dropthings=Dropthings,stalls=Stalls,grafts=Grafts,ybcs=Ybcs,pos=Pos,server_npcs=Server_npcs,role_map_info=Role_map_info,pets=Pets,trap_list=Trap_list} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Roles =:= undefined of
		true ->
			RolesFinal = [];
		false ->
			RolesFinal = Roles
	end,
	case Monsters =:= undefined of
		true ->
			MonstersFinal = [];
		false ->
			MonstersFinal = Monsters
	end,
	case Dropthings =:= undefined of
		true ->
			DropthingsFinal = [];
		false ->
			DropthingsFinal = Dropthings
	end,
	case Stalls =:= undefined of
		true ->
			StallsFinal = [];
		false ->
			StallsFinal = Stalls
	end,
	case Grafts =:= undefined of
		true ->
			GraftsFinal = [];
		false ->
			GraftsFinal = Grafts
	end,
	case Ybcs =:= undefined of
		true ->
			YbcsFinal = [];
		false ->
			YbcsFinal = Ybcs
	end,
	case Pos =:= undefined of
		true ->
				PosFinal = 0;
		false ->
			PosFinal = Pos
	end,
	case Server_npcs =:= undefined of
		true ->
			Server_npcsFinal = [];
		false ->
			Server_npcsFinal = Server_npcs
	end,
	case Role_map_info =:= undefined of
		true ->
				Role_map_infoFinal = 0;
		false ->
			Role_map_infoFinal = Role_map_info
	end,
	case Pets =:= undefined of
		true ->
			PetsFinal = [];
		false ->
			PetsFinal = Pets
	end,
	case Trap_list =:= undefined of
		true ->
			Trap_listFinal = [];
		false ->
			Trap_listFinal = Trap_list
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Roles_bin = encode_p_map_roles(RolesFinal, <<>>),
	SizeRolesFinal = erlang:length(RolesFinal),
	BinLen_roles = erlang:byte_size(Roles_bin),
	Monsters_bin = encode_p_map_monsters(MonstersFinal, <<>>),
	SizeMonstersFinal = erlang:length(MonstersFinal),
	BinLen_monsters = erlang:byte_size(Monsters_bin),
	Dropthings_bin = encode_p_map_dropthings(DropthingsFinal, <<>>),
	SizeDropthingsFinal = erlang:length(DropthingsFinal),
	BinLen_dropthings = erlang:byte_size(Dropthings_bin),
	Stalls_bin = encode_p_map_stalls(StallsFinal, <<>>),
	SizeStallsFinal = erlang:length(StallsFinal),
	BinLen_stalls = erlang:byte_size(Stalls_bin),
	Grafts_bin = encode_p_map_collects(GraftsFinal, <<>>),
	SizeGraftsFinal = erlang:length(GraftsFinal),
	BinLen_grafts = erlang:byte_size(Grafts_bin),
	Ybcs_bin = encode_p_map_ybcs(YbcsFinal, <<>>),
	SizeYbcsFinal = erlang:length(YbcsFinal),
	BinLen_ybcs = erlang:byte_size(Ybcs_bin),
	Pos_bin = encode_p_role_pos(PosFinal),
	BinLen_pos = erlang:byte_size(Pos_bin),
	Server_npcs_bin = encode_p_map_server_npcs(Server_npcsFinal, <<>>),
	SizeServer_npcsFinal = erlang:length(Server_npcsFinal),
	BinLen_server_npcs = erlang:byte_size(Server_npcs_bin),
	Role_map_info_bin = encode_p_map_role(Role_map_infoFinal),
	BinLen_role_map_info = erlang:byte_size(Role_map_info_bin),
	Pets_bin = encode_p_map_pets(PetsFinal, <<>>),
	SizePetsFinal = erlang:length(PetsFinal),
	BinLen_pets = erlang:byte_size(Pets_bin),
	Trap_list_bin = encode_p_map_traps(Trap_listFinal, <<>>),
	SizeTrap_listFinal = erlang:length(Trap_listFinal),
	BinLen_trap_list = erlang:byte_size(Trap_list_bin),

	<<SuccFinal:8,Return_selfFinal:8,ReasonLen:16, Reason2/binary,SizeRolesFinal:16, BinLen_roles:32, Roles_bin/binary,SizeMonstersFinal:16, BinLen_monsters:32, Monsters_bin/binary,SizeDropthingsFinal:16, BinLen_dropthings:32, Dropthings_bin/binary,SizeStallsFinal:16, BinLen_stalls:32, Stalls_bin/binary,SizeGraftsFinal:16, BinLen_grafts:32, Grafts_bin/binary,SizeYbcsFinal:16, BinLen_ybcs:32, Ybcs_bin/binary,BinLen_pos:32, Pos_bin/binary,SizeServer_npcsFinal:16, BinLen_server_npcs:32, Server_npcs_bin/binary,BinLen_role_map_info:32, Role_map_info_bin/binary,SizePetsFinal:16, BinLen_pets:32, Pets_bin/binary,SizeTrap_listFinal:16, BinLen_trap_list:32, Trap_list_bin/binary>>;
encode_m_map_enter_toc(_) -> 
	<<>>.

decode_m_map_enter_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,Return_selfTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_Sizeroles:16, BinLenroles:32, Bin2/binary>> = Bin1,
	<<SubBinroles:BinLenroles/binary, Bin3/binary>> = Bin2, 
	Roles = lists:reverse(decode_p_map_roles(SubBinroles, [])),
	<<_Sizemonsters:16, BinLenmonsters:32, Bin4/binary>> = Bin3,
	<<SubBinmonsters:BinLenmonsters/binary, Bin5/binary>> = Bin4, 
	Monsters = lists:reverse(decode_p_map_monsters(SubBinmonsters, [])),
	<<_Sizedropthings:16, BinLendropthings:32, Bin6/binary>> = Bin5,
	<<SubBindropthings:BinLendropthings/binary, Bin7/binary>> = Bin6, 
	Dropthings = lists:reverse(decode_p_map_dropthings(SubBindropthings, [])),
	<<_Sizestalls:16, BinLenstalls:32, Bin8/binary>> = Bin7,
	<<SubBinstalls:BinLenstalls/binary, Bin9/binary>> = Bin8, 
	Stalls = lists:reverse(decode_p_map_stalls(SubBinstalls, [])),
	<<_Sizegrafts:16, BinLengrafts:32, Bin10/binary>> = Bin9,
	<<SubBingrafts:BinLengrafts/binary, Bin11/binary>> = Bin10, 
	Grafts = lists:reverse(decode_p_map_collects(SubBingrafts, [])),
	<<_Sizeybcs:16, BinLenybcs:32, Bin12/binary>> = Bin11,
	<<SubBinybcs:BinLenybcs/binary, Bin13/binary>> = Bin12, 
	Ybcs = lists:reverse(decode_p_map_ybcs(SubBinybcs, [])),
	<<SubBinSizepos:32, Bin14/binary>> = Bin13,
	<<SubBinpos:SubBinSizepos/binary, Bin15/binary>> = Bin14,
	Pos = decode_p_role_pos(SubBinpos),
	<<_Sizeserver_npcs:16, BinLenserver_npcs:32, Bin16/binary>> = Bin15,
	<<SubBinserver_npcs:BinLenserver_npcs/binary, Bin17/binary>> = Bin16, 
	Server_npcs = lists:reverse(decode_p_map_server_npcs(SubBinserver_npcs, [])),
	<<SubBinSizerole_map_info:32, Bin18/binary>> = Bin17,
	<<SubBinrole_map_info:SubBinSizerole_map_info/binary, Bin19/binary>> = Bin18,
	Role_map_info = decode_p_map_role(SubBinrole_map_info),
	<<_Sizepets:16, BinLenpets:32, Bin20/binary>> = Bin19,
	<<SubBinpets:BinLenpets/binary, Bin21/binary>> = Bin20, 
	Pets = lists:reverse(decode_p_map_pets(SubBinpets, [])),
	<<_Sizetrap_list:16, _BinLentrap_list:32, SubBintrap_list/binary>> = Bin21,
	Trap_list = lists:reverse(decode_p_map_traps(SubBintrap_list, [])),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_map_enter_toc, Succ,Return_self,common_tool:to_list(Reason),Roles,Monsters,Dropthings,Stalls,Grafts,Ybcs,Pos,Server_npcs,Role_map_info,Pets,Trap_list};

decode_m_map_enter_toc(_) ->
	undefined.
encode_m_map_slice_enter_toc(Record) when is_record(Record, m_map_slice_enter_toc) ->
	#m_map_slice_enter_toc{roles=Roles,monsters=Monsters,dropthings=Dropthings,stalls=Stalls,grafts=Grafts,ybcs=Ybcs,return_self=Return_self,server_npcs=Server_npcs,pets=Pets,trap_list=Trap_list,del_roles=Del_roles,del_monsters=Del_monsters,del_dropthings=Del_dropthings,del_stalls=Del_stalls,del_grafts=Del_grafts,del_ybcs=Del_ybcs,del_server_npcs=Del_server_npcs,del_pets=Del_pets,del_trap_list=Del_trap_list,enter_type=Enter_type,src_pos=Src_pos} = Record,
	case Roles =:= undefined of
		true ->
			RolesFinal = [];
		false ->
			RolesFinal = Roles
	end,
	case Monsters =:= undefined of
		true ->
			MonstersFinal = [];
		false ->
			MonstersFinal = Monsters
	end,
	case Dropthings =:= undefined of
		true ->
			DropthingsFinal = [];
		false ->
			DropthingsFinal = Dropthings
	end,
	case Stalls =:= undefined of
		true ->
			StallsFinal = [];
		false ->
			StallsFinal = Stalls
	end,
	case Grafts =:= undefined of
		true ->
			GraftsFinal = [];
		false ->
			GraftsFinal = Grafts
	end,
	case Ybcs =:= undefined of
		true ->
			YbcsFinal = [];
		false ->
			YbcsFinal = Ybcs
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Server_npcs =:= undefined of
		true ->
			Server_npcsFinal = [];
		false ->
			Server_npcsFinal = Server_npcs
	end,
	case Pets =:= undefined of
		true ->
			PetsFinal = [];
		false ->
			PetsFinal = Pets
	end,
	case Trap_list =:= undefined of
		true ->
			Trap_listFinal = [];
		false ->
			Trap_listFinal = Trap_list
	end,
	case Del_roles =:= undefined of
		true ->
			Del_rolesFinal = [];
		false ->
			Del_rolesFinal = Del_roles
	end,
	case Del_monsters =:= undefined of
		true ->
			Del_monstersFinal = [];
		false ->
			Del_monstersFinal = Del_monsters
	end,
	case Del_dropthings =:= undefined of
		true ->
			Del_dropthingsFinal = [];
		false ->
			Del_dropthingsFinal = Del_dropthings
	end,
	case Del_stalls =:= undefined of
		true ->
			Del_stallsFinal = [];
		false ->
			Del_stallsFinal = Del_stalls
	end,
	case Del_grafts =:= undefined of
		true ->
			Del_graftsFinal = [];
		false ->
			Del_graftsFinal = Del_grafts
	end,
	case Del_ybcs =:= undefined of
		true ->
			Del_ybcsFinal = [];
		false ->
			Del_ybcsFinal = Del_ybcs
	end,
	case Del_server_npcs =:= undefined of
		true ->
			Del_server_npcsFinal = [];
		false ->
			Del_server_npcsFinal = Del_server_npcs
	end,
	case Del_pets =:= undefined of
		true ->
			Del_petsFinal = [];
		false ->
			Del_petsFinal = Del_pets
	end,
	case Del_trap_list =:= undefined of
		true ->
			Del_trap_listFinal = [];
		false ->
			Del_trap_listFinal = Del_trap_list
	end,
	case Enter_type =:= undefined of
		true ->
				Enter_typeFinal = 1;
		false ->
			Enter_typeFinal = Enter_type
	end,
	case Src_pos =:= undefined of
		true ->
				Src_posFinal = 0;
		false ->
			Src_posFinal = Src_pos
	end,
	Roles_bin = encode_p_map_roles(RolesFinal, <<>>),
	SizeRolesFinal = erlang:length(RolesFinal),
	BinLen_roles = erlang:byte_size(Roles_bin),
	Monsters_bin = encode_p_map_monsters(MonstersFinal, <<>>),
	SizeMonstersFinal = erlang:length(MonstersFinal),
	BinLen_monsters = erlang:byte_size(Monsters_bin),
	Dropthings_bin = encode_p_map_dropthings(DropthingsFinal, <<>>),
	SizeDropthingsFinal = erlang:length(DropthingsFinal),
	BinLen_dropthings = erlang:byte_size(Dropthings_bin),
	Stalls_bin = encode_p_map_stalls(StallsFinal, <<>>),
	SizeStallsFinal = erlang:length(StallsFinal),
	BinLen_stalls = erlang:byte_size(Stalls_bin),
	Grafts_bin = encode_p_map_collects(GraftsFinal, <<>>),
	SizeGraftsFinal = erlang:length(GraftsFinal),
	BinLen_grafts = erlang:byte_size(Grafts_bin),
	Ybcs_bin = encode_p_map_ybcs(YbcsFinal, <<>>),
	SizeYbcsFinal = erlang:length(YbcsFinal),
	BinLen_ybcs = erlang:byte_size(Ybcs_bin),
	Server_npcs_bin = encode_p_map_server_npcs(Server_npcsFinal, <<>>),
	SizeServer_npcsFinal = erlang:length(Server_npcsFinal),
	BinLen_server_npcs = erlang:byte_size(Server_npcs_bin),
	Pets_bin = encode_p_map_pets(PetsFinal, <<>>),
	SizePetsFinal = erlang:length(PetsFinal),
	BinLen_pets = erlang:byte_size(Pets_bin),
	Trap_list_bin = encode_p_map_traps(Trap_listFinal, <<>>),
	SizeTrap_listFinal = erlang:length(Trap_listFinal),
	BinLen_trap_list = erlang:byte_size(Trap_list_bin),
	Del_roles_bin = encode_int32s(Del_rolesFinal, <<>>),
	SizeDel_rolesFinal = erlang:length(Del_rolesFinal),
	BinLen_del_roles = erlang:byte_size(Del_roles_bin),
	Del_monsters_bin = encode_int32s(Del_monstersFinal, <<>>),
	SizeDel_monstersFinal = erlang:length(Del_monstersFinal),
	BinLen_del_monsters = erlang:byte_size(Del_monsters_bin),
	Del_dropthings_bin = encode_int32s(Del_dropthingsFinal, <<>>),
	SizeDel_dropthingsFinal = erlang:length(Del_dropthingsFinal),
	BinLen_del_dropthings = erlang:byte_size(Del_dropthings_bin),
	Del_stalls_bin = encode_int32s(Del_stallsFinal, <<>>),
	SizeDel_stallsFinal = erlang:length(Del_stallsFinal),
	BinLen_del_stalls = erlang:byte_size(Del_stalls_bin),
	Del_grafts_bin = encode_int32s(Del_graftsFinal, <<>>),
	SizeDel_graftsFinal = erlang:length(Del_graftsFinal),
	BinLen_del_grafts = erlang:byte_size(Del_grafts_bin),
	Del_ybcs_bin = encode_int32s(Del_ybcsFinal, <<>>),
	SizeDel_ybcsFinal = erlang:length(Del_ybcsFinal),
	BinLen_del_ybcs = erlang:byte_size(Del_ybcs_bin),
	Del_server_npcs_bin = encode_int32s(Del_server_npcsFinal, <<>>),
	SizeDel_server_npcsFinal = erlang:length(Del_server_npcsFinal),
	BinLen_del_server_npcs = erlang:byte_size(Del_server_npcs_bin),
	Del_pets_bin = encode_int32s(Del_petsFinal, <<>>),
	SizeDel_petsFinal = erlang:length(Del_petsFinal),
	BinLen_del_pets = erlang:byte_size(Del_pets_bin),
	Del_trap_list_bin = encode_int32s(Del_trap_listFinal, <<>>),
	SizeDel_trap_listFinal = erlang:length(Del_trap_listFinal),
	BinLen_del_trap_list = erlang:byte_size(Del_trap_list_bin),
	Src_pos_bin = encode_p_pos(Src_posFinal),
	BinLen_src_pos = erlang:byte_size(Src_pos_bin),

	<<SizeRolesFinal:16, BinLen_roles:32, Roles_bin/binary,SizeMonstersFinal:16, BinLen_monsters:32, Monsters_bin/binary,SizeDropthingsFinal:16, BinLen_dropthings:32, Dropthings_bin/binary,SizeStallsFinal:16, BinLen_stalls:32, Stalls_bin/binary,SizeGraftsFinal:16, BinLen_grafts:32, Grafts_bin/binary,SizeYbcsFinal:16, BinLen_ybcs:32, Ybcs_bin/binary,Return_selfFinal:8,SizeServer_npcsFinal:16, BinLen_server_npcs:32, Server_npcs_bin/binary,SizePetsFinal:16, BinLen_pets:32, Pets_bin/binary,SizeTrap_listFinal:16, BinLen_trap_list:32, Trap_list_bin/binary,SizeDel_rolesFinal:16, BinLen_del_roles:32, Del_roles_bin/binary,SizeDel_monstersFinal:16, BinLen_del_monsters:32, Del_monsters_bin/binary,SizeDel_dropthingsFinal:16, BinLen_del_dropthings:32, Del_dropthings_bin/binary,SizeDel_stallsFinal:16, BinLen_del_stalls:32, Del_stalls_bin/binary,SizeDel_graftsFinal:16, BinLen_del_grafts:32, Del_grafts_bin/binary,SizeDel_ybcsFinal:16, BinLen_del_ybcs:32, Del_ybcs_bin/binary,SizeDel_server_npcsFinal:16, BinLen_del_server_npcs:32, Del_server_npcs_bin/binary,SizeDel_petsFinal:16, BinLen_del_pets:32, Del_pets_bin/binary,SizeDel_trap_listFinal:16, BinLen_del_trap_list:32, Del_trap_list_bin/binary,Enter_typeFinal:32/signed,BinLen_src_pos:32, Src_pos_bin/binary>>;
encode_m_map_slice_enter_toc(_) -> 
	<<>>.

decode_m_map_slice_enter_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizeroles:16, BinLenroles:32, Bin1/binary>> = Bin0,
	<<SubBinroles:BinLenroles/binary, Bin2/binary>> = Bin1, 
	Roles = lists:reverse(decode_p_map_roles(SubBinroles, [])),
	<<_Sizemonsters:16, BinLenmonsters:32, Bin3/binary>> = Bin2,
	<<SubBinmonsters:BinLenmonsters/binary, Bin4/binary>> = Bin3, 
	Monsters = lists:reverse(decode_p_map_monsters(SubBinmonsters, [])),
	<<_Sizedropthings:16, BinLendropthings:32, Bin5/binary>> = Bin4,
	<<SubBindropthings:BinLendropthings/binary, Bin6/binary>> = Bin5, 
	Dropthings = lists:reverse(decode_p_map_dropthings(SubBindropthings, [])),
	<<_Sizestalls:16, BinLenstalls:32, Bin7/binary>> = Bin6,
	<<SubBinstalls:BinLenstalls/binary, Bin8/binary>> = Bin7, 
	Stalls = lists:reverse(decode_p_map_stalls(SubBinstalls, [])),
	<<_Sizegrafts:16, BinLengrafts:32, Bin9/binary>> = Bin8,
	<<SubBingrafts:BinLengrafts/binary, Bin10/binary>> = Bin9, 
	Grafts = lists:reverse(decode_p_map_collects(SubBingrafts, [])),
	<<_Sizeybcs:16, BinLenybcs:32, Bin11/binary>> = Bin10,
	<<SubBinybcs:BinLenybcs/binary, Bin12/binary>> = Bin11, 
	Ybcs = lists:reverse(decode_p_map_ybcs(SubBinybcs, [])),
<<Return_selfTmp:8,_Sizeserver_npcs:16, BinLenserver_npcs:32, Bin13/binary>> = Bin12,
	<<SubBinserver_npcs:BinLenserver_npcs/binary, Bin14/binary>> = Bin13, 
	Server_npcs = lists:reverse(decode_p_map_server_npcs(SubBinserver_npcs, [])),
	<<_Sizepets:16, BinLenpets:32, Bin15/binary>> = Bin14,
	<<SubBinpets:BinLenpets/binary, Bin16/binary>> = Bin15, 
	Pets = lists:reverse(decode_p_map_pets(SubBinpets, [])),
	<<_Sizetrap_list:16, BinLentrap_list:32, Bin17/binary>> = Bin16,
	<<SubBintrap_list:BinLentrap_list/binary, Bin18/binary>> = Bin17, 
	Trap_list = lists:reverse(decode_p_map_traps(SubBintrap_list, [])),
	<<_Sizedel_roles:16, BinLendel_roles:32, Bin19/binary>> = Bin18,
	<<SubBindel_roles:BinLendel_roles/binary, Bin20/binary>> = Bin19, 
	Del_roles = lists:reverse(decode_int32s(SubBindel_roles, [])),
	<<_Sizedel_monsters:16, BinLendel_monsters:32, Bin21/binary>> = Bin20,
	<<SubBindel_monsters:BinLendel_monsters/binary, Bin22/binary>> = Bin21, 
	Del_monsters = lists:reverse(decode_int32s(SubBindel_monsters, [])),
	<<_Sizedel_dropthings:16, BinLendel_dropthings:32, Bin23/binary>> = Bin22,
	<<SubBindel_dropthings:BinLendel_dropthings/binary, Bin24/binary>> = Bin23, 
	Del_dropthings = lists:reverse(decode_int32s(SubBindel_dropthings, [])),
	<<_Sizedel_stalls:16, BinLendel_stalls:32, Bin25/binary>> = Bin24,
	<<SubBindel_stalls:BinLendel_stalls/binary, Bin26/binary>> = Bin25, 
	Del_stalls = lists:reverse(decode_int32s(SubBindel_stalls, [])),
	<<_Sizedel_grafts:16, BinLendel_grafts:32, Bin27/binary>> = Bin26,
	<<SubBindel_grafts:BinLendel_grafts/binary, Bin28/binary>> = Bin27, 
	Del_grafts = lists:reverse(decode_int32s(SubBindel_grafts, [])),
	<<_Sizedel_ybcs:16, BinLendel_ybcs:32, Bin29/binary>> = Bin28,
	<<SubBindel_ybcs:BinLendel_ybcs/binary, Bin30/binary>> = Bin29, 
	Del_ybcs = lists:reverse(decode_int32s(SubBindel_ybcs, [])),
	<<_Sizedel_server_npcs:16, BinLendel_server_npcs:32, Bin31/binary>> = Bin30,
	<<SubBindel_server_npcs:BinLendel_server_npcs/binary, Bin32/binary>> = Bin31, 
	Del_server_npcs = lists:reverse(decode_int32s(SubBindel_server_npcs, [])),
	<<_Sizedel_pets:16, BinLendel_pets:32, Bin33/binary>> = Bin32,
	<<SubBindel_pets:BinLendel_pets/binary, Bin34/binary>> = Bin33, 
	Del_pets = lists:reverse(decode_int32s(SubBindel_pets, [])),
	<<_Sizedel_trap_list:16, BinLendel_trap_list:32, Bin35/binary>> = Bin34,
	<<SubBindel_trap_list:BinLendel_trap_list/binary, Bin36/binary>> = Bin35, 
	Del_trap_list = lists:reverse(decode_int32s(SubBindel_trap_list, [])),
	<<Enter_type:32/signed,_SubBinSizesrc_pos:32, SubBinsrc_pos/binary>> = Bin36,
	Src_pos = decode_p_pos(SubBinsrc_pos),
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_map_slice_enter_toc, Roles,Monsters,Dropthings,Stalls,Grafts,Ybcs,Return_self,Server_npcs,Pets,Trap_list,Del_roles,Del_monsters,Del_dropthings,Del_stalls,Del_grafts,Del_ybcs,Del_server_npcs,Del_pets,Del_trap_list,Enter_type,Src_pos};

decode_m_map_slice_enter_toc(_) ->
	undefined.
encode_m_map_update_actor_mapinfo_tos(Record) when is_record(Record, m_map_update_actor_mapinfo_tos) ->
	#m_map_update_actor_mapinfo_tos{actor_id=Actor_id,actor_type=Actor_type,map_id=Map_id} = Record,
	case Actor_id =:= undefined of
		true ->
				Actor_idFinal = undefined,
				exit({required_field_not_assigned, m_map_update_actor_mapinfo_tos, actor_id});
		false ->
			Actor_idFinal = Actor_id
	end,
	case Actor_type =:= undefined of
		true ->
				Actor_typeFinal = undefined,
				exit({required_field_not_assigned, m_map_update_actor_mapinfo_tos, actor_type});
		false ->
			Actor_typeFinal = Actor_type
	end,
	case Map_id =:= undefined of
		true ->
				Map_idFinal = undefined,
				exit({required_field_not_assigned, m_map_update_actor_mapinfo_tos, map_id});
		false ->
			Map_idFinal = Map_id
	end,

	<<Actor_idFinal:32/signed,Actor_typeFinal:32/signed,Map_idFinal:32/signed>>;
encode_m_map_update_actor_mapinfo_tos(_) -> 
	<<>>.

decode_m_map_update_actor_mapinfo_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Actor_id:32/signed,Actor_type:32/signed,Map_id:32/signed>> = Bin0,

	{m_map_update_actor_mapinfo_tos, Actor_id,Actor_type,Map_id};

decode_m_map_update_actor_mapinfo_tos(_) ->
	undefined.
encode_m_map_update_actor_mapinfo_toc(Record) when is_record(Record, m_map_update_actor_mapinfo_toc) ->
	#m_map_update_actor_mapinfo_toc{actor_id=Actor_id,actor_type=Actor_type,role_info=Role_info,monster_info=Monster_info,server_npc=Server_npc,ybc_info=Ybc_info,pet_info=Pet_info} = Record,
	case Actor_id =:= undefined of
		true ->
				Actor_idFinal = undefined,
				exit({required_field_not_assigned, m_map_update_actor_mapinfo_toc, actor_id});
		false ->
			Actor_idFinal = Actor_id
	end,
	case Actor_type =:= undefined of
		true ->
				Actor_typeFinal = undefined,
				exit({required_field_not_assigned, m_map_update_actor_mapinfo_toc, actor_type});
		false ->
			Actor_typeFinal = Actor_type
	end,
	case Role_info =:= undefined of
		true ->
				Role_infoFinal = 0;
		false ->
			Role_infoFinal = Role_info
	end,
	case Monster_info =:= undefined of
		true ->
				Monster_infoFinal = 0;
		false ->
			Monster_infoFinal = Monster_info
	end,
	case Server_npc =:= undefined of
		true ->
				Server_npcFinal = 0;
		false ->
			Server_npcFinal = Server_npc
	end,
	case Ybc_info =:= undefined of
		true ->
				Ybc_infoFinal = 0;
		false ->
			Ybc_infoFinal = Ybc_info
	end,
	case Pet_info =:= undefined of
		true ->
				Pet_infoFinal = 0;
		false ->
			Pet_infoFinal = Pet_info
	end,
	Role_info_bin = encode_p_map_role(Role_infoFinal),
	BinLen_role_info = erlang:byte_size(Role_info_bin),
	Monster_info_bin = encode_p_map_monster(Monster_infoFinal),
	BinLen_monster_info = erlang:byte_size(Monster_info_bin),
	Server_npc_bin = encode_p_map_server_npc(Server_npcFinal),
	BinLen_server_npc = erlang:byte_size(Server_npc_bin),
	Ybc_info_bin = encode_p_map_ybc(Ybc_infoFinal),
	BinLen_ybc_info = erlang:byte_size(Ybc_info_bin),
	Pet_info_bin = encode_p_map_pet(Pet_infoFinal),
	BinLen_pet_info = erlang:byte_size(Pet_info_bin),

	<<Actor_idFinal:32/signed,Actor_typeFinal:32/signed,BinLen_role_info:32, Role_info_bin/binary,BinLen_monster_info:32, Monster_info_bin/binary,BinLen_server_npc:32, Server_npc_bin/binary,BinLen_ybc_info:32, Ybc_info_bin/binary,BinLen_pet_info:32, Pet_info_bin/binary>>;
encode_m_map_update_actor_mapinfo_toc(_) -> 
	<<>>.

decode_m_map_update_actor_mapinfo_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Actor_id:32/signed,Actor_type:32/signed,SubBinSizerole_info:32, Bin1/binary>> = Bin0,
	<<SubBinrole_info:SubBinSizerole_info/binary, Bin2/binary>> = Bin1,
	Role_info = decode_p_map_role(SubBinrole_info),
	<<SubBinSizemonster_info:32, Bin3/binary>> = Bin2,
	<<SubBinmonster_info:SubBinSizemonster_info/binary, Bin4/binary>> = Bin3,
	Monster_info = decode_p_map_monster(SubBinmonster_info),
	<<SubBinSizeserver_npc:32, Bin5/binary>> = Bin4,
	<<SubBinserver_npc:SubBinSizeserver_npc/binary, Bin6/binary>> = Bin5,
	Server_npc = decode_p_map_server_npc(SubBinserver_npc),
	<<SubBinSizeybc_info:32, Bin7/binary>> = Bin6,
	<<SubBinybc_info:SubBinSizeybc_info/binary, Bin8/binary>> = Bin7,
	Ybc_info = decode_p_map_ybc(SubBinybc_info),
	<<_SubBinSizepet_info:32, SubBinpet_info/binary>> = Bin8,
	Pet_info = decode_p_map_pet(SubBinpet_info),

	{m_map_update_actor_mapinfo_toc, Actor_id,Actor_type,Role_info,Monster_info,Server_npc,Ybc_info,Pet_info};

decode_m_map_update_actor_mapinfo_toc(_) ->
	undefined.
encode_m_map_transfer_tos(Record) when is_record(Record, m_map_transfer_tos) ->
	#m_map_transfer_tos{mapid=Mapid,tx=Tx,ty=Ty,change_type=Change_type} = Record,
	case Mapid =:= undefined of
		true ->
				MapidFinal = undefined,
				exit({required_field_not_assigned, m_map_transfer_tos, mapid});
		false ->
			MapidFinal = Mapid
	end,
	case Tx =:= undefined of
		true ->
				TxFinal = undefined,
				exit({required_field_not_assigned, m_map_transfer_tos, tx});
		false ->
			TxFinal = Tx
	end,
	case Ty =:= undefined of
		true ->
				TyFinal = undefined,
				exit({required_field_not_assigned, m_map_transfer_tos, ty});
		false ->
			TyFinal = Ty
	end,
	case Change_type =:= undefined of
		true ->
				Change_typeFinal = undefined,
				exit({required_field_not_assigned, m_map_transfer_tos, change_type});
		false ->
			Change_typeFinal = Change_type
	end,

	<<MapidFinal:32/signed,TxFinal:32/signed,TyFinal:32/signed,Change_typeFinal:32/signed>>;
encode_m_map_transfer_tos(_) -> 
	<<>>.

decode_m_map_transfer_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Mapid:32/signed,Tx:32/signed,Ty:32/signed,Change_type:32/signed>> = Bin0,

	{m_map_transfer_tos, Mapid,Tx,Ty,Change_type};

decode_m_map_transfer_tos(_) ->
	undefined.
encode_m_map_transfer_toc(Record) when is_record(Record, m_map_transfer_toc) ->
	#m_map_transfer_toc{succ=Succ,scroll_id=Scroll_id,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Scroll_id =:= undefined of
		true ->
				Scroll_idFinal = 0;
		false ->
			Scroll_idFinal = Scroll_id
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,Scroll_idFinal:32/signed,ReasonLen:16, Reason2/binary>>;
encode_m_map_transfer_toc(_) -> 
	<<>>.

decode_m_map_transfer_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,Scroll_id:32/signed,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_map_transfer_toc, Succ,Scroll_id,common_tool:to_list(Reason)};

decode_m_map_transfer_toc(_) ->
	undefined.
encode_m_map_role_killed_toc(Record) when is_record(Record, m_map_role_killed_toc) ->
	#m_map_role_killed_toc{role_name=Role_name,killer_name=Killer_name,faction_id=Faction_id,map_id=Map_id,tx=Tx,ty=Ty} = Record,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = undefined,
				exit({required_field_not_assigned, m_map_role_killed_toc, role_name});
		false ->
			Role_nameFinal = Role_name
	end,
	case Killer_name =:= undefined of
		true ->
				Killer_nameFinal = undefined,
				exit({required_field_not_assigned, m_map_role_killed_toc, killer_name});
		false ->
			Killer_nameFinal = Killer_name
	end,
	case Faction_id =:= undefined of
		true ->
				Faction_idFinal = undefined,
				exit({required_field_not_assigned, m_map_role_killed_toc, faction_id});
		false ->
			Faction_idFinal = Faction_id
	end,
	case Map_id =:= undefined of
		true ->
				Map_idFinal = undefined,
				exit({required_field_not_assigned, m_map_role_killed_toc, map_id});
		false ->
			Map_idFinal = Map_id
	end,
	case Tx =:= undefined of
		true ->
				TxFinal = undefined,
				exit({required_field_not_assigned, m_map_role_killed_toc, tx});
		false ->
			TxFinal = Tx
	end,
	case Ty =:= undefined of
		true ->
				TyFinal = undefined,
				exit({required_field_not_assigned, m_map_role_killed_toc, ty});
		false ->
			TyFinal = Ty
	end,
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),
	Killer_name2 = common_tool:to_binary(Killer_nameFinal),
	Killer_nameLen = erlang:byte_size(Killer_name2),

	<<Role_nameLen:16, Role_name2/binary,Killer_nameLen:16, Killer_name2/binary,Faction_idFinal:32/signed,Map_idFinal:32/signed,TxFinal:32/signed,TyFinal:32/signed>>;
encode_m_map_role_killed_toc(_) -> 
	<<>>.

decode_m_map_role_killed_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_nameLen:16, Bin1/binary>> = Bin0,
	<<Role_name:Role_nameLen/binary,Killer_nameLen:16, Bin2/binary>> = Bin1,
	<<Killer_name:Killer_nameLen/binary,Faction_id:32/signed,Map_id:32/signed,Tx:32/signed,Ty:32/signed>> = Bin2,

	{m_map_role_killed_toc, common_tool:to_list(Role_name),common_tool:to_list(Killer_name),Faction_id,Map_id,Tx,Ty};

decode_m_map_role_killed_toc(_) ->
	undefined.
encode_m_move_keywalk_tos(Record) when is_record(Record, m_move_keywalk_tos) ->
	#m_move_keywalk_tos{pos=Pos} = Record,
	case Pos =:= undefined of
		true ->
				PosFinal = undefined,
				exit({required_field_not_assigned, m_move_keywalk_tos, pos});
		false ->
			PosFinal = Pos
	end,
	Pos_bin = encode_p_pos(PosFinal),
	BinLen_pos = erlang:byte_size(Pos_bin),

	<<BinLen_pos:32, Pos_bin/binary>>;
encode_m_move_keywalk_tos(_) -> 
	<<>>.

decode_m_move_keywalk_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_SubBinSizepos:32, SubBinpos/binary>> = Bin0,
	Pos = decode_p_pos(SubBinpos),

	{m_move_keywalk_tos, Pos};

decode_m_move_keywalk_tos(_) ->
	undefined.
encode_m_move_keywalk_toc(Record) when is_record(Record, m_move_keywalk_toc) ->
	#m_move_keywalk_toc{role_id=Role_id,pos=Pos} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, m_move_keywalk_toc, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Pos =:= undefined of
		true ->
				PosFinal = undefined,
				exit({required_field_not_assigned, m_move_keywalk_toc, pos});
		false ->
			PosFinal = Pos
	end,
	Pos_bin = encode_p_pos(PosFinal),
	BinLen_pos = erlang:byte_size(Pos_bin),

	<<Role_idFinal:32/signed,BinLen_pos:32, Pos_bin/binary>>;
encode_m_move_keywalk_toc(_) -> 
	<<>>.

decode_m_move_keywalk_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,_SubBinSizepos:32, SubBinpos/binary>> = Bin0,
	Pos = decode_p_pos(SubBinpos),

	{m_move_keywalk_toc, Role_id,Pos};

decode_m_move_keywalk_toc(_) ->
	undefined.
encode_m_move_keystop_tos(Record) when is_record(Record, m_move_keystop_tos) ->
	#m_move_keystop_tos{pos=Pos} = Record,
	case Pos =:= undefined of
		true ->
				PosFinal = undefined,
				exit({required_field_not_assigned, m_move_keystop_tos, pos});
		false ->
			PosFinal = Pos
	end,
	Pos_bin = encode_p_pos(PosFinal),
	BinLen_pos = erlang:byte_size(Pos_bin),

	<<BinLen_pos:32, Pos_bin/binary>>;
encode_m_move_keystop_tos(_) -> 
	<<>>.

decode_m_move_keystop_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_SubBinSizepos:32, SubBinpos/binary>> = Bin0,
	Pos = decode_p_pos(SubBinpos),

	{m_move_keystop_tos, Pos};

decode_m_move_keystop_tos(_) ->
	undefined.
encode_m_move_keystop_toc(Record) when is_record(Record, m_move_keystop_toc) ->
	#m_move_keystop_toc{role_id=Role_id,pos=Pos} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, m_move_keystop_toc, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Pos =:= undefined of
		true ->
				PosFinal = undefined,
				exit({required_field_not_assigned, m_move_keystop_toc, pos});
		false ->
			PosFinal = Pos
	end,
	Pos_bin = encode_p_pos(PosFinal),
	BinLen_pos = erlang:byte_size(Pos_bin),

	<<Role_idFinal:32/signed,BinLen_pos:32, Pos_bin/binary>>;
encode_m_move_keystop_toc(_) -> 
	<<>>.

decode_m_move_keystop_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,_SubBinSizepos:32, SubBinpos/binary>> = Bin0,
	Pos = decode_p_pos(SubBinpos),

	{m_move_keystop_toc, Role_id,Pos};

decode_m_move_keystop_toc(_) ->
	undefined.
encode_m_move_walk_path_tos(Record) when is_record(Record, m_move_walk_path_tos) ->
	#m_move_walk_path_tos{walk_path=Walk_path} = Record,
	case Walk_path =:= undefined of
		true ->
				Walk_pathFinal = undefined,
				exit({required_field_not_assigned, m_move_walk_path_tos, walk_path});
		false ->
			Walk_pathFinal = Walk_path
	end,
	Walk_path_bin = encode_p_walk_path(Walk_pathFinal),
	BinLen_walk_path = erlang:byte_size(Walk_path_bin),

	<<BinLen_walk_path:32, Walk_path_bin/binary>>;
encode_m_move_walk_path_tos(_) -> 
	<<>>.

decode_m_move_walk_path_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_SubBinSizewalk_path:32, SubBinwalk_path/binary>> = Bin0,
	Walk_path = decode_p_walk_path(SubBinwalk_path),

	{m_move_walk_path_tos, Walk_path};

decode_m_move_walk_path_tos(_) ->
	undefined.
encode_m_move_walk_path_toc(Record) when is_record(Record, m_move_walk_path_toc) ->
	#m_move_walk_path_toc{roleid=Roleid,walk_path=Walk_path} = Record,
	case Roleid =:= undefined of
		true ->
				RoleidFinal = undefined,
				exit({required_field_not_assigned, m_move_walk_path_toc, roleid});
		false ->
			RoleidFinal = Roleid
	end,
	case Walk_path =:= undefined of
		true ->
				Walk_pathFinal = undefined,
				exit({required_field_not_assigned, m_move_walk_path_toc, walk_path});
		false ->
			Walk_pathFinal = Walk_path
	end,
	Walk_path_bin = encode_p_walk_path(Walk_pathFinal),
	BinLen_walk_path = erlang:byte_size(Walk_path_bin),

	<<RoleidFinal:32/signed,BinLen_walk_path:32, Walk_path_bin/binary>>;
encode_m_move_walk_path_toc(_) -> 
	<<>>.

decode_m_move_walk_path_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Roleid:32/signed,_SubBinSizewalk_path:32, SubBinwalk_path/binary>> = Bin0,
	Walk_path = decode_p_walk_path(SubBinwalk_path),

	{m_move_walk_path_toc, Roleid,Walk_path};

decode_m_move_walk_path_toc(_) ->
	undefined.
encode_m_move_walk_tos(Record) when is_record(Record, m_move_walk_tos) ->
	#m_move_walk_tos{pos=Pos} = Record,
	case Pos =:= undefined of
		true ->
				PosFinal = undefined,
				exit({required_field_not_assigned, m_move_walk_tos, pos});
		false ->
			PosFinal = Pos
	end,
	Pos_bin = encode_p_pos(PosFinal),
	BinLen_pos = erlang:byte_size(Pos_bin),

	<<BinLen_pos:32, Pos_bin/binary>>;
encode_m_move_walk_tos(_) -> 
	<<>>.

decode_m_move_walk_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_SubBinSizepos:32, SubBinpos/binary>> = Bin0,
	Pos = decode_p_pos(SubBinpos),

	{m_move_walk_tos, Pos};

decode_m_move_walk_tos(_) ->
	undefined.
encode_m_move_sync_toc(Record) when is_record(Record, m_move_sync_toc) ->
	#m_move_sync_toc{roleid=Roleid,pos=Pos} = Record,
	case Roleid =:= undefined of
		true ->
				RoleidFinal = undefined,
				exit({required_field_not_assigned, m_move_sync_toc, roleid});
		false ->
			RoleidFinal = Roleid
	end,
	case Pos =:= undefined of
		true ->
				PosFinal = undefined,
				exit({required_field_not_assigned, m_move_sync_toc, pos});
		false ->
			PosFinal = Pos
	end,
	Pos_bin = encode_p_pos(PosFinal),
	BinLen_pos = erlang:byte_size(Pos_bin),

	<<RoleidFinal:32/signed,BinLen_pos:32, Pos_bin/binary>>;
encode_m_move_sync_toc(_) -> 
	<<>>.

decode_m_move_sync_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Roleid:32/signed,_SubBinSizepos:32, SubBinpos/binary>> = Bin0,
	Pos = decode_p_pos(SubBinpos),

	{m_move_sync_toc, Roleid,Pos};

decode_m_move_sync_toc(_) ->
	undefined.
encode_m_map_quit_toc(Record) when is_record(Record, m_map_quit_toc) ->
	#m_map_quit_toc{roleid=Roleid} = Record,
	case Roleid =:= undefined of
		true ->
				RoleidFinal = undefined,
				exit({required_field_not_assigned, m_map_quit_toc, roleid});
		false ->
			RoleidFinal = Roleid
	end,

	<<RoleidFinal:32/signed>>;
encode_m_map_quit_toc(_) -> 
	<<>>.

decode_m_map_quit_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Roleid:32/signed>> = Bin0,

	{m_map_quit_toc, Roleid};

decode_m_map_quit_toc(_) ->
	undefined.
encode_m_skin_change_toc(Record) when is_record(Record, m_skin_change_toc) ->
	#m_skin_change_toc{roleid=Roleid,skin=Skin} = Record,
	case Roleid =:= undefined of
		true ->
				RoleidFinal = undefined,
				exit({required_field_not_assigned, m_skin_change_toc, roleid});
		false ->
			RoleidFinal = Roleid
	end,
	case Skin =:= undefined of
		true ->
				SkinFinal = undefined,
				exit({required_field_not_assigned, m_skin_change_toc, skin});
		false ->
			SkinFinal = Skin
	end,
	Skin_bin = encode_p_skin(SkinFinal),
	BinLen_skin = erlang:byte_size(Skin_bin),

	<<RoleidFinal:32/signed,BinLen_skin:32, Skin_bin/binary>>;
encode_m_skin_change_toc(_) -> 
	<<>>.

decode_m_skin_change_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Roleid:32/signed,_SubBinSizeskin:32, SubBinskin/binary>> = Bin0,
	Skin = decode_p_skin(SubBinskin),

	{m_skin_change_toc, Roleid,Skin};

decode_m_skin_change_toc(_) ->
	undefined.
encode_m_map_dropthing_enter_toc(Record) when is_record(Record, m_map_dropthing_enter_toc) ->
	#m_map_dropthing_enter_toc{dropthing=Dropthing} = Record,
	case Dropthing =:= undefined of
		true ->
			DropthingFinal = [];
		false ->
			DropthingFinal = Dropthing
	end,
	Dropthing_bin = encode_p_map_dropthings(DropthingFinal, <<>>),
	SizeDropthingFinal = erlang:length(DropthingFinal),
	BinLen_dropthing = erlang:byte_size(Dropthing_bin),

	<<SizeDropthingFinal:16, BinLen_dropthing:32, Dropthing_bin/binary>>;
encode_m_map_dropthing_enter_toc(_) -> 
	<<>>.

decode_m_map_dropthing_enter_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizedropthing:16, _BinLendropthing:32, SubBindropthing/binary>> = Bin0,
	Dropthing = lists:reverse(decode_p_map_dropthings(SubBindropthing, [])),

	{m_map_dropthing_enter_toc, Dropthing};

decode_m_map_dropthing_enter_toc(_) ->
	undefined.
encode_m_map_dropthing_quit_toc(Record) when is_record(Record, m_map_dropthing_quit_toc) ->
	#m_map_dropthing_quit_toc{dropthingid=Dropthingid} = Record,
	case Dropthingid =:= undefined of
		true ->
			DropthingidFinal = [];
		false ->
			DropthingidFinal = Dropthingid
	end,
	Dropthingid_bin = encode_int32s(DropthingidFinal, <<>>),
	SizeDropthingidFinal = erlang:length(DropthingidFinal),
	BinLen_dropthingid = erlang:byte_size(Dropthingid_bin),

	<<SizeDropthingidFinal:16, BinLen_dropthingid:32, Dropthingid_bin/binary>>;
encode_m_map_dropthing_quit_toc(_) -> 
	<<>>.

decode_m_map_dropthing_quit_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizedropthingid:16, _BinLendropthingid:32, SubBindropthingid/binary>> = Bin0,
	Dropthingid = lists:reverse(decode_int32s(SubBindropthingid, [])),

	{m_map_dropthing_quit_toc, Dropthingid};

decode_m_map_dropthing_quit_toc(_) ->
	undefined.
encode_m_map_dropthing_pick_tos(Record) when is_record(Record, m_map_dropthing_pick_tos) ->
	#m_map_dropthing_pick_tos{dropthingid=Dropthingid} = Record,
	case Dropthingid =:= undefined of
		true ->
				DropthingidFinal = undefined,
				exit({required_field_not_assigned, m_map_dropthing_pick_tos, dropthingid});
		false ->
			DropthingidFinal = Dropthingid
	end,

	<<DropthingidFinal:32/signed>>;
encode_m_map_dropthing_pick_tos(_) -> 
	<<>>.

decode_m_map_dropthing_pick_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Dropthingid:32/signed>> = Bin0,

	{m_map_dropthing_pick_tos, Dropthingid};

decode_m_map_dropthing_pick_tos(_) ->
	undefined.
encode_m_map_dropthing_pick_toc(Record) when is_record(Record, m_map_dropthing_pick_toc) ->
	#m_map_dropthing_pick_toc{succ=Succ,reason=Reason,pick_type=Pick_type,add_money=Add_money,money=Money,dropthingid=Dropthingid,goods=Goods,num=Num,money_type=Money_type} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Pick_type =:= undefined of
		true ->
				Pick_typeFinal = 1;
		false ->
			Pick_typeFinal = Pick_type
	end,
	case Add_money =:= undefined of
		true ->
				Add_moneyFinal = 0;
		false ->
			Add_moneyFinal = Add_money
	end,
	case Money =:= undefined of
		true ->
				MoneyFinal = 0;
		false ->
			MoneyFinal = Money
	end,
	case Dropthingid =:= undefined of
		true ->
				DropthingidFinal = 0;
		false ->
			DropthingidFinal = Dropthingid
	end,
	case Goods =:= undefined of
		true ->
				GoodsFinal = 0;
		false ->
			GoodsFinal = Goods
	end,
	case Num =:= undefined of
		true ->
				NumFinal = 0;
		false ->
			NumFinal = Num
	end,
	case Money_type =:= undefined of
		true ->
				Money_typeFinal = 0;
		false ->
			Money_typeFinal = Money_type
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Goods_bin = encode_p_goods(GoodsFinal),
	BinLen_goods = erlang:byte_size(Goods_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Pick_typeFinal:32/signed,Add_moneyFinal:32/signed,MoneyFinal:32/signed,DropthingidFinal:32/signed,BinLen_goods:32, Goods_bin/binary,NumFinal:32/signed,Money_typeFinal:32/signed>>;
encode_m_map_dropthing_pick_toc(_) -> 
	<<>>.

decode_m_map_dropthing_pick_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Pick_type:32/signed,Add_money:32/signed,Money:32/signed,Dropthingid:32/signed,SubBinSizegoods:32, Bin2/binary>> = Bin1,
	<<SubBingoods:SubBinSizegoods/binary, Bin3/binary>> = Bin2,
	Goods = decode_p_goods(SubBingoods),
	<<Num:32/signed,Money_type:32/signed>> = Bin3,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_map_dropthing_pick_toc, Succ,common_tool:to_list(Reason),Pick_type,Add_money,Money,Dropthingid,Goods,Num,Money_type};

decode_m_map_dropthing_pick_toc(_) ->
	undefined.
encode_m_map_change_map_tos(Record) when is_record(Record, m_map_change_map_tos) ->
	#m_map_change_map_tos{mapid=Mapid,tx=Tx,ty=Ty} = Record,
	case Mapid =:= undefined of
		true ->
				MapidFinal = undefined,
				exit({required_field_not_assigned, m_map_change_map_tos, mapid});
		false ->
			MapidFinal = Mapid
	end,
	case Tx =:= undefined of
		true ->
				TxFinal = undefined,
				exit({required_field_not_assigned, m_map_change_map_tos, tx});
		false ->
			TxFinal = Tx
	end,
	case Ty =:= undefined of
		true ->
				TyFinal = undefined,
				exit({required_field_not_assigned, m_map_change_map_tos, ty});
		false ->
			TyFinal = Ty
	end,

	<<MapidFinal:32/signed,TxFinal:32/signed,TyFinal:32/signed>>;
encode_m_map_change_map_tos(_) -> 
	<<>>.

decode_m_map_change_map_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Mapid:32/signed,Tx:32/signed,Ty:32/signed>> = Bin0,

	{m_map_change_map_tos, Mapid,Tx,Ty};

decode_m_map_change_map_tos(_) ->
	undefined.
encode_m_map_change_map_toc(Record) when is_record(Record, m_map_change_map_toc) ->
	#m_map_change_map_toc{succ=Succ,mapid=Mapid,tx=Tx,ty=Ty,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Mapid =:= undefined of
		true ->
				MapidFinal = 0;
		false ->
			MapidFinal = Mapid
	end,
	case Tx =:= undefined of
		true ->
				TxFinal = 0;
		false ->
			TxFinal = Tx
	end,
	case Ty =:= undefined of
		true ->
				TyFinal = 0;
		false ->
			TyFinal = Ty
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,MapidFinal:32/signed,TxFinal:32/signed,TyFinal:32/signed,ReasonLen:16, Reason2/binary>>;
encode_m_map_change_map_toc(_) -> 
	<<>>.

decode_m_map_change_map_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,Mapid:32/signed,Tx:32/signed,Ty:32/signed,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_map_change_map_toc, Succ,Mapid,Tx,Ty,common_tool:to_list(Reason)};

decode_m_map_change_map_toc(_) ->
	undefined.
encode_m_map_change_pos_toc(Record) when is_record(Record, m_map_change_pos_toc) ->
	#m_map_change_pos_toc{tx=Tx,ty=Ty,change_type=Change_type} = Record,
	case Tx =:= undefined of
		true ->
				TxFinal = undefined,
				exit({required_field_not_assigned, m_map_change_pos_toc, tx});
		false ->
			TxFinal = Tx
	end,
	case Ty =:= undefined of
		true ->
				TyFinal = undefined,
				exit({required_field_not_assigned, m_map_change_pos_toc, ty});
		false ->
			TyFinal = Ty
	end,
	case Change_type =:= undefined of
		true ->
				Change_typeFinal = undefined,
				exit({required_field_not_assigned, m_map_change_pos_toc, change_type});
		false ->
			Change_typeFinal = Change_type
	end,

	<<TxFinal:32/signed,TyFinal:32/signed,Change_typeFinal:32/signed>>;
encode_m_map_change_pos_toc(_) -> 
	<<>>.

decode_m_map_change_pos_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Tx:32/signed,Ty:32/signed,Change_type:32/signed>> = Bin0,

	{m_map_change_pos_toc, Tx,Ty,Change_type};

decode_m_map_change_pos_toc(_) ->
	undefined.
encode_m_config_getbuffs_tos(Record) when is_record(Record, m_config_getbuffs_tos) ->
	#m_config_getbuffs_tos{} = Record,

	<<>>;
encode_m_config_getbuffs_tos(_) -> 
	<<>>.

decode_m_config_getbuffs_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_config_getbuffs_tos};

decode_m_config_getbuffs_tos(_) ->
	undefined.
encode_m_config_getbuffs_toc(Record) when is_record(Record, m_config_getbuffs_toc) ->
	#m_config_getbuffs_toc{succ=Succ,reason=Reason,buffs=Buffs} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Buffs =:= undefined of
		true ->
			BuffsFinal = [];
		false ->
			BuffsFinal = Buffs
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Buffs_bin = encode_p_bufs(BuffsFinal, <<>>),
	SizeBuffsFinal = erlang:length(BuffsFinal),
	BinLen_buffs = erlang:byte_size(Buffs_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,SizeBuffsFinal:16, BinLen_buffs:32, Buffs_bin/binary>>;
encode_m_config_getbuffs_toc(_) -> 
	<<>>.

decode_m_config_getbuffs_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_Sizebuffs:16, _BinLenbuffs:32, SubBinbuffs/binary>> = Bin1,
	Buffs = lists:reverse(decode_p_bufs(SubBinbuffs, [])),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_config_getbuffs_toc, Succ,common_tool:to_list(Reason),Buffs};

decode_m_config_getbuffs_toc(_) ->
	undefined.
encode_p_buff_effect(Record) when is_record(Record, p_buff_effect) ->
	#p_buff_effect{effect_type=Effect_type,effect_value=Effect_value,buff_type=Buff_type} = Record,
	case Effect_type =:= undefined of
		true ->
				Effect_typeFinal = undefined,
				exit({required_field_not_assigned, p_buff_effect, effect_type});
		false ->
			Effect_typeFinal = Effect_type
	end,
	case Effect_value =:= undefined of
		true ->
				Effect_valueFinal = undefined,
				exit({required_field_not_assigned, p_buff_effect, effect_value});
		false ->
			Effect_valueFinal = Effect_value
	end,
	case Buff_type =:= undefined of
		true ->
				Buff_typeFinal = undefined,
				exit({required_field_not_assigned, p_buff_effect, buff_type});
		false ->
			Buff_typeFinal = Buff_type
	end,

	<<Effect_typeFinal:32/signed,Effect_valueFinal:32/signed,Buff_typeFinal:32/signed>>;
encode_p_buff_effect(_) -> 
	<<>>.

decode_p_buff_effect(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Effect_type:32/signed,Effect_value:32/signed,Buff_type:32/signed>> = Bin0,

	{p_buff_effect, Effect_type,Effect_value,Buff_type};

decode_p_buff_effect(_) ->
	undefined.
encode_m_fight_buff_effect_toc(Record) when is_record(Record, m_fight_buff_effect_toc) ->
	#m_fight_buff_effect_toc{actor_id=Actor_id,actor_type=Actor_type,buff_effect=Buff_effect,src_id=Src_id,src_type=Src_type} = Record,
	case Actor_id =:= undefined of
		true ->
				Actor_idFinal = undefined,
				exit({required_field_not_assigned, m_fight_buff_effect_toc, actor_id});
		false ->
			Actor_idFinal = Actor_id
	end,
	case Actor_type =:= undefined of
		true ->
				Actor_typeFinal = undefined,
				exit({required_field_not_assigned, m_fight_buff_effect_toc, actor_type});
		false ->
			Actor_typeFinal = Actor_type
	end,
	case Buff_effect =:= undefined of
		true ->
			Buff_effectFinal = [];
		false ->
			Buff_effectFinal = Buff_effect
	end,
	case Src_id =:= undefined of
		true ->
				Src_idFinal = 0;
		false ->
			Src_idFinal = Src_id
	end,
	case Src_type =:= undefined of
		true ->
				Src_typeFinal = 0;
		false ->
			Src_typeFinal = Src_type
	end,
	Buff_effect_bin = encode_p_buff_effects(Buff_effectFinal, <<>>),
	SizeBuff_effectFinal = erlang:length(Buff_effectFinal),
	BinLen_buff_effect = erlang:byte_size(Buff_effect_bin),

	<<Actor_idFinal:32/signed,Actor_typeFinal:32/signed,SizeBuff_effectFinal:16, BinLen_buff_effect:32, Buff_effect_bin/binary,Src_idFinal:32/signed,Src_typeFinal:32/signed>>;
encode_m_fight_buff_effect_toc(_) -> 
	<<>>.

decode_m_fight_buff_effect_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Actor_id:32/signed,Actor_type:32/signed,_Sizebuff_effect:16, BinLenbuff_effect:32, Bin1/binary>> = Bin0,
	<<SubBinbuff_effect:BinLenbuff_effect/binary, Bin2/binary>> = Bin1, 
	Buff_effect = lists:reverse(decode_p_buff_effects(SubBinbuff_effect, [])),
	<<Src_id:32/signed,Src_type:32/signed>> = Bin2,

	{m_fight_buff_effect_toc, Actor_id,Actor_type,Buff_effect,Src_id,Src_type};

decode_m_fight_buff_effect_toc(_) ->
	undefined.
encode_m_fight_remove_buff_toc(Record) when is_record(Record, m_fight_remove_buff_toc) ->
	#m_fight_remove_buff_toc{roleid=Roleid,buffid=Buffid} = Record,
	case Roleid =:= undefined of
		true ->
				RoleidFinal = undefined,
				exit({required_field_not_assigned, m_fight_remove_buff_toc, roleid});
		false ->
			RoleidFinal = Roleid
	end,
	case Buffid =:= undefined of
		true ->
			BuffidFinal = [];
		false ->
			BuffidFinal = Buffid
	end,
	Buffid_bin = encode_int32s(BuffidFinal, <<>>),
	SizeBuffidFinal = erlang:length(BuffidFinal),
	BinLen_buffid = erlang:byte_size(Buffid_bin),

	<<RoleidFinal:32/signed,SizeBuffidFinal:16, BinLen_buffid:32, Buffid_bin/binary>>;
encode_m_fight_remove_buff_toc(_) -> 
	<<>>.

decode_m_fight_remove_buff_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Roleid:32/signed,_Sizebuffid:16, _BinLenbuffid:32, SubBinbuffid/binary>> = Bin0,
	Buffid = lists:reverse(decode_int32s(SubBinbuffid, [])),

	{m_fight_remove_buff_toc, Roleid,Buffid};

decode_m_fight_remove_buff_toc(_) ->
	undefined.
encode_m_fight_attack_tos(Record) when is_record(Record, m_fight_attack_tos) ->
	#m_fight_attack_tos{tile=Tile,skillid=Skillid,target_id=Target_id,target_type=Target_type,src_type=Src_type,dir=Dir} = Record,
	case Tile =:= undefined of
		true ->
				TileFinal = undefined,
				exit({required_field_not_assigned, m_fight_attack_tos, tile});
		false ->
			TileFinal = Tile
	end,
	case Skillid =:= undefined of
		true ->
				SkillidFinal = undefined,
				exit({required_field_not_assigned, m_fight_attack_tos, skillid});
		false ->
			SkillidFinal = Skillid
	end,
	case Target_id =:= undefined of
		true ->
				Target_idFinal = 0;
		false ->
			Target_idFinal = Target_id
	end,
	case Target_type =:= undefined of
		true ->
				Target_typeFinal = 0;
		false ->
			Target_typeFinal = Target_type
	end,
	case Src_type =:= undefined of
		true ->
				Src_typeFinal = 1;
		false ->
			Src_typeFinal = Src_type
	end,
	case Dir =:= undefined of
		true ->
				DirFinal = undefined,
				exit({required_field_not_assigned, m_fight_attack_tos, dir});
		false ->
			DirFinal = Dir
	end,
	Tile_bin = encode_p_map_tile(TileFinal),
	BinLen_tile = erlang:byte_size(Tile_bin),

	<<BinLen_tile:32, Tile_bin/binary,SkillidFinal:32/signed,Target_idFinal:32/signed,Target_typeFinal:32/signed,Src_typeFinal:32/signed,DirFinal:32/signed>>;
encode_m_fight_attack_tos(_) -> 
	<<>>.

decode_m_fight_attack_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SubBinSizetile:32, Bin1/binary>> = Bin0,
	<<SubBintile:SubBinSizetile/binary, Bin2/binary>> = Bin1,
	Tile = decode_p_map_tile(SubBintile),
	<<Skillid:32/signed,Target_id:32/signed,Target_type:32/signed,Src_type:32/signed,Dir:32/signed>> = Bin2,

	{m_fight_attack_tos, Tile,Skillid,Target_id,Target_type,Src_type,Dir};

decode_m_fight_attack_tos(_) ->
	undefined.
encode_p_attack_result(Record) when is_record(Record, p_attack_result) ->
	#p_attack_result{dest_id=Dest_id,is_erupt=Is_erupt,is_no_defence=Is_no_defence,is_miss=Is_miss,dest_type=Dest_type,dest_tile=Dest_tile,buffs=Buffs,result_type=Result_type,result_value=Result_value} = Record,
	case Dest_id =:= undefined of
		true ->
				Dest_idFinal = undefined,
				exit({required_field_not_assigned, p_attack_result, dest_id});
		false ->
			Dest_idFinal = Dest_id
	end,
	case Is_erupt =:= undefined of
		true ->
				Is_eruptFinal = 0;
		false ->
			case Is_erupt of
				true ->
					Is_eruptFinal = 1;
				false ->
					Is_eruptFinal = 0
			end
	end,
	case Is_no_defence =:= undefined of
		true ->
				Is_no_defenceFinal = 0;
		false ->
			case Is_no_defence of
				true ->
					Is_no_defenceFinal = 1;
				false ->
					Is_no_defenceFinal = 0
			end
	end,
	case Is_miss =:= undefined of
		true ->
				Is_missFinal = 0;
		false ->
			case Is_miss of
				true ->
					Is_missFinal = 1;
				false ->
					Is_missFinal = 0
			end
	end,
	case Dest_type =:= undefined of
		true ->
				Dest_typeFinal = 0;
		false ->
			Dest_typeFinal = Dest_type
	end,
	case Dest_tile =:= undefined of
		true ->
				Dest_tileFinal = 0;
		false ->
			Dest_tileFinal = Dest_tile
	end,
	case Buffs =:= undefined of
		true ->
			BuffsFinal = [];
		false ->
			BuffsFinal = Buffs
	end,
	case Result_type =:= undefined of
		true ->
				Result_typeFinal = 0;
		false ->
			Result_typeFinal = Result_type
	end,
	case Result_value =:= undefined of
		true ->
				Result_valueFinal = 0;
		false ->
			Result_valueFinal = Result_value
	end,
	Dest_tile_bin = encode_p_map_tile(Dest_tileFinal),
	BinLen_dest_tile = erlang:byte_size(Dest_tile_bin),
	Buffs_bin = encode_p_actor_bufs(BuffsFinal, <<>>),
	SizeBuffsFinal = erlang:length(BuffsFinal),
	BinLen_buffs = erlang:byte_size(Buffs_bin),

	<<Dest_idFinal:32/signed,Is_eruptFinal:8,Is_no_defenceFinal:8,Is_missFinal:8,Dest_typeFinal:32/signed,BinLen_dest_tile:32, Dest_tile_bin/binary,SizeBuffsFinal:16, BinLen_buffs:32, Buffs_bin/binary,Result_typeFinal:32/signed,Result_valueFinal:32/signed>>;
encode_p_attack_result(_) -> 
	<<>>.

decode_p_attack_result(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Dest_id:32/signed,Is_eruptTmp:8,Is_no_defenceTmp:8,Is_missTmp:8,Dest_type:32/signed,SubBinSizedest_tile:32, Bin1/binary>> = Bin0,
	<<SubBindest_tile:SubBinSizedest_tile/binary, Bin2/binary>> = Bin1,
	Dest_tile = decode_p_map_tile(SubBindest_tile),
	<<_Sizebuffs:16, BinLenbuffs:32, Bin3/binary>> = Bin2,
	<<SubBinbuffs:BinLenbuffs/binary, Bin4/binary>> = Bin3, 
	Buffs = lists:reverse(decode_p_actor_bufs(SubBinbuffs, [])),
	<<Result_type:32/signed,Result_value:32/signed>> = Bin4,
case Is_eruptTmp of 
	1 -> 
		Is_erupt = true;
	_ ->
		Is_erupt = false
end,
case Is_no_defenceTmp of 
	1 -> 
		Is_no_defence = true;
	_ ->
		Is_no_defence = false
end,
case Is_missTmp of 
	1 -> 
		Is_miss = true;
	_ ->
		Is_miss = false
end,

	{p_attack_result, Dest_id,Is_erupt,Is_no_defence,Is_miss,Dest_type,Dest_tile,Buffs,Result_type,Result_value};

decode_p_attack_result(_) ->
	undefined.
encode_m_fight_attack_toc(Record) when is_record(Record, m_fight_attack_toc) ->
	#m_fight_attack_toc{succ=Succ,return_self=Return_self,reason=Reason,src_id=Src_id,skillid=Skillid,src_pos=Src_pos,src_type=Src_type,result=Result,dir=Dir,dest_pos=Dest_pos,target_type=Target_type,target_id=Target_id,reason_code=Reason_code} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Src_id =:= undefined of
		true ->
				Src_idFinal = 0;
		false ->
			Src_idFinal = Src_id
	end,
	case Skillid =:= undefined of
		true ->
				SkillidFinal = 0;
		false ->
			SkillidFinal = Skillid
	end,
	case Src_pos =:= undefined of
		true ->
				Src_posFinal = 0;
		false ->
			Src_posFinal = Src_pos
	end,
	case Src_type =:= undefined of
		true ->
				Src_typeFinal = 0;
		false ->
			Src_typeFinal = Src_type
	end,
	case Result =:= undefined of
		true ->
			ResultFinal = [];
		false ->
			ResultFinal = Result
	end,
	case Dir =:= undefined of
		true ->
				DirFinal = 0;
		false ->
			DirFinal = Dir
	end,
	case Dest_pos =:= undefined of
		true ->
				Dest_posFinal = 0;
		false ->
			Dest_posFinal = Dest_pos
	end,
	case Target_type =:= undefined of
		true ->
				Target_typeFinal = 0;
		false ->
			Target_typeFinal = Target_type
	end,
	case Target_id =:= undefined of
		true ->
				Target_idFinal = 0;
		false ->
			Target_idFinal = Target_id
	end,
	case Reason_code =:= undefined of
		true ->
				Reason_codeFinal = 0;
		false ->
			Reason_codeFinal = Reason_code
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Src_pos_bin = encode_p_pos(Src_posFinal),
	BinLen_src_pos = erlang:byte_size(Src_pos_bin),
	Result_bin = encode_p_attack_results(ResultFinal, <<>>),
	SizeResultFinal = erlang:length(ResultFinal),
	BinLen_result = erlang:byte_size(Result_bin),
	Dest_pos_bin = encode_p_pos(Dest_posFinal),
	BinLen_dest_pos = erlang:byte_size(Dest_pos_bin),

	<<SuccFinal:8,Return_selfFinal:8,ReasonLen:16, Reason2/binary,Src_idFinal:32/signed,SkillidFinal:32/signed,BinLen_src_pos:32, Src_pos_bin/binary,Src_typeFinal:32/signed,SizeResultFinal:16, BinLen_result:32, Result_bin/binary,DirFinal:32/signed,BinLen_dest_pos:32, Dest_pos_bin/binary,Target_typeFinal:32/signed,Target_idFinal:32/signed,Reason_codeFinal:32/signed>>;
encode_m_fight_attack_toc(_) -> 
	<<>>.

decode_m_fight_attack_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,Return_selfTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Src_id:32/signed,Skillid:32/signed,SubBinSizesrc_pos:32, Bin2/binary>> = Bin1,
	<<SubBinsrc_pos:SubBinSizesrc_pos/binary, Bin3/binary>> = Bin2,
	Src_pos = decode_p_pos(SubBinsrc_pos),
	<<Src_type:32/signed,_Sizeresult:16, BinLenresult:32, Bin4/binary>> = Bin3,
	<<SubBinresult:BinLenresult/binary, Bin5/binary>> = Bin4, 
	Result = lists:reverse(decode_p_attack_results(SubBinresult, [])),
	<<Dir:32/signed,SubBinSizedest_pos:32, Bin6/binary>> = Bin5,
	<<SubBindest_pos:SubBinSizedest_pos/binary, Bin7/binary>> = Bin6,
	Dest_pos = decode_p_pos(SubBindest_pos),
	<<Target_type:32/signed,Target_id:32/signed,Reason_code:32/signed>> = Bin7,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_fight_attack_toc, Succ,Return_self,common_tool:to_list(Reason),Src_id,Skillid,Src_pos,Src_type,Result,Dir,Dest_pos,Target_type,Target_id,Reason_code};

decode_m_fight_attack_toc(_) ->
	undefined.
encode_p_team_role(Record) when is_record(Record, p_team_role) ->
	#p_team_role{role_id=Role_id,role_name=Role_name,sex=Sex,skin=Skin,map_id=Map_id,map_name=Map_name,tx=Tx,ty=Ty,hp=Hp,mp=Mp,max_hp=Max_hp,max_mp=Max_mp,level=Level,is_leader=Is_leader,is_follow=Is_follow,is_offline=Is_offline,offline_time=Offline_time,five_ele_attr=Five_ele_attr,five_ele_attr_level=Five_ele_attr_level,add_hp=Add_hp,add_mp=Add_mp,add_phy_attack=Add_phy_attack,add_magic_attack=Add_magic_attack,category=Category,faction_id=Faction_id} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, p_team_role, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = <<>>;
		false ->
			Role_nameFinal = Role_name
	end,
	case Sex =:= undefined of
		true ->
				SexFinal = 0;
		false ->
			SexFinal = Sex
	end,
	case Skin =:= undefined of
		true ->
				SkinFinal = 0;
		false ->
			SkinFinal = Skin
	end,
	case Map_id =:= undefined of
		true ->
				Map_idFinal = 0;
		false ->
			Map_idFinal = Map_id
	end,
	case Map_name =:= undefined of
		true ->
				Map_nameFinal = <<>>;
		false ->
			Map_nameFinal = Map_name
	end,
	case Tx =:= undefined of
		true ->
				TxFinal = 0;
		false ->
			TxFinal = Tx
	end,
	case Ty =:= undefined of
		true ->
				TyFinal = 0;
		false ->
			TyFinal = Ty
	end,
	case Hp =:= undefined of
		true ->
				HpFinal = 0;
		false ->
			HpFinal = Hp
	end,
	case Mp =:= undefined of
		true ->
				MpFinal = 0;
		false ->
			MpFinal = Mp
	end,
	case Max_hp =:= undefined of
		true ->
				Max_hpFinal = 0;
		false ->
			Max_hpFinal = Max_hp
	end,
	case Max_mp =:= undefined of
		true ->
				Max_mpFinal = 0;
		false ->
			Max_mpFinal = Max_mp
	end,
	case Level =:= undefined of
		true ->
				LevelFinal = 0;
		false ->
			LevelFinal = Level
	end,
	case Is_leader =:= undefined of
		true ->
				Is_leaderFinal = 0;
		false ->
			case Is_leader of
				true ->
					Is_leaderFinal = 1;
				false ->
					Is_leaderFinal = 0
			end
	end,
	case Is_follow =:= undefined of
		true ->
				Is_followFinal = 0;
		false ->
			case Is_follow of
				true ->
					Is_followFinal = 1;
				false ->
					Is_followFinal = 0
			end
	end,
	case Is_offline =:= undefined of
		true ->
				Is_offlineFinal = 0;
		false ->
			case Is_offline of
				true ->
					Is_offlineFinal = 1;
				false ->
					Is_offlineFinal = 0
			end
	end,
	case Offline_time =:= undefined of
		true ->
				Offline_timeFinal = 0;
		false ->
			Offline_timeFinal = Offline_time
	end,
	case Five_ele_attr =:= undefined of
		true ->
				Five_ele_attrFinal = 0;
		false ->
			Five_ele_attrFinal = Five_ele_attr
	end,
	case Five_ele_attr_level =:= undefined of
		true ->
				Five_ele_attr_levelFinal = 0;
		false ->
			Five_ele_attr_levelFinal = Five_ele_attr_level
	end,
	case Add_hp =:= undefined of
		true ->
				Add_hpFinal = 0;
		false ->
			Add_hpFinal = Add_hp
	end,
	case Add_mp =:= undefined of
		true ->
				Add_mpFinal = 0;
		false ->
			Add_mpFinal = Add_mp
	end,
	case Add_phy_attack =:= undefined of
		true ->
				Add_phy_attackFinal = 0;
		false ->
			Add_phy_attackFinal = Add_phy_attack
	end,
	case Add_magic_attack =:= undefined of
		true ->
				Add_magic_attackFinal = 0;
		false ->
			Add_magic_attackFinal = Add_magic_attack
	end,
	case Category =:= undefined of
		true ->
				CategoryFinal = 0;
		false ->
			CategoryFinal = Category
	end,
	case Faction_id =:= undefined of
		true ->
				Faction_idFinal = 0;
		false ->
			Faction_idFinal = Faction_id
	end,
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),
	Skin_bin = encode_p_skin(SkinFinal),
	BinLen_skin = erlang:byte_size(Skin_bin),
	Map_name2 = common_tool:to_binary(Map_nameFinal),
	Map_nameLen = erlang:byte_size(Map_name2),

	<<Role_idFinal:32/signed,Role_nameLen:16, Role_name2/binary,SexFinal:32/signed,BinLen_skin:32, Skin_bin/binary,Map_idFinal:32/signed,Map_nameLen:16, Map_name2/binary,TxFinal:32/signed,TyFinal:32/signed,HpFinal:32/signed,MpFinal:32/signed,Max_hpFinal:32/signed,Max_mpFinal:32/signed,LevelFinal:32/signed,Is_leaderFinal:8,Is_followFinal:8,Is_offlineFinal:8,Offline_timeFinal:32/signed,Five_ele_attrFinal:32/signed,Five_ele_attr_levelFinal:32/signed,Add_hpFinal:32/signed,Add_mpFinal:32/signed,Add_phy_attackFinal:32/signed,Add_magic_attackFinal:32/signed,CategoryFinal:32/signed,Faction_idFinal:32/signed>>;
encode_p_team_role(_) -> 
	<<>>.

decode_p_team_role(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,Role_nameLen:16, Bin1/binary>> = Bin0,
	<<Role_name:Role_nameLen/binary,Sex:32/signed,SubBinSizeskin:32, Bin2/binary>> = Bin1,
	<<SubBinskin:SubBinSizeskin/binary, Bin3/binary>> = Bin2,
	Skin = decode_p_skin(SubBinskin),
	<<Map_id:32/signed,Map_nameLen:16, Bin4/binary>> = Bin3,
	<<Map_name:Map_nameLen/binary,Tx:32/signed,Ty:32/signed,Hp:32/signed,Mp:32/signed,Max_hp:32/signed,Max_mp:32/signed,Level:32/signed,Is_leaderTmp:8,Is_followTmp:8,Is_offlineTmp:8,Offline_time:32/signed,Five_ele_attr:32/signed,Five_ele_attr_level:32/signed,Add_hp:32/signed,Add_mp:32/signed,Add_phy_attack:32/signed,Add_magic_attack:32/signed,Category:32/signed,Faction_id:32/signed>> = Bin4,
case Is_leaderTmp of 
	1 -> 
		Is_leader = true;
	_ ->
		Is_leader = false
end,
case Is_followTmp of 
	1 -> 
		Is_follow = true;
	_ ->
		Is_follow = false
end,
case Is_offlineTmp of 
	1 -> 
		Is_offline = true;
	_ ->
		Is_offline = false
end,

	{p_team_role, Role_id,common_tool:to_list(Role_name),Sex,Skin,Map_id,common_tool:to_list(Map_name),Tx,Ty,Hp,Mp,Max_hp,Max_mp,Level,Is_leader,Is_follow,Is_offline,Offline_time,Five_ele_attr,Five_ele_attr_level,Add_hp,Add_mp,Add_phy_attack,Add_magic_attack,Category,Faction_id};

decode_p_team_role(_) ->
	undefined.
encode_m_team_invite_tos(Record) when is_record(Record, m_team_invite_tos) ->
	#m_team_invite_tos{role_id=Role_id,type=Type,team_id=Team_id} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, m_team_invite_tos, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Type =:= undefined of
		true ->
				TypeFinal = 0;
		false ->
			TypeFinal = Type
	end,
	case Team_id =:= undefined of
		true ->
				Team_idFinal = 0;
		false ->
			Team_idFinal = Team_id
	end,

	<<Role_idFinal:32/signed,TypeFinal:32/signed,Team_idFinal:32/signed>>;
encode_m_team_invite_tos(_) -> 
	<<>>.

decode_m_team_invite_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,Type:32/signed,Team_id:32/signed>> = Bin0,

	{m_team_invite_tos, Role_id,Type,Team_id};

decode_m_team_invite_tos(_) ->
	undefined.
encode_m_team_invite_toc(Record) when is_record(Record, m_team_invite_toc) ->
	#m_team_invite_toc{succ=Succ,return_self=Return_self,reason=Reason,role_id=Role_id,role_name=Role_name,team_id=Team_id,pick_type=Pick_type,leader_id=Leader_id,type_id=Type_id} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = 0;
		false ->
			Role_idFinal = Role_id
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = <<>>;
		false ->
			Role_nameFinal = Role_name
	end,
	case Team_id =:= undefined of
		true ->
				Team_idFinal = 0;
		false ->
			Team_idFinal = Team_id
	end,
	case Pick_type =:= undefined of
		true ->
				Pick_typeFinal = 1;
		false ->
			Pick_typeFinal = Pick_type
	end,
	case Leader_id =:= undefined of
		true ->
				Leader_idFinal = 0;
		false ->
			Leader_idFinal = Leader_id
	end,
	case Type_id =:= undefined of
		true ->
				Type_idFinal = 0;
		false ->
			Type_idFinal = Type_id
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),

	<<SuccFinal:8,Return_selfFinal:8,ReasonLen:16, Reason2/binary,Role_idFinal:32/signed,Role_nameLen:16, Role_name2/binary,Team_idFinal:32/signed,Pick_typeFinal:32/signed,Leader_idFinal:32/signed,Type_idFinal:32/signed>>;
encode_m_team_invite_toc(_) -> 
	<<>>.

decode_m_team_invite_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,Return_selfTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Role_id:32/signed,Role_nameLen:16, Bin2/binary>> = Bin1,
	<<Role_name:Role_nameLen/binary,Team_id:32/signed,Pick_type:32/signed,Leader_id:32/signed,Type_id:32/signed>> = Bin2,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_team_invite_toc, Succ,Return_self,common_tool:to_list(Reason),Role_id,common_tool:to_list(Role_name),Team_id,Pick_type,Leader_id,Type_id};

decode_m_team_invite_toc(_) ->
	undefined.
encode_m_team_accept_tos(Record) when is_record(Record, m_team_accept_tos) ->
	#m_team_accept_tos{role_id=Role_id,team_id=Team_id,leader_id=Leader_id,type_id=Type_id} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, m_team_accept_tos, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Team_id =:= undefined of
		true ->
				Team_idFinal = 0;
		false ->
			Team_idFinal = Team_id
	end,
	case Leader_id =:= undefined of
		true ->
				Leader_idFinal = 0;
		false ->
			Leader_idFinal = Leader_id
	end,
	case Type_id =:= undefined of
		true ->
				Type_idFinal = 0;
		false ->
			Type_idFinal = Type_id
	end,

	<<Role_idFinal:32/signed,Team_idFinal:32/signed,Leader_idFinal:32/signed,Type_idFinal:32/signed>>;
encode_m_team_accept_tos(_) -> 
	<<>>.

decode_m_team_accept_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,Team_id:32/signed,Leader_id:32/signed,Type_id:32/signed>> = Bin0,

	{m_team_accept_tos, Role_id,Team_id,Leader_id,Type_id};

decode_m_team_accept_tos(_) ->
	undefined.
encode_m_team_accept_toc(Record) when is_record(Record, m_team_accept_toc) ->
	#m_team_accept_toc{succ=Succ,return_self=Return_self,reason=Reason,role_list=Role_list,role_id=Role_id,role_name=Role_name,team_id=Team_id,pick_type=Pick_type,type_id=Type_id} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Role_list =:= undefined of
		true ->
			Role_listFinal = [];
		false ->
			Role_listFinal = Role_list
	end,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = 0;
		false ->
			Role_idFinal = Role_id
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = <<>>;
		false ->
			Role_nameFinal = Role_name
	end,
	case Team_id =:= undefined of
		true ->
				Team_idFinal = 0;
		false ->
			Team_idFinal = Team_id
	end,
	case Pick_type =:= undefined of
		true ->
				Pick_typeFinal = 1;
		false ->
			Pick_typeFinal = Pick_type
	end,
	case Type_id =:= undefined of
		true ->
				Type_idFinal = 0;
		false ->
			Type_idFinal = Type_id
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Role_list_bin = encode_p_team_roles(Role_listFinal, <<>>),
	SizeRole_listFinal = erlang:length(Role_listFinal),
	BinLen_role_list = erlang:byte_size(Role_list_bin),
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),

	<<SuccFinal:8,Return_selfFinal:8,ReasonLen:16, Reason2/binary,SizeRole_listFinal:16, BinLen_role_list:32, Role_list_bin/binary,Role_idFinal:32/signed,Role_nameLen:16, Role_name2/binary,Team_idFinal:32/signed,Pick_typeFinal:32/signed,Type_idFinal:32/signed>>;
encode_m_team_accept_toc(_) -> 
	<<>>.

decode_m_team_accept_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,Return_selfTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_Sizerole_list:16, BinLenrole_list:32, Bin2/binary>> = Bin1,
	<<SubBinrole_list:BinLenrole_list/binary, Bin3/binary>> = Bin2, 
	Role_list = lists:reverse(decode_p_team_roles(SubBinrole_list, [])),
	<<Role_id:32/signed,Role_nameLen:16, Bin4/binary>> = Bin3,
	<<Role_name:Role_nameLen/binary,Team_id:32/signed,Pick_type:32/signed,Type_id:32/signed>> = Bin4,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_team_accept_toc, Succ,Return_self,common_tool:to_list(Reason),Role_list,Role_id,common_tool:to_list(Role_name),Team_id,Pick_type,Type_id};

decode_m_team_accept_toc(_) ->
	undefined.
encode_m_team_refuse_tos(Record) when is_record(Record, m_team_refuse_tos) ->
	#m_team_refuse_tos{role_id=Role_id,team_id=Team_id,leader_id=Leader_id,type_id=Type_id} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, m_team_refuse_tos, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Team_id =:= undefined of
		true ->
				Team_idFinal = 0;
		false ->
			Team_idFinal = Team_id
	end,
	case Leader_id =:= undefined of
		true ->
				Leader_idFinal = 0;
		false ->
			Leader_idFinal = Leader_id
	end,
	case Type_id =:= undefined of
		true ->
				Type_idFinal = 0;
		false ->
			Type_idFinal = Type_id
	end,

	<<Role_idFinal:32/signed,Team_idFinal:32/signed,Leader_idFinal:32/signed,Type_idFinal:32/signed>>;
encode_m_team_refuse_tos(_) -> 
	<<>>.

decode_m_team_refuse_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,Team_id:32/signed,Leader_id:32/signed,Type_id:32/signed>> = Bin0,

	{m_team_refuse_tos, Role_id,Team_id,Leader_id,Type_id};

decode_m_team_refuse_tos(_) ->
	undefined.
encode_m_team_refuse_toc(Record) when is_record(Record, m_team_refuse_toc) ->
	#m_team_refuse_toc{role_id=Role_id,role_name=Role_name,team_id=Team_id,type_id=Type_id} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = 0;
		false ->
			Role_idFinal = Role_id
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = <<>>;
		false ->
			Role_nameFinal = Role_name
	end,
	case Team_id =:= undefined of
		true ->
				Team_idFinal = 0;
		false ->
			Team_idFinal = Team_id
	end,
	case Type_id =:= undefined of
		true ->
				Type_idFinal = 0;
		false ->
			Type_idFinal = Type_id
	end,
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),

	<<Role_idFinal:32/signed,Role_nameLen:16, Role_name2/binary,Team_idFinal:32/signed,Type_idFinal:32/signed>>;
encode_m_team_refuse_toc(_) -> 
	<<>>.

decode_m_team_refuse_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,Role_nameLen:16, Bin1/binary>> = Bin0,
	<<Role_name:Role_nameLen/binary,Team_id:32/signed,Type_id:32/signed>> = Bin1,

	{m_team_refuse_toc, Role_id,common_tool:to_list(Role_name),Team_id,Type_id};

decode_m_team_refuse_toc(_) ->
	undefined.
encode_m_team_leave_tos(Record) when is_record(Record, m_team_leave_tos) ->
	#m_team_leave_tos{team_id=Team_id} = Record,
	case Team_id =:= undefined of
		true ->
				Team_idFinal = undefined,
				exit({required_field_not_assigned, m_team_leave_tos, team_id});
		false ->
			Team_idFinal = Team_id
	end,

	<<Team_idFinal:32/signed>>;
encode_m_team_leave_tos(_) -> 
	<<>>.

decode_m_team_leave_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Team_id:32/signed>> = Bin0,

	{m_team_leave_tos, Team_id};

decode_m_team_leave_tos(_) ->
	undefined.
encode_m_team_leave_toc(Record) when is_record(Record, m_team_leave_toc) ->
	#m_team_leave_toc{succ=Succ,return_self=Return_self,reason=Reason,role_list=Role_list,role_id=Role_id,role_name=Role_name,team_id=Team_id} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Role_list =:= undefined of
		true ->
			Role_listFinal = [];
		false ->
			Role_listFinal = Role_list
	end,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = 0;
		false ->
			Role_idFinal = Role_id
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = <<>>;
		false ->
			Role_nameFinal = Role_name
	end,
	case Team_id =:= undefined of
		true ->
				Team_idFinal = 0;
		false ->
			Team_idFinal = Team_id
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Role_list_bin = encode_p_team_roles(Role_listFinal, <<>>),
	SizeRole_listFinal = erlang:length(Role_listFinal),
	BinLen_role_list = erlang:byte_size(Role_list_bin),
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),

	<<SuccFinal:8,Return_selfFinal:8,ReasonLen:16, Reason2/binary,SizeRole_listFinal:16, BinLen_role_list:32, Role_list_bin/binary,Role_idFinal:32/signed,Role_nameLen:16, Role_name2/binary,Team_idFinal:32/signed>>;
encode_m_team_leave_toc(_) -> 
	<<>>.

decode_m_team_leave_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,Return_selfTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_Sizerole_list:16, BinLenrole_list:32, Bin2/binary>> = Bin1,
	<<SubBinrole_list:BinLenrole_list/binary, Bin3/binary>> = Bin2, 
	Role_list = lists:reverse(decode_p_team_roles(SubBinrole_list, [])),
	<<Role_id:32/signed,Role_nameLen:16, Bin4/binary>> = Bin3,
	<<Role_name:Role_nameLen/binary,Team_id:32/signed>> = Bin4,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_team_leave_toc, Succ,Return_self,common_tool:to_list(Reason),Role_list,Role_id,common_tool:to_list(Role_name),Team_id};

decode_m_team_leave_toc(_) ->
	undefined.
encode_m_team_kick_tos(Record) when is_record(Record, m_team_kick_tos) ->
	#m_team_kick_tos{role_id=Role_id} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, m_team_kick_tos, role_id});
		false ->
			Role_idFinal = Role_id
	end,

	<<Role_idFinal:32/signed>>;
encode_m_team_kick_tos(_) -> 
	<<>>.

decode_m_team_kick_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed>> = Bin0,

	{m_team_kick_tos, Role_id};

decode_m_team_kick_tos(_) ->
	undefined.
encode_m_team_kick_toc(Record) when is_record(Record, m_team_kick_toc) ->
	#m_team_kick_toc{succ=Succ,return_self=Return_self,reason=Reason,role_list=Role_list,role_id=Role_id,role_name=Role_name,team_id=Team_id} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Role_list =:= undefined of
		true ->
			Role_listFinal = [];
		false ->
			Role_listFinal = Role_list
	end,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = 0;
		false ->
			Role_idFinal = Role_id
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = <<>>;
		false ->
			Role_nameFinal = Role_name
	end,
	case Team_id =:= undefined of
		true ->
				Team_idFinal = 0;
		false ->
			Team_idFinal = Team_id
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Role_list_bin = encode_p_team_roles(Role_listFinal, <<>>),
	SizeRole_listFinal = erlang:length(Role_listFinal),
	BinLen_role_list = erlang:byte_size(Role_list_bin),
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),

	<<SuccFinal:8,Return_selfFinal:8,ReasonLen:16, Reason2/binary,SizeRole_listFinal:16, BinLen_role_list:32, Role_list_bin/binary,Role_idFinal:32/signed,Role_nameLen:16, Role_name2/binary,Team_idFinal:32/signed>>;
encode_m_team_kick_toc(_) -> 
	<<>>.

decode_m_team_kick_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,Return_selfTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_Sizerole_list:16, BinLenrole_list:32, Bin2/binary>> = Bin1,
	<<SubBinrole_list:BinLenrole_list/binary, Bin3/binary>> = Bin2, 
	Role_list = lists:reverse(decode_p_team_roles(SubBinrole_list, [])),
	<<Role_id:32/signed,Role_nameLen:16, Bin4/binary>> = Bin3,
	<<Role_name:Role_nameLen/binary,Team_id:32/signed>> = Bin4,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_team_kick_toc, Succ,Return_self,common_tool:to_list(Reason),Role_list,Role_id,common_tool:to_list(Role_name),Team_id};

decode_m_team_kick_toc(_) ->
	undefined.
encode_m_team_offline_toc(Record) when is_record(Record, m_team_offline_toc) ->
	#m_team_offline_toc{cache_offline=Cache_offline,role_list=Role_list,role_id=Role_id,role_name=Role_name,team_id=Team_id} = Record,
	case Cache_offline =:= undefined of
		true ->
				Cache_offlineFinal = 0;
		false ->
		case Cache_offline of
			true ->
				Cache_offlineFinal = 1;
			false ->
				Cache_offlineFinal = 0
		end
	end,
	case Role_list =:= undefined of
		true ->
			Role_listFinal = [];
		false ->
			Role_listFinal = Role_list
	end,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = 0;
		false ->
			Role_idFinal = Role_id
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = <<>>;
		false ->
			Role_nameFinal = Role_name
	end,
	case Team_id =:= undefined of
		true ->
				Team_idFinal = 0;
		false ->
			Team_idFinal = Team_id
	end,
	Role_list_bin = encode_p_team_roles(Role_listFinal, <<>>),
	SizeRole_listFinal = erlang:length(Role_listFinal),
	BinLen_role_list = erlang:byte_size(Role_list_bin),
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),

	<<Cache_offlineFinal:8,SizeRole_listFinal:16, BinLen_role_list:32, Role_list_bin/binary,Role_idFinal:32/signed,Role_nameLen:16, Role_name2/binary,Team_idFinal:32/signed>>;
encode_m_team_offline_toc(_) -> 
	<<>>.

decode_m_team_offline_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Cache_offlineTmp:8,_Sizerole_list:16, BinLenrole_list:32, Bin1/binary>> = Bin0,
	<<SubBinrole_list:BinLenrole_list/binary, Bin2/binary>> = Bin1, 
	Role_list = lists:reverse(decode_p_team_roles(SubBinrole_list, [])),
	<<Role_id:32/signed,Role_nameLen:16, Bin3/binary>> = Bin2,
	<<Role_name:Role_nameLen/binary,Team_id:32/signed>> = Bin3,
case Cache_offlineTmp of 
	1 -> 
		Cache_offline = true;
	_ ->
		Cache_offline = false
end,

	{m_team_offline_toc, Cache_offline,Role_list,Role_id,common_tool:to_list(Role_name),Team_id};

decode_m_team_offline_toc(_) ->
	undefined.
encode_m_team_change_leader_tos(Record) when is_record(Record, m_team_change_leader_tos) ->
	#m_team_change_leader_tos{team_id=Team_id,role_id=Role_id,role_name=Role_name} = Record,
	case Team_id =:= undefined of
		true ->
				Team_idFinal = undefined,
				exit({required_field_not_assigned, m_team_change_leader_tos, team_id});
		false ->
			Team_idFinal = Team_id
	end,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, m_team_change_leader_tos, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = undefined,
				exit({required_field_not_assigned, m_team_change_leader_tos, role_name});
		false ->
			Role_nameFinal = Role_name
	end,
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),

	<<Team_idFinal:32/signed,Role_idFinal:32/signed,Role_nameLen:16, Role_name2/binary>>;
encode_m_team_change_leader_tos(_) -> 
	<<>>.

decode_m_team_change_leader_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Team_id:32/signed,Role_id:32/signed,Role_nameLen:16, Bin1/binary>> = Bin0,
	<<Role_name:Role_nameLen/binary>> = Bin1,

	{m_team_change_leader_tos, Team_id,Role_id,common_tool:to_list(Role_name)};

decode_m_team_change_leader_tos(_) ->
	undefined.
encode_m_team_change_leader_toc(Record) when is_record(Record, m_team_change_leader_toc) ->
	#m_team_change_leader_toc{succ=Succ,return_self=Return_self,reason=Reason,role_list=Role_list,role_id=Role_id,role_name=Role_name,team_id=Team_id} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Role_list =:= undefined of
		true ->
			Role_listFinal = [];
		false ->
			Role_listFinal = Role_list
	end,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = 0;
		false ->
			Role_idFinal = Role_id
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = <<>>;
		false ->
			Role_nameFinal = Role_name
	end,
	case Team_id =:= undefined of
		true ->
				Team_idFinal = 0;
		false ->
			Team_idFinal = Team_id
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Role_list_bin = encode_p_team_roles(Role_listFinal, <<>>),
	SizeRole_listFinal = erlang:length(Role_listFinal),
	BinLen_role_list = erlang:byte_size(Role_list_bin),
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),

	<<SuccFinal:8,Return_selfFinal:8,ReasonLen:16, Reason2/binary,SizeRole_listFinal:16, BinLen_role_list:32, Role_list_bin/binary,Role_idFinal:32/signed,Role_nameLen:16, Role_name2/binary,Team_idFinal:32/signed>>;
encode_m_team_change_leader_toc(_) -> 
	<<>>.

decode_m_team_change_leader_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,Return_selfTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_Sizerole_list:16, BinLenrole_list:32, Bin2/binary>> = Bin1,
	<<SubBinrole_list:BinLenrole_list/binary, Bin3/binary>> = Bin2, 
	Role_list = lists:reverse(decode_p_team_roles(SubBinrole_list, [])),
	<<Role_id:32/signed,Role_nameLen:16, Bin4/binary>> = Bin3,
	<<Role_name:Role_nameLen/binary,Team_id:32/signed>> = Bin4,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_team_change_leader_toc, Succ,Return_self,common_tool:to_list(Reason),Role_list,Role_id,common_tool:to_list(Role_name),Team_id};

decode_m_team_change_leader_toc(_) ->
	undefined.
encode_m_team_disband_tos(Record) when is_record(Record, m_team_disband_tos) ->
	#m_team_disband_tos{team_id=Team_id} = Record,
	case Team_id =:= undefined of
		true ->
				Team_idFinal = 0;
		false ->
			Team_idFinal = Team_id
	end,

	<<Team_idFinal:32/signed>>;
encode_m_team_disband_tos(_) -> 
	<<>>.

decode_m_team_disband_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Team_id:32/signed>> = Bin0,

	{m_team_disband_tos, Team_id};

decode_m_team_disband_tos(_) ->
	undefined.
encode_m_team_disband_toc(Record) when is_record(Record, m_team_disband_toc) ->
	#m_team_disband_toc{succ=Succ,return_self=Return_self,team_id=Team_id,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Team_id =:= undefined of
		true ->
				Team_idFinal = 0;
		false ->
			Team_idFinal = Team_id
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,Return_selfFinal:8,Team_idFinal:32/signed,ReasonLen:16, Reason2/binary>>;
encode_m_team_disband_toc(_) -> 
	<<>>.

decode_m_team_disband_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,Return_selfTmp:8,Team_id:32/signed,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_team_disband_toc, Succ,Return_self,Team_id,common_tool:to_list(Reason)};

decode_m_team_disband_toc(_) ->
	undefined.
encode_m_team_pick_tos(Record) when is_record(Record, m_team_pick_tos) ->
	#m_team_pick_tos{pick_type=Pick_type} = Record,
	case Pick_type =:= undefined of
		true ->
				Pick_typeFinal = 1;
		false ->
			Pick_typeFinal = Pick_type
	end,

	<<Pick_typeFinal:32/signed>>;
encode_m_team_pick_tos(_) -> 
	<<>>.

decode_m_team_pick_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Pick_type:32/signed>> = Bin0,

	{m_team_pick_tos, Pick_type};

decode_m_team_pick_tos(_) ->
	undefined.
encode_m_team_pick_toc(Record) when is_record(Record, m_team_pick_toc) ->
	#m_team_pick_toc{succ=Succ,return_self=Return_self,pick_type=Pick_type,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Pick_type =:= undefined of
		true ->
				Pick_typeFinal = 1;
		false ->
			Pick_typeFinal = Pick_type
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,Return_selfFinal:8,Pick_typeFinal:32/signed,ReasonLen:16, Reason2/binary>>;
encode_m_team_pick_toc(_) -> 
	<<>>.

decode_m_team_pick_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,Return_selfTmp:8,Pick_type:32/signed,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_team_pick_toc, Succ,Return_self,Pick_type,common_tool:to_list(Reason)};

decode_m_team_pick_toc(_) ->
	undefined.
encode_m_team_auto_disband_toc(Record) when is_record(Record, m_team_auto_disband_toc) ->
	#m_team_auto_disband_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_team_auto_disband_toc(_) -> 
	<<>>.

decode_m_team_auto_disband_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_team_auto_disband_toc, Succ,common_tool:to_list(Reason)};

decode_m_team_auto_disband_toc(_) ->
	undefined.
encode_m_team_auto_list_toc(Record) when is_record(Record, m_team_auto_list_toc) ->
	#m_team_auto_list_toc{return_self=Return_self,team_id=Team_id,role_list=Role_list,pick_type=Pick_type,visible_role_list=Visible_role_list} = Record,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Team_id =:= undefined of
		true ->
				Team_idFinal = 0;
		false ->
			Team_idFinal = Team_id
	end,
	case Role_list =:= undefined of
		true ->
			Role_listFinal = [];
		false ->
			Role_listFinal = Role_list
	end,
	case Pick_type =:= undefined of
		true ->
				Pick_typeFinal = 1;
		false ->
			Pick_typeFinal = Pick_type
	end,
	case Visible_role_list =:= undefined of
		true ->
			Visible_role_listFinal = [];
		false ->
			Visible_role_listFinal = Visible_role_list
	end,
	Role_list_bin = encode_p_team_roles(Role_listFinal, <<>>),
	SizeRole_listFinal = erlang:length(Role_listFinal),
	BinLen_role_list = erlang:byte_size(Role_list_bin),
	Visible_role_list_bin = encode_int32s(Visible_role_listFinal, <<>>),
	SizeVisible_role_listFinal = erlang:length(Visible_role_listFinal),
	BinLen_visible_role_list = erlang:byte_size(Visible_role_list_bin),

	<<Return_selfFinal:8,Team_idFinal:32/signed,SizeRole_listFinal:16, BinLen_role_list:32, Role_list_bin/binary,Pick_typeFinal:32/signed,SizeVisible_role_listFinal:16, BinLen_visible_role_list:32, Visible_role_list_bin/binary>>;
encode_m_team_auto_list_toc(_) -> 
	<<>>.

decode_m_team_auto_list_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Return_selfTmp:8,Team_id:32/signed,_Sizerole_list:16, BinLenrole_list:32, Bin1/binary>> = Bin0,
	<<SubBinrole_list:BinLenrole_list/binary, Bin2/binary>> = Bin1, 
	Role_list = lists:reverse(decode_p_team_roles(SubBinrole_list, [])),
	<<Pick_type:32/signed,_Sizevisible_role_list:16, _BinLenvisible_role_list:32, SubBinvisible_role_list/binary>> = Bin2,
	Visible_role_list = lists:reverse(decode_int32s(SubBinvisible_role_list, [])),
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_team_auto_list_toc, Return_self,Team_id,Role_list,Pick_type,Visible_role_list};

decode_m_team_auto_list_toc(_) ->
	undefined.
encode_m_team_member_invite_tos(Record) when is_record(Record, m_team_member_invite_tos) ->
	#m_team_member_invite_tos{op_type=Op_type,member_id=Member_id,member_name=Member_name,role_id=Role_id,role_name=Role_name} = Record,
	case Op_type =:= undefined of
		true ->
				Op_typeFinal = undefined,
				exit({required_field_not_assigned, m_team_member_invite_tos, op_type});
		false ->
			Op_typeFinal = Op_type
	end,
	case Member_id =:= undefined of
		true ->
				Member_idFinal = undefined,
				exit({required_field_not_assigned, m_team_member_invite_tos, member_id});
		false ->
			Member_idFinal = Member_id
	end,
	case Member_name =:= undefined of
		true ->
				Member_nameFinal = undefined,
				exit({required_field_not_assigned, m_team_member_invite_tos, member_name});
		false ->
			Member_nameFinal = Member_name
	end,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, m_team_member_invite_tos, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = undefined,
				exit({required_field_not_assigned, m_team_member_invite_tos, role_name});
		false ->
			Role_nameFinal = Role_name
	end,
	Member_name2 = common_tool:to_binary(Member_nameFinal),
	Member_nameLen = erlang:byte_size(Member_name2),
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),

	<<Op_typeFinal:32/signed,Member_idFinal:32/signed,Member_nameLen:16, Member_name2/binary,Role_idFinal:32/signed,Role_nameLen:16, Role_name2/binary>>;
encode_m_team_member_invite_tos(_) -> 
	<<>>.

decode_m_team_member_invite_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Op_type:32/signed,Member_id:32/signed,Member_nameLen:16, Bin1/binary>> = Bin0,
	<<Member_name:Member_nameLen/binary,Role_id:32/signed,Role_nameLen:16, Bin2/binary>> = Bin1,
	<<Role_name:Role_nameLen/binary>> = Bin2,

	{m_team_member_invite_tos, Op_type,Member_id,common_tool:to_list(Member_name),Role_id,common_tool:to_list(Role_name)};

decode_m_team_member_invite_tos(_) ->
	undefined.
encode_m_team_member_invite_toc(Record) when is_record(Record, m_team_member_invite_toc) ->
	#m_team_member_invite_toc{op_status=Op_status,member_id=Member_id,member_name=Member_name,role_id=Role_id,role_name=Role_name,succ=Succ,return_self=Return_self,reason=Reason,op_type=Op_type} = Record,
	case Op_status =:= undefined of
		true ->
				Op_statusFinal = undefined,
				exit({required_field_not_assigned, m_team_member_invite_toc, op_status});
		false ->
			Op_statusFinal = Op_status
	end,
	case Member_id =:= undefined of
		true ->
				Member_idFinal = 0;
		false ->
			Member_idFinal = Member_id
	end,
	case Member_name =:= undefined of
		true ->
				Member_nameFinal = <<>>;
		false ->
			Member_nameFinal = Member_name
	end,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = 0;
		false ->
			Role_idFinal = Role_id
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = <<>>;
		false ->
			Role_nameFinal = Role_name
	end,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
			case Succ of
				true ->
					SuccFinal = 1;
				false ->
					SuccFinal = 0
			end
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
			case Return_self of
				true ->
					Return_selfFinal = 1;
				false ->
					Return_selfFinal = 0
			end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Op_type =:= undefined of
		true ->
				Op_typeFinal = 0;
		false ->
			Op_typeFinal = Op_type
	end,
	Member_name2 = common_tool:to_binary(Member_nameFinal),
	Member_nameLen = erlang:byte_size(Member_name2),
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<Op_statusFinal:32/signed,Member_idFinal:32/signed,Member_nameLen:16, Member_name2/binary,Role_idFinal:32/signed,Role_nameLen:16, Role_name2/binary,SuccFinal:8,Return_selfFinal:8,ReasonLen:16, Reason2/binary,Op_typeFinal:32/signed>>;
encode_m_team_member_invite_toc(_) -> 
	<<>>.

decode_m_team_member_invite_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Op_status:32/signed,Member_id:32/signed,Member_nameLen:16, Bin1/binary>> = Bin0,
	<<Member_name:Member_nameLen/binary,Role_id:32/signed,Role_nameLen:16, Bin2/binary>> = Bin1,
	<<Role_name:Role_nameLen/binary,SuccTmp:8,Return_selfTmp:8,ReasonLen:16, Bin3/binary>> = Bin2,
	<<Reason:ReasonLen/binary,Op_type:32/signed>> = Bin3,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_team_member_invite_toc, Op_status,Member_id,common_tool:to_list(Member_name),Role_id,common_tool:to_list(Role_name),Succ,Return_self,common_tool:to_list(Reason),Op_type};

decode_m_team_member_invite_toc(_) ->
	undefined.
encode_m_team_member_recommend_tos(Record) when is_record(Record, m_team_member_recommend_tos) ->
	#m_team_member_recommend_tos{} = Record,

	<<>>;
encode_m_team_member_recommend_tos(_) -> 
	<<>>.

decode_m_team_member_recommend_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_team_member_recommend_tos};

decode_m_team_member_recommend_tos(_) ->
	undefined.
encode_m_team_member_recommend_toc(Record) when is_record(Record, m_team_member_recommend_toc) ->
	#m_team_member_recommend_toc{succ=Succ,member_info=Member_info,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Member_info =:= undefined of
		true ->
			Member_infoFinal = [];
		false ->
			Member_infoFinal = Member_info
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Member_info_bin = encode_p_recommend_member_infos(Member_infoFinal, <<>>),
	SizeMember_infoFinal = erlang:length(Member_infoFinal),
	BinLen_member_info = erlang:byte_size(Member_info_bin),
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,SizeMember_infoFinal:16, BinLen_member_info:32, Member_info_bin/binary,ReasonLen:16, Reason2/binary>>;
encode_m_team_member_recommend_toc(_) -> 
	<<>>.

decode_m_team_member_recommend_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,_Sizemember_info:16, BinLenmember_info:32, Bin1/binary>> = Bin0,
	<<SubBinmember_info:BinLenmember_info/binary, Bin2/binary>> = Bin1, 
	Member_info = lists:reverse(decode_p_recommend_member_infos(SubBinmember_info, [])),
	<<ReasonLen:16, Bin3/binary>> = Bin2,
	<<Reason:ReasonLen/binary>> = Bin3,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_team_member_recommend_toc, Succ,Member_info,common_tool:to_list(Reason)};

decode_m_team_member_recommend_toc(_) ->
	undefined.
encode_m_team_apply_tos(Record) when is_record(Record, m_team_apply_tos) ->
	#m_team_apply_tos{role_id=Role_id,op_type=Op_type,apply_id=Apply_id} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = 0;
		false ->
			Role_idFinal = Role_id
	end,
	case Op_type =:= undefined of
		true ->
				Op_typeFinal = 0;
		false ->
			Op_typeFinal = Op_type
	end,
	case Apply_id =:= undefined of
		true ->
				Apply_idFinal = 0;
		false ->
			Apply_idFinal = Apply_id
	end,

	<<Role_idFinal:32/signed,Op_typeFinal:32/signed,Apply_idFinal:32/signed>>;
encode_m_team_apply_tos(_) -> 
	<<>>.

decode_m_team_apply_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,Op_type:32/signed,Apply_id:32/signed>> = Bin0,

	{m_team_apply_tos, Role_id,Op_type,Apply_id};

decode_m_team_apply_tos(_) ->
	undefined.
encode_m_team_apply_toc(Record) when is_record(Record, m_team_apply_toc) ->
	#m_team_apply_toc{succ=Succ,return_self=Return_self,role_id=Role_id,op_type=Op_type,apply_id=Apply_id,apply_name=Apply_name,reason=Reason,role_list=Role_list,team_id=Team_id,pick_type=Pick_type} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
			case Return_self of
				true ->
					Return_selfFinal = 1;
				false ->
					Return_selfFinal = 0
			end
	end,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = 0;
		false ->
			Role_idFinal = Role_id
	end,
	case Op_type =:= undefined of
		true ->
				Op_typeFinal = 0;
		false ->
			Op_typeFinal = Op_type
	end,
	case Apply_id =:= undefined of
		true ->
				Apply_idFinal = 0;
		false ->
			Apply_idFinal = Apply_id
	end,
	case Apply_name =:= undefined of
		true ->
				Apply_nameFinal = <<>>;
		false ->
			Apply_nameFinal = Apply_name
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Role_list =:= undefined of
		true ->
			Role_listFinal = [];
		false ->
			Role_listFinal = Role_list
	end,
	case Team_id =:= undefined of
		true ->
				Team_idFinal = 0;
		false ->
			Team_idFinal = Team_id
	end,
	case Pick_type =:= undefined of
		true ->
				Pick_typeFinal = 1;
		false ->
			Pick_typeFinal = Pick_type
	end,
	Apply_name2 = common_tool:to_binary(Apply_nameFinal),
	Apply_nameLen = erlang:byte_size(Apply_name2),
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Role_list_bin = encode_p_team_roles(Role_listFinal, <<>>),
	SizeRole_listFinal = erlang:length(Role_listFinal),
	BinLen_role_list = erlang:byte_size(Role_list_bin),

	<<SuccFinal:8,Return_selfFinal:8,Role_idFinal:32/signed,Op_typeFinal:32/signed,Apply_idFinal:32/signed,Apply_nameLen:16, Apply_name2/binary,ReasonLen:16, Reason2/binary,SizeRole_listFinal:16, BinLen_role_list:32, Role_list_bin/binary,Team_idFinal:32/signed,Pick_typeFinal:32/signed>>;
encode_m_team_apply_toc(_) -> 
	<<>>.

decode_m_team_apply_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,Return_selfTmp:8,Role_id:32/signed,Op_type:32/signed,Apply_id:32/signed,Apply_nameLen:16, Bin1/binary>> = Bin0,
	<<Apply_name:Apply_nameLen/binary,ReasonLen:16, Bin2/binary>> = Bin1,
	<<Reason:ReasonLen/binary,_Sizerole_list:16, BinLenrole_list:32, Bin3/binary>> = Bin2,
	<<SubBinrole_list:BinLenrole_list/binary, Bin4/binary>> = Bin3, 
	Role_list = lists:reverse(decode_p_team_roles(SubBinrole_list, [])),
	<<Team_id:32/signed,Pick_type:32/signed>> = Bin4,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_team_apply_toc, Succ,Return_self,Role_id,Op_type,Apply_id,common_tool:to_list(Apply_name),common_tool:to_list(Reason),Role_list,Team_id,Pick_type};

decode_m_team_apply_toc(_) ->
	undefined.
encode_m_team_query_tos(Record) when is_record(Record, m_team_query_tos) ->
	#m_team_query_tos{op_type=Op_type} = Record,
	case Op_type =:= undefined of
		true ->
				Op_typeFinal = 0;
		false ->
			Op_typeFinal = Op_type
	end,

	<<Op_typeFinal:32/signed>>;
encode_m_team_query_tos(_) -> 
	<<>>.

decode_m_team_query_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Op_type:32/signed>> = Bin0,

	{m_team_query_tos, Op_type};

decode_m_team_query_tos(_) ->
	undefined.
encode_m_team_query_toc(Record) when is_record(Record, m_team_query_toc) ->
	#m_team_query_toc{op_type=Op_type,succ=Succ,reason=Reason,reason_code=Reason_code,nearby_list=Nearby_list} = Record,
	case Op_type =:= undefined of
		true ->
				Op_typeFinal = 0;
		false ->
			Op_typeFinal = Op_type
	end,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Reason_code =:= undefined of
		true ->
				Reason_codeFinal = 0;
		false ->
			Reason_codeFinal = Reason_code
	end,
	case Nearby_list =:= undefined of
		true ->
			Nearby_listFinal = [];
		false ->
			Nearby_listFinal = Nearby_list
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Nearby_list_bin = encode_p_team_nearbys(Nearby_listFinal, <<>>),
	SizeNearby_listFinal = erlang:length(Nearby_listFinal),
	BinLen_nearby_list = erlang:byte_size(Nearby_list_bin),

	<<Op_typeFinal:32/signed,SuccFinal:8,ReasonLen:16, Reason2/binary,Reason_codeFinal:32/signed,SizeNearby_listFinal:16, BinLen_nearby_list:32, Nearby_list_bin/binary>>;
encode_m_team_query_toc(_) -> 
	<<>>.

decode_m_team_query_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Op_type:32/signed,SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Reason_code:32/signed,_Sizenearby_list:16, _BinLennearby_list:32, SubBinnearby_list/binary>> = Bin1,
	Nearby_list = lists:reverse(decode_p_team_nearbys(SubBinnearby_list, [])),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_team_query_toc, Op_type,Succ,common_tool:to_list(Reason),Reason_code,Nearby_list};

decode_m_team_query_toc(_) ->
	undefined.
encode_p_team_nearby(Record) when is_record(Record, p_team_nearby) ->
	#p_team_nearby{team_id=Team_id,cur_team_number=Cur_team_number,sum_team_number=Sum_team_number,role_id=Role_id,sex=Sex,faction_id=Faction_id,level=Level,category=Category,skinid=Skinid,role_name=Role_name,auto_accept_team=Auto_accept_team} = Record,
	case Team_id =:= undefined of
		true ->
				Team_idFinal = 0;
		false ->
			Team_idFinal = Team_id
	end,
	case Cur_team_number =:= undefined of
		true ->
				Cur_team_numberFinal = 0;
		false ->
			Cur_team_numberFinal = Cur_team_number
	end,
	case Sum_team_number =:= undefined of
		true ->
				Sum_team_numberFinal = 0;
		false ->
			Sum_team_numberFinal = Sum_team_number
	end,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = 0;
		false ->
			Role_idFinal = Role_id
	end,
	case Sex =:= undefined of
		true ->
				SexFinal = 0;
		false ->
			SexFinal = Sex
	end,
	case Faction_id =:= undefined of
		true ->
				Faction_idFinal = 0;
		false ->
			Faction_idFinal = Faction_id
	end,
	case Level =:= undefined of
		true ->
				LevelFinal = 0;
		false ->
			LevelFinal = Level
	end,
	case Category =:= undefined of
		true ->
				CategoryFinal = 0;
		false ->
			CategoryFinal = Category
	end,
	case Skinid =:= undefined of
		true ->
				SkinidFinal = 0;
		false ->
			SkinidFinal = Skinid
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = <<>>;
		false ->
			Role_nameFinal = Role_name
	end,
	case Auto_accept_team =:= undefined of
		true ->
				Auto_accept_teamFinal = 1;
		false ->
			case Auto_accept_team of
				true ->
					Auto_accept_teamFinal = 1;
				false ->
					Auto_accept_teamFinal = 0
			end
	end,
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),

	<<Team_idFinal:32/signed,Cur_team_numberFinal:32/signed,Sum_team_numberFinal:32/signed,Role_idFinal:32/signed,SexFinal:32/signed,Faction_idFinal:32/signed,LevelFinal:32/signed,CategoryFinal:32/signed,SkinidFinal:32/signed,Role_nameLen:16, Role_name2/binary,Auto_accept_teamFinal:8>>;
encode_p_team_nearby(_) -> 
	<<>>.

decode_p_team_nearby(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Team_id:32/signed,Cur_team_number:32/signed,Sum_team_number:32/signed,Role_id:32/signed,Sex:32/signed,Faction_id:32/signed,Level:32/signed,Category:32/signed,Skinid:32/signed,Role_nameLen:16, Bin1/binary>> = Bin0,
	<<Role_name:Role_nameLen/binary,Auto_accept_teamTmp:8>> = Bin1,
case Auto_accept_teamTmp of 
	1 -> 
		Auto_accept_team = true;
	_ ->
		Auto_accept_team = false
end,

	{p_team_nearby, Team_id,Cur_team_number,Sum_team_number,Role_id,Sex,Faction_id,Level,Category,Skinid,common_tool:to_list(Role_name),Auto_accept_team};

decode_p_team_nearby(_) ->
	undefined.
encode_m_team_create_tos(Record) when is_record(Record, m_team_create_tos) ->
	#m_team_create_tos{role_id=Role_id} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = 0;
		false ->
			Role_idFinal = Role_id
	end,

	<<Role_idFinal:32/signed>>;
encode_m_team_create_tos(_) -> 
	<<>>.

decode_m_team_create_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed>> = Bin0,

	{m_team_create_tos, Role_id};

decode_m_team_create_tos(_) ->
	undefined.
encode_m_team_create_toc(Record) when is_record(Record, m_team_create_toc) ->
	#m_team_create_toc{role_id=Role_id,succ=Succ,reason=Reason,reason_code=Reason_code,role_list=Role_list,team_id=Team_id,pick_type=Pick_type} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = 0;
		false ->
			Role_idFinal = Role_id
	end,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Reason_code =:= undefined of
		true ->
				Reason_codeFinal = 0;
		false ->
			Reason_codeFinal = Reason_code
	end,
	case Role_list =:= undefined of
		true ->
			Role_listFinal = [];
		false ->
			Role_listFinal = Role_list
	end,
	case Team_id =:= undefined of
		true ->
				Team_idFinal = 0;
		false ->
			Team_idFinal = Team_id
	end,
	case Pick_type =:= undefined of
		true ->
				Pick_typeFinal = 1;
		false ->
			Pick_typeFinal = Pick_type
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Role_list_bin = encode_p_team_roles(Role_listFinal, <<>>),
	SizeRole_listFinal = erlang:length(Role_listFinal),
	BinLen_role_list = erlang:byte_size(Role_list_bin),

	<<Role_idFinal:32/signed,SuccFinal:8,ReasonLen:16, Reason2/binary,Reason_codeFinal:32/signed,SizeRole_listFinal:16, BinLen_role_list:32, Role_list_bin/binary,Team_idFinal:32/signed,Pick_typeFinal:32/signed>>;
encode_m_team_create_toc(_) -> 
	<<>>.

decode_m_team_create_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Reason_code:32/signed,_Sizerole_list:16, BinLenrole_list:32, Bin2/binary>> = Bin1,
	<<SubBinrole_list:BinLenrole_list/binary, Bin3/binary>> = Bin2, 
	Role_list = lists:reverse(decode_p_team_roles(SubBinrole_list, [])),
	<<Team_id:32/signed,Pick_type:32/signed>> = Bin3,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_team_create_toc, Role_id,Succ,common_tool:to_list(Reason),Reason_code,Role_list,Team_id,Pick_type};

decode_m_team_create_toc(_) ->
	undefined.
encode_m_friend_request_tos(Record) when is_record(Record, m_friend_request_tos) ->
	#m_friend_request_tos{name=Name} = Record,
	case Name =:= undefined of
		true ->
				NameFinal = undefined,
				exit({required_field_not_assigned, m_friend_request_tos, name});
		false ->
			NameFinal = Name
	end,
	Name2 = common_tool:to_binary(NameFinal),
	NameLen = erlang:byte_size(Name2),

	<<NameLen:16, Name2/binary>>;
encode_m_friend_request_tos(_) -> 
	<<>>.

decode_m_friend_request_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<NameLen:16, Bin1/binary>> = Bin0,
	<<Name:NameLen/binary>> = Bin1,

	{m_friend_request_tos, common_tool:to_list(Name)};

decode_m_friend_request_tos(_) ->
	undefined.
encode_m_friend_request_toc(Record) when is_record(Record, m_friend_request_toc) ->
	#m_friend_request_toc{succ=Succ,name=Name,reason=Reason,return_self=Return_self} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Name =:= undefined of
		true ->
				NameFinal = undefined,
				exit({required_field_not_assigned, m_friend_request_toc, name});
		false ->
			NameFinal = Name
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	Name2 = common_tool:to_binary(NameFinal),
	NameLen = erlang:byte_size(Name2),
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,NameLen:16, Name2/binary,ReasonLen:16, Reason2/binary,Return_selfFinal:8>>;
encode_m_friend_request_toc(_) -> 
	<<>>.

decode_m_friend_request_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,NameLen:16, Bin1/binary>> = Bin0,
	<<Name:NameLen/binary,ReasonLen:16, Bin2/binary>> = Bin1,
	<<Reason:ReasonLen/binary,Return_selfTmp:8>> = Bin2,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_friend_request_toc, Succ,common_tool:to_list(Name),common_tool:to_list(Reason),Return_self};

decode_m_friend_request_toc(_) ->
	undefined.
encode_m_friend_accept_tos(Record) when is_record(Record, m_friend_accept_tos) ->
	#m_friend_accept_tos{name=Name} = Record,
	case Name =:= undefined of
		true ->
				NameFinal = undefined,
				exit({required_field_not_assigned, m_friend_accept_tos, name});
		false ->
			NameFinal = Name
	end,
	Name2 = common_tool:to_binary(NameFinal),
	NameLen = erlang:byte_size(Name2),

	<<NameLen:16, Name2/binary>>;
encode_m_friend_accept_tos(_) -> 
	<<>>.

decode_m_friend_accept_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<NameLen:16, Bin1/binary>> = Bin0,
	<<Name:NameLen/binary>> = Bin1,

	{m_friend_accept_tos, common_tool:to_list(Name)};

decode_m_friend_accept_tos(_) ->
	undefined.
encode_m_friend_accept_toc(Record) when is_record(Record, m_friend_accept_toc) ->
	#m_friend_accept_toc{succ=Succ,name=Name,friend_info=Friend_info,reason=Reason,return_self=Return_self} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Name =:= undefined of
		true ->
				NameFinal = <<>>;
		false ->
			NameFinal = Name
	end,
	case Friend_info =:= undefined of
		true ->
				Friend_infoFinal = 0;
		false ->
			Friend_infoFinal = Friend_info
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	Name2 = common_tool:to_binary(NameFinal),
	NameLen = erlang:byte_size(Name2),
	Friend_info_bin = encode_p_friend_info(Friend_infoFinal),
	BinLen_friend_info = erlang:byte_size(Friend_info_bin),
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,NameLen:16, Name2/binary,BinLen_friend_info:32, Friend_info_bin/binary,ReasonLen:16, Reason2/binary,Return_selfFinal:8>>;
encode_m_friend_accept_toc(_) -> 
	<<>>.

decode_m_friend_accept_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,NameLen:16, Bin1/binary>> = Bin0,
	<<Name:NameLen/binary,SubBinSizefriend_info:32, Bin2/binary>> = Bin1,
	<<SubBinfriend_info:SubBinSizefriend_info/binary, Bin3/binary>> = Bin2,
	Friend_info = decode_p_friend_info(SubBinfriend_info),
	<<ReasonLen:16, Bin4/binary>> = Bin3,
	<<Reason:ReasonLen/binary,Return_selfTmp:8>> = Bin4,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_friend_accept_toc, Succ,common_tool:to_list(Name),Friend_info,common_tool:to_list(Reason),Return_self};

decode_m_friend_accept_toc(_) ->
	undefined.
encode_m_friend_refuse_tos(Record) when is_record(Record, m_friend_refuse_tos) ->
	#m_friend_refuse_tos{name=Name} = Record,
	case Name =:= undefined of
		true ->
				NameFinal = undefined,
				exit({required_field_not_assigned, m_friend_refuse_tos, name});
		false ->
			NameFinal = Name
	end,
	Name2 = common_tool:to_binary(NameFinal),
	NameLen = erlang:byte_size(Name2),

	<<NameLen:16, Name2/binary>>;
encode_m_friend_refuse_tos(_) -> 
	<<>>.

decode_m_friend_refuse_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<NameLen:16, Bin1/binary>> = Bin0,
	<<Name:NameLen/binary>> = Bin1,

	{m_friend_refuse_tos, common_tool:to_list(Name)};

decode_m_friend_refuse_tos(_) ->
	undefined.
encode_m_friend_refuse_toc(Record) when is_record(Record, m_friend_refuse_toc) ->
	#m_friend_refuse_toc{succ=Succ,name=Name,return_self=Return_self,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Name =:= undefined of
		true ->
				NameFinal = undefined,
				exit({required_field_not_assigned, m_friend_refuse_toc, name});
		false ->
			NameFinal = Name
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Name2 = common_tool:to_binary(NameFinal),
	NameLen = erlang:byte_size(Name2),
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,NameLen:16, Name2/binary,Return_selfFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_friend_refuse_toc(_) -> 
	<<>>.

decode_m_friend_refuse_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,NameLen:16, Bin1/binary>> = Bin0,
	<<Name:NameLen/binary,Return_selfTmp:8,ReasonLen:16, Bin2/binary>> = Bin1,
	<<Reason:ReasonLen/binary>> = Bin2,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_friend_refuse_toc, Succ,common_tool:to_list(Name),Return_self,common_tool:to_list(Reason)};

decode_m_friend_refuse_toc(_) ->
	undefined.
encode_m_friend_delete_tos(Record) when is_record(Record, m_friend_delete_tos) ->
	#m_friend_delete_tos{roleid=Roleid} = Record,
	case Roleid =:= undefined of
		true ->
				RoleidFinal = undefined,
				exit({required_field_not_assigned, m_friend_delete_tos, roleid});
		false ->
			RoleidFinal = Roleid
	end,

	<<RoleidFinal:32/signed>>;
encode_m_friend_delete_tos(_) -> 
	<<>>.

decode_m_friend_delete_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Roleid:32/signed>> = Bin0,

	{m_friend_delete_tos, Roleid};

decode_m_friend_delete_tos(_) ->
	undefined.
encode_m_friend_delete_toc(Record) when is_record(Record, m_friend_delete_toc) ->
	#m_friend_delete_toc{succ=Succ,type=Type,reason=Reason,return_self=Return_self,roleid=Roleid} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Type =:= undefined of
		true ->
				TypeFinal = 0;
		false ->
			TypeFinal = Type
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Roleid =:= undefined of
		true ->
				RoleidFinal = 0;
		false ->
			RoleidFinal = Roleid
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,TypeFinal:32/signed,ReasonLen:16, Reason2/binary,Return_selfFinal:8,RoleidFinal:32/signed>>;
encode_m_friend_delete_toc(_) -> 
	<<>>.

decode_m_friend_delete_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,Type:32/signed,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Return_selfTmp:8,Roleid:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_friend_delete_toc, Succ,Type,common_tool:to_list(Reason),Return_self,Roleid};

decode_m_friend_delete_toc(_) ->
	undefined.
encode_m_friend_black_tos(Record) when is_record(Record, m_friend_black_tos) ->
	#m_friend_black_tos{name=Name} = Record,
	case Name =:= undefined of
		true ->
				NameFinal = undefined,
				exit({required_field_not_assigned, m_friend_black_tos, name});
		false ->
			NameFinal = Name
	end,
	Name2 = common_tool:to_binary(NameFinal),
	NameLen = erlang:byte_size(Name2),

	<<NameLen:16, Name2/binary>>;
encode_m_friend_black_tos(_) -> 
	<<>>.

decode_m_friend_black_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<NameLen:16, Bin1/binary>> = Bin0,
	<<Name:NameLen/binary>> = Bin1,

	{m_friend_black_tos, common_tool:to_list(Name)};

decode_m_friend_black_tos(_) ->
	undefined.
encode_m_friend_black_toc(Record) when is_record(Record, m_friend_black_toc) ->
	#m_friend_black_toc{succ=Succ,name=Name,friend_info=Friend_info,reason=Reason,return_self=Return_self} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Name =:= undefined of
		true ->
				NameFinal = <<>>;
		false ->
			NameFinal = Name
	end,
	case Friend_info =:= undefined of
		true ->
				Friend_infoFinal = 0;
		false ->
			Friend_infoFinal = Friend_info
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = undefined,
				exit({required_field_not_assigned, m_friend_black_toc, return_self});
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	Name2 = common_tool:to_binary(NameFinal),
	NameLen = erlang:byte_size(Name2),
	Friend_info_bin = encode_p_friend_info(Friend_infoFinal),
	BinLen_friend_info = erlang:byte_size(Friend_info_bin),
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,NameLen:16, Name2/binary,BinLen_friend_info:32, Friend_info_bin/binary,ReasonLen:16, Reason2/binary,Return_selfFinal:8>>;
encode_m_friend_black_toc(_) -> 
	<<>>.

decode_m_friend_black_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,NameLen:16, Bin1/binary>> = Bin0,
	<<Name:NameLen/binary,SubBinSizefriend_info:32, Bin2/binary>> = Bin1,
	<<SubBinfriend_info:SubBinSizefriend_info/binary, Bin3/binary>> = Bin2,
	Friend_info = decode_p_friend_info(SubBinfriend_info),
	<<ReasonLen:16, Bin4/binary>> = Bin3,
	<<Reason:ReasonLen/binary,Return_selfTmp:8>> = Bin4,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_friend_black_toc, Succ,common_tool:to_list(Name),Friend_info,common_tool:to_list(Reason),Return_self};

decode_m_friend_black_toc(_) ->
	undefined.
encode_m_friend_enemy_toc(Record) when is_record(Record, m_friend_enemy_toc) ->
	#m_friend_enemy_toc{enemy_info=Enemy_info} = Record,
	case Enemy_info =:= undefined of
		true ->
				Enemy_infoFinal = undefined,
				exit({required_field_not_assigned, m_friend_enemy_toc, enemy_info});
		false ->
			Enemy_infoFinal = Enemy_info
	end,
	Enemy_info_bin = encode_p_friend_info(Enemy_infoFinal),
	BinLen_enemy_info = erlang:byte_size(Enemy_info_bin),

	<<BinLen_enemy_info:32, Enemy_info_bin/binary>>;
encode_m_friend_enemy_toc(_) -> 
	<<>>.

decode_m_friend_enemy_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_SubBinSizeenemy_info:32, SubBinenemy_info/binary>> = Bin0,
	Enemy_info = decode_p_friend_info(SubBinenemy_info),

	{m_friend_enemy_toc, Enemy_info};

decode_m_friend_enemy_toc(_) ->
	undefined.
encode_m_friend_list_tos(Record) when is_record(Record, m_friend_list_tos) ->
	#m_friend_list_tos{} = Record,

	<<>>;
encode_m_friend_list_tos(_) -> 
	<<>>.

decode_m_friend_list_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_friend_list_tos};

decode_m_friend_list_tos(_) ->
	undefined.
encode_m_friend_list_toc(Record) when is_record(Record, m_friend_list_toc) ->
	#m_friend_list_toc{succ=Succ,friend_list=Friend_list,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Friend_list =:= undefined of
		true ->
			Friend_listFinal = [];
		false ->
			Friend_listFinal = Friend_list
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Friend_list_bin = encode_p_friend_infos(Friend_listFinal, <<>>),
	SizeFriend_listFinal = erlang:length(Friend_listFinal),
	BinLen_friend_list = erlang:byte_size(Friend_list_bin),
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,SizeFriend_listFinal:16, BinLen_friend_list:32, Friend_list_bin/binary,ReasonLen:16, Reason2/binary>>;
encode_m_friend_list_toc(_) -> 
	<<>>.

decode_m_friend_list_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,_Sizefriend_list:16, BinLenfriend_list:32, Bin1/binary>> = Bin0,
	<<SubBinfriend_list:BinLenfriend_list/binary, Bin2/binary>> = Bin1, 
	Friend_list = lists:reverse(decode_p_friend_infos(SubBinfriend_list, [])),
	<<ReasonLen:16, Bin3/binary>> = Bin2,
	<<Reason:ReasonLen/binary>> = Bin3,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_friend_list_toc, Succ,Friend_list,common_tool:to_list(Reason)};

decode_m_friend_list_toc(_) ->
	undefined.
encode_p_friend_info(Record) when is_record(Record, p_friend_info) ->
	#p_friend_info{roleid=Roleid,rolename=Rolename,type=Type,sex=Sex,faction_id=Faction_id,level=Level,friendly=Friendly,is_online=Is_online,sign=Sign,family_name=Family_name,relative=Relative,head=Head} = Record,
	case Roleid =:= undefined of
		true ->
				RoleidFinal = undefined,
				exit({required_field_not_assigned, p_friend_info, roleid});
		false ->
			RoleidFinal = Roleid
	end,
	case Rolename =:= undefined of
		true ->
				RolenameFinal = undefined,
				exit({required_field_not_assigned, p_friend_info, rolename});
		false ->
			RolenameFinal = Rolename
	end,
	case Type =:= undefined of
		true ->
				TypeFinal = undefined,
				exit({required_field_not_assigned, p_friend_info, type});
		false ->
			TypeFinal = Type
	end,
	case Sex =:= undefined of
		true ->
				SexFinal = undefined,
				exit({required_field_not_assigned, p_friend_info, sex});
		false ->
			SexFinal = Sex
	end,
	case Faction_id =:= undefined of
		true ->
				Faction_idFinal = undefined,
				exit({required_field_not_assigned, p_friend_info, faction_id});
		false ->
			Faction_idFinal = Faction_id
	end,
	case Level =:= undefined of
		true ->
				LevelFinal = undefined,
				exit({required_field_not_assigned, p_friend_info, level});
		false ->
			LevelFinal = Level
	end,
	case Friendly =:= undefined of
		true ->
				FriendlyFinal = undefined,
				exit({required_field_not_assigned, p_friend_info, friendly});
		false ->
			FriendlyFinal = Friendly
	end,
	case Is_online =:= undefined of
		true ->
				Is_onlineFinal = undefined,
				exit({required_field_not_assigned, p_friend_info, is_online});
		false ->
		case Is_online of
			true ->
				Is_onlineFinal = 1;
			false ->
				Is_onlineFinal = 0
		end
	end,
	case Sign =:= undefined of
		true ->
				SignFinal = <<>>;
		false ->
			SignFinal = Sign
	end,
	case Family_name =:= undefined of
		true ->
				Family_nameFinal = undefined,
				exit({required_field_not_assigned, p_friend_info, family_name});
		false ->
			Family_nameFinal = Family_name
	end,
	case Relative =:= undefined of
		true ->
			RelativeFinal = [];
		false ->
			RelativeFinal = Relative
	end,
	case Head =:= undefined of
		true ->
				HeadFinal = undefined,
				exit({required_field_not_assigned, p_friend_info, head});
		false ->
			HeadFinal = Head
	end,
	Rolename2 = common_tool:to_binary(RolenameFinal),
	RolenameLen = erlang:byte_size(Rolename2),
	Sign2 = common_tool:to_binary(SignFinal),
	SignLen = erlang:byte_size(Sign2),
	Family_name2 = common_tool:to_binary(Family_nameFinal),
	Family_nameLen = erlang:byte_size(Family_name2),
	Relative_bin = encode_int32s(RelativeFinal, <<>>),
	SizeRelativeFinal = erlang:length(RelativeFinal),
	BinLen_relative = erlang:byte_size(Relative_bin),

	<<RoleidFinal:32/signed,RolenameLen:16, Rolename2/binary,TypeFinal:32/signed,SexFinal:32/signed,Faction_idFinal:32/signed,LevelFinal:32/signed,FriendlyFinal:32/signed,Is_onlineFinal:8,SignLen:16, Sign2/binary,Family_nameLen:16, Family_name2/binary,SizeRelativeFinal:16, BinLen_relative:32, Relative_bin/binary,HeadFinal:32/signed>>;
encode_p_friend_info(_) -> 
	<<>>.

decode_p_friend_info(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Roleid:32/signed,RolenameLen:16, Bin1/binary>> = Bin0,
	<<Rolename:RolenameLen/binary,Type:32/signed,Sex:32/signed,Faction_id:32/signed,Level:32/signed,Friendly:32/signed,Is_onlineTmp:8,SignLen:16, Bin2/binary>> = Bin1,
	<<Sign:SignLen/binary,Family_nameLen:16, Bin3/binary>> = Bin2,
	<<Family_name:Family_nameLen/binary,_Sizerelative:16, BinLenrelative:32, Bin4/binary>> = Bin3,
	<<SubBinrelative:BinLenrelative/binary, Bin5/binary>> = Bin4, 
	Relative = lists:reverse(decode_int32s(SubBinrelative, [])),
	<<Head:32/signed>> = Bin5,
case Is_onlineTmp of 
	1 -> 
		Is_online = true;
	_ ->
		Is_online = false
end,

	{p_friend_info, Roleid,common_tool:to_list(Rolename),Type,Sex,Faction_id,Level,Friendly,Is_online,common_tool:to_list(Sign),common_tool:to_list(Family_name),Relative,Head};

decode_p_friend_info(_) ->
	undefined.
encode_p_simple_friend_info(Record) when is_record(Record, p_simple_friend_info) ->
	#p_simple_friend_info{rolename=Rolename,faction_id=Faction_id,is_online=Is_online,head=Head,level=Level} = Record,
	case Rolename =:= undefined of
		true ->
				RolenameFinal = undefined,
				exit({required_field_not_assigned, p_simple_friend_info, rolename});
		false ->
			RolenameFinal = Rolename
	end,
	case Faction_id =:= undefined of
		true ->
				Faction_idFinal = undefined,
				exit({required_field_not_assigned, p_simple_friend_info, faction_id});
		false ->
			Faction_idFinal = Faction_id
	end,
	case Is_online =:= undefined of
		true ->
				Is_onlineFinal = undefined,
				exit({required_field_not_assigned, p_simple_friend_info, is_online});
		false ->
		case Is_online of
			true ->
				Is_onlineFinal = 1;
			false ->
				Is_onlineFinal = 0
		end
	end,
	case Head =:= undefined of
		true ->
				HeadFinal = undefined,
				exit({required_field_not_assigned, p_simple_friend_info, head});
		false ->
			HeadFinal = Head
	end,
	case Level =:= undefined of
		true ->
				LevelFinal = undefined,
				exit({required_field_not_assigned, p_simple_friend_info, level});
		false ->
			LevelFinal = Level
	end,
	Rolename2 = common_tool:to_binary(RolenameFinal),
	RolenameLen = erlang:byte_size(Rolename2),

	<<RolenameLen:16, Rolename2/binary,Faction_idFinal:32/signed,Is_onlineFinal:8,HeadFinal:32/signed,LevelFinal:32/signed>>;
encode_p_simple_friend_info(_) -> 
	<<>>.

decode_p_simple_friend_info(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<RolenameLen:16, Bin1/binary>> = Bin0,
	<<Rolename:RolenameLen/binary,Faction_id:32/signed,Is_onlineTmp:8,Head:32/signed,Level:32/signed>> = Bin1,
case Is_onlineTmp of 
	1 -> 
		Is_online = true;
	_ ->
		Is_online = false
end,

	{p_simple_friend_info, common_tool:to_list(Rolename),Faction_id,Is_online,Head,Level};

decode_p_simple_friend_info(_) ->
	undefined.
encode_m_friend_offline_request_toc(Record) when is_record(Record, m_friend_offline_request_toc) ->
	#m_friend_offline_request_toc{request_list=Request_list} = Record,
	case Request_list =:= undefined of
		true ->
			Request_listFinal = [];
		false ->
			Request_listFinal = Request_list
	end,
	Request_list_bin = encode_p_simple_friend_infos(Request_listFinal, <<>>),
	SizeRequest_listFinal = erlang:length(Request_listFinal),
	BinLen_request_list = erlang:byte_size(Request_list_bin),

	<<SizeRequest_listFinal:16, BinLen_request_list:32, Request_list_bin/binary>>;
encode_m_friend_offline_request_toc(_) -> 
	<<>>.

decode_m_friend_offline_request_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizerequest_list:16, _BinLenrequest_list:32, SubBinrequest_list/binary>> = Bin0,
	Request_list = lists:reverse(decode_p_simple_friend_infos(SubBinrequest_list, [])),

	{m_friend_offline_request_toc, Request_list};

decode_m_friend_offline_request_toc(_) ->
	undefined.
encode_m_friend_change_relative_toc(Record) when is_record(Record, m_friend_change_relative_toc) ->
	#m_friend_change_relative_toc{role_id=Role_id,relative=Relative} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, m_friend_change_relative_toc, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Relative =:= undefined of
		true ->
			RelativeFinal = [];
		false ->
			RelativeFinal = Relative
	end,
	Relative_bin = encode_int32s(RelativeFinal, <<>>),
	SizeRelativeFinal = erlang:length(RelativeFinal),
	BinLen_relative = erlang:byte_size(Relative_bin),

	<<Role_idFinal:32/signed,SizeRelativeFinal:16, BinLen_relative:32, Relative_bin/binary>>;
encode_m_friend_change_relative_toc(_) -> 
	<<>>.

decode_m_friend_change_relative_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,_Sizerelative:16, _BinLenrelative:32, SubBinrelative/binary>> = Bin0,
	Relative = lists:reverse(decode_int32s(SubBinrelative, [])),

	{m_friend_change_relative_toc, Role_id,Relative};

decode_m_friend_change_relative_toc(_) ->
	undefined.
encode_m_friend_add_friendly_toc(Record) when is_record(Record, m_friend_add_friendly_toc) ->
	#m_friend_add_friendly_toc{role_id=Role_id,friendly=Friendly} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, m_friend_add_friendly_toc, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Friendly =:= undefined of
		true ->
				FriendlyFinal = undefined,
				exit({required_field_not_assigned, m_friend_add_friendly_toc, friendly});
		false ->
			FriendlyFinal = Friendly
	end,

	<<Role_idFinal:32/signed,FriendlyFinal:32/signed>>;
encode_m_friend_add_friendly_toc(_) -> 
	<<>>.

decode_m_friend_add_friendly_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,Friendly:32/signed>> = Bin0,

	{m_friend_add_friendly_toc, Role_id,Friendly};

decode_m_friend_add_friendly_toc(_) ->
	undefined.
encode_m_friend_online_toc(Record) when is_record(Record, m_friend_online_toc) ->
	#m_friend_online_toc{roleid=Roleid} = Record,
	case Roleid =:= undefined of
		true ->
				RoleidFinal = undefined,
				exit({required_field_not_assigned, m_friend_online_toc, roleid});
		false ->
			RoleidFinal = Roleid
	end,

	<<RoleidFinal:32/signed>>;
encode_m_friend_online_toc(_) -> 
	<<>>.

decode_m_friend_online_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Roleid:32/signed>> = Bin0,

	{m_friend_online_toc, Roleid};

decode_m_friend_online_toc(_) ->
	undefined.
encode_m_friend_offline_toc(Record) when is_record(Record, m_friend_offline_toc) ->
	#m_friend_offline_toc{roleid=Roleid} = Record,
	case Roleid =:= undefined of
		true ->
				RoleidFinal = undefined,
				exit({required_field_not_assigned, m_friend_offline_toc, roleid});
		false ->
			RoleidFinal = Roleid
	end,

	<<RoleidFinal:32/signed>>;
encode_m_friend_offline_toc(_) -> 
	<<>>.

decode_m_friend_offline_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Roleid:32/signed>> = Bin0,

	{m_friend_offline_toc, Roleid};

decode_m_friend_offline_toc(_) ->
	undefined.
encode_m_friend_upgrade_toc(Record) when is_record(Record, m_friend_upgrade_toc) ->
	#m_friend_upgrade_toc{roleid=Roleid,oldlevel=Oldlevel,newlevel=Newlevel} = Record,
	case Roleid =:= undefined of
		true ->
				RoleidFinal = undefined,
				exit({required_field_not_assigned, m_friend_upgrade_toc, roleid});
		false ->
			RoleidFinal = Roleid
	end,
	case Oldlevel =:= undefined of
		true ->
				OldlevelFinal = undefined,
				exit({required_field_not_assigned, m_friend_upgrade_toc, oldlevel});
		false ->
			OldlevelFinal = Oldlevel
	end,
	case Newlevel =:= undefined of
		true ->
				NewlevelFinal = undefined,
				exit({required_field_not_assigned, m_friend_upgrade_toc, newlevel});
		false ->
			NewlevelFinal = Newlevel
	end,

	<<RoleidFinal:32/signed,OldlevelFinal:32/signed,NewlevelFinal:32/signed>>;
encode_m_friend_upgrade_toc(_) -> 
	<<>>.

decode_m_friend_upgrade_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Roleid:32/signed,Oldlevel:32/signed,Newlevel:32/signed>> = Bin0,

	{m_friend_upgrade_toc, Roleid,Oldlevel,Newlevel};

decode_m_friend_upgrade_toc(_) ->
	undefined.
encode_m_friend_info_tos(Record) when is_record(Record, m_friend_info_tos) ->
	#m_friend_info_tos{roleid=Roleid} = Record,
	case Roleid =:= undefined of
		true ->
				RoleidFinal = undefined,
				exit({required_field_not_assigned, m_friend_info_tos, roleid});
		false ->
			RoleidFinal = Roleid
	end,

	<<RoleidFinal:32/signed>>;
encode_m_friend_info_tos(_) -> 
	<<>>.

decode_m_friend_info_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Roleid:32/signed>> = Bin0,

	{m_friend_info_tos, Roleid};

decode_m_friend_info_tos(_) ->
	undefined.
encode_m_friend_info_toc(Record) when is_record(Record, m_friend_info_toc) ->
	#m_friend_info_toc{succ=Succ,friend_info=Friend_info,reason=Reason,equips=Equips} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Friend_info =:= undefined of
		true ->
				Friend_infoFinal = 0;
		false ->
			Friend_infoFinal = Friend_info
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Equips =:= undefined of
		true ->
			EquipsFinal = [];
		false ->
			EquipsFinal = Equips
	end,
	Friend_info_bin = encode_p_role_ext(Friend_infoFinal),
	BinLen_friend_info = erlang:byte_size(Friend_info_bin),
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Equips_bin = encode_p_goodss(EquipsFinal, <<>>),
	SizeEquipsFinal = erlang:length(EquipsFinal),
	BinLen_equips = erlang:byte_size(Equips_bin),

	<<SuccFinal:8,BinLen_friend_info:32, Friend_info_bin/binary,ReasonLen:16, Reason2/binary,SizeEquipsFinal:16, BinLen_equips:32, Equips_bin/binary>>;
encode_m_friend_info_toc(_) -> 
	<<>>.

decode_m_friend_info_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,SubBinSizefriend_info:32, Bin1/binary>> = Bin0,
	<<SubBinfriend_info:SubBinSizefriend_info/binary, Bin2/binary>> = Bin1,
	Friend_info = decode_p_role_ext(SubBinfriend_info),
	<<ReasonLen:16, Bin3/binary>> = Bin2,
	<<Reason:ReasonLen/binary,_Sizeequips:16, _BinLenequips:32, SubBinequips/binary>> = Bin3,
	Equips = lists:reverse(decode_p_goodss(SubBinequips, [])),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_friend_info_toc, Succ,Friend_info,common_tool:to_list(Reason),Equips};

decode_m_friend_info_toc(_) ->
	undefined.
encode_m_friend_modify_tos(Record) when is_record(Record, m_friend_modify_tos) ->
	#m_friend_modify_tos{info=Info} = Record,
	case Info =:= undefined of
		true ->
				InfoFinal = 0;
		false ->
			InfoFinal = Info
	end,
	Info_bin = encode_p_role_ext(InfoFinal),
	BinLen_info = erlang:byte_size(Info_bin),

	<<BinLen_info:32, Info_bin/binary>>;
encode_m_friend_modify_tos(_) -> 
	<<>>.

decode_m_friend_modify_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_SubBinSizeinfo:32, SubBininfo/binary>> = Bin0,
	Info = decode_p_role_ext(SubBininfo),

	{m_friend_modify_tos, Info};

decode_m_friend_modify_tos(_) ->
	undefined.
encode_m_friend_modify_toc(Record) when is_record(Record, m_friend_modify_toc) ->
	#m_friend_modify_toc{succ=Succ,reason=Reason,return_self=Return_self,info=Info} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Info =:= undefined of
		true ->
				InfoFinal = 0;
		false ->
			InfoFinal = Info
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Info_bin = encode_p_role_ext(InfoFinal),
	BinLen_info = erlang:byte_size(Info_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Return_selfFinal:8,BinLen_info:32, Info_bin/binary>>;
encode_m_friend_modify_toc(_) -> 
	<<>>.

decode_m_friend_modify_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Return_selfTmp:8,_SubBinSizeinfo:32, SubBininfo/binary>> = Bin1,
	Info = decode_p_role_ext(SubBininfo),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_friend_modify_toc, Succ,common_tool:to_list(Reason),Return_self,Info};

decode_m_friend_modify_toc(_) ->
	undefined.
encode_m_friend_create_family_toc(Record) when is_record(Record, m_friend_create_family_toc) ->
	#m_friend_create_family_toc{role_id=Role_id,family_id=Family_id,family_name=Family_name} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, m_friend_create_family_toc, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Family_id =:= undefined of
		true ->
				Family_idFinal = undefined,
				exit({required_field_not_assigned, m_friend_create_family_toc, family_id});
		false ->
			Family_idFinal = Family_id
	end,
	case Family_name =:= undefined of
		true ->
				Family_nameFinal = undefined,
				exit({required_field_not_assigned, m_friend_create_family_toc, family_name});
		false ->
			Family_nameFinal = Family_name
	end,
	Family_name2 = common_tool:to_binary(Family_nameFinal),
	Family_nameLen = erlang:byte_size(Family_name2),

	<<Role_idFinal:32/signed,Family_idFinal:32/signed,Family_nameLen:16, Family_name2/binary>>;
encode_m_friend_create_family_toc(_) -> 
	<<>>.

decode_m_friend_create_family_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,Family_id:32/signed,Family_nameLen:16, Bin1/binary>> = Bin0,
	<<Family_name:Family_nameLen/binary>> = Bin1,

	{m_friend_create_family_toc, Role_id,Family_id,common_tool:to_list(Family_name)};

decode_m_friend_create_family_toc(_) ->
	undefined.
encode_m_friend_get_info_tos(Record) when is_record(Record, m_friend_get_info_tos) ->
	#m_friend_get_info_tos{roleid=Roleid} = Record,
	case Roleid =:= undefined of
		true ->
				RoleidFinal = undefined,
				exit({required_field_not_assigned, m_friend_get_info_tos, roleid});
		false ->
			RoleidFinal = Roleid
	end,

	<<RoleidFinal:32/signed>>;
encode_m_friend_get_info_tos(_) -> 
	<<>>.

decode_m_friend_get_info_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Roleid:32/signed>> = Bin0,

	{m_friend_get_info_tos, Roleid};

decode_m_friend_get_info_tos(_) ->
	undefined.
encode_m_friend_get_info_toc(Record) when is_record(Record, m_friend_get_info_toc) ->
	#m_friend_get_info_toc{roleinfo=Roleinfo} = Record,
	case Roleinfo =:= undefined of
		true ->
				RoleinfoFinal = 0;
		false ->
			RoleinfoFinal = Roleinfo
	end,
	Roleinfo_bin = encode_p_friend_info(RoleinfoFinal),
	BinLen_roleinfo = erlang:byte_size(Roleinfo_bin),

	<<BinLen_roleinfo:32, Roleinfo_bin/binary>>;
encode_m_friend_get_info_toc(_) -> 
	<<>>.

decode_m_friend_get_info_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_SubBinSizeroleinfo:32, SubBinroleinfo/binary>> = Bin0,
	Roleinfo = decode_p_friend_info(SubBinroleinfo),

	{m_friend_get_info_toc, Roleinfo};

decode_m_friend_get_info_toc(_) ->
	undefined.
encode_m_friend_update_family_toc(Record) when is_record(Record, m_friend_update_family_toc) ->
	#m_friend_update_family_toc{role_id=Role_id,family_id=Family_id,family_name=Family_name,level=Level} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, m_friend_update_family_toc, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Family_id =:= undefined of
		true ->
				Family_idFinal = undefined,
				exit({required_field_not_assigned, m_friend_update_family_toc, family_id});
		false ->
			Family_idFinal = Family_id
	end,
	case Family_name =:= undefined of
		true ->
				Family_nameFinal = undefined,
				exit({required_field_not_assigned, m_friend_update_family_toc, family_name});
		false ->
			Family_nameFinal = Family_name
	end,
	case Level =:= undefined of
		true ->
				LevelFinal = undefined,
				exit({required_field_not_assigned, m_friend_update_family_toc, level});
		false ->
			LevelFinal = Level
	end,
	Family_name2 = common_tool:to_binary(Family_nameFinal),
	Family_nameLen = erlang:byte_size(Family_name2),

	<<Role_idFinal:32/signed,Family_idFinal:32/signed,Family_nameLen:16, Family_name2/binary,LevelFinal:32/signed>>;
encode_m_friend_update_family_toc(_) -> 
	<<>>.

decode_m_friend_update_family_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,Family_id:32/signed,Family_nameLen:16, Bin1/binary>> = Bin0,
	<<Family_name:Family_nameLen/binary,Level:32/signed>> = Bin1,

	{m_friend_update_family_toc, Role_id,Family_id,common_tool:to_list(Family_name),Level};

decode_m_friend_update_family_toc(_) ->
	undefined.
encode_m_friend_recommend_tos(Record) when is_record(Record, m_friend_recommend_tos) ->
	#m_friend_recommend_tos{} = Record,

	<<>>;
encode_m_friend_recommend_tos(_) -> 
	<<>>.

decode_m_friend_recommend_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_friend_recommend_tos};

decode_m_friend_recommend_tos(_) ->
	undefined.
encode_m_friend_recommend_toc(Record) when is_record(Record, m_friend_recommend_toc) ->
	#m_friend_recommend_toc{succ=Succ,friend_info=Friend_info,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Friend_info =:= undefined of
		true ->
			Friend_infoFinal = [];
		false ->
			Friend_infoFinal = Friend_info
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Friend_info_bin = encode_p_recommend_member_infos(Friend_infoFinal, <<>>),
	SizeFriend_infoFinal = erlang:length(Friend_infoFinal),
	BinLen_friend_info = erlang:byte_size(Friend_info_bin),
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,SizeFriend_infoFinal:16, BinLen_friend_info:32, Friend_info_bin/binary,ReasonLen:16, Reason2/binary>>;
encode_m_friend_recommend_toc(_) -> 
	<<>>.

decode_m_friend_recommend_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,_Sizefriend_info:16, BinLenfriend_info:32, Bin1/binary>> = Bin0,
	<<SubBinfriend_info:BinLenfriend_info/binary, Bin2/binary>> = Bin1, 
	Friend_info = lists:reverse(decode_p_recommend_member_infos(SubBinfriend_info, [])),
	<<ReasonLen:16, Bin3/binary>> = Bin2,
	<<Reason:ReasonLen/binary>> = Bin3,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_friend_recommend_toc, Succ,Friend_info,common_tool:to_list(Reason)};

decode_m_friend_recommend_toc(_) ->
	undefined.
encode_m_friend_congratulation_tos(Record) when is_record(Record, m_friend_congratulation_tos) ->
	#m_friend_congratulation_tos{to_friend_id=To_friend_id,congratulation=Congratulation} = Record,
	case To_friend_id =:= undefined of
		true ->
				To_friend_idFinal = undefined,
				exit({required_field_not_assigned, m_friend_congratulation_tos, to_friend_id});
		false ->
			To_friend_idFinal = To_friend_id
	end,
	case Congratulation =:= undefined of
		true ->
				CongratulationFinal = <<>>;
		false ->
			CongratulationFinal = Congratulation
	end,
	Congratulation2 = common_tool:to_binary(CongratulationFinal),
	CongratulationLen = erlang:byte_size(Congratulation2),

	<<To_friend_idFinal:32/signed,CongratulationLen:16, Congratulation2/binary>>;
encode_m_friend_congratulation_tos(_) -> 
	<<>>.

decode_m_friend_congratulation_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<To_friend_id:32/signed,CongratulationLen:16, Bin1/binary>> = Bin0,
	<<Congratulation:CongratulationLen/binary>> = Bin1,

	{m_friend_congratulation_tos, To_friend_id,common_tool:to_list(Congratulation)};

decode_m_friend_congratulation_tos(_) ->
	undefined.
encode_m_friend_congratulation_toc(Record) when is_record(Record, m_friend_congratulation_toc) ->
	#m_friend_congratulation_toc{succ=Succ,return_self=Return_self,reason=Reason,exp_add=Exp_add,hyd_add=Hyd_add,from_friend=From_friend,congratulation=Congratulation,bottle_exp=Bottle_exp} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Exp_add =:= undefined of
		true ->
				Exp_addFinal = 0;
		false ->
			Exp_addFinal = Exp_add
	end,
	case Hyd_add =:= undefined of
		true ->
				Hyd_addFinal = 0;
		false ->
			Hyd_addFinal = Hyd_add
	end,
	case From_friend =:= undefined of
		true ->
				From_friendFinal = <<>>;
		false ->
			From_friendFinal = From_friend
	end,
	case Congratulation =:= undefined of
		true ->
				CongratulationFinal = <<>>;
		false ->
			CongratulationFinal = Congratulation
	end,
	case Bottle_exp =:= undefined of
		true ->
				Bottle_expFinal = 0;
		false ->
			Bottle_expFinal = Bottle_exp
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	From_friend2 = common_tool:to_binary(From_friendFinal),
	From_friendLen = erlang:byte_size(From_friend2),
	Congratulation2 = common_tool:to_binary(CongratulationFinal),
	CongratulationLen = erlang:byte_size(Congratulation2),

	<<SuccFinal:8,Return_selfFinal:8,ReasonLen:16, Reason2/binary,Exp_addFinal:32/signed,Hyd_addFinal:32/signed,From_friendLen:16, From_friend2/binary,CongratulationLen:16, Congratulation2/binary,Bottle_expFinal:64/float>>;
encode_m_friend_congratulation_toc(_) -> 
	<<>>.

decode_m_friend_congratulation_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,Return_selfTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Exp_add:32/signed,Hyd_add:32/signed,From_friendLen:16, Bin2/binary>> = Bin1,
	<<From_friend:From_friendLen/binary,CongratulationLen:16, Bin3/binary>> = Bin2,
	<<Congratulation:CongratulationLen/binary,Bottle_exp:64>> = Bin3,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_friend_congratulation_toc, Succ,Return_self,common_tool:to_list(Reason),Exp_add,Hyd_add,common_tool:to_list(From_friend),common_tool:to_list(Congratulation),Bottle_exp};

decode_m_friend_congratulation_toc(_) ->
	undefined.
encode_m_friend_advertise_tos(Record) when is_record(Record, m_friend_advertise_tos) ->
	#m_friend_advertise_tos{} = Record,

	<<>>;
encode_m_friend_advertise_tos(_) -> 
	<<>>.

decode_m_friend_advertise_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_friend_advertise_tos};

decode_m_friend_advertise_tos(_) ->
	undefined.
encode_m_friend_advertise_toc(Record) when is_record(Record, m_friend_advertise_toc) ->
	#m_friend_advertise_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_friend_advertise_toc(_) -> 
	<<>>.

decode_m_friend_advertise_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_friend_advertise_toc, Succ,common_tool:to_list(Reason)};

decode_m_friend_advertise_toc(_) ->
	undefined.
encode_m_friend_bottle_tos(Record) when is_record(Record, m_friend_bottle_tos) ->
	#m_friend_bottle_tos{op_type=Op_type} = Record,
	case Op_type =:= undefined of
		true ->
				Op_typeFinal = undefined,
				exit({required_field_not_assigned, m_friend_bottle_tos, op_type});
		false ->
			Op_typeFinal = Op_type
	end,

	<<Op_typeFinal:32/signed>>;
encode_m_friend_bottle_tos(_) -> 
	<<>>.

decode_m_friend_bottle_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Op_type:32/signed>> = Bin0,

	{m_friend_bottle_tos, Op_type};

decode_m_friend_bottle_tos(_) ->
	undefined.
encode_m_friend_bottle_toc(Record) when is_record(Record, m_friend_bottle_toc) ->
	#m_friend_bottle_toc{op_type=Op_type,succ=Succ,reason=Reason,reason_code=Reason_code,bottle_exp=Bottle_exp,award_exp=Award_exp} = Record,
	case Op_type =:= undefined of
		true ->
				Op_typeFinal = undefined,
				exit({required_field_not_assigned, m_friend_bottle_toc, op_type});
		false ->
			Op_typeFinal = Op_type
	end,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Reason_code =:= undefined of
		true ->
				Reason_codeFinal = 0;
		false ->
			Reason_codeFinal = Reason_code
	end,
	case Bottle_exp =:= undefined of
		true ->
				Bottle_expFinal = 0;
		false ->
			Bottle_expFinal = Bottle_exp
	end,
	case Award_exp =:= undefined of
		true ->
				Award_expFinal = 0;
		false ->
			Award_expFinal = Award_exp
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<Op_typeFinal:32/signed,SuccFinal:8,ReasonLen:16, Reason2/binary,Reason_codeFinal:32/signed,Bottle_expFinal:64/float,Award_expFinal:64/float>>;
encode_m_friend_bottle_toc(_) -> 
	<<>>.

decode_m_friend_bottle_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Op_type:32/signed,SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Reason_code:32/signed,Bottle_exp:64,Award_exp:64>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_friend_bottle_toc, Op_type,Succ,common_tool:to_list(Reason),Reason_code,Bottle_exp,Award_exp};

decode_m_friend_bottle_toc(_) ->
	undefined.
encode_m_shop_shops_tos(Record) when is_record(Record, m_shop_shops_tos) ->
	#m_shop_shops_tos{} = Record,

	<<>>;
encode_m_shop_shops_tos(_) -> 
	<<>>.

decode_m_shop_shops_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_shop_shops_tos};

decode_m_shop_shops_tos(_) ->
	undefined.
encode_p_shop_info(Record) when is_record(Record, p_shop_info) ->
	#p_shop_info{id=Id,name=Name,branch_shop=Branch_shop} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, p_shop_info, id});
		false ->
			IdFinal = Id
	end,
	case Name =:= undefined of
		true ->
				NameFinal = undefined,
				exit({required_field_not_assigned, p_shop_info, name});
		false ->
			NameFinal = Name
	end,
	case Branch_shop =:= undefined of
		true ->
			Branch_shopFinal = [];
		false ->
			Branch_shopFinal = Branch_shop
	end,
	Name2 = common_tool:to_binary(NameFinal),
	NameLen = erlang:byte_size(Name2),
	Branch_shop_bin = encode_p_shop_infos(Branch_shopFinal, <<>>),
	SizeBranch_shopFinal = erlang:length(Branch_shopFinal),
	BinLen_branch_shop = erlang:byte_size(Branch_shop_bin),

	<<IdFinal:32/signed,NameLen:16, Name2/binary,SizeBranch_shopFinal:16, BinLen_branch_shop:32, Branch_shop_bin/binary>>;
encode_p_shop_info(_) -> 
	<<>>.

decode_p_shop_info(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed,NameLen:16, Bin1/binary>> = Bin0,
	<<Name:NameLen/binary,_Sizebranch_shop:16, _BinLenbranch_shop:32, SubBinbranch_shop/binary>> = Bin1,
	Branch_shop = lists:reverse(decode_p_shop_infos(SubBinbranch_shop, [])),

	{p_shop_info, Id,common_tool:to_list(Name),Branch_shop};

decode_p_shop_info(_) ->
	undefined.
encode_m_shop_shops_toc(Record) when is_record(Record, m_shop_shops_toc) ->
	#m_shop_shops_toc{shops=Shops} = Record,
	case Shops =:= undefined of
		true ->
			ShopsFinal = [];
		false ->
			ShopsFinal = Shops
	end,
	Shops_bin = encode_p_shop_infos(ShopsFinal, <<>>),
	SizeShopsFinal = erlang:length(ShopsFinal),
	BinLen_shops = erlang:byte_size(Shops_bin),

	<<SizeShopsFinal:16, BinLen_shops:32, Shops_bin/binary>>;
encode_m_shop_shops_toc(_) -> 
	<<>>.

decode_m_shop_shops_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizeshops:16, _BinLenshops:32, SubBinshops/binary>> = Bin0,
	Shops = lists:reverse(decode_p_shop_infos(SubBinshops, [])),

	{m_shop_shops_toc, Shops};

decode_m_shop_shops_toc(_) ->
	undefined.
encode_m_shop_all_goods_tos(Record) when is_record(Record, m_shop_all_goods_tos) ->
	#m_shop_all_goods_tos{shop_id=Shop_id,npc_id=Npc_id} = Record,
	case Shop_id =:= undefined of
		true ->
				Shop_idFinal = undefined,
				exit({required_field_not_assigned, m_shop_all_goods_tos, shop_id});
		false ->
			Shop_idFinal = Shop_id
	end,
	case Npc_id =:= undefined of
		true ->
				Npc_idFinal = 0;
		false ->
			Npc_idFinal = Npc_id
	end,

	<<Shop_idFinal:32/signed,Npc_idFinal:32/signed>>;
encode_m_shop_all_goods_tos(_) -> 
	<<>>.

decode_m_shop_all_goods_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Shop_id:32/signed,Npc_id:32/signed>> = Bin0,

	{m_shop_all_goods_tos, Shop_id,Npc_id};

decode_m_shop_all_goods_tos(_) ->
	undefined.
encode_p_shop_currency(Record) when is_record(Record, p_shop_currency) ->
	#p_shop_currency{id=Id,amount=Amount} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, p_shop_currency, id});
		false ->
			IdFinal = Id
	end,
	case Amount =:= undefined of
		true ->
				AmountFinal = undefined,
				exit({required_field_not_assigned, p_shop_currency, amount});
		false ->
			AmountFinal = Amount
	end,

	<<IdFinal:32/signed,AmountFinal:32/signed>>;
encode_p_shop_currency(_) -> 
	<<>>.

decode_p_shop_currency(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed,Amount:32/signed>> = Bin0,

	{p_shop_currency, Id,Amount};

decode_p_shop_currency(_) ->
	undefined.
encode_p_shop_price(Record) when is_record(Record, p_shop_price) ->
	#p_shop_price{id=Id,currency=Currency} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, p_shop_price, id});
		false ->
			IdFinal = Id
	end,
	case Currency =:= undefined of
		true ->
			CurrencyFinal = [];
		false ->
			CurrencyFinal = Currency
	end,
	Currency_bin = encode_p_shop_currencys(CurrencyFinal, <<>>),
	SizeCurrencyFinal = erlang:length(CurrencyFinal),
	BinLen_currency = erlang:byte_size(Currency_bin),

	<<IdFinal:32/signed,SizeCurrencyFinal:16, BinLen_currency:32, Currency_bin/binary>>;
encode_p_shop_price(_) -> 
	<<>>.

decode_p_shop_price(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed,_Sizecurrency:16, _BinLencurrency:32, SubBincurrency/binary>> = Bin0,
	Currency = lists:reverse(decode_p_shop_currencys(SubBincurrency, [])),

	{p_shop_price, Id,Currency};

decode_p_shop_price(_) ->
	undefined.
encode_p_shop_goods_info(Record) when is_record(Record, p_shop_goods_info) ->
	#p_shop_goods_info{goods_id=Goods_id,seat_id=Seat_id,packe_num=Packe_num,time=Time,role_grade=Role_grade,goods_bind=Goods_bind,goods_modify=Goods_modify,price=Price,type=Type,property=Property,colour=Colour,discount_type=Discount_type,shop_id=Shop_id,price_bind=Price_bind} = Record,
	case Goods_id =:= undefined of
		true ->
				Goods_idFinal = undefined,
				exit({required_field_not_assigned, p_shop_goods_info, goods_id});
		false ->
			Goods_idFinal = Goods_id
	end,
	case Seat_id =:= undefined of
		true ->
				Seat_idFinal = undefined,
				exit({required_field_not_assigned, p_shop_goods_info, seat_id});
		false ->
			Seat_idFinal = Seat_id
	end,
	case Packe_num =:= undefined of
		true ->
				Packe_numFinal = 1;
		false ->
			Packe_numFinal = Packe_num
	end,
	case Time =:= undefined of
		true ->
			TimeFinal = [];
		false ->
			TimeFinal = Time
	end,
	case Role_grade =:= undefined of
		true ->
			Role_gradeFinal = [];
		false ->
			Role_gradeFinal = Role_grade
	end,
	case Goods_bind =:= undefined of
		true ->
				Goods_bindFinal = 0;
		false ->
		case Goods_bind of
			true ->
				Goods_bindFinal = 1;
			false ->
				Goods_bindFinal = 0
		end
	end,
	case Goods_modify =:= undefined of
		true ->
				Goods_modifyFinal = undefined,
				exit({required_field_not_assigned, p_shop_goods_info, goods_modify});
		false ->
			Goods_modifyFinal = Goods_modify
	end,
	case Price =:= undefined of
		true ->
			PriceFinal = [];
		false ->
			PriceFinal = Price
	end,
	case Type =:= undefined of
		true ->
				TypeFinal = undefined,
				exit({required_field_not_assigned, p_shop_goods_info, type});
		false ->
			TypeFinal = Type
	end,
	case Property =:= undefined of
		true ->
				PropertyFinal = 0;
		false ->
			PropertyFinal = Property
	end,
	case Colour =:= undefined of
		true ->
				ColourFinal = undefined,
				exit({required_field_not_assigned, p_shop_goods_info, colour});
		false ->
			ColourFinal = Colour
	end,
	case Discount_type =:= undefined of
		true ->
				Discount_typeFinal = 0;
		false ->
			Discount_typeFinal = Discount_type
	end,
	case Shop_id =:= undefined of
		true ->
				Shop_idFinal = undefined,
				exit({required_field_not_assigned, p_shop_goods_info, shop_id});
		false ->
			Shop_idFinal = Shop_id
	end,
	case Price_bind =:= undefined of
		true ->
				Price_bindFinal = undefined,
				exit({required_field_not_assigned, p_shop_goods_info, price_bind});
		false ->
			Price_bindFinal = Price_bind
	end,
	Time_bin = encode_int32s(TimeFinal, <<>>),
	SizeTimeFinal = erlang:length(TimeFinal),
	BinLen_time = erlang:byte_size(Time_bin),
	Role_grade_bin = encode_int32s(Role_gradeFinal, <<>>),
	SizeRole_gradeFinal = erlang:length(Role_gradeFinal),
	BinLen_role_grade = erlang:byte_size(Role_grade_bin),
	Goods_modify2 = common_tool:to_binary(Goods_modifyFinal),
	Goods_modifyLen = erlang:byte_size(Goods_modify2),
	Price_bin = encode_p_shop_prices(PriceFinal, <<>>),
	SizePriceFinal = erlang:length(PriceFinal),
	BinLen_price = erlang:byte_size(Price_bin),
	Property_bin = encode_p_property_add(PropertyFinal),
	BinLen_property = erlang:byte_size(Property_bin),

	<<Goods_idFinal:32/signed,Seat_idFinal:32/signed,Packe_numFinal:32/signed,SizeTimeFinal:16, BinLen_time:32, Time_bin/binary,SizeRole_gradeFinal:16, BinLen_role_grade:32, Role_grade_bin/binary,Goods_bindFinal:8,Goods_modifyLen:16, Goods_modify2/binary,SizePriceFinal:16, BinLen_price:32, Price_bin/binary,TypeFinal:32/signed,BinLen_property:32, Property_bin/binary,ColourFinal:32/signed,Discount_typeFinal:32/signed,Shop_idFinal:32/signed,Price_bindFinal:32/signed>>;
encode_p_shop_goods_info(_) -> 
	<<>>.

decode_p_shop_goods_info(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Goods_id:32/signed,Seat_id:32/signed,Packe_num:32/signed,_Sizetime:16, BinLentime:32, Bin1/binary>> = Bin0,
	<<SubBintime:BinLentime/binary, Bin2/binary>> = Bin1, 
	Time = lists:reverse(decode_int32s(SubBintime, [])),
	<<_Sizerole_grade:16, BinLenrole_grade:32, Bin3/binary>> = Bin2,
	<<SubBinrole_grade:BinLenrole_grade/binary, Bin4/binary>> = Bin3, 
	Role_grade = lists:reverse(decode_int32s(SubBinrole_grade, [])),
<<Goods_bindTmp:8,Goods_modifyLen:16, Bin5/binary>> = Bin4,
	<<Goods_modify:Goods_modifyLen/binary,_Sizeprice:16, BinLenprice:32, Bin6/binary>> = Bin5,
	<<SubBinprice:BinLenprice/binary, Bin7/binary>> = Bin6, 
	Price = lists:reverse(decode_p_shop_prices(SubBinprice, [])),
	<<Type:32/signed,SubBinSizeproperty:32, Bin8/binary>> = Bin7,
	<<SubBinproperty:SubBinSizeproperty/binary, Bin9/binary>> = Bin8,
	Property = decode_p_property_add(SubBinproperty),
	<<Colour:32/signed,Discount_type:32/signed,Shop_id:32/signed,Price_bind:32/signed>> = Bin9,
case Goods_bindTmp of 
	1 -> 
		Goods_bind = true;
	_ ->
		Goods_bind = false
end,

	{p_shop_goods_info, Goods_id,Seat_id,Packe_num,Time,Role_grade,Goods_bind,common_tool:to_list(Goods_modify),Price,Type,Property,Colour,Discount_type,Shop_id,Price_bind};

decode_p_shop_goods_info(_) ->
	undefined.
encode_m_shop_all_goods_toc(Record) when is_record(Record, m_shop_all_goods_toc) ->
	#m_shop_all_goods_toc{shop_id=Shop_id,all_goods=All_goods,npc_id=Npc_id} = Record,
	case Shop_id =:= undefined of
		true ->
				Shop_idFinal = undefined,
				exit({required_field_not_assigned, m_shop_all_goods_toc, shop_id});
		false ->
			Shop_idFinal = Shop_id
	end,
	case All_goods =:= undefined of
		true ->
			All_goodsFinal = [];
		false ->
			All_goodsFinal = All_goods
	end,
	case Npc_id =:= undefined of
		true ->
				Npc_idFinal = 0;
		false ->
			Npc_idFinal = Npc_id
	end,
	All_goods_bin = encode_p_shop_goods_infos(All_goodsFinal, <<>>),
	SizeAll_goodsFinal = erlang:length(All_goodsFinal),
	BinLen_all_goods = erlang:byte_size(All_goods_bin),

	<<Shop_idFinal:32/signed,SizeAll_goodsFinal:16, BinLen_all_goods:32, All_goods_bin/binary,Npc_idFinal:32/signed>>;
encode_m_shop_all_goods_toc(_) -> 
	<<>>.

decode_m_shop_all_goods_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Shop_id:32/signed,_Sizeall_goods:16, BinLenall_goods:32, Bin1/binary>> = Bin0,
	<<SubBinall_goods:BinLenall_goods/binary, Bin2/binary>> = Bin1, 
	All_goods = lists:reverse(decode_p_shop_goods_infos(SubBinall_goods, [])),
	<<Npc_id:32/signed>> = Bin2,

	{m_shop_all_goods_toc, Shop_id,All_goods,Npc_id};

decode_m_shop_all_goods_toc(_) ->
	undefined.
encode_m_shop_item_tos(Record) when is_record(Record, m_shop_item_tos) ->
	#m_shop_item_tos{shop_id=Shop_id,item_type_id=Item_type_id} = Record,
	case Shop_id =:= undefined of
		true ->
				Shop_idFinal = undefined,
				exit({required_field_not_assigned, m_shop_item_tos, shop_id});
		false ->
			Shop_idFinal = Shop_id
	end,
	case Item_type_id =:= undefined of
		true ->
				Item_type_idFinal = undefined,
				exit({required_field_not_assigned, m_shop_item_tos, item_type_id});
		false ->
			Item_type_idFinal = Item_type_id
	end,

	<<Shop_idFinal:32/signed,Item_type_idFinal:32/signed>>;
encode_m_shop_item_tos(_) -> 
	<<>>.

decode_m_shop_item_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Shop_id:32/signed,Item_type_id:32/signed>> = Bin0,

	{m_shop_item_tos, Shop_id,Item_type_id};

decode_m_shop_item_tos(_) ->
	undefined.
encode_m_shop_item_toc(Record) when is_record(Record, m_shop_item_toc) ->
	#m_shop_item_toc{succ=Succ,reason=Reason,shop_id=Shop_id,goods=Goods} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Shop_id =:= undefined of
		true ->
				Shop_idFinal = 0;
		false ->
			Shop_idFinal = Shop_id
	end,
	case Goods =:= undefined of
		true ->
				GoodsFinal = 0;
		false ->
			GoodsFinal = Goods
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Goods_bin = encode_p_shop_goods_info(GoodsFinal),
	BinLen_goods = erlang:byte_size(Goods_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Shop_idFinal:32/signed,BinLen_goods:32, Goods_bin/binary>>;
encode_m_shop_item_toc(_) -> 
	<<>>.

decode_m_shop_item_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Shop_id:32/signed,_SubBinSizegoods:32, SubBingoods/binary>> = Bin1,
	Goods = decode_p_shop_goods_info(SubBingoods),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_shop_item_toc, Succ,common_tool:to_list(Reason),Shop_id,Goods};

decode_m_shop_item_toc(_) ->
	undefined.
encode_m_shop_search_tos(Record) when is_record(Record, m_shop_search_tos) ->
	#m_shop_search_tos{search_goods_id=Search_goods_id,npc_id=Npc_id} = Record,
	case Search_goods_id =:= undefined of
		true ->
			Search_goods_idFinal = [];
		false ->
			Search_goods_idFinal = Search_goods_id
	end,
	case Npc_id =:= undefined of
		true ->
				Npc_idFinal = 0;
		false ->
			Npc_idFinal = Npc_id
	end,
	Search_goods_id_bin = encode_int32s(Search_goods_idFinal, <<>>),
	SizeSearch_goods_idFinal = erlang:length(Search_goods_idFinal),
	BinLen_search_goods_id = erlang:byte_size(Search_goods_id_bin),

	<<SizeSearch_goods_idFinal:16, BinLen_search_goods_id:32, Search_goods_id_bin/binary,Npc_idFinal:32/signed>>;
encode_m_shop_search_tos(_) -> 
	<<>>.

decode_m_shop_search_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizesearch_goods_id:16, BinLensearch_goods_id:32, Bin1/binary>> = Bin0,
	<<SubBinsearch_goods_id:BinLensearch_goods_id/binary, Bin2/binary>> = Bin1, 
	Search_goods_id = lists:reverse(decode_int32s(SubBinsearch_goods_id, [])),
	<<Npc_id:32/signed>> = Bin2,

	{m_shop_search_tos, Search_goods_id,Npc_id};

decode_m_shop_search_tos(_) ->
	undefined.
encode_m_shop_search_toc(Record) when is_record(Record, m_shop_search_toc) ->
	#m_shop_search_toc{search_all_goods=Search_all_goods,npc_id=Npc_id} = Record,
	case Search_all_goods =:= undefined of
		true ->
			Search_all_goodsFinal = [];
		false ->
			Search_all_goodsFinal = Search_all_goods
	end,
	case Npc_id =:= undefined of
		true ->
				Npc_idFinal = 0;
		false ->
			Npc_idFinal = Npc_id
	end,
	Search_all_goods_bin = encode_p_shop_goods_infos(Search_all_goodsFinal, <<>>),
	SizeSearch_all_goodsFinal = erlang:length(Search_all_goodsFinal),
	BinLen_search_all_goods = erlang:byte_size(Search_all_goods_bin),

	<<SizeSearch_all_goodsFinal:16, BinLen_search_all_goods:32, Search_all_goods_bin/binary,Npc_idFinal:32/signed>>;
encode_m_shop_search_toc(_) -> 
	<<>>.

decode_m_shop_search_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizesearch_all_goods:16, BinLensearch_all_goods:32, Bin1/binary>> = Bin0,
	<<SubBinsearch_all_goods:BinLensearch_all_goods/binary, Bin2/binary>> = Bin1, 
	Search_all_goods = lists:reverse(decode_p_shop_goods_infos(SubBinsearch_all_goods, [])),
	<<Npc_id:32/signed>> = Bin2,

	{m_shop_search_toc, Search_all_goods,Npc_id};

decode_m_shop_search_toc(_) ->
	undefined.
encode_m_shop_buy_tos(Record) when is_record(Record, m_shop_buy_tos) ->
	#m_shop_buy_tos{goods_id=Goods_id,price_id=Price_id,goods_num=Goods_num,shop_id=Shop_id} = Record,
	case Goods_id =:= undefined of
		true ->
				Goods_idFinal = undefined,
				exit({required_field_not_assigned, m_shop_buy_tos, goods_id});
		false ->
			Goods_idFinal = Goods_id
	end,
	case Price_id =:= undefined of
		true ->
				Price_idFinal = undefined,
				exit({required_field_not_assigned, m_shop_buy_tos, price_id});
		false ->
			Price_idFinal = Price_id
	end,
	case Goods_num =:= undefined of
		true ->
				Goods_numFinal = 1;
		false ->
			Goods_numFinal = Goods_num
	end,
	case Shop_id =:= undefined of
		true ->
				Shop_idFinal = 0;
		false ->
			Shop_idFinal = Shop_id
	end,

	<<Goods_idFinal:32/signed,Price_idFinal:32/signed,Goods_numFinal:32/signed,Shop_idFinal:32/signed>>;
encode_m_shop_buy_tos(_) -> 
	<<>>.

decode_m_shop_buy_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Goods_id:32/signed,Price_id:32/signed,Goods_num:32/signed,Shop_id:32/signed>> = Bin0,

	{m_shop_buy_tos, Goods_id,Price_id,Goods_num,Shop_id};

decode_m_shop_buy_tos(_) ->
	undefined.
encode_m_shop_buy_toc(Record) when is_record(Record, m_shop_buy_toc) ->
	#m_shop_buy_toc{succ=Succ,reason=Reason,goods=Goods,property=Property,error_code=Error_code} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 0;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = "";
		false ->
			ReasonFinal = Reason
	end,
	case Goods =:= undefined of
		true ->
			GoodsFinal = [];
		false ->
			GoodsFinal = Goods
	end,
	case Property =:= undefined of
		true ->
			PropertyFinal = [];
		false ->
			PropertyFinal = Property
	end,
	case Error_code =:= undefined of
		true ->
				Error_codeFinal = 0;
		false ->
			Error_codeFinal = Error_code
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Goods_bin = encode_p_goodss(GoodsFinal, <<>>),
	SizeGoodsFinal = erlang:length(GoodsFinal),
	BinLen_goods = erlang:byte_size(Goods_bin),
	Property_bin = encode_int32s(PropertyFinal, <<>>),
	SizePropertyFinal = erlang:length(PropertyFinal),
	BinLen_property = erlang:byte_size(Property_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,SizeGoodsFinal:16, BinLen_goods:32, Goods_bin/binary,SizePropertyFinal:16, BinLen_property:32, Property_bin/binary,Error_codeFinal:32/signed>>;
encode_m_shop_buy_toc(_) -> 
	<<>>.

decode_m_shop_buy_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_Sizegoods:16, BinLengoods:32, Bin2/binary>> = Bin1,
	<<SubBingoods:BinLengoods/binary, Bin3/binary>> = Bin2, 
	Goods = lists:reverse(decode_p_goodss(SubBingoods, [])),
	<<_Sizeproperty:16, BinLenproperty:32, Bin4/binary>> = Bin3,
	<<SubBinproperty:BinLenproperty/binary, Bin5/binary>> = Bin4, 
	Property = lists:reverse(decode_int32s(SubBinproperty, [])),
	<<Error_code:32/signed>> = Bin5,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_shop_buy_toc, Succ,common_tool:to_list(Reason),Goods,Property,Error_code};

decode_m_shop_buy_toc(_) ->
	undefined.
encode_p_shop_sale_goods(Record) when is_record(Record, p_shop_sale_goods) ->
	#p_shop_sale_goods{id=Id,type_id=Type_id,position=Position,number=Number} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, p_shop_sale_goods, id});
		false ->
			IdFinal = Id
	end,
	case Type_id =:= undefined of
		true ->
				Type_idFinal = undefined,
				exit({required_field_not_assigned, p_shop_sale_goods, type_id});
		false ->
			Type_idFinal = Type_id
	end,
	case Position =:= undefined of
		true ->
				PositionFinal = undefined,
				exit({required_field_not_assigned, p_shop_sale_goods, position});
		false ->
			PositionFinal = Position
	end,
	case Number =:= undefined of
		true ->
				NumberFinal = undefined,
				exit({required_field_not_assigned, p_shop_sale_goods, number});
		false ->
			NumberFinal = Number
	end,

	<<IdFinal:32/signed,Type_idFinal:32/signed,PositionFinal:32/signed,NumberFinal:32/signed>>;
encode_p_shop_sale_goods(_) -> 
	<<>>.

decode_p_shop_sale_goods(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed,Type_id:32/signed,Position:32/signed,Number:32/signed>> = Bin0,

	{p_shop_sale_goods, Id,Type_id,Position,Number};

decode_p_shop_sale_goods(_) ->
	undefined.
encode_m_shop_sale_tos(Record) when is_record(Record, m_shop_sale_tos) ->
	#m_shop_sale_tos{goods=Goods} = Record,
	case Goods =:= undefined of
		true ->
			GoodsFinal = [];
		false ->
			GoodsFinal = Goods
	end,
	Goods_bin = encode_p_shop_sale_goodss(GoodsFinal, <<>>),
	SizeGoodsFinal = erlang:length(GoodsFinal),
	BinLen_goods = erlang:byte_size(Goods_bin),

	<<SizeGoodsFinal:16, BinLen_goods:32, Goods_bin/binary>>;
encode_m_shop_sale_tos(_) -> 
	<<>>.

decode_m_shop_sale_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizegoods:16, _BinLengoods:32, SubBingoods/binary>> = Bin0,
	Goods = lists:reverse(decode_p_shop_sale_goodss(SubBingoods, [])),

	{m_shop_sale_tos, Goods};

decode_m_shop_sale_tos(_) ->
	undefined.
encode_m_shop_sale_toc(Record) when is_record(Record, m_shop_sale_toc) ->
	#m_shop_sale_toc{succ=Succ,property=Property,ids=Ids,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_shop_sale_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Property =:= undefined of
		true ->
			PropertyFinal = [];
		false ->
			PropertyFinal = Property
	end,
	case Ids =:= undefined of
		true ->
			IdsFinal = [];
		false ->
			IdsFinal = Ids
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Property_bin = encode_int32s(PropertyFinal, <<>>),
	SizePropertyFinal = erlang:length(PropertyFinal),
	BinLen_property = erlang:byte_size(Property_bin),
	Ids_bin = encode_int32s(IdsFinal, <<>>),
	SizeIdsFinal = erlang:length(IdsFinal),
	BinLen_ids = erlang:byte_size(Ids_bin),
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,SizePropertyFinal:16, BinLen_property:32, Property_bin/binary,SizeIdsFinal:16, BinLen_ids:32, Ids_bin/binary,ReasonLen:16, Reason2/binary>>;
encode_m_shop_sale_toc(_) -> 
	<<>>.

decode_m_shop_sale_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,_Sizeproperty:16, BinLenproperty:32, Bin1/binary>> = Bin0,
	<<SubBinproperty:BinLenproperty/binary, Bin2/binary>> = Bin1, 
	Property = lists:reverse(decode_int32s(SubBinproperty, [])),
	<<_Sizeids:16, BinLenids:32, Bin3/binary>> = Bin2,
	<<SubBinids:BinLenids/binary, Bin4/binary>> = Bin3, 
	Ids = lists:reverse(decode_int32s(SubBinids, [])),
	<<ReasonLen:16, Bin5/binary>> = Bin4,
	<<Reason:ReasonLen/binary>> = Bin5,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_shop_sale_toc, Succ,Property,Ids,common_tool:to_list(Reason)};

decode_m_shop_sale_toc(_) ->
	undefined.
encode_m_shop_buy_back_tos(Record) when is_record(Record, m_shop_buy_back_tos) ->
	#m_shop_buy_back_tos{op_type=Op_type,goods_id=Goods_id} = Record,
	case Op_type =:= undefined of
		true ->
				Op_typeFinal = undefined,
				exit({required_field_not_assigned, m_shop_buy_back_tos, op_type});
		false ->
			Op_typeFinal = Op_type
	end,
	case Goods_id =:= undefined of
		true ->
				Goods_idFinal = 0;
		false ->
			Goods_idFinal = Goods_id
	end,

	<<Op_typeFinal:32/signed,Goods_idFinal:32/signed>>;
encode_m_shop_buy_back_tos(_) -> 
	<<>>.

decode_m_shop_buy_back_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Op_type:32/signed,Goods_id:32/signed>> = Bin0,

	{m_shop_buy_back_tos, Op_type,Goods_id};

decode_m_shop_buy_back_tos(_) ->
	undefined.
encode_m_shop_buy_back_toc(Record) when is_record(Record, m_shop_buy_back_toc) ->
	#m_shop_buy_back_toc{op_type=Op_type,goods=Goods,succ=Succ,reason=Reason,goods_id=Goods_id} = Record,
	case Op_type =:= undefined of
		true ->
				Op_typeFinal = undefined,
				exit({required_field_not_assigned, m_shop_buy_back_toc, op_type});
		false ->
			Op_typeFinal = Op_type
	end,
	case Goods =:= undefined of
		true ->
			GoodsFinal = [];
		false ->
			GoodsFinal = Goods
	end,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
			case Succ of
				true ->
					SuccFinal = 1;
				false ->
					SuccFinal = 0
			end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Goods_id =:= undefined of
		true ->
				Goods_idFinal = 0;
		false ->
			Goods_idFinal = Goods_id
	end,
	Goods_bin = encode_p_goodss(GoodsFinal, <<>>),
	SizeGoodsFinal = erlang:length(GoodsFinal),
	BinLen_goods = erlang:byte_size(Goods_bin),
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<Op_typeFinal:32/signed,SizeGoodsFinal:16, BinLen_goods:32, Goods_bin/binary,SuccFinal:8,ReasonLen:16, Reason2/binary,Goods_idFinal:32/signed>>;
encode_m_shop_buy_back_toc(_) -> 
	<<>>.

decode_m_shop_buy_back_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Op_type:32/signed,_Sizegoods:16, BinLengoods:32, Bin1/binary>> = Bin0,
	<<SubBingoods:BinLengoods/binary, Bin2/binary>> = Bin1, 
	Goods = lists:reverse(decode_p_goodss(SubBingoods, [])),
<<SuccTmp:8,ReasonLen:16, Bin3/binary>> = Bin2,
	<<Reason:ReasonLen/binary,Goods_id:32/signed>> = Bin3,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_shop_buy_back_toc, Op_type,Goods,Succ,common_tool:to_list(Reason),Goods_id};

decode_m_shop_buy_back_toc(_) ->
	undefined.
encode_m_shop_npc_tos(Record) when is_record(Record, m_shop_npc_tos) ->
	#m_shop_npc_tos{npc_id=Npc_id} = Record,
	case Npc_id =:= undefined of
		true ->
				Npc_idFinal = undefined,
				exit({required_field_not_assigned, m_shop_npc_tos, npc_id});
		false ->
			Npc_idFinal = Npc_id
	end,

	<<Npc_idFinal:32/signed>>;
encode_m_shop_npc_tos(_) -> 
	<<>>.

decode_m_shop_npc_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Npc_id:32/signed>> = Bin0,

	{m_shop_npc_tos, Npc_id};

decode_m_shop_npc_tos(_) ->
	undefined.
encode_m_shop_npc_toc(Record) when is_record(Record, m_shop_npc_toc) ->
	#m_shop_npc_toc{npc_id=Npc_id,shops=Shops} = Record,
	case Npc_id =:= undefined of
		true ->
				Npc_idFinal = undefined,
				exit({required_field_not_assigned, m_shop_npc_toc, npc_id});
		false ->
			Npc_idFinal = Npc_id
	end,
	case Shops =:= undefined of
		true ->
			ShopsFinal = [];
		false ->
			ShopsFinal = Shops
	end,
	Shops_bin = encode_p_shop_infos(ShopsFinal, <<>>),
	SizeShopsFinal = erlang:length(ShopsFinal),
	BinLen_shops = erlang:byte_size(Shops_bin),

	<<Npc_idFinal:32/signed,SizeShopsFinal:16, BinLen_shops:32, Shops_bin/binary>>;
encode_m_shop_npc_toc(_) -> 
	<<>>.

decode_m_shop_npc_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Npc_id:32/signed,_Sizeshops:16, _BinLenshops:32, SubBinshops/binary>> = Bin0,
	Shops = lists:reverse(decode_p_shop_infos(SubBinshops, [])),

	{m_shop_npc_toc, Npc_id,Shops};

decode_m_shop_npc_toc(_) ->
	undefined.
encode_p_letter_info(Record) when is_record(Record, p_letter_info) ->
	#p_letter_info{id=Id,sender=Sender,receiver=Receiver,title=Title,send_time=Send_time,type=Type,goods_list=Goods_list,goods_take=Goods_take,state=State,letter_content=Letter_content,table=Table} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, p_letter_info, id});
		false ->
			IdFinal = Id
	end,
	case Sender =:= undefined of
		true ->
				SenderFinal = undefined,
				exit({required_field_not_assigned, p_letter_info, sender});
		false ->
			SenderFinal = Sender
	end,
	case Receiver =:= undefined of
		true ->
				ReceiverFinal = undefined,
				exit({required_field_not_assigned, p_letter_info, receiver});
		false ->
			ReceiverFinal = Receiver
	end,
	case Title =:= undefined of
		true ->
				TitleFinal = undefined,
				exit({required_field_not_assigned, p_letter_info, title});
		false ->
			TitleFinal = Title
	end,
	case Send_time =:= undefined of
		true ->
				Send_timeFinal = undefined,
				exit({required_field_not_assigned, p_letter_info, send_time});
		false ->
			Send_timeFinal = Send_time
	end,
	case Type =:= undefined of
		true ->
				TypeFinal = undefined,
				exit({required_field_not_assigned, p_letter_info, type});
		false ->
			TypeFinal = Type
	end,
	case Goods_list =:= undefined of
		true ->
			Goods_listFinal = [];
		false ->
			Goods_listFinal = Goods_list
	end,
	case Goods_take =:= undefined of
		true ->
			Goods_takeFinal = [];
		false ->
			Goods_takeFinal = Goods_take
	end,
	case State =:= undefined of
		true ->
				StateFinal = 1;
		false ->
			StateFinal = State
	end,
	case Letter_content =:= undefined of
		true ->
				Letter_contentFinal = "";
		false ->
			Letter_contentFinal = Letter_content
	end,
	case Table =:= undefined of
		true ->
				TableFinal = undefined,
				exit({required_field_not_assigned, p_letter_info, table});
		false ->
			TableFinal = Table
	end,
	Sender2 = common_tool:to_binary(SenderFinal),
	SenderLen = erlang:byte_size(Sender2),
	Receiver2 = common_tool:to_binary(ReceiverFinal),
	ReceiverLen = erlang:byte_size(Receiver2),
	Title2 = common_tool:to_binary(TitleFinal),
	TitleLen = erlang:byte_size(Title2),
	Goods_list_bin = encode_p_goodss(Goods_listFinal, <<>>),
	SizeGoods_listFinal = erlang:length(Goods_listFinal),
	BinLen_goods_list = erlang:byte_size(Goods_list_bin),
	Goods_take_bin = encode_p_goodss(Goods_takeFinal, <<>>),
	SizeGoods_takeFinal = erlang:length(Goods_takeFinal),
	BinLen_goods_take = erlang:byte_size(Goods_take_bin),
	Letter_content2 = common_tool:to_binary(Letter_contentFinal),
	Letter_contentLen = erlang:byte_size(Letter_content2),

	<<IdFinal:32/signed,SenderLen:16, Sender2/binary,ReceiverLen:16, Receiver2/binary,TitleLen:16, Title2/binary,Send_timeFinal:32/signed,TypeFinal:32/signed,SizeGoods_listFinal:16, BinLen_goods_list:32, Goods_list_bin/binary,SizeGoods_takeFinal:16, BinLen_goods_take:32, Goods_take_bin/binary,StateFinal:32/signed,Letter_contentLen:16, Letter_content2/binary,TableFinal:32/signed>>;
encode_p_letter_info(_) -> 
	<<>>.

decode_p_letter_info(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed,SenderLen:16, Bin1/binary>> = Bin0,
	<<Sender:SenderLen/binary,ReceiverLen:16, Bin2/binary>> = Bin1,
	<<Receiver:ReceiverLen/binary,TitleLen:16, Bin3/binary>> = Bin2,
	<<Title:TitleLen/binary,Send_time:32/signed,Type:32/signed,_Sizegoods_list:16, BinLengoods_list:32, Bin4/binary>> = Bin3,
	<<SubBingoods_list:BinLengoods_list/binary, Bin5/binary>> = Bin4, 
	Goods_list = lists:reverse(decode_p_goodss(SubBingoods_list, [])),
	<<_Sizegoods_take:16, BinLengoods_take:32, Bin6/binary>> = Bin5,
	<<SubBingoods_take:BinLengoods_take/binary, Bin7/binary>> = Bin6, 
	Goods_take = lists:reverse(decode_p_goodss(SubBingoods_take, [])),
	<<State:32/signed,Letter_contentLen:16, Bin8/binary>> = Bin7,
	<<Letter_content:Letter_contentLen/binary,Table:32/signed>> = Bin8,

	{p_letter_info, Id,common_tool:to_list(Sender),common_tool:to_list(Receiver),common_tool:to_list(Title),Send_time,Type,Goods_list,Goods_take,State,common_tool:to_list(Letter_content),Table};

decode_p_letter_info(_) ->
	undefined.
encode_p_letter_goods(Record) when is_record(Record, p_letter_goods) ->
	#p_letter_goods{goods_id=Goods_id,num=Num} = Record,
	case Goods_id =:= undefined of
		true ->
				Goods_idFinal = undefined,
				exit({required_field_not_assigned, p_letter_goods, goods_id});
		false ->
			Goods_idFinal = Goods_id
	end,
	case Num =:= undefined of
		true ->
				NumFinal = 0;
		false ->
			NumFinal = Num
	end,

	<<Goods_idFinal:32/signed,NumFinal:32/signed>>;
encode_p_letter_goods(_) -> 
	<<>>.

decode_p_letter_goods(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Goods_id:32/signed,Num:32/signed>> = Bin0,

	{p_letter_goods, Goods_id,Num};

decode_p_letter_goods(_) ->
	undefined.
encode_p_letter_simple_info(Record) when is_record(Record, p_letter_simple_info) ->
	#p_letter_simple_info{id=Id,sender=Sender,receiver=Receiver,title=Title,send_time=Send_time,type=Type,state=State,is_have_goods=Is_have_goods,table=Table} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, p_letter_simple_info, id});
		false ->
			IdFinal = Id
	end,
	case Sender =:= undefined of
		true ->
				SenderFinal = undefined,
				exit({required_field_not_assigned, p_letter_simple_info, sender});
		false ->
			SenderFinal = Sender
	end,
	case Receiver =:= undefined of
		true ->
				ReceiverFinal = <<>>;
		false ->
			ReceiverFinal = Receiver
	end,
	case Title =:= undefined of
		true ->
				TitleFinal = <<>>;
		false ->
			TitleFinal = Title
	end,
	case Send_time =:= undefined of
		true ->
				Send_timeFinal = undefined,
				exit({required_field_not_assigned, p_letter_simple_info, send_time});
		false ->
			Send_timeFinal = Send_time
	end,
	case Type =:= undefined of
		true ->
				TypeFinal = undefined,
				exit({required_field_not_assigned, p_letter_simple_info, type});
		false ->
			TypeFinal = Type
	end,
	case State =:= undefined of
		true ->
				StateFinal = undefined,
				exit({required_field_not_assigned, p_letter_simple_info, state});
		false ->
			StateFinal = State
	end,
	case Is_have_goods =:= undefined of
		true ->
				Is_have_goodsFinal = 0;
		false ->
		case Is_have_goods of
			true ->
				Is_have_goodsFinal = 1;
			false ->
				Is_have_goodsFinal = 0
		end
	end,
	case Table =:= undefined of
		true ->
				TableFinal = undefined,
				exit({required_field_not_assigned, p_letter_simple_info, table});
		false ->
			TableFinal = Table
	end,
	Sender2 = common_tool:to_binary(SenderFinal),
	SenderLen = erlang:byte_size(Sender2),
	Receiver2 = common_tool:to_binary(ReceiverFinal),
	ReceiverLen = erlang:byte_size(Receiver2),
	Title2 = common_tool:to_binary(TitleFinal),
	TitleLen = erlang:byte_size(Title2),

	<<IdFinal:32/signed,SenderLen:16, Sender2/binary,ReceiverLen:16, Receiver2/binary,TitleLen:16, Title2/binary,Send_timeFinal:32/signed,TypeFinal:32/signed,StateFinal:32/signed,Is_have_goodsFinal:8,TableFinal:32/signed>>;
encode_p_letter_simple_info(_) -> 
	<<>>.

decode_p_letter_simple_info(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed,SenderLen:16, Bin1/binary>> = Bin0,
	<<Sender:SenderLen/binary,ReceiverLen:16, Bin2/binary>> = Bin1,
	<<Receiver:ReceiverLen/binary,TitleLen:16, Bin3/binary>> = Bin2,
	<<Title:TitleLen/binary,Send_time:32/signed,Type:32/signed,State:32/signed,Is_have_goodsTmp:8,Table:32/signed>> = Bin3,
case Is_have_goodsTmp of 
	1 -> 
		Is_have_goods = true;
	_ ->
		Is_have_goods = false
end,

	{p_letter_simple_info, Id,common_tool:to_list(Sender),common_tool:to_list(Receiver),common_tool:to_list(Title),Send_time,Type,State,Is_have_goods,Table};

decode_p_letter_simple_info(_) ->
	undefined.
encode_m_letter_get_tos(Record) when is_record(Record, m_letter_get_tos) ->
	#m_letter_get_tos{pack_num=Pack_num} = Record,
	case Pack_num =:= undefined of
		true ->
				Pack_numFinal = 0;
		false ->
			Pack_numFinal = Pack_num
	end,

	<<Pack_numFinal:32/signed>>;
encode_m_letter_get_tos(_) -> 
	<<>>.

decode_m_letter_get_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Pack_num:32/signed>> = Bin0,

	{m_letter_get_tos, Pack_num};

decode_m_letter_get_tos(_) ->
	undefined.
encode_m_letter_get_toc(Record) when is_record(Record, m_letter_get_toc) ->
	#m_letter_get_toc{letters=Letters,request_mark=Request_mark} = Record,
	case Letters =:= undefined of
		true ->
			LettersFinal = [];
		false ->
			LettersFinal = Letters
	end,
	case Request_mark =:= undefined of
		true ->
				Request_markFinal = undefined,
				exit({required_field_not_assigned, m_letter_get_toc, request_mark});
		false ->
			Request_markFinal = Request_mark
	end,
	Letters_bin = encode_p_letter_simple_infos(LettersFinal, <<>>),
	SizeLettersFinal = erlang:length(LettersFinal),
	BinLen_letters = erlang:byte_size(Letters_bin),

	<<SizeLettersFinal:16, BinLen_letters:32, Letters_bin/binary,Request_markFinal:32/signed>>;
encode_m_letter_get_toc(_) -> 
	<<>>.

decode_m_letter_get_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizeletters:16, BinLenletters:32, Bin1/binary>> = Bin0,
	<<SubBinletters:BinLenletters/binary, Bin2/binary>> = Bin1, 
	Letters = lists:reverse(decode_p_letter_simple_infos(SubBinletters, [])),
	<<Request_mark:32/signed>> = Bin2,

	{m_letter_get_toc, Letters,Request_mark};

decode_m_letter_get_toc(_) ->
	undefined.
encode_m_letter_get_send_tos(Record) when is_record(Record, m_letter_get_send_tos) ->
	#m_letter_get_send_tos{pack_num=Pack_num,only_many_send=Only_many_send} = Record,
	case Pack_num =:= undefined of
		true ->
				Pack_numFinal = 0;
		false ->
			Pack_numFinal = Pack_num
	end,
	case Only_many_send =:= undefined of
		true ->
				Only_many_sendFinal = 0;
		false ->
		case Only_many_send of
			true ->
				Only_many_sendFinal = 1;
			false ->
				Only_many_sendFinal = 0
		end
	end,

	<<Pack_numFinal:32/signed,Only_many_sendFinal:8>>;
encode_m_letter_get_send_tos(_) -> 
	<<>>.

decode_m_letter_get_send_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Pack_num:32/signed,Only_many_sendTmp:8>> = Bin0,
case Only_many_sendTmp of 
	1 -> 
		Only_many_send = true;
	_ ->
		Only_many_send = false
end,

	{m_letter_get_send_tos, Pack_num,Only_many_send};

decode_m_letter_get_send_tos(_) ->
	undefined.
encode_m_letter_get_send_toc(Record) when is_record(Record, m_letter_get_send_toc) ->
	#m_letter_get_send_toc{letters=Letters,only_many_send=Only_many_send,request_mark=Request_mark} = Record,
	case Letters =:= undefined of
		true ->
			LettersFinal = [];
		false ->
			LettersFinal = Letters
	end,
	case Only_many_send =:= undefined of
		true ->
				Only_many_sendFinal = 0;
		false ->
		case Only_many_send of
			true ->
				Only_many_sendFinal = 1;
			false ->
				Only_many_sendFinal = 0
		end
	end,
	case Request_mark =:= undefined of
		true ->
				Request_markFinal = undefined,
				exit({required_field_not_assigned, m_letter_get_send_toc, request_mark});
		false ->
			Request_markFinal = Request_mark
	end,
	Letters_bin = encode_p_letter_simple_infos(LettersFinal, <<>>),
	SizeLettersFinal = erlang:length(LettersFinal),
	BinLen_letters = erlang:byte_size(Letters_bin),

	<<SizeLettersFinal:16, BinLen_letters:32, Letters_bin/binary,Only_many_sendFinal:8,Request_markFinal:32/signed>>;
encode_m_letter_get_send_toc(_) -> 
	<<>>.

decode_m_letter_get_send_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizeletters:16, BinLenletters:32, Bin1/binary>> = Bin0,
	<<SubBinletters:BinLenletters/binary, Bin2/binary>> = Bin1, 
	Letters = lists:reverse(decode_p_letter_simple_infos(SubBinletters, [])),
<<Only_many_sendTmp:8,Request_mark:32/signed>> = Bin2,
case Only_many_sendTmp of 
	1 -> 
		Only_many_send = true;
	_ ->
		Only_many_send = false
end,

	{m_letter_get_send_toc, Letters,Only_many_send,Request_mark};

decode_m_letter_get_send_toc(_) ->
	undefined.
encode_m_letter_get_receive_tos(Record) when is_record(Record, m_letter_get_receive_tos) ->
	#m_letter_get_receive_tos{pack_num=Pack_num} = Record,
	case Pack_num =:= undefined of
		true ->
				Pack_numFinal = 0;
		false ->
			Pack_numFinal = Pack_num
	end,

	<<Pack_numFinal:32/signed>>;
encode_m_letter_get_receive_tos(_) -> 
	<<>>.

decode_m_letter_get_receive_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Pack_num:32/signed>> = Bin0,

	{m_letter_get_receive_tos, Pack_num};

decode_m_letter_get_receive_tos(_) ->
	undefined.
encode_m_letter_get_receive_toc(Record) when is_record(Record, m_letter_get_receive_toc) ->
	#m_letter_get_receive_toc{letters=Letters,request_mark=Request_mark} = Record,
	case Letters =:= undefined of
		true ->
			LettersFinal = [];
		false ->
			LettersFinal = Letters
	end,
	case Request_mark =:= undefined of
		true ->
				Request_markFinal = undefined,
				exit({required_field_not_assigned, m_letter_get_receive_toc, request_mark});
		false ->
			Request_markFinal = Request_mark
	end,
	Letters_bin = encode_p_letter_simple_infos(LettersFinal, <<>>),
	SizeLettersFinal = erlang:length(LettersFinal),
	BinLen_letters = erlang:byte_size(Letters_bin),

	<<SizeLettersFinal:16, BinLen_letters:32, Letters_bin/binary,Request_markFinal:32/signed>>;
encode_m_letter_get_receive_toc(_) -> 
	<<>>.

decode_m_letter_get_receive_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizeletters:16, BinLenletters:32, Bin1/binary>> = Bin0,
	<<SubBinletters:BinLenletters/binary, Bin2/binary>> = Bin1, 
	Letters = lists:reverse(decode_p_letter_simple_infos(SubBinletters, [])),
	<<Request_mark:32/signed>> = Bin2,

	{m_letter_get_receive_toc, Letters,Request_mark};

decode_m_letter_get_receive_toc(_) ->
	undefined.
encode_m_letter_open_tos(Record) when is_record(Record, m_letter_open_tos) ->
	#m_letter_open_tos{letter_id=Letter_id,table=Table,is_self_send=Is_self_send} = Record,
	case Letter_id =:= undefined of
		true ->
				Letter_idFinal = undefined,
				exit({required_field_not_assigned, m_letter_open_tos, letter_id});
		false ->
			Letter_idFinal = Letter_id
	end,
	case Table =:= undefined of
		true ->
				TableFinal = undefined,
				exit({required_field_not_assigned, m_letter_open_tos, table});
		false ->
			TableFinal = Table
	end,
	case Is_self_send =:= undefined of
		true ->
				Is_self_sendFinal = 0;
		false ->
		case Is_self_send of
			true ->
				Is_self_sendFinal = 1;
			false ->
				Is_self_sendFinal = 0
		end
	end,

	<<Letter_idFinal:32/signed,TableFinal:32/signed,Is_self_sendFinal:8>>;
encode_m_letter_open_tos(_) -> 
	<<>>.

decode_m_letter_open_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Letter_id:32/signed,Table:32/signed,Is_self_sendTmp:8>> = Bin0,
case Is_self_sendTmp of 
	1 -> 
		Is_self_send = true;
	_ ->
		Is_self_send = false
end,

	{m_letter_open_tos, Letter_id,Table,Is_self_send};

decode_m_letter_open_tos(_) ->
	undefined.
encode_m_letter_open_toc(Record) when is_record(Record, m_letter_open_toc) ->
	#m_letter_open_toc{succ=Succ,result=Result,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_letter_open_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Result =:= undefined of
		true ->
				ResultFinal = 0;
		false ->
			ResultFinal = Result
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Result_bin = encode_p_letter_info(ResultFinal),
	BinLen_result = erlang:byte_size(Result_bin),
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,BinLen_result:32, Result_bin/binary,ReasonLen:16, Reason2/binary>>;
encode_m_letter_open_toc(_) -> 
	<<>>.

decode_m_letter_open_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,SubBinSizeresult:32, Bin1/binary>> = Bin0,
	<<SubBinresult:SubBinSizeresult/binary, Bin2/binary>> = Bin1,
	Result = decode_p_letter_info(SubBinresult),
	<<ReasonLen:16, Bin3/binary>> = Bin2,
	<<Reason:ReasonLen/binary>> = Bin3,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_letter_open_toc, Succ,Result,common_tool:to_list(Reason)};

decode_m_letter_open_toc(_) ->
	undefined.
encode_m_letter_p2p_send_tos(Record) when is_record(Record, m_letter_p2p_send_tos) ->
	#m_letter_p2p_send_tos{receiver=Receiver,text=Text,goods_list=Goods_list} = Record,
	case Receiver =:= undefined of
		true ->
				ReceiverFinal = undefined,
				exit({required_field_not_assigned, m_letter_p2p_send_tos, receiver});
		false ->
			ReceiverFinal = Receiver
	end,
	case Text =:= undefined of
		true ->
				TextFinal = undefined,
				exit({required_field_not_assigned, m_letter_p2p_send_tos, text});
		false ->
			TextFinal = Text
	end,
	case Goods_list =:= undefined of
		true ->
			Goods_listFinal = [];
		false ->
			Goods_listFinal = Goods_list
	end,
	Receiver2 = common_tool:to_binary(ReceiverFinal),
	ReceiverLen = erlang:byte_size(Receiver2),
	Text2 = common_tool:to_binary(TextFinal),
	TextLen = erlang:byte_size(Text2),
	Goods_list_bin = encode_p_letter_goodss(Goods_listFinal, <<>>),
	SizeGoods_listFinal = erlang:length(Goods_listFinal),
	BinLen_goods_list = erlang:byte_size(Goods_list_bin),

	<<ReceiverLen:16, Receiver2/binary,TextLen:16, Text2/binary,SizeGoods_listFinal:16, BinLen_goods_list:32, Goods_list_bin/binary>>;
encode_m_letter_p2p_send_tos(_) -> 
	<<>>.

decode_m_letter_p2p_send_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<ReceiverLen:16, Bin1/binary>> = Bin0,
	<<Receiver:ReceiverLen/binary,TextLen:16, Bin2/binary>> = Bin1,
	<<Text:TextLen/binary,_Sizegoods_list:16, _BinLengoods_list:32, SubBingoods_list/binary>> = Bin2,
	Goods_list = lists:reverse(decode_p_letter_goodss(SubBingoods_list, [])),

	{m_letter_p2p_send_tos, common_tool:to_list(Receiver),common_tool:to_list(Text),Goods_list};

decode_m_letter_p2p_send_tos(_) ->
	undefined.
encode_m_letter_clan_send_tos(Record) when is_record(Record, m_letter_clan_send_tos) ->
	#m_letter_clan_send_tos{receiver=Receiver,text=Text} = Record,
	case Receiver =:= undefined of
		true ->
			ReceiverFinal = [];
		false ->
			ReceiverFinal = Receiver
	end,
	case Text =:= undefined of
		true ->
				TextFinal = undefined,
				exit({required_field_not_assigned, m_letter_clan_send_tos, text});
		false ->
			TextFinal = Text
	end,
	Receiver_bin = encode_strings(ReceiverFinal, <<>>),
	SizeReceiverFinal = erlang:length(ReceiverFinal),
	BinLen_receiver = erlang:byte_size(Receiver_bin),
	Text2 = common_tool:to_binary(TextFinal),
	TextLen = erlang:byte_size(Text2),

	<<SizeReceiverFinal:16, BinLen_receiver:32, Receiver_bin/binary,TextLen:16, Text2/binary>>;
encode_m_letter_clan_send_tos(_) -> 
	<<>>.

decode_m_letter_clan_send_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizereceiver:16, BinLenreceiver:32, Bin1/binary>> = Bin0,
	<<SubBinreceiver:BinLenreceiver/binary, Bin2/binary>> = Bin1, 
	Receiver = lists:reverse(decode_strings(SubBinreceiver, [])),
	<<TextLen:16, Bin3/binary>> = Bin2,
	<<Text:TextLen/binary>> = Bin3,

	{m_letter_clan_send_tos, Receiver,common_tool:to_list(Text)};

decode_m_letter_clan_send_tos(_) ->
	undefined.
encode_m_letter_family_send_tos(Record) when is_record(Record, m_letter_family_send_tos) ->
	#m_letter_family_send_tos{text=Text,range=Range} = Record,
	case Text =:= undefined of
		true ->
				TextFinal = undefined,
				exit({required_field_not_assigned, m_letter_family_send_tos, text});
		false ->
			TextFinal = Text
	end,
	case Range =:= undefined of
		true ->
				RangeFinal = undefined,
				exit({required_field_not_assigned, m_letter_family_send_tos, range});
		false ->
			RangeFinal = Range
	end,
	Text2 = common_tool:to_binary(TextFinal),
	TextLen = erlang:byte_size(Text2),

	<<TextLen:16, Text2/binary,RangeFinal:32/signed>>;
encode_m_letter_family_send_tos(_) -> 
	<<>>.

decode_m_letter_family_send_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<TextLen:16, Bin1/binary>> = Bin0,
	<<Text:TextLen/binary,Range:32/signed>> = Bin1,

	{m_letter_family_send_tos, common_tool:to_list(Text),Range};

decode_m_letter_family_send_tos(_) ->
	undefined.
encode_m_letter_batch_send_tos(Record) when is_record(Record, m_letter_batch_send_tos) ->
	#m_letter_batch_send_tos{text=Text,goods_list=Goods_list,type=Type,days=Days,condition=Condition} = Record,
	case Text =:= undefined of
		true ->
				TextFinal = undefined,
				exit({required_field_not_assigned, m_letter_batch_send_tos, text});
		false ->
			TextFinal = Text
	end,
	case Goods_list =:= undefined of
		true ->
			Goods_listFinal = [];
		false ->
			Goods_listFinal = Goods_list
	end,
	case Type =:= undefined of
		true ->
				TypeFinal = undefined,
				exit({required_field_not_assigned, m_letter_batch_send_tos, type});
		false ->
			TypeFinal = Type
	end,
	case Days =:= undefined of
		true ->
				DaysFinal = 0;
		false ->
			DaysFinal = Days
	end,
	case Condition =:= undefined of
		true ->
				ConditionFinal = 0;
		false ->
			ConditionFinal = Condition
	end,
	Text2 = common_tool:to_binary(TextFinal),
	TextLen = erlang:byte_size(Text2),
	Goods_list_bin = encode_p_letter_goodss(Goods_listFinal, <<>>),
	SizeGoods_listFinal = erlang:length(Goods_listFinal),
	BinLen_goods_list = erlang:byte_size(Goods_list_bin),
	Condition_bin = encode_p_letter_send_condition(ConditionFinal),
	BinLen_condition = erlang:byte_size(Condition_bin),

	<<TextLen:16, Text2/binary,SizeGoods_listFinal:16, BinLen_goods_list:32, Goods_list_bin/binary,TypeFinal:32/signed,DaysFinal:32/signed,BinLen_condition:32, Condition_bin/binary>>;
encode_m_letter_batch_send_tos(_) -> 
	<<>>.

decode_m_letter_batch_send_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<TextLen:16, Bin1/binary>> = Bin0,
	<<Text:TextLen/binary,_Sizegoods_list:16, BinLengoods_list:32, Bin2/binary>> = Bin1,
	<<SubBingoods_list:BinLengoods_list/binary, Bin3/binary>> = Bin2, 
	Goods_list = lists:reverse(decode_p_letter_goodss(SubBingoods_list, [])),
	<<Type:32/signed,Days:32/signed,_SubBinSizecondition:32, SubBincondition/binary>> = Bin3,
	Condition = decode_p_letter_send_condition(SubBincondition),

	{m_letter_batch_send_tos, common_tool:to_list(Text),Goods_list,Type,Days,Condition};

decode_m_letter_batch_send_tos(_) ->
	undefined.
encode_p_letter_send_condition(Record) when is_record(Record, p_letter_send_condition) ->
	#p_letter_send_condition{receiver=Receiver,time=Time,grade=Grade,sex=Sex,factionid=Factionid} = Record,
	case Receiver =:= undefined of
		true ->
			ReceiverFinal = [];
		false ->
			ReceiverFinal = Receiver
	end,
	case Time =:= undefined of
		true ->
			TimeFinal = [];
		false ->
			TimeFinal = Time
	end,
	case Grade =:= undefined of
		true ->
			GradeFinal = [];
		false ->
			GradeFinal = Grade
	end,
	case Sex =:= undefined of
		true ->
				SexFinal = 0;
		false ->
			SexFinal = Sex
	end,
	case Factionid =:= undefined of
		true ->
				FactionidFinal = 0;
		false ->
			FactionidFinal = Factionid
	end,
	Receiver_bin = encode_strings(ReceiverFinal, <<>>),
	SizeReceiverFinal = erlang:length(ReceiverFinal),
	BinLen_receiver = erlang:byte_size(Receiver_bin),
	Time_bin = encode_int32s(TimeFinal, <<>>),
	SizeTimeFinal = erlang:length(TimeFinal),
	BinLen_time = erlang:byte_size(Time_bin),
	Grade_bin = encode_int32s(GradeFinal, <<>>),
	SizeGradeFinal = erlang:length(GradeFinal),
	BinLen_grade = erlang:byte_size(Grade_bin),

	<<SizeReceiverFinal:16, BinLen_receiver:32, Receiver_bin/binary,SizeTimeFinal:16, BinLen_time:32, Time_bin/binary,SizeGradeFinal:16, BinLen_grade:32, Grade_bin/binary,SexFinal:32/signed,FactionidFinal:32/signed>>;
encode_p_letter_send_condition(_) -> 
	<<>>.

decode_p_letter_send_condition(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizereceiver:16, BinLenreceiver:32, Bin1/binary>> = Bin0,
	<<SubBinreceiver:BinLenreceiver/binary, Bin2/binary>> = Bin1, 
	Receiver = lists:reverse(decode_strings(SubBinreceiver, [])),
	<<_Sizetime:16, BinLentime:32, Bin3/binary>> = Bin2,
	<<SubBintime:BinLentime/binary, Bin4/binary>> = Bin3, 
	Time = lists:reverse(decode_int32s(SubBintime, [])),
	<<_Sizegrade:16, BinLengrade:32, Bin5/binary>> = Bin4,
	<<SubBingrade:BinLengrade/binary, Bin6/binary>> = Bin5, 
	Grade = lists:reverse(decode_int32s(SubBingrade, [])),
	<<Sex:32/signed,Factionid:32/signed>> = Bin6,

	{p_letter_send_condition, Receiver,Time,Grade,Sex,Factionid};

decode_p_letter_send_condition(_) ->
	undefined.
encode_m_letter_send_toc(Record) when is_record(Record, m_letter_send_toc) ->
	#m_letter_send_toc{succ=Succ,letter=Letter,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_letter_send_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Letter =:= undefined of
		true ->
				LetterFinal = 0;
		false ->
			LetterFinal = Letter
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Letter_bin = encode_p_letter_simple_info(LetterFinal),
	BinLen_letter = erlang:byte_size(Letter_bin),
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,BinLen_letter:32, Letter_bin/binary,ReasonLen:16, Reason2/binary>>;
encode_m_letter_send_toc(_) -> 
	<<>>.

decode_m_letter_send_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,SubBinSizeletter:32, Bin1/binary>> = Bin0,
	<<SubBinletter:SubBinSizeletter/binary, Bin2/binary>> = Bin1,
	Letter = decode_p_letter_simple_info(SubBinletter),
	<<ReasonLen:16, Bin3/binary>> = Bin2,
	<<Reason:ReasonLen/binary>> = Bin3,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_letter_send_toc, Succ,Letter,common_tool:to_list(Reason)};

decode_m_letter_send_toc(_) ->
	undefined.
encode_m_letter_delete_tos(Record) when is_record(Record, m_letter_delete_tos) ->
	#m_letter_delete_tos{letters=Letters} = Record,
	case Letters =:= undefined of
		true ->
			LettersFinal = [];
		false ->
			LettersFinal = Letters
	end,
	Letters_bin = encode_p_letter_deletes(LettersFinal, <<>>),
	SizeLettersFinal = erlang:length(LettersFinal),
	BinLen_letters = erlang:byte_size(Letters_bin),

	<<SizeLettersFinal:16, BinLen_letters:32, Letters_bin/binary>>;
encode_m_letter_delete_tos(_) -> 
	<<>>.

decode_m_letter_delete_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizeletters:16, _BinLenletters:32, SubBinletters/binary>> = Bin0,
	Letters = lists:reverse(decode_p_letter_deletes(SubBinletters, [])),

	{m_letter_delete_tos, Letters};

decode_m_letter_delete_tos(_) ->
	undefined.
encode_p_letter_delete(Record) when is_record(Record, p_letter_delete) ->
	#p_letter_delete{letter_id=Letter_id,is_self_send=Is_self_send,table=Table} = Record,
	case Letter_id =:= undefined of
		true ->
				Letter_idFinal = undefined,
				exit({required_field_not_assigned, p_letter_delete, letter_id});
		false ->
			Letter_idFinal = Letter_id
	end,
	case Is_self_send =:= undefined of
		true ->
				Is_self_sendFinal = 0;
		false ->
		case Is_self_send of
			true ->
				Is_self_sendFinal = 1;
			false ->
				Is_self_sendFinal = 0
		end
	end,
	case Table =:= undefined of
		true ->
				TableFinal = undefined,
				exit({required_field_not_assigned, p_letter_delete, table});
		false ->
			TableFinal = Table
	end,

	<<Letter_idFinal:32/signed,Is_self_sendFinal:8,TableFinal:32/signed>>;
encode_p_letter_delete(_) -> 
	<<>>.

decode_p_letter_delete(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Letter_id:32/signed,Is_self_sendTmp:8,Table:32/signed>> = Bin0,
case Is_self_sendTmp of 
	1 -> 
		Is_self_send = true;
	_ ->
		Is_self_send = false
end,

	{p_letter_delete, Letter_id,Is_self_send,Table};

decode_p_letter_delete(_) ->
	undefined.
encode_m_letter_delete_toc(Record) when is_record(Record, m_letter_delete_toc) ->
	#m_letter_delete_toc{succ=Succ,no_del=No_del,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_letter_delete_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case No_del =:= undefined of
		true ->
			No_delFinal = [];
		false ->
			No_delFinal = No_del
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	No_del_bin = encode_p_letter_deletes(No_delFinal, <<>>),
	SizeNo_delFinal = erlang:length(No_delFinal),
	BinLen_no_del = erlang:byte_size(No_del_bin),
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,SizeNo_delFinal:16, BinLen_no_del:32, No_del_bin/binary,ReasonLen:16, Reason2/binary>>;
encode_m_letter_delete_toc(_) -> 
	<<>>.

decode_m_letter_delete_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,_Sizeno_del:16, BinLenno_del:32, Bin1/binary>> = Bin0,
	<<SubBinno_del:BinLenno_del/binary, Bin2/binary>> = Bin1, 
	No_del = lists:reverse(decode_p_letter_deletes(SubBinno_del, [])),
	<<ReasonLen:16, Bin3/binary>> = Bin2,
	<<Reason:ReasonLen/binary>> = Bin3,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_letter_delete_toc, Succ,No_del,common_tool:to_list(Reason)};

decode_m_letter_delete_toc(_) ->
	undefined.
encode_m_letter_accept_goods_tos(Record) when is_record(Record, m_letter_accept_goods_tos) ->
	#m_letter_accept_goods_tos{letter_id=Letter_id,table=Table} = Record,
	case Letter_id =:= undefined of
		true ->
				Letter_idFinal = undefined,
				exit({required_field_not_assigned, m_letter_accept_goods_tos, letter_id});
		false ->
			Letter_idFinal = Letter_id
	end,
	case Table =:= undefined of
		true ->
				TableFinal = undefined,
				exit({required_field_not_assigned, m_letter_accept_goods_tos, table});
		false ->
			TableFinal = Table
	end,

	<<Letter_idFinal:32/signed,TableFinal:32/signed>>;
encode_m_letter_accept_goods_tos(_) -> 
	<<>>.

decode_m_letter_accept_goods_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Letter_id:32/signed,Table:32/signed>> = Bin0,

	{m_letter_accept_goods_tos, Letter_id,Table};

decode_m_letter_accept_goods_tos(_) ->
	undefined.
encode_m_letter_accept_goods_toc(Record) when is_record(Record, m_letter_accept_goods_toc) ->
	#m_letter_accept_goods_toc{succ=Succ,goods_list=Goods_list,goods_take=Goods_take,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_letter_accept_goods_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Goods_list =:= undefined of
		true ->
			Goods_listFinal = [];
		false ->
			Goods_listFinal = Goods_list
	end,
	case Goods_take =:= undefined of
		true ->
			Goods_takeFinal = [];
		false ->
			Goods_takeFinal = Goods_take
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Goods_list_bin = encode_p_goodss(Goods_listFinal, <<>>),
	SizeGoods_listFinal = erlang:length(Goods_listFinal),
	BinLen_goods_list = erlang:byte_size(Goods_list_bin),
	Goods_take_bin = encode_p_goodss(Goods_takeFinal, <<>>),
	SizeGoods_takeFinal = erlang:length(Goods_takeFinal),
	BinLen_goods_take = erlang:byte_size(Goods_take_bin),
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,SizeGoods_listFinal:16, BinLen_goods_list:32, Goods_list_bin/binary,SizeGoods_takeFinal:16, BinLen_goods_take:32, Goods_take_bin/binary,ReasonLen:16, Reason2/binary>>;
encode_m_letter_accept_goods_toc(_) -> 
	<<>>.

decode_m_letter_accept_goods_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,_Sizegoods_list:16, BinLengoods_list:32, Bin1/binary>> = Bin0,
	<<SubBingoods_list:BinLengoods_list/binary, Bin2/binary>> = Bin1, 
	Goods_list = lists:reverse(decode_p_goodss(SubBingoods_list, [])),
	<<_Sizegoods_take:16, BinLengoods_take:32, Bin3/binary>> = Bin2,
	<<SubBingoods_take:BinLengoods_take/binary, Bin4/binary>> = Bin3, 
	Goods_take = lists:reverse(decode_p_goodss(SubBingoods_take, [])),
	<<ReasonLen:16, Bin5/binary>> = Bin4,
	<<Reason:ReasonLen/binary>> = Bin5,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_letter_accept_goods_toc, Succ,Goods_list,Goods_take,common_tool:to_list(Reason)};

decode_m_letter_accept_goods_toc(_) ->
	undefined.
encode_m_letter_state_change_tos(Record) when is_record(Record, m_letter_state_change_tos) ->
	#m_letter_state_change_tos{letter_id=Letter_id,state=State,is_self_send=Is_self_send} = Record,
	case Letter_id =:= undefined of
		true ->
				Letter_idFinal = undefined,
				exit({required_field_not_assigned, m_letter_state_change_tos, letter_id});
		false ->
			Letter_idFinal = Letter_id
	end,
	case State =:= undefined of
		true ->
				StateFinal = undefined,
				exit({required_field_not_assigned, m_letter_state_change_tos, state});
		false ->
			StateFinal = State
	end,
	case Is_self_send =:= undefined of
		true ->
				Is_self_sendFinal = 0;
		false ->
		case Is_self_send of
			true ->
				Is_self_sendFinal = 1;
			false ->
				Is_self_sendFinal = 0
		end
	end,

	<<Letter_idFinal:32/signed,StateFinal:32/signed,Is_self_sendFinal:8>>;
encode_m_letter_state_change_tos(_) -> 
	<<>>.

decode_m_letter_state_change_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Letter_id:32/signed,State:32/signed,Is_self_sendTmp:8>> = Bin0,
case Is_self_sendTmp of 
	1 -> 
		Is_self_send = true;
	_ ->
		Is_self_send = false
end,

	{m_letter_state_change_tos, Letter_id,State,Is_self_send};

decode_m_letter_state_change_tos(_) ->
	undefined.
encode_m_letter_state_change_toc(Record) when is_record(Record, m_letter_state_change_toc) ->
	#m_letter_state_change_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_letter_state_change_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_letter_state_change_toc(_) -> 
	<<>>.

decode_m_letter_state_change_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_letter_state_change_toc, Succ,common_tool:to_list(Reason)};

decode_m_letter_state_change_toc(_) ->
	undefined.
encode_m_equip_mountup_tos(Record) when is_record(Record, m_equip_mountup_tos) ->
	#m_equip_mountup_tos{mountid=Mountid} = Record,
	case Mountid =:= undefined of
		true ->
				MountidFinal = undefined,
				exit({required_field_not_assigned, m_equip_mountup_tos, mountid});
		false ->
			MountidFinal = Mountid
	end,

	<<MountidFinal:32/signed>>;
encode_m_equip_mountup_tos(_) -> 
	<<>>.

decode_m_equip_mountup_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Mountid:32/signed>> = Bin0,

	{m_equip_mountup_tos, Mountid};

decode_m_equip_mountup_tos(_) ->
	undefined.
encode_m_equip_mountup_toc(Record) when is_record(Record, m_equip_mountup_toc) ->
	#m_equip_mountup_toc{succ=Succ,reason=Reason,mount_new=Mount_new,mount_old=Mount_old} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Mount_new =:= undefined of
		true ->
				Mount_newFinal = 0;
		false ->
			Mount_newFinal = Mount_new
	end,
	case Mount_old =:= undefined of
		true ->
				Mount_oldFinal = 0;
		false ->
			Mount_oldFinal = Mount_old
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Mount_new_bin = encode_p_goods(Mount_newFinal),
	BinLen_mount_new = erlang:byte_size(Mount_new_bin),
	Mount_old_bin = encode_p_goods(Mount_oldFinal),
	BinLen_mount_old = erlang:byte_size(Mount_old_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_mount_new:32, Mount_new_bin/binary,BinLen_mount_old:32, Mount_old_bin/binary>>;
encode_m_equip_mountup_toc(_) -> 
	<<>>.

decode_m_equip_mountup_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,SubBinSizemount_new:32, Bin2/binary>> = Bin1,
	<<SubBinmount_new:SubBinSizemount_new/binary, Bin3/binary>> = Bin2,
	Mount_new = decode_p_goods(SubBinmount_new),
	<<_SubBinSizemount_old:32, SubBinmount_old/binary>> = Bin3,
	Mount_old = decode_p_goods(SubBinmount_old),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_equip_mountup_toc, Succ,common_tool:to_list(Reason),Mount_new,Mount_old};

decode_m_equip_mountup_toc(_) ->
	undefined.
encode_m_equip_mountdown_tos(Record) when is_record(Record, m_equip_mountdown_tos) ->
	#m_equip_mountdown_tos{mountid=Mountid,bagid=Bagid,position=Position} = Record,
	case Mountid =:= undefined of
		true ->
				MountidFinal = undefined,
				exit({required_field_not_assigned, m_equip_mountdown_tos, mountid});
		false ->
			MountidFinal = Mountid
	end,
	case Bagid =:= undefined of
		true ->
				BagidFinal = 0;
		false ->
			BagidFinal = Bagid
	end,
	case Position =:= undefined of
		true ->
				PositionFinal = 0;
		false ->
			PositionFinal = Position
	end,

	<<MountidFinal:32/signed,BagidFinal:32/signed,PositionFinal:32/signed>>;
encode_m_equip_mountdown_tos(_) -> 
	<<>>.

decode_m_equip_mountdown_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Mountid:32/signed,Bagid:32/signed,Position:32/signed>> = Bin0,

	{m_equip_mountdown_tos, Mountid,Bagid,Position};

decode_m_equip_mountdown_tos(_) ->
	undefined.
encode_m_equip_mountdown_toc(Record) when is_record(Record, m_equip_mountdown_toc) ->
	#m_equip_mountdown_toc{succ=Succ,reason=Reason,mount=Mount} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Mount =:= undefined of
		true ->
				MountFinal = 0;
		false ->
			MountFinal = Mount
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Mount_bin = encode_p_goods(MountFinal),
	BinLen_mount = erlang:byte_size(Mount_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_mount:32, Mount_bin/binary>>;
encode_m_equip_mountdown_toc(_) -> 
	<<>>.

decode_m_equip_mountdown_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_SubBinSizemount:32, SubBinmount/binary>> = Bin1,
	Mount = decode_p_goods(SubBinmount),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_equip_mountdown_toc, Succ,common_tool:to_list(Reason),Mount};

decode_m_equip_mountdown_toc(_) ->
	undefined.
encode_m_equip_mount_changecolor_tos(Record) when is_record(Record, m_equip_mount_changecolor_tos) ->
	#m_equip_mount_changecolor_tos{mountid=Mountid} = Record,
	case Mountid =:= undefined of
		true ->
				MountidFinal = undefined,
				exit({required_field_not_assigned, m_equip_mount_changecolor_tos, mountid});
		false ->
			MountidFinal = Mountid
	end,

	<<MountidFinal:32/signed>>;
encode_m_equip_mount_changecolor_tos(_) -> 
	<<>>.

decode_m_equip_mount_changecolor_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Mountid:32/signed>> = Bin0,

	{m_equip_mount_changecolor_tos, Mountid};

decode_m_equip_mount_changecolor_tos(_) ->
	undefined.
encode_m_equip_mount_changecolor_toc(Record) when is_record(Record, m_equip_mount_changecolor_toc) ->
	#m_equip_mount_changecolor_toc{succ=Succ,reason=Reason,color=Color,mount=Mount} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Color =:= undefined of
		true ->
				ColorFinal = 0;
		false ->
			ColorFinal = Color
	end,
	case Mount =:= undefined of
		true ->
				MountFinal = 0;
		false ->
			MountFinal = Mount
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Mount_bin = encode_p_goods(MountFinal),
	BinLen_mount = erlang:byte_size(Mount_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,ColorFinal:32/signed,BinLen_mount:32, Mount_bin/binary>>;
encode_m_equip_mount_changecolor_toc(_) -> 
	<<>>.

decode_m_equip_mount_changecolor_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Color:32/signed,_SubBinSizemount:32, SubBinmount/binary>> = Bin1,
	Mount = decode_p_goods(SubBinmount),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_equip_mount_changecolor_toc, Succ,common_tool:to_list(Reason),Color,Mount};

decode_m_equip_mount_changecolor_toc(_) ->
	undefined.
encode_m_equip_mount_renewal_tos(Record) when is_record(Record, m_equip_mount_renewal_tos) ->
	#m_equip_mount_renewal_tos{op_type=Op_type,mount_id=Mount_id,mount_type_id=Mount_type_id,mount_pos=Mount_pos,renewal_type=Renewal_type} = Record,
	case Op_type =:= undefined of
		true ->
				Op_typeFinal = 0;
		false ->
			Op_typeFinal = Op_type
	end,
	case Mount_id =:= undefined of
		true ->
				Mount_idFinal = 0;
		false ->
			Mount_idFinal = Mount_id
	end,
	case Mount_type_id =:= undefined of
		true ->
				Mount_type_idFinal = 0;
		false ->
			Mount_type_idFinal = Mount_type_id
	end,
	case Mount_pos =:= undefined of
		true ->
				Mount_posFinal = 0;
		false ->
			Mount_posFinal = Mount_pos
	end,
	case Renewal_type =:= undefined of
		true ->
				Renewal_typeFinal = 0;
		false ->
			Renewal_typeFinal = Renewal_type
	end,

	<<Op_typeFinal:32/signed,Mount_idFinal:32/signed,Mount_type_idFinal:32/signed,Mount_posFinal:32/signed,Renewal_typeFinal:32/signed>>;
encode_m_equip_mount_renewal_tos(_) -> 
	<<>>.

decode_m_equip_mount_renewal_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Op_type:32/signed,Mount_id:32/signed,Mount_type_id:32/signed,Mount_pos:32/signed,Renewal_type:32/signed>> = Bin0,

	{m_equip_mount_renewal_tos, Op_type,Mount_id,Mount_type_id,Mount_pos,Renewal_type};

decode_m_equip_mount_renewal_tos(_) ->
	undefined.
encode_m_equip_mount_renewal_toc(Record) when is_record(Record, m_equip_mount_renewal_toc) ->
	#m_equip_mount_renewal_toc{succ=Succ,reason=Reason,reason_code=Reason_code,op_type=Op_type,mount_id=Mount_id,mount_type_id=Mount_type_id,mount_pos=Mount_pos,renewal_type=Renewal_type,end_time=End_time,op_fee=Op_fee,mount=Mount,renewal_confs=Renewal_confs,all_gold=All_gold} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Reason_code =:= undefined of
		true ->
				Reason_codeFinal = 0;
		false ->
			Reason_codeFinal = Reason_code
	end,
	case Op_type =:= undefined of
		true ->
				Op_typeFinal = 0;
		false ->
			Op_typeFinal = Op_type
	end,
	case Mount_id =:= undefined of
		true ->
				Mount_idFinal = 0;
		false ->
			Mount_idFinal = Mount_id
	end,
	case Mount_type_id =:= undefined of
		true ->
				Mount_type_idFinal = 0;
		false ->
			Mount_type_idFinal = Mount_type_id
	end,
	case Mount_pos =:= undefined of
		true ->
				Mount_posFinal = 0;
		false ->
			Mount_posFinal = Mount_pos
	end,
	case Renewal_type =:= undefined of
		true ->
				Renewal_typeFinal = 0;
		false ->
			Renewal_typeFinal = Renewal_type
	end,
	case End_time =:= undefined of
		true ->
				End_timeFinal = 0;
		false ->
			End_timeFinal = End_time
	end,
	case Op_fee =:= undefined of
		true ->
				Op_feeFinal = 0;
		false ->
			Op_feeFinal = Op_fee
	end,
	case Mount =:= undefined of
		true ->
				MountFinal = 0;
		false ->
			MountFinal = Mount
	end,
	case Renewal_confs =:= undefined of
		true ->
			Renewal_confsFinal = [];
		false ->
			Renewal_confsFinal = Renewal_confs
	end,
	case All_gold =:= undefined of
		true ->
				All_goldFinal = 0;
		false ->
			All_goldFinal = All_gold
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Mount_bin = encode_p_goods(MountFinal),
	BinLen_mount = erlang:byte_size(Mount_bin),
	Renewal_confs_bin = encode_p_equip_mount_renewals(Renewal_confsFinal, <<>>),
	SizeRenewal_confsFinal = erlang:length(Renewal_confsFinal),
	BinLen_renewal_confs = erlang:byte_size(Renewal_confs_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Reason_codeFinal:32/signed,Op_typeFinal:32/signed,Mount_idFinal:32/signed,Mount_type_idFinal:32/signed,Mount_posFinal:32/signed,Renewal_typeFinal:32/signed,End_timeFinal:32/signed,Op_feeFinal:32/signed,BinLen_mount:32, Mount_bin/binary,SizeRenewal_confsFinal:16, BinLen_renewal_confs:32, Renewal_confs_bin/binary,All_goldFinal:32/signed>>;
encode_m_equip_mount_renewal_toc(_) -> 
	<<>>.

decode_m_equip_mount_renewal_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Reason_code:32/signed,Op_type:32/signed,Mount_id:32/signed,Mount_type_id:32/signed,Mount_pos:32/signed,Renewal_type:32/signed,End_time:32/signed,Op_fee:32/signed,SubBinSizemount:32, Bin2/binary>> = Bin1,
	<<SubBinmount:SubBinSizemount/binary, Bin3/binary>> = Bin2,
	Mount = decode_p_goods(SubBinmount),
	<<_Sizerenewal_confs:16, BinLenrenewal_confs:32, Bin4/binary>> = Bin3,
	<<SubBinrenewal_confs:BinLenrenewal_confs/binary, Bin5/binary>> = Bin4, 
	Renewal_confs = lists:reverse(decode_p_equip_mount_renewals(SubBinrenewal_confs, [])),
	<<All_gold:32/signed>> = Bin5,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_equip_mount_renewal_toc, Succ,common_tool:to_list(Reason),Reason_code,Op_type,Mount_id,Mount_type_id,Mount_pos,Renewal_type,End_time,Op_fee,Mount,Renewal_confs,All_gold};

decode_m_equip_mount_renewal_toc(_) ->
	undefined.
encode_m_equip_loaded_list_tos(Record) when is_record(Record, m_equip_loaded_list_tos) ->
	#m_equip_loaded_list_tos{roleid=Roleid} = Record,
	case Roleid =:= undefined of
		true ->
				RoleidFinal = undefined,
				exit({required_field_not_assigned, m_equip_loaded_list_tos, roleid});
		false ->
			RoleidFinal = Roleid
	end,

	<<RoleidFinal:32/signed>>;
encode_m_equip_loaded_list_tos(_) -> 
	<<>>.

decode_m_equip_loaded_list_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Roleid:32/signed>> = Bin0,

	{m_equip_loaded_list_tos, Roleid};

decode_m_equip_loaded_list_tos(_) ->
	undefined.
encode_m_equip_loaded_list_toc(Record) when is_record(Record, m_equip_loaded_list_toc) ->
	#m_equip_loaded_list_toc{roleid=Roleid,equips=Equips} = Record,
	case Roleid =:= undefined of
		true ->
				RoleidFinal = undefined,
				exit({required_field_not_assigned, m_equip_loaded_list_toc, roleid});
		false ->
			RoleidFinal = Roleid
	end,
	case Equips =:= undefined of
		true ->
			EquipsFinal = [];
		false ->
			EquipsFinal = Equips
	end,
	Equips_bin = encode_p_goodss(EquipsFinal, <<>>),
	SizeEquipsFinal = erlang:length(EquipsFinal),
	BinLen_equips = erlang:byte_size(Equips_bin),

	<<RoleidFinal:32/signed,SizeEquipsFinal:16, BinLen_equips:32, Equips_bin/binary>>;
encode_m_equip_loaded_list_toc(_) -> 
	<<>>.

decode_m_equip_loaded_list_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Roleid:32/signed,_Sizeequips:16, _BinLenequips:32, SubBinequips/binary>> = Bin0,
	Equips = lists:reverse(decode_p_goodss(SubBinequips, [])),

	{m_equip_loaded_list_toc, Roleid,Equips};

decode_m_equip_loaded_list_toc(_) ->
	undefined.
encode_m_equip_load_tos(Record) when is_record(Record, m_equip_load_tos) ->
	#m_equip_load_tos{equip_slot_num=Equip_slot_num,equipid=Equipid} = Record,
	case Equip_slot_num =:= undefined of
		true ->
				Equip_slot_numFinal = undefined,
				exit({required_field_not_assigned, m_equip_load_tos, equip_slot_num});
		false ->
			Equip_slot_numFinal = Equip_slot_num
	end,
	case Equipid =:= undefined of
		true ->
				EquipidFinal = undefined,
				exit({required_field_not_assigned, m_equip_load_tos, equipid});
		false ->
			EquipidFinal = Equipid
	end,

	<<Equip_slot_numFinal:32/signed,EquipidFinal:32/signed>>;
encode_m_equip_load_tos(_) -> 
	<<>>.

decode_m_equip_load_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Equip_slot_num:32/signed,Equipid:32/signed>> = Bin0,

	{m_equip_load_tos, Equip_slot_num,Equipid};

decode_m_equip_load_tos(_) ->
	undefined.
encode_m_equip_load_toc(Record) when is_record(Record, m_equip_load_toc) ->
	#m_equip_load_toc{succ=Succ,reason=Reason,equip1=Equip1,equip2=Equip2} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Equip1 =:= undefined of
		true ->
				Equip1Final = 0;
		false ->
			Equip1Final = Equip1
	end,
	case Equip2 =:= undefined of
		true ->
				Equip2Final = 0;
		false ->
			Equip2Final = Equip2
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Equip1_bin = encode_p_goods(Equip1Final),
	BinLen_equip1 = erlang:byte_size(Equip1_bin),
	Equip2_bin = encode_p_goods(Equip2Final),
	BinLen_equip2 = erlang:byte_size(Equip2_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_equip1:32, Equip1_bin/binary,BinLen_equip2:32, Equip2_bin/binary>>;
encode_m_equip_load_toc(_) -> 
	<<>>.

decode_m_equip_load_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,SubBinSizeequip1:32, Bin2/binary>> = Bin1,
	<<SubBinequip1:SubBinSizeequip1/binary, Bin3/binary>> = Bin2,
	Equip1 = decode_p_goods(SubBinequip1),
	<<_SubBinSizeequip2:32, SubBinequip2/binary>> = Bin3,
	Equip2 = decode_p_goods(SubBinequip2),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_equip_load_toc, Succ,common_tool:to_list(Reason),Equip1,Equip2};

decode_m_equip_load_toc(_) ->
	undefined.
encode_m_equip_unload_tos(Record) when is_record(Record, m_equip_unload_tos) ->
	#m_equip_unload_tos{equipid=Equipid,bagid=Bagid,position=Position} = Record,
	case Equipid =:= undefined of
		true ->
				EquipidFinal = undefined,
				exit({required_field_not_assigned, m_equip_unload_tos, equipid});
		false ->
			EquipidFinal = Equipid
	end,
	case Bagid =:= undefined of
		true ->
				BagidFinal = 0;
		false ->
			BagidFinal = Bagid
	end,
	case Position =:= undefined of
		true ->
				PositionFinal = 0;
		false ->
			PositionFinal = Position
	end,

	<<EquipidFinal:32/signed,BagidFinal:32/signed,PositionFinal:32/signed>>;
encode_m_equip_unload_tos(_) -> 
	<<>>.

decode_m_equip_unload_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Equipid:32/signed,Bagid:32/signed,Position:32/signed>> = Bin0,

	{m_equip_unload_tos, Equipid,Bagid,Position};

decode_m_equip_unload_tos(_) ->
	undefined.
encode_m_equip_unload_toc(Record) when is_record(Record, m_equip_unload_toc) ->
	#m_equip_unload_toc{succ=Succ,reason=Reason,equip=Equip} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Equip =:= undefined of
		true ->
				EquipFinal = 0;
		false ->
			EquipFinal = Equip
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Equip_bin = encode_p_goods(EquipFinal),
	BinLen_equip = erlang:byte_size(Equip_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_equip:32, Equip_bin/binary>>;
encode_m_equip_unload_toc(_) -> 
	<<>>.

decode_m_equip_unload_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_SubBinSizeequip:32, SubBinequip/binary>> = Bin1,
	Equip = decode_p_goods(SubBinequip),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_equip_unload_toc, Succ,common_tool:to_list(Reason),Equip};

decode_m_equip_unload_toc(_) ->
	undefined.
encode_m_equip_swap_tos(Record) when is_record(Record, m_equip_swap_tos) ->
	#m_equip_swap_tos{equipid1=Equipid1,position2=Position2} = Record,
	case Equipid1 =:= undefined of
		true ->
				Equipid1Final = undefined,
				exit({required_field_not_assigned, m_equip_swap_tos, equipid1});
		false ->
			Equipid1Final = Equipid1
	end,
	case Position2 =:= undefined of
		true ->
				Position2Final = undefined,
				exit({required_field_not_assigned, m_equip_swap_tos, position2});
		false ->
			Position2Final = Position2
	end,

	<<Equipid1Final:32/signed,Position2Final:32/signed>>;
encode_m_equip_swap_tos(_) -> 
	<<>>.

decode_m_equip_swap_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Equipid1:32/signed,Position2:32/signed>> = Bin0,

	{m_equip_swap_tos, Equipid1,Position2};

decode_m_equip_swap_tos(_) ->
	undefined.
encode_m_equip_swap_toc(Record) when is_record(Record, m_equip_swap_toc) ->
	#m_equip_swap_toc{succ=Succ,reason=Reason,equip1=Equip1,equip2=Equip2} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Equip1 =:= undefined of
		true ->
				Equip1Final = 0;
		false ->
			Equip1Final = Equip1
	end,
	case Equip2 =:= undefined of
		true ->
				Equip2Final = 0;
		false ->
			Equip2Final = Equip2
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Equip1_bin = encode_p_goods(Equip1Final),
	BinLen_equip1 = erlang:byte_size(Equip1_bin),
	Equip2_bin = encode_p_goods(Equip2Final),
	BinLen_equip2 = erlang:byte_size(Equip2_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_equip1:32, Equip1_bin/binary,BinLen_equip2:32, Equip2_bin/binary>>;
encode_m_equip_swap_toc(_) -> 
	<<>>.

decode_m_equip_swap_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,SubBinSizeequip1:32, Bin2/binary>> = Bin1,
	<<SubBinequip1:SubBinSizeequip1/binary, Bin3/binary>> = Bin2,
	Equip1 = decode_p_goods(SubBinequip1),
	<<_SubBinSizeequip2:32, SubBinequip2/binary>> = Bin3,
	Equip2 = decode_p_goods(SubBinequip2),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_equip_swap_toc, Succ,common_tool:to_list(Reason),Equip1,Equip2};

decode_m_equip_swap_toc(_) ->
	undefined.
encode_m_equip_fix_tos(Record) when is_record(Record, m_equip_fix_tos) ->
	#m_equip_fix_tos{fix_type=Fix_type,equip_id=Equip_id} = Record,
	case Fix_type =:= undefined of
		true ->
				Fix_typeFinal = undefined,
				exit({required_field_not_assigned, m_equip_fix_tos, fix_type});
		false ->
		case Fix_type of
			true ->
				Fix_typeFinal = 1;
			false ->
				Fix_typeFinal = 0
		end
	end,
	case Equip_id =:= undefined of
		true ->
				Equip_idFinal = undefined,
				exit({required_field_not_assigned, m_equip_fix_tos, equip_id});
		false ->
			Equip_idFinal = Equip_id
	end,

	<<Fix_typeFinal:8,Equip_idFinal:32/signed>>;
encode_m_equip_fix_tos(_) -> 
	<<>>.

decode_m_equip_fix_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Fix_typeTmp:8,Equip_id:32/signed>> = Bin0,
case Fix_typeTmp of 
	1 -> 
		Fix_type = true;
	_ ->
		Fix_type = false
end,

	{m_equip_fix_tos, Fix_type,Equip_id};

decode_m_equip_fix_tos(_) ->
	undefined.
encode_m_equip_fix_toc(Record) when is_record(Record, m_equip_fix_toc) ->
	#m_equip_fix_toc{succ=Succ,reason=Reason,equip_list=Equip_list,silver=Silver,bind_silver=Bind_silver} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Equip_list =:= undefined of
		true ->
			Equip_listFinal = [];
		false ->
			Equip_listFinal = Equip_list
	end,
	case Silver =:= undefined of
		true ->
				SilverFinal = 0;
		false ->
			SilverFinal = Silver
	end,
	case Bind_silver =:= undefined of
		true ->
				Bind_silverFinal = 0;
		false ->
			Bind_silverFinal = Bind_silver
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Equip_list_bin = encode_p_equip_endurance_infos(Equip_listFinal, <<>>),
	SizeEquip_listFinal = erlang:length(Equip_listFinal),
	BinLen_equip_list = erlang:byte_size(Equip_list_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,SizeEquip_listFinal:16, BinLen_equip_list:32, Equip_list_bin/binary,SilverFinal:32/signed,Bind_silverFinal:32/signed>>;
encode_m_equip_fix_toc(_) -> 
	<<>>.

decode_m_equip_fix_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_Sizeequip_list:16, BinLenequip_list:32, Bin2/binary>> = Bin1,
	<<SubBinequip_list:BinLenequip_list/binary, Bin3/binary>> = Bin2, 
	Equip_list = lists:reverse(decode_p_equip_endurance_infos(SubBinequip_list, [])),
	<<Silver:32/signed,Bind_silver:32/signed>> = Bin3,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_equip_fix_toc, Succ,common_tool:to_list(Reason),Equip_list,Silver,Bind_silver};

decode_m_equip_fix_toc(_) ->
	undefined.
encode_m_equip_endurance_change_toc(Record) when is_record(Record, m_equip_endurance_change_toc) ->
	#m_equip_endurance_change_toc{equip_list=Equip_list} = Record,
	case Equip_list =:= undefined of
		true ->
			Equip_listFinal = [];
		false ->
			Equip_listFinal = Equip_list
	end,
	Equip_list_bin = encode_p_equip_endurance_infos(Equip_listFinal, <<>>),
	SizeEquip_listFinal = erlang:length(Equip_listFinal),
	BinLen_equip_list = erlang:byte_size(Equip_list_bin),

	<<SizeEquip_listFinal:16, BinLen_equip_list:32, Equip_list_bin/binary>>;
encode_m_equip_endurance_change_toc(_) -> 
	<<>>.

decode_m_equip_endurance_change_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizeequip_list:16, _BinLenequip_list:32, SubBinequip_list/binary>> = Bin0,
	Equip_list = lists:reverse(decode_p_equip_endurance_infos(SubBinequip_list, [])),

	{m_equip_endurance_change_toc, Equip_list};

decode_m_equip_endurance_change_toc(_) ->
	undefined.
encode_p_equip_endurance_info(Record) when is_record(Record, p_equip_endurance_info) ->
	#p_equip_endurance_info{equip_id=Equip_id,num=Num,max_num=Max_num} = Record,
	case Equip_id =:= undefined of
		true ->
				Equip_idFinal = undefined,
				exit({required_field_not_assigned, p_equip_endurance_info, equip_id});
		false ->
			Equip_idFinal = Equip_id
	end,
	case Num =:= undefined of
		true ->
				NumFinal = undefined,
				exit({required_field_not_assigned, p_equip_endurance_info, num});
		false ->
			NumFinal = Num
	end,
	case Max_num =:= undefined of
		true ->
				Max_numFinal = undefined,
				exit({required_field_not_assigned, p_equip_endurance_info, max_num});
		false ->
			Max_numFinal = Max_num
	end,

	<<Equip_idFinal:32/signed,NumFinal:32/signed,Max_numFinal:32/signed>>;
encode_p_equip_endurance_info(_) -> 
	<<>>.

decode_p_equip_endurance_info(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Equip_id:32/signed,Num:32/signed,Max_num:32/signed>> = Bin0,

	{p_equip_endurance_info, Equip_id,Num,Max_num};

decode_p_equip_endurance_info(_) ->
	undefined.
encode_m_item_use_tos(Record) when is_record(Record, m_item_use_tos) ->
	#m_item_use_tos{itemid=Itemid,usenum=Usenum,effect_id=Effect_id} = Record,
	case Itemid =:= undefined of
		true ->
				ItemidFinal = undefined,
				exit({required_field_not_assigned, m_item_use_tos, itemid});
		false ->
			ItemidFinal = Itemid
	end,
	case Usenum =:= undefined of
		true ->
				UsenumFinal = undefined,
				exit({required_field_not_assigned, m_item_use_tos, usenum});
		false ->
			UsenumFinal = Usenum
	end,
	case Effect_id =:= undefined of
		true ->
				Effect_idFinal = undefined,
				exit({required_field_not_assigned, m_item_use_tos, effect_id});
		false ->
			Effect_idFinal = Effect_id
	end,

	<<ItemidFinal:32/signed,UsenumFinal:32/signed,Effect_idFinal:32/signed>>;
encode_m_item_use_tos(_) -> 
	<<>>.

decode_m_item_use_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Itemid:32/signed,Usenum:32/signed,Effect_id:32/signed>> = Bin0,

	{m_item_use_tos, Itemid,Usenum,Effect_id};

decode_m_item_use_tos(_) ->
	undefined.
encode_m_item_use_toc(Record) when is_record(Record, m_item_use_toc) ->
	#m_item_use_toc{succ=Succ,reason=Reason,itemid=Itemid,rest=Rest} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
			ReasonFinal = [];
		false ->
			ReasonFinal = Reason
	end,
	case Itemid =:= undefined of
		true ->
				ItemidFinal = 0;
		false ->
			ItemidFinal = Itemid
	end,
	case Rest =:= undefined of
		true ->
				RestFinal = 0;
		false ->
			RestFinal = Rest
	end,
	Reason_bin = encode_strings(ReasonFinal, <<>>),
	SizeReasonFinal = erlang:length(ReasonFinal),
	BinLen_reason = erlang:byte_size(Reason_bin),

	<<SuccFinal:8,SizeReasonFinal:16, BinLen_reason:32, Reason_bin/binary,ItemidFinal:32/signed,RestFinal:32/signed>>;
encode_m_item_use_toc(_) -> 
	<<>>.

decode_m_item_use_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,_Sizereason:16, BinLenreason:32, Bin1/binary>> = Bin0,
	<<SubBinreason:BinLenreason/binary, Bin2/binary>> = Bin1, 
	Reason = lists:reverse(decode_strings(SubBinreason, [])),
	<<Itemid:32/signed,Rest:32/signed>> = Bin2,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_item_use_toc, Succ,Reason,Itemid,Rest};

decode_m_item_use_toc(_) ->
	undefined.
encode_m_item_use_special_tos(Record) when is_record(Record, m_item_use_special_tos) ->
	#m_item_use_special_tos{item_id=Item_id} = Record,
	case Item_id =:= undefined of
		true ->
				Item_idFinal = 0;
		false ->
			Item_idFinal = Item_id
	end,

	<<Item_idFinal:32/signed>>;
encode_m_item_use_special_tos(_) -> 
	<<>>.

decode_m_item_use_special_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Item_id:32/signed>> = Bin0,

	{m_item_use_special_tos, Item_id};

decode_m_item_use_special_tos(_) ->
	undefined.
encode_m_item_use_special_toc(Record) when is_record(Record, m_item_use_special_toc) ->
	#m_item_use_special_toc{item_id=Item_id,succ=Succ,reason=Reason,reason_code=Reason_code,use_status=Use_status,total_progress=Total_progress,use_effect=Use_effect,effects=Effects,new_goods_list=New_goods_list,progress_desc=Progress_desc} = Record,
	case Item_id =:= undefined of
		true ->
				Item_idFinal = 0;
		false ->
			Item_idFinal = Item_id
	end,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Reason_code =:= undefined of
		true ->
				Reason_codeFinal = 0;
		false ->
			Reason_codeFinal = Reason_code
	end,
	case Use_status =:= undefined of
		true ->
				Use_statusFinal = 0;
		false ->
			Use_statusFinal = Use_status
	end,
	case Total_progress =:= undefined of
		true ->
				Total_progressFinal = 0;
		false ->
			Total_progressFinal = Total_progress
	end,
	case Use_effect =:= undefined of
		true ->
				Use_effectFinal = 0;
		false ->
			Use_effectFinal = Use_effect
	end,
	case Effects =:= undefined of
		true ->
			EffectsFinal = [];
		false ->
			EffectsFinal = Effects
	end,
	case New_goods_list =:= undefined of
		true ->
			New_goods_listFinal = [];
		false ->
			New_goods_listFinal = New_goods_list
	end,
	case Progress_desc =:= undefined of
		true ->
				Progress_descFinal = <<>>;
		false ->
			Progress_descFinal = Progress_desc
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Effects_bin = encode_p_item_effects(EffectsFinal, <<>>),
	SizeEffectsFinal = erlang:length(EffectsFinal),
	BinLen_effects = erlang:byte_size(Effects_bin),
	New_goods_list_bin = encode_p_goodss(New_goods_listFinal, <<>>),
	SizeNew_goods_listFinal = erlang:length(New_goods_listFinal),
	BinLen_new_goods_list = erlang:byte_size(New_goods_list_bin),
	Progress_desc2 = common_tool:to_binary(Progress_descFinal),
	Progress_descLen = erlang:byte_size(Progress_desc2),

	<<Item_idFinal:32/signed,SuccFinal:8,ReasonLen:16, Reason2/binary,Reason_codeFinal:32/signed,Use_statusFinal:32/signed,Total_progressFinal:32/signed,Use_effectFinal:32/signed,SizeEffectsFinal:16, BinLen_effects:32, Effects_bin/binary,SizeNew_goods_listFinal:16, BinLen_new_goods_list:32, New_goods_list_bin/binary,Progress_descLen:16, Progress_desc2/binary>>;
encode_m_item_use_special_toc(_) -> 
	<<>>.

decode_m_item_use_special_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Item_id:32/signed,SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Reason_code:32/signed,Use_status:32/signed,Total_progress:32/signed,Use_effect:32/signed,_Sizeeffects:16, BinLeneffects:32, Bin2/binary>> = Bin1,
	<<SubBineffects:BinLeneffects/binary, Bin3/binary>> = Bin2, 
	Effects = lists:reverse(decode_p_item_effects(SubBineffects, [])),
	<<_Sizenew_goods_list:16, BinLennew_goods_list:32, Bin4/binary>> = Bin3,
	<<SubBinnew_goods_list:BinLennew_goods_list/binary, Bin5/binary>> = Bin4, 
	New_goods_list = lists:reverse(decode_p_goodss(SubBinnew_goods_list, [])),
	<<Progress_descLen:16, Bin6/binary>> = Bin5,
	<<Progress_desc:Progress_descLen/binary>> = Bin6,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_item_use_special_toc, Item_id,Succ,common_tool:to_list(Reason),Reason_code,Use_status,Total_progress,Use_effect,Effects,New_goods_list,common_tool:to_list(Progress_desc)};

decode_m_item_use_special_toc(_) ->
	undefined.
encode_m_item_trace_tos(Record) when is_record(Record, m_item_trace_tos) ->
	#m_item_trace_tos{target_name=Target_name,goods_id=Goods_id} = Record,
	case Target_name =:= undefined of
		true ->
				Target_nameFinal = undefined,
				exit({required_field_not_assigned, m_item_trace_tos, target_name});
		false ->
			Target_nameFinal = Target_name
	end,
	case Goods_id =:= undefined of
		true ->
				Goods_idFinal = undefined,
				exit({required_field_not_assigned, m_item_trace_tos, goods_id});
		false ->
			Goods_idFinal = Goods_id
	end,
	Target_name2 = common_tool:to_binary(Target_nameFinal),
	Target_nameLen = erlang:byte_size(Target_name2),

	<<Target_nameLen:16, Target_name2/binary,Goods_idFinal:32/signed>>;
encode_m_item_trace_tos(_) -> 
	<<>>.

decode_m_item_trace_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Target_nameLen:16, Bin1/binary>> = Bin0,
	<<Target_name:Target_nameLen/binary,Goods_id:32/signed>> = Bin1,

	{m_item_trace_tos, common_tool:to_list(Target_name),Goods_id};

decode_m_item_trace_tos(_) ->
	undefined.
encode_m_item_trace_toc(Record) when is_record(Record, m_item_trace_toc) ->
	#m_item_trace_toc{succ=Succ,reason=Reason,goods_id=Goods_id,goods_num=Goods_num,target_name=Target_name,target_mapid=Target_mapid,target_tx=Target_tx,target_ty=Target_ty} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Goods_id =:= undefined of
		true ->
				Goods_idFinal = 0;
		false ->
			Goods_idFinal = Goods_id
	end,
	case Goods_num =:= undefined of
		true ->
				Goods_numFinal = 0;
		false ->
			Goods_numFinal = Goods_num
	end,
	case Target_name =:= undefined of
		true ->
				Target_nameFinal = <<>>;
		false ->
			Target_nameFinal = Target_name
	end,
	case Target_mapid =:= undefined of
		true ->
				Target_mapidFinal = 0;
		false ->
			Target_mapidFinal = Target_mapid
	end,
	case Target_tx =:= undefined of
		true ->
				Target_txFinal = 0;
		false ->
			Target_txFinal = Target_tx
	end,
	case Target_ty =:= undefined of
		true ->
				Target_tyFinal = 0;
		false ->
			Target_tyFinal = Target_ty
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Target_name2 = common_tool:to_binary(Target_nameFinal),
	Target_nameLen = erlang:byte_size(Target_name2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Goods_idFinal:32/signed,Goods_numFinal:32/signed,Target_nameLen:16, Target_name2/binary,Target_mapidFinal:32/signed,Target_txFinal:32/signed,Target_tyFinal:32/signed>>;
encode_m_item_trace_toc(_) -> 
	<<>>.

decode_m_item_trace_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Goods_id:32/signed,Goods_num:32/signed,Target_nameLen:16, Bin2/binary>> = Bin1,
	<<Target_name:Target_nameLen/binary,Target_mapid:32/signed,Target_tx:32/signed,Target_ty:32/signed>> = Bin2,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_item_trace_toc, Succ,common_tool:to_list(Reason),Goods_id,Goods_num,common_tool:to_list(Target_name),Target_mapid,Target_tx,Target_ty};

decode_m_item_trace_toc(_) ->
	undefined.
encode_m_item_batch_sell_tos(Record) when is_record(Record, m_item_batch_sell_tos) ->
	#m_item_batch_sell_tos{id_list=Id_list} = Record,
	case Id_list =:= undefined of
		true ->
			Id_listFinal = [];
		false ->
			Id_listFinal = Id_list
	end,
	Id_list_bin = encode_int32s(Id_listFinal, <<>>),
	SizeId_listFinal = erlang:length(Id_listFinal),
	BinLen_id_list = erlang:byte_size(Id_list_bin),

	<<SizeId_listFinal:16, BinLen_id_list:32, Id_list_bin/binary>>;
encode_m_item_batch_sell_tos(_) -> 
	<<>>.

decode_m_item_batch_sell_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizeid_list:16, _BinLenid_list:32, SubBinid_list/binary>> = Bin0,
	Id_list = lists:reverse(decode_int32s(SubBinid_list, [])),

	{m_item_batch_sell_tos, Id_list};

decode_m_item_batch_sell_tos(_) ->
	undefined.
encode_m_item_batch_sell_toc(Record) when is_record(Record, m_item_batch_sell_toc) ->
	#m_item_batch_sell_toc{succ=Succ,reason=Reason,silver=Silver,bind_silver=Bind_silver} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Silver =:= undefined of
		true ->
				SilverFinal = 0;
		false ->
			SilverFinal = Silver
	end,
	case Bind_silver =:= undefined of
		true ->
				Bind_silverFinal = 0;
		false ->
			Bind_silverFinal = Bind_silver
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,SilverFinal:32/signed,Bind_silverFinal:32/signed>>;
encode_m_item_batch_sell_toc(_) -> 
	<<>>.

decode_m_item_batch_sell_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Silver:32/signed,Bind_silver:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_item_batch_sell_toc, Succ,common_tool:to_list(Reason),Silver,Bind_silver};

decode_m_item_batch_sell_toc(_) ->
	undefined.
encode_m_item_new_extend_bag_toc(Record) when is_record(Record, m_item_new_extend_bag_toc) ->
	#m_item_new_extend_bag_toc{bagid=Bagid,rows=Rows,columns=Columns,typeid=Typeid,grid_number=Grid_number,main_rows=Main_rows,main_columns=Main_columns,main_grid_number=Main_grid_number} = Record,
	case Bagid =:= undefined of
		true ->
				BagidFinal = undefined,
				exit({required_field_not_assigned, m_item_new_extend_bag_toc, bagid});
		false ->
			BagidFinal = Bagid
	end,
	case Rows =:= undefined of
		true ->
				RowsFinal = undefined,
				exit({required_field_not_assigned, m_item_new_extend_bag_toc, rows});
		false ->
			RowsFinal = Rows
	end,
	case Columns =:= undefined of
		true ->
				ColumnsFinal = undefined,
				exit({required_field_not_assigned, m_item_new_extend_bag_toc, columns});
		false ->
			ColumnsFinal = Columns
	end,
	case Typeid =:= undefined of
		true ->
				TypeidFinal = undefined,
				exit({required_field_not_assigned, m_item_new_extend_bag_toc, typeid});
		false ->
			TypeidFinal = Typeid
	end,
	case Grid_number =:= undefined of
		true ->
				Grid_numberFinal = undefined,
				exit({required_field_not_assigned, m_item_new_extend_bag_toc, grid_number});
		false ->
			Grid_numberFinal = Grid_number
	end,
	case Main_rows =:= undefined of
		true ->
				Main_rowsFinal = undefined,
				exit({required_field_not_assigned, m_item_new_extend_bag_toc, main_rows});
		false ->
			Main_rowsFinal = Main_rows
	end,
	case Main_columns =:= undefined of
		true ->
				Main_columnsFinal = undefined,
				exit({required_field_not_assigned, m_item_new_extend_bag_toc, main_columns});
		false ->
			Main_columnsFinal = Main_columns
	end,
	case Main_grid_number =:= undefined of
		true ->
				Main_grid_numberFinal = undefined,
				exit({required_field_not_assigned, m_item_new_extend_bag_toc, main_grid_number});
		false ->
			Main_grid_numberFinal = Main_grid_number
	end,

	<<BagidFinal:32/signed,RowsFinal:32/signed,ColumnsFinal:32/signed,TypeidFinal:32/signed,Grid_numberFinal:32/signed,Main_rowsFinal:32/signed,Main_columnsFinal:32/signed,Main_grid_numberFinal:32/signed>>;
encode_m_item_new_extend_bag_toc(_) -> 
	<<>>.

decode_m_item_new_extend_bag_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Bagid:32/signed,Rows:32/signed,Columns:32/signed,Typeid:32/signed,Grid_number:32/signed,Main_rows:32/signed,Main_columns:32/signed,Main_grid_number:32/signed>> = Bin0,

	{m_item_new_extend_bag_toc, Bagid,Rows,Columns,Typeid,Grid_number,Main_rows,Main_columns,Main_grid_number};

decode_m_item_new_extend_bag_toc(_) ->
	undefined.
encode_m_item_shrink_bag_tos(Record) when is_record(Record, m_item_shrink_bag_tos) ->
	#m_item_shrink_bag_tos{bagid=Bagid,bag=Bag,position=Position} = Record,
	case Bagid =:= undefined of
		true ->
				BagidFinal = undefined,
				exit({required_field_not_assigned, m_item_shrink_bag_tos, bagid});
		false ->
			BagidFinal = Bagid
	end,
	case Bag =:= undefined of
		true ->
				BagFinal = 0;
		false ->
			BagFinal = Bag
	end,
	case Position =:= undefined of
		true ->
				PositionFinal = 0;
		false ->
			PositionFinal = Position
	end,

	<<BagidFinal:32/signed,BagFinal:32/signed,PositionFinal:32/signed>>;
encode_m_item_shrink_bag_tos(_) -> 
	<<>>.

decode_m_item_shrink_bag_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Bagid:32/signed,Bag:32/signed,Position:32/signed>> = Bin0,

	{m_item_shrink_bag_tos, Bagid,Bag,Position};

decode_m_item_shrink_bag_tos(_) ->
	undefined.
encode_m_item_shrink_bag_toc(Record) when is_record(Record, m_item_shrink_bag_toc) ->
	#m_item_shrink_bag_toc{succ=Succ,reason=Reason,item=Item,bagid=Bagid,rows=Rows,columns=Columns,grid_number=Grid_number} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_item_shrink_bag_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Item =:= undefined of
		true ->
				ItemFinal = 0;
		false ->
			ItemFinal = Item
	end,
	case Bagid =:= undefined of
		true ->
				BagidFinal = 0;
		false ->
			BagidFinal = Bagid
	end,
	case Rows =:= undefined of
		true ->
				RowsFinal = 0;
		false ->
			RowsFinal = Rows
	end,
	case Columns =:= undefined of
		true ->
				ColumnsFinal = 0;
		false ->
			ColumnsFinal = Columns
	end,
	case Grid_number =:= undefined of
		true ->
				Grid_numberFinal = 0;
		false ->
			Grid_numberFinal = Grid_number
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Item_bin = encode_p_goods(ItemFinal),
	BinLen_item = erlang:byte_size(Item_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_item:32, Item_bin/binary,BagidFinal:32/signed,RowsFinal:32/signed,ColumnsFinal:32/signed,Grid_numberFinal:32/signed>>;
encode_m_item_shrink_bag_toc(_) -> 
	<<>>.

decode_m_item_shrink_bag_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,SubBinSizeitem:32, Bin2/binary>> = Bin1,
	<<SubBinitem:SubBinSizeitem/binary, Bin3/binary>> = Bin2,
	Item = decode_p_goods(SubBinitem),
	<<Bagid:32/signed,Rows:32/signed,Columns:32/signed,Grid_number:32/signed>> = Bin3,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_item_shrink_bag_toc, Succ,common_tool:to_list(Reason),Item,Bagid,Rows,Columns,Grid_number};

decode_m_item_shrink_bag_toc(_) ->
	undefined.
encode_m_goods_inbag_list_tos(Record) when is_record(Record, m_goods_inbag_list_tos) ->
	#m_goods_inbag_list_tos{bagid=Bagid} = Record,
	case Bagid =:= undefined of
		true ->
				BagidFinal = undefined,
				exit({required_field_not_assigned, m_goods_inbag_list_tos, bagid});
		false ->
			BagidFinal = Bagid
	end,

	<<BagidFinal:32/signed>>;
encode_m_goods_inbag_list_tos(_) -> 
	<<>>.

decode_m_goods_inbag_list_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Bagid:32/signed>> = Bin0,

	{m_goods_inbag_list_tos, Bagid};

decode_m_goods_inbag_list_tos(_) ->
	undefined.
encode_m_goods_inbag_list_toc(Record) when is_record(Record, m_goods_inbag_list_toc) ->
	#m_goods_inbag_list_toc{bagid=Bagid,goods=Goods} = Record,
	case Bagid =:= undefined of
		true ->
				BagidFinal = undefined,
				exit({required_field_not_assigned, m_goods_inbag_list_toc, bagid});
		false ->
			BagidFinal = Bagid
	end,
	case Goods =:= undefined of
		true ->
			GoodsFinal = [];
		false ->
			GoodsFinal = Goods
	end,
	Goods_bin = encode_p_goodss(GoodsFinal, <<>>),
	SizeGoodsFinal = erlang:length(GoodsFinal),
	BinLen_goods = erlang:byte_size(Goods_bin),

	<<BagidFinal:32/signed,SizeGoodsFinal:16, BinLen_goods:32, Goods_bin/binary>>;
encode_m_goods_inbag_list_toc(_) -> 
	<<>>.

decode_m_goods_inbag_list_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Bagid:32/signed,_Sizegoods:16, _BinLengoods:32, SubBingoods/binary>> = Bin0,
	Goods = lists:reverse(decode_p_goodss(SubBingoods, [])),

	{m_goods_inbag_list_toc, Bagid,Goods};

decode_m_goods_inbag_list_toc(_) ->
	undefined.
encode_m_goods_info_tos(Record) when is_record(Record, m_goods_info_tos) ->
	#m_goods_info_tos{id=Id,target_id=Target_id,type=Type} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, m_goods_info_tos, id});
		false ->
			IdFinal = Id
	end,
	case Target_id =:= undefined of
		true ->
				Target_idFinal = undefined,
				exit({required_field_not_assigned, m_goods_info_tos, target_id});
		false ->
			Target_idFinal = Target_id
	end,
	case Type =:= undefined of
		true ->
				TypeFinal = 0;
		false ->
			TypeFinal = Type
	end,

	<<IdFinal:32/signed,Target_idFinal:32/signed,TypeFinal:32/signed>>;
encode_m_goods_info_tos(_) -> 
	<<>>.

decode_m_goods_info_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed,Target_id:32/signed,Type:32/signed>> = Bin0,

	{m_goods_info_tos, Id,Target_id,Type};

decode_m_goods_info_tos(_) ->
	undefined.
encode_m_goods_info_toc(Record) when is_record(Record, m_goods_info_toc) ->
	#m_goods_info_toc{succ=Succ,info=Info,type=Type,reason=Reason,goods_id=Goods_id} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Info =:= undefined of
		true ->
				InfoFinal = 0;
		false ->
			InfoFinal = Info
	end,
	case Type =:= undefined of
		true ->
				TypeFinal = 0;
		false ->
			TypeFinal = Type
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Goods_id =:= undefined of
		true ->
				Goods_idFinal = 0;
		false ->
			Goods_idFinal = Goods_id
	end,
	Info_bin = encode_p_goods(InfoFinal),
	BinLen_info = erlang:byte_size(Info_bin),
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,BinLen_info:32, Info_bin/binary,TypeFinal:32/signed,ReasonLen:16, Reason2/binary,Goods_idFinal:32/signed>>;
encode_m_goods_info_toc(_) -> 
	<<>>.

decode_m_goods_info_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,SubBinSizeinfo:32, Bin1/binary>> = Bin0,
	<<SubBininfo:SubBinSizeinfo/binary, Bin2/binary>> = Bin1,
	Info = decode_p_goods(SubBininfo),
	<<Type:32/signed,ReasonLen:16, Bin3/binary>> = Bin2,
	<<Reason:ReasonLen/binary,Goods_id:32/signed>> = Bin3,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_goods_info_toc, Succ,Info,Type,common_tool:to_list(Reason),Goods_id};

decode_m_goods_info_toc(_) ->
	undefined.
encode_m_goods_destroy_tos(Record) when is_record(Record, m_goods_destroy_tos) ->
	#m_goods_destroy_tos{id=Id} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, m_goods_destroy_tos, id});
		false ->
			IdFinal = Id
	end,

	<<IdFinal:32/signed>>;
encode_m_goods_destroy_tos(_) -> 
	<<>>.

decode_m_goods_destroy_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed>> = Bin0,

	{m_goods_destroy_tos, Id};

decode_m_goods_destroy_tos(_) ->
	undefined.
encode_m_goods_destroy_toc(Record) when is_record(Record, m_goods_destroy_toc) ->
	#m_goods_destroy_toc{succ=Succ,reason=Reason,id=Id} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Id =:= undefined of
		true ->
				IdFinal = 0;
		false ->
			IdFinal = Id
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,IdFinal:32/signed>>;
encode_m_goods_destroy_toc(_) -> 
	<<>>.

decode_m_goods_destroy_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Id:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_goods_destroy_toc, Succ,common_tool:to_list(Reason),Id};

decode_m_goods_destroy_toc(_) ->
	undefined.
encode_m_goods_swap_tos(Record) when is_record(Record, m_goods_swap_tos) ->
	#m_goods_swap_tos{id1=Id1,position2=Position2,bagid2=Bagid2} = Record,
	case Id1 =:= undefined of
		true ->
				Id1Final = undefined,
				exit({required_field_not_assigned, m_goods_swap_tos, id1});
		false ->
			Id1Final = Id1
	end,
	case Position2 =:= undefined of
		true ->
				Position2Final = undefined,
				exit({required_field_not_assigned, m_goods_swap_tos, position2});
		false ->
			Position2Final = Position2
	end,
	case Bagid2 =:= undefined of
		true ->
				Bagid2Final = undefined,
				exit({required_field_not_assigned, m_goods_swap_tos, bagid2});
		false ->
			Bagid2Final = Bagid2
	end,

	<<Id1Final:32/signed,Position2Final:32/signed,Bagid2Final:32/signed>>;
encode_m_goods_swap_tos(_) -> 
	<<>>.

decode_m_goods_swap_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id1:32/signed,Position2:32/signed,Bagid2:32/signed>> = Bin0,

	{m_goods_swap_tos, Id1,Position2,Bagid2};

decode_m_goods_swap_tos(_) ->
	undefined.
encode_m_goods_swap_toc(Record) when is_record(Record, m_goods_swap_toc) ->
	#m_goods_swap_toc{succ=Succ,reason=Reason,goods1=Goods1,goods2=Goods2} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Goods1 =:= undefined of
		true ->
				Goods1Final = 0;
		false ->
			Goods1Final = Goods1
	end,
	case Goods2 =:= undefined of
		true ->
				Goods2Final = 0;
		false ->
			Goods2Final = Goods2
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Goods1_bin = encode_p_goods(Goods1Final),
	BinLen_goods1 = erlang:byte_size(Goods1_bin),
	Goods2_bin = encode_p_goods(Goods2Final),
	BinLen_goods2 = erlang:byte_size(Goods2_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_goods1:32, Goods1_bin/binary,BinLen_goods2:32, Goods2_bin/binary>>;
encode_m_goods_swap_toc(_) -> 
	<<>>.

decode_m_goods_swap_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,SubBinSizegoods1:32, Bin2/binary>> = Bin1,
	<<SubBingoods1:SubBinSizegoods1/binary, Bin3/binary>> = Bin2,
	Goods1 = decode_p_goods(SubBingoods1),
	<<_SubBinSizegoods2:32, SubBingoods2/binary>> = Bin3,
	Goods2 = decode_p_goods(SubBingoods2),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_goods_swap_toc, Succ,common_tool:to_list(Reason),Goods1,Goods2};

decode_m_goods_swap_toc(_) ->
	undefined.
encode_m_goods_divide_tos(Record) when is_record(Record, m_goods_divide_tos) ->
	#m_goods_divide_tos{id=Id,num=Num,bagposition=Bagposition,bagid=Bagid} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, m_goods_divide_tos, id});
		false ->
			IdFinal = Id
	end,
	case Num =:= undefined of
		true ->
				NumFinal = undefined,
				exit({required_field_not_assigned, m_goods_divide_tos, num});
		false ->
			NumFinal = Num
	end,
	case Bagposition =:= undefined of
		true ->
				BagpositionFinal = undefined,
				exit({required_field_not_assigned, m_goods_divide_tos, bagposition});
		false ->
			BagpositionFinal = Bagposition
	end,
	case Bagid =:= undefined of
		true ->
				BagidFinal = undefined,
				exit({required_field_not_assigned, m_goods_divide_tos, bagid});
		false ->
			BagidFinal = Bagid
	end,

	<<IdFinal:32/signed,NumFinal:32/signed,BagpositionFinal:32/signed,BagidFinal:32/signed>>;
encode_m_goods_divide_tos(_) -> 
	<<>>.

decode_m_goods_divide_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed,Num:32/signed,Bagposition:32/signed,Bagid:32/signed>> = Bin0,

	{m_goods_divide_tos, Id,Num,Bagposition,Bagid};

decode_m_goods_divide_tos(_) ->
	undefined.
encode_m_goods_divide_toc(Record) when is_record(Record, m_goods_divide_toc) ->
	#m_goods_divide_toc{succ=Succ,reason=Reason,goods1=Goods1,goods2=Goods2} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Goods1 =:= undefined of
		true ->
				Goods1Final = 0;
		false ->
			Goods1Final = Goods1
	end,
	case Goods2 =:= undefined of
		true ->
				Goods2Final = 0;
		false ->
			Goods2Final = Goods2
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Goods1_bin = encode_p_goods(Goods1Final),
	BinLen_goods1 = erlang:byte_size(Goods1_bin),
	Goods2_bin = encode_p_goods(Goods2Final),
	BinLen_goods2 = erlang:byte_size(Goods2_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_goods1:32, Goods1_bin/binary,BinLen_goods2:32, Goods2_bin/binary>>;
encode_m_goods_divide_toc(_) -> 
	<<>>.

decode_m_goods_divide_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,SubBinSizegoods1:32, Bin2/binary>> = Bin1,
	<<SubBingoods1:SubBinSizegoods1/binary, Bin3/binary>> = Bin2,
	Goods1 = decode_p_goods(SubBingoods1),
	<<_SubBinSizegoods2:32, SubBingoods2/binary>> = Bin3,
	Goods2 = decode_p_goods(SubBingoods2),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_goods_divide_toc, Succ,common_tool:to_list(Reason),Goods1,Goods2};

decode_m_goods_divide_toc(_) ->
	undefined.
encode_m_goods_update_toc(Record) when is_record(Record, m_goods_update_toc) ->
	#m_goods_update_toc{goods=Goods} = Record,
	case Goods =:= undefined of
		true ->
			GoodsFinal = [];
		false ->
			GoodsFinal = Goods
	end,
	Goods_bin = encode_p_goodss(GoodsFinal, <<>>),
	SizeGoodsFinal = erlang:length(GoodsFinal),
	BinLen_goods = erlang:byte_size(Goods_bin),

	<<SizeGoodsFinal:16, BinLen_goods:32, Goods_bin/binary>>;
encode_m_goods_update_toc(_) -> 
	<<>>.

decode_m_goods_update_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizegoods:16, _BinLengoods:32, SubBingoods/binary>> = Bin0,
	Goods = lists:reverse(decode_p_goodss(SubBingoods, [])),

	{m_goods_update_toc, Goods};

decode_m_goods_update_toc(_) ->
	undefined.
encode_m_goods_tidy_tos(Record) when is_record(Record, m_goods_tidy_tos) ->
	#m_goods_tidy_tos{bagid=Bagid} = Record,
	case Bagid =:= undefined of
		true ->
				BagidFinal = undefined,
				exit({required_field_not_assigned, m_goods_tidy_tos, bagid});
		false ->
			BagidFinal = Bagid
	end,

	<<BagidFinal:32/signed>>;
encode_m_goods_tidy_tos(_) -> 
	<<>>.

decode_m_goods_tidy_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Bagid:32/signed>> = Bin0,

	{m_goods_tidy_tos, Bagid};

decode_m_goods_tidy_tos(_) ->
	undefined.
encode_m_goods_tidy_toc(Record) when is_record(Record, m_goods_tidy_toc) ->
	#m_goods_tidy_toc{bagid=Bagid,goods=Goods} = Record,
	case Bagid =:= undefined of
		true ->
				BagidFinal = undefined,
				exit({required_field_not_assigned, m_goods_tidy_toc, bagid});
		false ->
			BagidFinal = Bagid
	end,
	case Goods =:= undefined of
		true ->
			GoodsFinal = [];
		false ->
			GoodsFinal = Goods
	end,
	Goods_bin = encode_p_goodss(GoodsFinal, <<>>),
	SizeGoodsFinal = erlang:length(GoodsFinal),
	BinLen_goods = erlang:byte_size(Goods_bin),

	<<BagidFinal:32/signed,SizeGoodsFinal:16, BinLen_goods:32, Goods_bin/binary>>;
encode_m_goods_tidy_toc(_) -> 
	<<>>.

decode_m_goods_tidy_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Bagid:32/signed,_Sizegoods:16, _BinLengoods:32, SubBingoods/binary>> = Bin0,
	Goods = lists:reverse(decode_p_goodss(SubBingoods, [])),

	{m_goods_tidy_toc, Bagid,Goods};

decode_m_goods_tidy_toc(_) ->
	undefined.
encode_m_goods_show_goods_tos(Record) when is_record(Record, m_goods_show_goods_tos) ->
	#m_goods_show_goods_tos{channel_sign=Channel_sign,to_role_name=To_role_name,show_type=Show_type,goods_id=Goods_id} = Record,
	case Channel_sign =:= undefined of
		true ->
				Channel_signFinal = <<>>;
		false ->
			Channel_signFinal = Channel_sign
	end,
	case To_role_name =:= undefined of
		true ->
				To_role_nameFinal = <<>>;
		false ->
			To_role_nameFinal = To_role_name
	end,
	case Show_type =:= undefined of
		true ->
				Show_typeFinal = 0;
		false ->
			Show_typeFinal = Show_type
	end,
	case Goods_id =:= undefined of
		true ->
				Goods_idFinal = undefined,
				exit({required_field_not_assigned, m_goods_show_goods_tos, goods_id});
		false ->
			Goods_idFinal = Goods_id
	end,
	Channel_sign2 = common_tool:to_binary(Channel_signFinal),
	Channel_signLen = erlang:byte_size(Channel_sign2),
	To_role_name2 = common_tool:to_binary(To_role_nameFinal),
	To_role_nameLen = erlang:byte_size(To_role_name2),

	<<Channel_signLen:16, Channel_sign2/binary,To_role_nameLen:16, To_role_name2/binary,Show_typeFinal:32/signed,Goods_idFinal:32/signed>>;
encode_m_goods_show_goods_tos(_) -> 
	<<>>.

decode_m_goods_show_goods_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Channel_signLen:16, Bin1/binary>> = Bin0,
	<<Channel_sign:Channel_signLen/binary,To_role_nameLen:16, Bin2/binary>> = Bin1,
	<<To_role_name:To_role_nameLen/binary,Show_type:32/signed,Goods_id:32/signed>> = Bin2,

	{m_goods_show_goods_tos, common_tool:to_list(Channel_sign),common_tool:to_list(To_role_name),Show_type,Goods_id};

decode_m_goods_show_goods_tos(_) ->
	undefined.
encode_m_goods_show_goods_toc(Record) when is_record(Record, m_goods_show_goods_toc) ->
	#m_goods_show_goods_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_goods_show_goods_toc(_) -> 
	<<>>.

decode_m_goods_show_goods_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_goods_show_goods_toc, Succ,common_tool:to_list(Reason)};

decode_m_goods_show_goods_toc(_) ->
	undefined.
encode_m_role2_exp_full_toc(Record) when is_record(Record, m_role2_exp_full_toc) ->
	#m_role2_exp_full_toc{text=Text} = Record,
	case Text =:= undefined of
		true ->
				TextFinal = undefined,
				exit({required_field_not_assigned, m_role2_exp_full_toc, text});
		false ->
			TextFinal = Text
	end,
	Text2 = common_tool:to_binary(TextFinal),
	TextLen = erlang:byte_size(Text2),

	<<TextLen:16, Text2/binary>>;
encode_m_role2_exp_full_toc(_) -> 
	<<>>.

decode_m_role2_exp_full_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<TextLen:16, Bin1/binary>> = Bin0,
	<<Text:TextLen/binary>> = Bin1,

	{m_role2_exp_full_toc, common_tool:to_list(Text)};

decode_m_role2_exp_full_toc(_) ->
	undefined.
encode_m_role2_levelup_tos(Record) when is_record(Record, m_role2_levelup_tos) ->
	#m_role2_levelup_tos{} = Record,

	<<>>;
encode_m_role2_levelup_tos(_) -> 
	<<>>.

decode_m_role2_levelup_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_role2_levelup_tos};

decode_m_role2_levelup_tos(_) ->
	undefined.
encode_m_role2_levelup_toc(Record) when is_record(Record, m_role2_levelup_toc) ->
	#m_role2_levelup_toc{level=Level,attr_points=Attr_points,maxhp=Maxhp,maxmp=Maxmp,msg=Msg,skill_points=Skill_points,exp=Exp,next_level_exp=Next_level_exp,total_add_exp=Total_add_exp} = Record,
	case Level =:= undefined of
		true ->
				LevelFinal = undefined,
				exit({required_field_not_assigned, m_role2_levelup_toc, level});
		false ->
			LevelFinal = Level
	end,
	case Attr_points =:= undefined of
		true ->
				Attr_pointsFinal = undefined,
				exit({required_field_not_assigned, m_role2_levelup_toc, attr_points});
		false ->
			Attr_pointsFinal = Attr_points
	end,
	case Maxhp =:= undefined of
		true ->
				MaxhpFinal = undefined,
				exit({required_field_not_assigned, m_role2_levelup_toc, maxhp});
		false ->
			MaxhpFinal = Maxhp
	end,
	case Maxmp =:= undefined of
		true ->
				MaxmpFinal = undefined,
				exit({required_field_not_assigned, m_role2_levelup_toc, maxmp});
		false ->
			MaxmpFinal = Maxmp
	end,
	case Msg =:= undefined of
		true ->
				MsgFinal = <<>>;
		false ->
			MsgFinal = Msg
	end,
	case Skill_points =:= undefined of
		true ->
				Skill_pointsFinal = undefined,
				exit({required_field_not_assigned, m_role2_levelup_toc, skill_points});
		false ->
			Skill_pointsFinal = Skill_points
	end,
	case Exp =:= undefined of
		true ->
				ExpFinal = undefined,
				exit({required_field_not_assigned, m_role2_levelup_toc, exp});
		false ->
			ExpFinal = Exp
	end,
	case Next_level_exp =:= undefined of
		true ->
				Next_level_expFinal = undefined,
				exit({required_field_not_assigned, m_role2_levelup_toc, next_level_exp});
		false ->
			Next_level_expFinal = Next_level_exp
	end,
	case Total_add_exp =:= undefined of
		true ->
				Total_add_expFinal = undefined,
				exit({required_field_not_assigned, m_role2_levelup_toc, total_add_exp});
		false ->
			Total_add_expFinal = Total_add_exp
	end,
	Msg2 = common_tool:to_binary(MsgFinal),
	MsgLen = erlang:byte_size(Msg2),

	<<LevelFinal:32/signed,Attr_pointsFinal:32/signed,MaxhpFinal:32/signed,MaxmpFinal:32/signed,MsgLen:16, Msg2/binary,Skill_pointsFinal:32/signed,ExpFinal:64/float,Next_level_expFinal:64/float,Total_add_expFinal:64/float>>;
encode_m_role2_levelup_toc(_) -> 
	<<>>.

decode_m_role2_levelup_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Level:32/signed,Attr_points:32/signed,Maxhp:32/signed,Maxmp:32/signed,MsgLen:16, Bin1/binary>> = Bin0,
	<<Msg:MsgLen/binary,Skill_points:32/signed,Exp:64,Next_level_exp:64,Total_add_exp:64>> = Bin1,

	{m_role2_levelup_toc, Level,Attr_points,Maxhp,Maxmp,common_tool:to_list(Msg),Skill_points,Exp,Next_level_exp,Total_add_exp};

decode_m_role2_levelup_toc(_) ->
	undefined.
encode_m_role2_levelup_other_toc(Record) when is_record(Record, m_role2_levelup_other_toc) ->
	#m_role2_levelup_other_toc{roleid=Roleid} = Record,
	case Roleid =:= undefined of
		true ->
				RoleidFinal = undefined,
				exit({required_field_not_assigned, m_role2_levelup_other_toc, roleid});
		false ->
			RoleidFinal = Roleid
	end,

	<<RoleidFinal:32/signed>>;
encode_m_role2_levelup_other_toc(_) -> 
	<<>>.

decode_m_role2_levelup_other_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Roleid:32/signed>> = Bin0,

	{m_role2_levelup_other_toc, Roleid};

decode_m_role2_levelup_other_toc(_) ->
	undefined.
encode_p_role_attr_change(Record) when is_record(Record, p_role_attr_change) ->
	#p_role_attr_change{change_type=Change_type,new_value=New_value} = Record,
	case Change_type =:= undefined of
		true ->
				Change_typeFinal = undefined,
				exit({required_field_not_assigned, p_role_attr_change, change_type});
		false ->
			Change_typeFinal = Change_type
	end,
	case New_value =:= undefined of
		true ->
				New_valueFinal = undefined,
				exit({required_field_not_assigned, p_role_attr_change, new_value});
		false ->
			New_valueFinal = New_value
	end,

	<<Change_typeFinal:32/signed,New_valueFinal:64/float>>;
encode_p_role_attr_change(_) -> 
	<<>>.

decode_p_role_attr_change(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Change_type:32/signed,New_value:64>> = Bin0,

	{p_role_attr_change, Change_type,New_value};

decode_p_role_attr_change(_) ->
	undefined.
encode_m_role2_attr_change_toc(Record) when is_record(Record, m_role2_attr_change_toc) ->
	#m_role2_attr_change_toc{roleid=Roleid,changes=Changes} = Record,
	case Roleid =:= undefined of
		true ->
				RoleidFinal = undefined,
				exit({required_field_not_assigned, m_role2_attr_change_toc, roleid});
		false ->
			RoleidFinal = Roleid
	end,
	case Changes =:= undefined of
		true ->
			ChangesFinal = [];
		false ->
			ChangesFinal = Changes
	end,
	Changes_bin = encode_p_role_attr_changes(ChangesFinal, <<>>),
	SizeChangesFinal = erlang:length(ChangesFinal),
	BinLen_changes = erlang:byte_size(Changes_bin),

	<<RoleidFinal:32/signed,SizeChangesFinal:16, BinLen_changes:32, Changes_bin/binary>>;
encode_m_role2_attr_change_toc(_) -> 
	<<>>.

decode_m_role2_attr_change_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Roleid:32/signed,_Sizechanges:16, _BinLenchanges:32, SubBinchanges/binary>> = Bin0,
	Changes = lists:reverse(decode_p_role_attr_changes(SubBinchanges, [])),

	{m_role2_attr_change_toc, Roleid,Changes};

decode_m_role2_attr_change_toc(_) ->
	undefined.
encode_m_role2_attr_reload_toc(Record) when is_record(Record, m_role2_attr_reload_toc) ->
	#m_role2_attr_reload_toc{role_attr=Role_attr} = Record,
	case Role_attr =:= undefined of
		true ->
				Role_attrFinal = undefined,
				exit({required_field_not_assigned, m_role2_attr_reload_toc, role_attr});
		false ->
			Role_attrFinal = Role_attr
	end,
	Role_attr_bin = encode_p_role_attr(Role_attrFinal),
	BinLen_role_attr = erlang:byte_size(Role_attr_bin),

	<<BinLen_role_attr:32, Role_attr_bin/binary>>;
encode_m_role2_attr_reload_toc(_) -> 
	<<>>.

decode_m_role2_attr_reload_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_SubBinSizerole_attr:32, SubBinrole_attr/binary>> = Bin0,
	Role_attr = decode_p_role_attr(SubBinrole_attr),

	{m_role2_attr_reload_toc, Role_attr};

decode_m_role2_attr_reload_toc(_) ->
	undefined.
encode_m_role2_base_reload_toc(Record) when is_record(Record, m_role2_base_reload_toc) ->
	#m_role2_base_reload_toc{role_base=Role_base} = Record,
	case Role_base =:= undefined of
		true ->
				Role_baseFinal = undefined,
				exit({required_field_not_assigned, m_role2_base_reload_toc, role_base});
		false ->
			Role_baseFinal = Role_base
	end,
	Role_base_bin = encode_p_role_base(Role_baseFinal),
	BinLen_role_base = erlang:byte_size(Role_base_bin),

	<<BinLen_role_base:32, Role_base_bin/binary>>;
encode_m_role2_base_reload_toc(_) -> 
	<<>>.

decode_m_role2_base_reload_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_SubBinSizerole_base:32, SubBinrole_base/binary>> = Bin0,
	Role_base = decode_p_role_base(SubBinrole_base),

	{m_role2_base_reload_toc, Role_base};

decode_m_role2_base_reload_toc(_) ->
	undefined.
encode_m_role2_reload_toc(Record) when is_record(Record, m_role2_reload_toc) ->
	#m_role2_reload_toc{role_base=Role_base,role_attr=Role_attr} = Record,
	case Role_base =:= undefined of
		true ->
				Role_baseFinal = 0;
		false ->
			Role_baseFinal = Role_base
	end,
	case Role_attr =:= undefined of
		true ->
				Role_attrFinal = 0;
		false ->
			Role_attrFinal = Role_attr
	end,
	Role_base_bin = encode_p_role_base(Role_baseFinal),
	BinLen_role_base = erlang:byte_size(Role_base_bin),
	Role_attr_bin = encode_p_role_attr(Role_attrFinal),
	BinLen_role_attr = erlang:byte_size(Role_attr_bin),

	<<BinLen_role_base:32, Role_base_bin/binary,BinLen_role_attr:32, Role_attr_bin/binary>>;
encode_m_role2_reload_toc(_) -> 
	<<>>.

decode_m_role2_reload_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SubBinSizerole_base:32, Bin1/binary>> = Bin0,
	<<SubBinrole_base:SubBinSizerole_base/binary, Bin2/binary>> = Bin1,
	Role_base = decode_p_role_base(SubBinrole_base),
	<<_SubBinSizerole_attr:32, SubBinrole_attr/binary>> = Bin2,
	Role_attr = decode_p_role_attr(SubBinrole_attr),

	{m_role2_reload_toc, Role_base,Role_attr};

decode_m_role2_reload_toc(_) ->
	undefined.
encode_m_role2_newbuffs_toc(Record) when is_record(Record, m_role2_newbuffs_toc) ->
	#m_role2_newbuffs_toc{roleid=Roleid,type=Type,remain_time=Remain_time,value=Value} = Record,
	case Roleid =:= undefined of
		true ->
				RoleidFinal = undefined,
				exit({required_field_not_assigned, m_role2_newbuffs_toc, roleid});
		false ->
			RoleidFinal = Roleid
	end,
	case Type =:= undefined of
		true ->
				TypeFinal = undefined,
				exit({required_field_not_assigned, m_role2_newbuffs_toc, type});
		false ->
			TypeFinal = Type
	end,
	case Remain_time =:= undefined of
		true ->
				Remain_timeFinal = undefined,
				exit({required_field_not_assigned, m_role2_newbuffs_toc, remain_time});
		false ->
			Remain_timeFinal = Remain_time
	end,
	case Value =:= undefined of
		true ->
				ValueFinal = undefined,
				exit({required_field_not_assigned, m_role2_newbuffs_toc, value});
		false ->
			ValueFinal = Value
	end,

	<<RoleidFinal:32/signed,TypeFinal:32/signed,Remain_timeFinal:32/signed,ValueFinal:32/signed>>;
encode_m_role2_newbuffs_toc(_) -> 
	<<>>.

decode_m_role2_newbuffs_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Roleid:32/signed,Type:32/signed,Remain_time:32/signed,Value:32/signed>> = Bin0,

	{m_role2_newbuffs_toc, Roleid,Type,Remain_time,Value};

decode_m_role2_newbuffs_toc(_) ->
	undefined.
encode_m_role2_dead_toc(Record) when is_record(Record, m_role2_dead_toc) ->
	#m_role2_dead_toc{killer=Killer,relive_type=Relive_type,relive_silver=Relive_silver,dead_type=Dead_type} = Record,
	case Killer =:= undefined of
		true ->
				KillerFinal = <<>>;
		false ->
			KillerFinal = Killer
	end,
	case Relive_type =:= undefined of
		true ->
			Relive_typeFinal = [];
		false ->
			Relive_typeFinal = Relive_type
	end,
	case Relive_silver =:= undefined of
		true ->
				Relive_silverFinal = 0;
		false ->
			Relive_silverFinal = Relive_silver
	end,
	case Dead_type =:= undefined of
		true ->
				Dead_typeFinal = 0;
		false ->
			Dead_typeFinal = Dead_type
	end,
	Killer2 = common_tool:to_binary(KillerFinal),
	KillerLen = erlang:byte_size(Killer2),
	Relive_type_bin = encode_int32s(Relive_typeFinal, <<>>),
	SizeRelive_typeFinal = erlang:length(Relive_typeFinal),
	BinLen_relive_type = erlang:byte_size(Relive_type_bin),

	<<KillerLen:16, Killer2/binary,SizeRelive_typeFinal:16, BinLen_relive_type:32, Relive_type_bin/binary,Relive_silverFinal:32/signed,Dead_typeFinal:32/signed>>;
encode_m_role2_dead_toc(_) -> 
	<<>>.

decode_m_role2_dead_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<KillerLen:16, Bin1/binary>> = Bin0,
	<<Killer:KillerLen/binary,_Sizerelive_type:16, BinLenrelive_type:32, Bin2/binary>> = Bin1,
	<<SubBinrelive_type:BinLenrelive_type/binary, Bin3/binary>> = Bin2, 
	Relive_type = lists:reverse(decode_int32s(SubBinrelive_type, [])),
	<<Relive_silver:32/signed,Dead_type:32/signed>> = Bin3,

	{m_role2_dead_toc, common_tool:to_list(Killer),Relive_type,Relive_silver,Dead_type};

decode_m_role2_dead_toc(_) ->
	undefined.
encode_m_role2_dead_other_toc(Record) when is_record(Record, m_role2_dead_other_toc) ->
	#m_role2_dead_other_toc{roleid=Roleid} = Record,
	case Roleid =:= undefined of
		true ->
				RoleidFinal = undefined,
				exit({required_field_not_assigned, m_role2_dead_other_toc, roleid});
		false ->
			RoleidFinal = Roleid
	end,

	<<RoleidFinal:32/signed>>;
encode_m_role2_dead_other_toc(_) -> 
	<<>>.

decode_m_role2_dead_other_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Roleid:32/signed>> = Bin0,

	{m_role2_dead_other_toc, Roleid};

decode_m_role2_dead_other_toc(_) ->
	undefined.
encode_m_role2_relive_toc(Record) when is_record(Record, m_role2_relive_toc) ->
	#m_role2_relive_toc{succ=Succ,return_self=Return_self,reason=Reason,role_base=Role_base,role_fight=Role_fight,role_pos=Role_pos,map_role=Map_role,map_changed=Map_changed} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
			case Return_self of
				true ->
					Return_selfFinal = 1;
				false ->
					Return_selfFinal = 0
			end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Role_base =:= undefined of
		true ->
				Role_baseFinal = 0;
		false ->
			Role_baseFinal = Role_base
	end,
	case Role_fight =:= undefined of
		true ->
				Role_fightFinal = 0;
		false ->
			Role_fightFinal = Role_fight
	end,
	case Role_pos =:= undefined of
		true ->
				Role_posFinal = 0;
		false ->
			Role_posFinal = Role_pos
	end,
	case Map_role =:= undefined of
		true ->
				Map_roleFinal = 0;
		false ->
			Map_roleFinal = Map_role
	end,
	case Map_changed =:= undefined of
		true ->
				Map_changedFinal = 0;
		false ->
		case Map_changed of
			true ->
				Map_changedFinal = 1;
			false ->
				Map_changedFinal = 0
		end
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Role_base_bin = encode_p_role_base(Role_baseFinal),
	BinLen_role_base = erlang:byte_size(Role_base_bin),
	Role_fight_bin = encode_p_role_fight(Role_fightFinal),
	BinLen_role_fight = erlang:byte_size(Role_fight_bin),
	Role_pos_bin = encode_p_role_pos(Role_posFinal),
	BinLen_role_pos = erlang:byte_size(Role_pos_bin),
	Map_role_bin = encode_p_map_role(Map_roleFinal),
	BinLen_map_role = erlang:byte_size(Map_role_bin),

	<<SuccFinal:8,Return_selfFinal:8,ReasonLen:16, Reason2/binary,BinLen_role_base:32, Role_base_bin/binary,BinLen_role_fight:32, Role_fight_bin/binary,BinLen_role_pos:32, Role_pos_bin/binary,BinLen_map_role:32, Map_role_bin/binary,Map_changedFinal:8>>;
encode_m_role2_relive_toc(_) -> 
	<<>>.

decode_m_role2_relive_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,Return_selfTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,SubBinSizerole_base:32, Bin2/binary>> = Bin1,
	<<SubBinrole_base:SubBinSizerole_base/binary, Bin3/binary>> = Bin2,
	Role_base = decode_p_role_base(SubBinrole_base),
	<<SubBinSizerole_fight:32, Bin4/binary>> = Bin3,
	<<SubBinrole_fight:SubBinSizerole_fight/binary, Bin5/binary>> = Bin4,
	Role_fight = decode_p_role_fight(SubBinrole_fight),
	<<SubBinSizerole_pos:32, Bin6/binary>> = Bin5,
	<<SubBinrole_pos:SubBinSizerole_pos/binary, Bin7/binary>> = Bin6,
	Role_pos = decode_p_role_pos(SubBinrole_pos),
	<<SubBinSizemap_role:32, Bin8/binary>> = Bin7,
	<<SubBinmap_role:SubBinSizemap_role/binary, Bin9/binary>> = Bin8,
	Map_role = decode_p_map_role(SubBinmap_role),
<<Map_changedTmp:8>> = Bin9,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,
case Map_changedTmp of 
	1 -> 
		Map_changed = true;
	_ ->
		Map_changed = false
end,

	{m_role2_relive_toc, Succ,Return_self,common_tool:to_list(Reason),Role_base,Role_fight,Role_pos,Map_role,Map_changed};

decode_m_role2_relive_toc(_) ->
	undefined.
encode_m_role2_unbund_change_tos(Record) when is_record(Record, m_role2_unbund_change_tos) ->
	#m_role2_unbund_change_tos{unbund=Unbund} = Record,
	case Unbund =:= undefined of
		true ->
				UnbundFinal = undefined,
				exit({required_field_not_assigned, m_role2_unbund_change_tos, unbund});
		false ->
		case Unbund of
			true ->
				UnbundFinal = 1;
			false ->
				UnbundFinal = 0
		end
	end,

	<<UnbundFinal:8>>;
encode_m_role2_unbund_change_tos(_) -> 
	<<>>.

decode_m_role2_unbund_change_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<UnbundTmp:8>> = Bin0,
case UnbundTmp of 
	1 -> 
		Unbund = true;
	_ ->
		Unbund = false
end,

	{m_role2_unbund_change_tos, Unbund};

decode_m_role2_unbund_change_tos(_) ->
	undefined.
encode_m_role2_unbund_change_toc(Record) when is_record(Record, m_role2_unbund_change_toc) ->
	#m_role2_unbund_change_toc{succ=Succ} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_role2_unbund_change_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,

	<<SuccFinal:8>>;
encode_m_role2_unbund_change_toc(_) -> 
	<<>>.

decode_m_role2_unbund_change_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8>> = Bin0,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_role2_unbund_change_toc, Succ};

decode_m_role2_unbund_change_toc(_) ->
	undefined.
encode_m_role2_rely_main_tos(Record) when is_record(Record, m_role2_rely_main_tos) ->
	#m_role2_rely_main_tos{is_rely=Is_rely} = Record,
	case Is_rely =:= undefined of
		true ->
				Is_relyFinal = undefined,
				exit({required_field_not_assigned, m_role2_rely_main_tos, is_rely});
		false ->
		case Is_rely of
			true ->
				Is_relyFinal = 1;
			false ->
				Is_relyFinal = 0
		end
	end,

	<<Is_relyFinal:8>>;
encode_m_role2_rely_main_tos(_) -> 
	<<>>.

decode_m_role2_rely_main_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Is_relyTmp:8>> = Bin0,
case Is_relyTmp of 
	1 -> 
		Is_rely = true;
	_ ->
		Is_rely = false
end,

	{m_role2_rely_main_tos, Is_rely};

decode_m_role2_rely_main_tos(_) ->
	undefined.
encode_m_role2_rely_main_toc(Record) when is_record(Record, m_role2_rely_main_toc) ->
	#m_role2_rely_main_toc{succ=Succ} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_role2_rely_main_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,

	<<SuccFinal:8>>;
encode_m_role2_rely_main_toc(_) -> 
	<<>>.

decode_m_role2_rely_main_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8>> = Bin0,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_role2_rely_main_toc, Succ};

decode_m_role2_rely_main_toc(_) ->
	undefined.
encode_m_role2_relive_tos(Record) when is_record(Record, m_role2_relive_tos) ->
	#m_role2_relive_tos{type=Type} = Record,
	case Type =:= undefined of
		true ->
				TypeFinal = undefined,
				exit({required_field_not_assigned, m_role2_relive_tos, type});
		false ->
			TypeFinal = Type
	end,

	<<TypeFinal:32/signed>>;
encode_m_role2_relive_tos(_) -> 
	<<>>.

decode_m_role2_relive_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Type:32/signed>> = Bin0,

	{m_role2_relive_tos, Type};

decode_m_role2_relive_tos(_) ->
	undefined.
encode_m_role2_pointassign_tos(Record) when is_record(Record, m_role2_pointassign_tos) ->
	#m_role2_pointassign_tos{type=Type,value=Value} = Record,
	case Type =:= undefined of
		true ->
				TypeFinal = undefined,
				exit({required_field_not_assigned, m_role2_pointassign_tos, type});
		false ->
			TypeFinal = Type
	end,
	case Value =:= undefined of
		true ->
				ValueFinal = undefined,
				exit({required_field_not_assigned, m_role2_pointassign_tos, value});
		false ->
			ValueFinal = Value
	end,

	<<TypeFinal:32/signed,ValueFinal:32/signed>>;
encode_m_role2_pointassign_tos(_) -> 
	<<>>.

decode_m_role2_pointassign_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Type:32/signed,Value:32/signed>> = Bin0,

	{m_role2_pointassign_tos, Type,Value};

decode_m_role2_pointassign_tos(_) ->
	undefined.
encode_m_role2_pointassign_toc(Record) when is_record(Record, m_role2_pointassign_toc) ->
	#m_role2_pointassign_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_role2_pointassign_toc(_) -> 
	<<>>.

decode_m_role2_pointassign_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_role2_pointassign_toc, Succ,common_tool:to_list(Reason)};

decode_m_role2_pointassign_toc(_) ->
	undefined.
encode_m_role2_getroleattr_tos(Record) when is_record(Record, m_role2_getroleattr_tos) ->
	#m_role2_getroleattr_tos{role_id=Role_id,is_check=Is_check} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, m_role2_getroleattr_tos, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Is_check =:= undefined of
		true ->
				Is_checkFinal = 0;
		false ->
		case Is_check of
			true ->
				Is_checkFinal = 1;
			false ->
				Is_checkFinal = 0
		end
	end,

	<<Role_idFinal:32/signed,Is_checkFinal:8>>;
encode_m_role2_getroleattr_tos(_) -> 
	<<>>.

decode_m_role2_getroleattr_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,Is_checkTmp:8>> = Bin0,
case Is_checkTmp of 
	1 -> 
		Is_check = true;
	_ ->
		Is_check = false
end,

	{m_role2_getroleattr_tos, Role_id,Is_check};

decode_m_role2_getroleattr_tos(_) ->
	undefined.
encode_m_role2_getskillinfo_tos(Record) when is_record(Record, m_role2_getskillinfo_tos) ->
	#m_role2_getskillinfo_tos{} = Record,

	<<>>;
encode_m_role2_getskillinfo_tos(_) -> 
	<<>>.

decode_m_role2_getskillinfo_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_role2_getskillinfo_tos};

decode_m_role2_getskillinfo_tos(_) ->
	undefined.
encode_m_role2_getskillinfo_toc(Record) when is_record(Record, m_role2_getskillinfo_toc) ->
	#m_role2_getskillinfo_toc{succ=Succ,reason=Reason,skills=Skills} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Skills =:= undefined of
		true ->
			SkillsFinal = [];
		false ->
			SkillsFinal = Skills
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Skills_bin = encode_p_role_skills(SkillsFinal, <<>>),
	SizeSkillsFinal = erlang:length(SkillsFinal),
	BinLen_skills = erlang:byte_size(Skills_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,SizeSkillsFinal:16, BinLen_skills:32, Skills_bin/binary>>;
encode_m_role2_getskillinfo_toc(_) -> 
	<<>>.

decode_m_role2_getskillinfo_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_Sizeskills:16, _BinLenskills:32, SubBinskills/binary>> = Bin1,
	Skills = lists:reverse(decode_p_role_skills(SubBinskills, [])),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_role2_getskillinfo_toc, Succ,common_tool:to_list(Reason),Skills};

decode_m_role2_getskillinfo_toc(_) ->
	undefined.
encode_m_role2_skillassign_tos(Record) when is_record(Record, m_role2_skillassign_tos) ->
	#m_role2_skillassign_tos{skillid=Skillid,points=Points} = Record,
	case Skillid =:= undefined of
		true ->
				SkillidFinal = undefined,
				exit({required_field_not_assigned, m_role2_skillassign_tos, skillid});
		false ->
			SkillidFinal = Skillid
	end,
	case Points =:= undefined of
		true ->
				PointsFinal = undefined,
				exit({required_field_not_assigned, m_role2_skillassign_tos, points});
		false ->
			PointsFinal = Points
	end,

	<<SkillidFinal:32/signed,PointsFinal:32/signed>>;
encode_m_role2_skillassign_tos(_) -> 
	<<>>.

decode_m_role2_skillassign_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Skillid:32/signed,Points:32/signed>> = Bin0,

	{m_role2_skillassign_tos, Skillid,Points};

decode_m_role2_skillassign_tos(_) ->
	undefined.
encode_m_role2_skillassign_toc(Record) when is_record(Record, m_role2_skillassign_toc) ->
	#m_role2_skillassign_toc{succ=Succ,reason=Reason,result=Result,remain_points=Remain_points} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Result =:= undefined of
		true ->
				ResultFinal = 0;
		false ->
			ResultFinal = Result
	end,
	case Remain_points =:= undefined of
		true ->
				Remain_pointsFinal = 0;
		false ->
			Remain_pointsFinal = Remain_points
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Result_bin = encode_p_role_skill(ResultFinal),
	BinLen_result = erlang:byte_size(Result_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_result:32, Result_bin/binary,Remain_pointsFinal:32/signed>>;
encode_m_role2_skillassign_toc(_) -> 
	<<>>.

decode_m_role2_skillassign_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,SubBinSizeresult:32, Bin2/binary>> = Bin1,
	<<SubBinresult:SubBinSizeresult/binary, Bin3/binary>> = Bin2,
	Result = decode_p_role_skill(SubBinresult),
	<<Remain_points:32/signed>> = Bin3,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_role2_skillassign_toc, Succ,common_tool:to_list(Reason),Result,Remain_points};

decode_m_role2_skillassign_toc(_) ->
	undefined.
encode_m_role2_skilllearn_tos(Record) when is_record(Record, m_role2_skilllearn_tos) ->
	#m_role2_skilllearn_tos{skillid=Skillid} = Record,
	case Skillid =:= undefined of
		true ->
				SkillidFinal = undefined,
				exit({required_field_not_assigned, m_role2_skilllearn_tos, skillid});
		false ->
			SkillidFinal = Skillid
	end,

	<<SkillidFinal:32/signed>>;
encode_m_role2_skilllearn_tos(_) -> 
	<<>>.

decode_m_role2_skilllearn_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Skillid:32/signed>> = Bin0,

	{m_role2_skilllearn_tos, Skillid};

decode_m_role2_skilllearn_tos(_) ->
	undefined.
encode_m_role2_skilllearn_toc(Record) when is_record(Record, m_role2_skilllearn_toc) ->
	#m_role2_skilllearn_toc{succ=Succ,reason=Reason,skillid=Skillid} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Skillid =:= undefined of
		true ->
				SkillidFinal = 0;
		false ->
			SkillidFinal = Skillid
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,SkillidFinal:32/signed>>;
encode_m_role2_skilllearn_toc(_) -> 
	<<>>.

decode_m_role2_skilllearn_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Skillid:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_role2_skilllearn_toc, Succ,common_tool:to_list(Reason),Skillid};

decode_m_role2_skilllearn_toc(_) ->
	undefined.
encode_m_role2_getrolemapinfo_tos(Record) when is_record(Record, m_role2_getrolemapinfo_tos) ->
	#m_role2_getrolemapinfo_tos{role_id=Role_id} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, m_role2_getrolemapinfo_tos, role_id});
		false ->
			Role_idFinal = Role_id
	end,

	<<Role_idFinal:32/signed>>;
encode_m_role2_getrolemapinfo_tos(_) -> 
	<<>>.

decode_m_role2_getrolemapinfo_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed>> = Bin0,

	{m_role2_getrolemapinfo_tos, Role_id};

decode_m_role2_getrolemapinfo_tos(_) ->
	undefined.
encode_m_role2_getroleattr_toc(Record) when is_record(Record, m_role2_getroleattr_toc) ->
	#m_role2_getroleattr_toc{succ=Succ,reason=Reason,role_info=Role_info} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Role_info =:= undefined of
		true ->
				Role_infoFinal = 0;
		false ->
			Role_infoFinal = Role_info
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Role_info_bin = encode_p_other_role_info(Role_infoFinal),
	BinLen_role_info = erlang:byte_size(Role_info_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_role_info:32, Role_info_bin/binary>>;
encode_m_role2_getroleattr_toc(_) -> 
	<<>>.

decode_m_role2_getroleattr_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_SubBinSizerole_info:32, SubBinrole_info/binary>> = Bin1,
	Role_info = decode_p_other_role_info(SubBinrole_info),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_role2_getroleattr_toc, Succ,common_tool:to_list(Reason),Role_info};

decode_m_role2_getroleattr_toc(_) ->
	undefined.
encode_p_other_role_info(Record) when is_record(Record, p_other_role_info) ->
	#p_other_role_info{role_id=Role_id,role_name=Role_name,sex=Sex,faction_id=Faction_id,family_name=Family_name,five_ele_attr=Five_ele_attr,office_name=Office_name,charm=Charm,category=Category,level=Level,level_rank=Level_rank,equips=Equips,vip_level=Vip_level,gongxun=Gongxun,pk_point=Pk_point,moral_value=Moral_value,str=Str,int2=Int2,con=Con,dex=Dex,men=Men,max_phy_attack=Max_phy_attack,min_phy_attack=Min_phy_attack,max_magic_attack=Max_magic_attack,min_magic_attack=Min_magic_attack,double_attack=Double_attack,phy_defence=Phy_defence,magic_defence=Magic_defence,birthday=Birthday,province=Province,pet_id=Pet_id,city=City,luck=Luck,miss=Miss,no_defence=No_defence,hit_rate=Hit_rate,sum_prestige=Sum_prestige,cur_prestige=Cur_prestige,cur_title=Cur_title,pk_title=Pk_title,max_hp=Max_hp,max_mp=Max_mp,cur_energy=Cur_energy,max_energy=Max_energy,skin=Skin} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, p_other_role_info, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = undefined,
				exit({required_field_not_assigned, p_other_role_info, role_name});
		false ->
			Role_nameFinal = Role_name
	end,
	case Sex =:= undefined of
		true ->
				SexFinal = undefined,
				exit({required_field_not_assigned, p_other_role_info, sex});
		false ->
			SexFinal = Sex
	end,
	case Faction_id =:= undefined of
		true ->
				Faction_idFinal = undefined,
				exit({required_field_not_assigned, p_other_role_info, faction_id});
		false ->
			Faction_idFinal = Faction_id
	end,
	case Family_name =:= undefined of
		true ->
				Family_nameFinal = <<>>;
		false ->
			Family_nameFinal = Family_name
	end,
	case Five_ele_attr =:= undefined of
		true ->
				Five_ele_attrFinal = 0;
		false ->
			Five_ele_attrFinal = Five_ele_attr
	end,
	case Office_name =:= undefined of
		true ->
				Office_nameFinal = "";
		false ->
			Office_nameFinal = Office_name
	end,
	case Charm =:= undefined of
		true ->
				CharmFinal = 0;
		false ->
			CharmFinal = Charm
	end,
	case Category =:= undefined of
		true ->
				CategoryFinal = 0;
		false ->
			CategoryFinal = Category
	end,
	case Level =:= undefined of
		true ->
				LevelFinal = 0;
		false ->
			LevelFinal = Level
	end,
	case Level_rank =:= undefined of
		true ->
				Level_rankFinal = 0;
		false ->
			Level_rankFinal = Level_rank
	end,
	case Equips =:= undefined of
		true ->
			EquipsFinal = [];
		false ->
			EquipsFinal = Equips
	end,
	case Vip_level =:= undefined of
		true ->
				Vip_levelFinal = 0;
		false ->
			Vip_levelFinal = Vip_level
	end,
	case Gongxun =:= undefined of
		true ->
				GongxunFinal = 0;
		false ->
			GongxunFinal = Gongxun
	end,
	case Pk_point =:= undefined of
		true ->
				Pk_pointFinal = 0;
		false ->
			Pk_pointFinal = Pk_point
	end,
	case Moral_value =:= undefined of
		true ->
				Moral_valueFinal = 0;
		false ->
			Moral_valueFinal = Moral_value
	end,
	case Str =:= undefined of
		true ->
				StrFinal = 0;
		false ->
			StrFinal = Str
	end,
	case Int2 =:= undefined of
		true ->
				Int2Final = 0;
		false ->
			Int2Final = Int2
	end,
	case Con =:= undefined of
		true ->
				ConFinal = 0;
		false ->
			ConFinal = Con
	end,
	case Dex =:= undefined of
		true ->
				DexFinal = 0;
		false ->
			DexFinal = Dex
	end,
	case Men =:= undefined of
		true ->
				MenFinal = 0;
		false ->
			MenFinal = Men
	end,
	case Max_phy_attack =:= undefined of
		true ->
				Max_phy_attackFinal = 0;
		false ->
			Max_phy_attackFinal = Max_phy_attack
	end,
	case Min_phy_attack =:= undefined of
		true ->
				Min_phy_attackFinal = 0;
		false ->
			Min_phy_attackFinal = Min_phy_attack
	end,
	case Max_magic_attack =:= undefined of
		true ->
				Max_magic_attackFinal = 0;
		false ->
			Max_magic_attackFinal = Max_magic_attack
	end,
	case Min_magic_attack =:= undefined of
		true ->
				Min_magic_attackFinal = 0;
		false ->
			Min_magic_attackFinal = Min_magic_attack
	end,
	case Double_attack =:= undefined of
		true ->
				Double_attackFinal = 0;
		false ->
			Double_attackFinal = Double_attack
	end,
	case Phy_defence =:= undefined of
		true ->
				Phy_defenceFinal = 0;
		false ->
			Phy_defenceFinal = Phy_defence
	end,
	case Magic_defence =:= undefined of
		true ->
				Magic_defenceFinal = 0;
		false ->
			Magic_defenceFinal = Magic_defence
	end,
	case Birthday =:= undefined of
		true ->
				BirthdayFinal = 0;
		false ->
			BirthdayFinal = Birthday
	end,
	case Province =:= undefined of
		true ->
				ProvinceFinal = 0;
		false ->
			ProvinceFinal = Province
	end,
	case Pet_id =:= undefined of
		true ->
				Pet_idFinal = 0;
		false ->
			Pet_idFinal = Pet_id
	end,
	case City =:= undefined of
		true ->
				CityFinal = 0;
		false ->
			CityFinal = City
	end,
	case Luck =:= undefined of
		true ->
				LuckFinal = 0;
		false ->
			LuckFinal = Luck
	end,
	case Miss =:= undefined of
		true ->
				MissFinal = 0;
		false ->
			MissFinal = Miss
	end,
	case No_defence =:= undefined of
		true ->
				No_defenceFinal = 0;
		false ->
			No_defenceFinal = No_defence
	end,
	case Hit_rate =:= undefined of
		true ->
				Hit_rateFinal = 0;
		false ->
			Hit_rateFinal = Hit_rate
	end,
	case Sum_prestige =:= undefined of
		true ->
				Sum_prestigeFinal = 0.0;
		false ->
			Sum_prestigeFinal = Sum_prestige
	end,
	case Cur_prestige =:= undefined of
		true ->
				Cur_prestigeFinal = 0.0;
		false ->
			Cur_prestigeFinal = Cur_prestige
	end,
	case Cur_title =:= undefined of
		true ->
				Cur_titleFinal = <<>>;
		false ->
			Cur_titleFinal = Cur_title
	end,
	case Pk_title =:= undefined of
		true ->
				Pk_titleFinal = 0;
		false ->
			Pk_titleFinal = Pk_title
	end,
	case Max_hp =:= undefined of
		true ->
				Max_hpFinal = 0;
		false ->
			Max_hpFinal = Max_hp
	end,
	case Max_mp =:= undefined of
		true ->
				Max_mpFinal = 0;
		false ->
			Max_mpFinal = Max_mp
	end,
	case Cur_energy =:= undefined of
		true ->
				Cur_energyFinal = 0;
		false ->
			Cur_energyFinal = Cur_energy
	end,
	case Max_energy =:= undefined of
		true ->
				Max_energyFinal = 0;
		false ->
			Max_energyFinal = Max_energy
	end,
	case Skin =:= undefined of
		true ->
				SkinFinal = 0;
		false ->
			SkinFinal = Skin
	end,
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),
	Family_name2 = common_tool:to_binary(Family_nameFinal),
	Family_nameLen = erlang:byte_size(Family_name2),
	Office_name2 = common_tool:to_binary(Office_nameFinal),
	Office_nameLen = erlang:byte_size(Office_name2),
	Equips_bin = encode_p_goodss(EquipsFinal, <<>>),
	SizeEquipsFinal = erlang:length(EquipsFinal),
	BinLen_equips = erlang:byte_size(Equips_bin),
	Cur_title2 = common_tool:to_binary(Cur_titleFinal),
	Cur_titleLen = erlang:byte_size(Cur_title2),
	Skin_bin = encode_p_skin(SkinFinal),
	BinLen_skin = erlang:byte_size(Skin_bin),

	<<Role_idFinal:32/signed,Role_nameLen:16, Role_name2/binary,SexFinal:32/signed,Faction_idFinal:32/signed,Family_nameLen:16, Family_name2/binary,Five_ele_attrFinal:32/signed,Office_nameLen:16, Office_name2/binary,CharmFinal:32/signed,CategoryFinal:32/signed,LevelFinal:32/signed,Level_rankFinal:32/signed,SizeEquipsFinal:16, BinLen_equips:32, Equips_bin/binary,Vip_levelFinal:32/signed,GongxunFinal:32/signed,Pk_pointFinal:32/signed,Moral_valueFinal:32/signed,StrFinal:32/signed,Int2Final:32/signed,ConFinal:32/signed,DexFinal:32/signed,MenFinal:32/signed,Max_phy_attackFinal:32/signed,Min_phy_attackFinal:32/signed,Max_magic_attackFinal:32/signed,Min_magic_attackFinal:32/signed,Double_attackFinal:32/signed,Phy_defenceFinal:32/signed,Magic_defenceFinal:32/signed,BirthdayFinal:32/signed,ProvinceFinal:32/signed,Pet_idFinal:32/signed,CityFinal:32/signed,LuckFinal:32/signed,MissFinal:32/signed,No_defenceFinal:32/signed,Hit_rateFinal:32/signed,Sum_prestigeFinal:64/float,Cur_prestigeFinal:64/float,Cur_titleLen:16, Cur_title2/binary,Pk_titleFinal:32/signed,Max_hpFinal:32/signed,Max_mpFinal:32/signed,Cur_energyFinal:32/signed,Max_energyFinal:32/signed,BinLen_skin:32, Skin_bin/binary>>;
encode_p_other_role_info(_) -> 
	<<>>.

decode_p_other_role_info(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,Role_nameLen:16, Bin1/binary>> = Bin0,
	<<Role_name:Role_nameLen/binary,Sex:32/signed,Faction_id:32/signed,Family_nameLen:16, Bin2/binary>> = Bin1,
	<<Family_name:Family_nameLen/binary,Five_ele_attr:32/signed,Office_nameLen:16, Bin3/binary>> = Bin2,
	<<Office_name:Office_nameLen/binary,Charm:32/signed,Category:32/signed,Level:32/signed,Level_rank:32/signed,_Sizeequips:16, BinLenequips:32, Bin4/binary>> = Bin3,
	<<SubBinequips:BinLenequips/binary, Bin5/binary>> = Bin4, 
	Equips = lists:reverse(decode_p_goodss(SubBinequips, [])),
	<<Vip_level:32/signed,Gongxun:32/signed,Pk_point:32/signed,Moral_value:32/signed,Str:32/signed,Int2:32/signed,Con:32/signed,Dex:32/signed,Men:32/signed,Max_phy_attack:32/signed,Min_phy_attack:32/signed,Max_magic_attack:32/signed,Min_magic_attack:32/signed,Double_attack:32/signed,Phy_defence:32/signed,Magic_defence:32/signed,Birthday:32/signed,Province:32/signed,Pet_id:32/signed,City:32/signed,Luck:32/signed,Miss:32/signed,No_defence:32/signed,Hit_rate:32/signed,Sum_prestige:64,Cur_prestige:64,Cur_titleLen:16, Bin6/binary>> = Bin5,
	<<Cur_title:Cur_titleLen/binary,Pk_title:32/signed,Max_hp:32/signed,Max_mp:32/signed,Cur_energy:32/signed,Max_energy:32/signed,_SubBinSizeskin:32, SubBinskin/binary>> = Bin6,
	Skin = decode_p_skin(SubBinskin),

	{p_other_role_info, Role_id,common_tool:to_list(Role_name),Sex,Faction_id,common_tool:to_list(Family_name),Five_ele_attr,common_tool:to_list(Office_name),Charm,Category,Level,Level_rank,Equips,Vip_level,Gongxun,Pk_point,Moral_value,Str,Int2,Con,Dex,Men,Max_phy_attack,Min_phy_attack,Max_magic_attack,Min_magic_attack,Double_attack,Phy_defence,Magic_defence,Birthday,Province,Pet_id,City,Luck,Miss,No_defence,Hit_rate,Sum_prestige,Cur_prestige,common_tool:to_list(Cur_title),Pk_title,Max_hp,Max_mp,Cur_energy,Max_energy,Skin};

decode_p_other_role_info(_) ->
	undefined.
encode_m_role2_getrolemapinfo_toc(Record) when is_record(Record, m_role2_getrolemapinfo_toc) ->
	#m_role2_getrolemapinfo_toc{succ=Succ,reason=Reason,role_info=Role_info} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Role_info =:= undefined of
		true ->
				Role_infoFinal = 0;
		false ->
			Role_infoFinal = Role_info
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Role_info_bin = encode_p_map_role(Role_infoFinal),
	BinLen_role_info = erlang:byte_size(Role_info_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_role_info:32, Role_info_bin/binary>>;
encode_m_role2_getrolemapinfo_toc(_) -> 
	<<>>.

decode_m_role2_getrolemapinfo_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_SubBinSizerole_info:32, SubBinrole_info/binary>> = Bin1,
	Role_info = decode_p_map_role(SubBinrole_info),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_role2_getrolemapinfo_toc, Succ,common_tool:to_list(Reason),Role_info};

decode_m_role2_getrolemapinfo_toc(_) ->
	undefined.
encode_m_role2_pkmodemodify_tos(Record) when is_record(Record, m_role2_pkmodemodify_tos) ->
	#m_role2_pkmodemodify_tos{pk_mode=Pk_mode} = Record,
	case Pk_mode =:= undefined of
		true ->
				Pk_modeFinal = undefined,
				exit({required_field_not_assigned, m_role2_pkmodemodify_tos, pk_mode});
		false ->
			Pk_modeFinal = Pk_mode
	end,

	<<Pk_modeFinal:32/signed>>;
encode_m_role2_pkmodemodify_tos(_) -> 
	<<>>.

decode_m_role2_pkmodemodify_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Pk_mode:32/signed>> = Bin0,

	{m_role2_pkmodemodify_tos, Pk_mode};

decode_m_role2_pkmodemodify_tos(_) ->
	undefined.
encode_m_role2_pkmodemodify_toc(Record) when is_record(Record, m_role2_pkmodemodify_toc) ->
	#m_role2_pkmodemodify_toc{succ=Succ,reason=Reason,pk_mode=Pk_mode} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Pk_mode =:= undefined of
		true ->
				Pk_modeFinal = 0;
		false ->
			Pk_modeFinal = Pk_mode
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Pk_modeFinal:32/signed>>;
encode_m_role2_pkmodemodify_toc(_) -> 
	<<>>.

decode_m_role2_pkmodemodify_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Pk_mode:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_role2_pkmodemodify_toc, Succ,common_tool:to_list(Reason),Pk_mode};

decode_m_role2_pkmodemodify_toc(_) ->
	undefined.
encode_m_role2_zazen_tos(Record) when is_record(Record, m_role2_zazen_tos) ->
	#m_role2_zazen_tos{status=Status} = Record,
	case Status =:= undefined of
		true ->
				StatusFinal = undefined,
				exit({required_field_not_assigned, m_role2_zazen_tos, status});
		false ->
		case Status of
			true ->
				StatusFinal = 1;
			false ->
				StatusFinal = 0
		end
	end,

	<<StatusFinal:8>>;
encode_m_role2_zazen_tos(_) -> 
	<<>>.

decode_m_role2_zazen_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<StatusTmp:8>> = Bin0,
case StatusTmp of 
	1 -> 
		Status = true;
	_ ->
		Status = false
end,

	{m_role2_zazen_tos, Status};

decode_m_role2_zazen_tos(_) ->
	undefined.
encode_m_role2_zazen_toc(Record) when is_record(Record, m_role2_zazen_toc) ->
	#m_role2_zazen_toc{succ=Succ,roleid=Roleid,return_self=Return_self,status=Status,reason=Reason,sum_exp=Sum_exp} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Roleid =:= undefined of
		true ->
				RoleidFinal = 0;
		false ->
			RoleidFinal = Roleid
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Status =:= undefined of
		true ->
				StatusFinal = 1;
		false ->
			case Status of
				true ->
					StatusFinal = 1;
				false ->
					StatusFinal = 0
			end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Sum_exp =:= undefined of
		true ->
				Sum_expFinal = 0;
		false ->
			Sum_expFinal = Sum_exp
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,RoleidFinal:32/signed,Return_selfFinal:8,StatusFinal:8,ReasonLen:16, Reason2/binary,Sum_expFinal:32/signed>>;
encode_m_role2_zazen_toc(_) -> 
	<<>>.

decode_m_role2_zazen_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,Roleid:32/signed,Return_selfTmp:8,StatusTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Sum_exp:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,
case StatusTmp of 
	1 -> 
		Status = true;
	_ ->
		Status = false
end,

	{m_role2_zazen_toc, Succ,Roleid,Return_self,Status,common_tool:to_list(Reason),Sum_exp};

decode_m_role2_zazen_toc(_) ->
	undefined.
encode_m_role2_five_ele_attr_tos(Record) when is_record(Record, m_role2_five_ele_attr_tos) ->
	#m_role2_five_ele_attr_tos{type=Type} = Record,
	case Type =:= undefined of
		true ->
				TypeFinal = 0;
		false ->
			TypeFinal = Type
	end,

	<<TypeFinal:32/signed>>;
encode_m_role2_five_ele_attr_tos(_) -> 
	<<>>.

decode_m_role2_five_ele_attr_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Type:32/signed>> = Bin0,

	{m_role2_five_ele_attr_tos, Type};

decode_m_role2_five_ele_attr_tos(_) ->
	undefined.
encode_m_role2_five_ele_attr_toc(Record) when is_record(Record, m_role2_five_ele_attr_toc) ->
	#m_role2_five_ele_attr_toc{succ=Succ,reason=Reason,five_ele_attr_level=Five_ele_attr_level,five_ele_attr=Five_ele_attr} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Five_ele_attr_level =:= undefined of
		true ->
				Five_ele_attr_levelFinal = 0;
		false ->
			Five_ele_attr_levelFinal = Five_ele_attr_level
	end,
	case Five_ele_attr =:= undefined of
		true ->
				Five_ele_attrFinal = 0;
		false ->
			Five_ele_attrFinal = Five_ele_attr
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Five_ele_attr_levelFinal:32/signed,Five_ele_attrFinal:32/signed>>;
encode_m_role2_five_ele_attr_toc(_) -> 
	<<>>.

decode_m_role2_five_ele_attr_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Five_ele_attr_level:32/signed,Five_ele_attr:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_role2_five_ele_attr_toc, Succ,common_tool:to_list(Reason),Five_ele_attr_level,Five_ele_attr};

decode_m_role2_five_ele_attr_toc(_) ->
	undefined.
encode_m_role2_gray_name_tos(Record) when is_record(Record, m_role2_gray_name_tos) ->
	#m_role2_gray_name_tos{} = Record,

	<<>>;
encode_m_role2_gray_name_tos(_) -> 
	<<>>.

decode_m_role2_gray_name_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_role2_gray_name_tos};

decode_m_role2_gray_name_tos(_) ->
	undefined.
encode_m_role2_gray_name_toc(Record) when is_record(Record, m_role2_gray_name_toc) ->
	#m_role2_gray_name_toc{roleid=Roleid,if_gray_name=If_gray_name} = Record,
	case Roleid =:= undefined of
		true ->
				RoleidFinal = undefined,
				exit({required_field_not_assigned, m_role2_gray_name_toc, roleid});
		false ->
			RoleidFinal = Roleid
	end,
	case If_gray_name =:= undefined of
		true ->
				If_gray_nameFinal = undefined,
				exit({required_field_not_assigned, m_role2_gray_name_toc, if_gray_name});
		false ->
		case If_gray_name of
			true ->
				If_gray_nameFinal = 1;
			false ->
				If_gray_nameFinal = 0
		end
	end,

	<<RoleidFinal:32/signed,If_gray_nameFinal:8>>;
encode_m_role2_gray_name_toc(_) -> 
	<<>>.

decode_m_role2_gray_name_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Roleid:32/signed,If_gray_nameTmp:8>> = Bin0,
case If_gray_nameTmp of 
	1 -> 
		If_gray_name = true;
	_ ->
		If_gray_name = false
end,

	{m_role2_gray_name_toc, Roleid,If_gray_name};

decode_m_role2_gray_name_toc(_) ->
	undefined.
encode_m_role2_show_cloth_tos(Record) when is_record(Record, m_role2_show_cloth_tos) ->
	#m_role2_show_cloth_tos{show_cloth=Show_cloth} = Record,
	case Show_cloth =:= undefined of
		true ->
				Show_clothFinal = undefined,
				exit({required_field_not_assigned, m_role2_show_cloth_tos, show_cloth});
		false ->
		case Show_cloth of
			true ->
				Show_clothFinal = 1;
			false ->
				Show_clothFinal = 0
		end
	end,

	<<Show_clothFinal:8>>;
encode_m_role2_show_cloth_tos(_) -> 
	<<>>.

decode_m_role2_show_cloth_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Show_clothTmp:8>> = Bin0,
case Show_clothTmp of 
	1 -> 
		Show_cloth = true;
	_ ->
		Show_cloth = false
end,

	{m_role2_show_cloth_tos, Show_cloth};

decode_m_role2_show_cloth_tos(_) ->
	undefined.
encode_m_role2_show_cloth_toc(Record) when is_record(Record, m_role2_show_cloth_toc) ->
	#m_role2_show_cloth_toc{succ=Succ,reason=Reason,show_cloth=Show_cloth} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Show_cloth =:= undefined of
		true ->
				Show_clothFinal = 1;
		false ->
			case Show_cloth of
				true ->
					Show_clothFinal = 1;
				false ->
					Show_clothFinal = 0
			end
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Show_clothFinal:8>>;
encode_m_role2_show_cloth_toc(_) -> 
	<<>>.

decode_m_role2_show_cloth_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Show_clothTmp:8>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Show_clothTmp of 
	1 -> 
		Show_cloth = true;
	_ ->
		Show_cloth = false
end,

	{m_role2_show_cloth_toc, Succ,common_tool:to_list(Reason),Show_cloth};

decode_m_role2_show_cloth_toc(_) ->
	undefined.
encode_m_role2_show_equip_ring_tos(Record) when is_record(Record, m_role2_show_equip_ring_tos) ->
	#m_role2_show_equip_ring_tos{show_equip_ring=Show_equip_ring} = Record,
	case Show_equip_ring =:= undefined of
		true ->
				Show_equip_ringFinal = undefined,
				exit({required_field_not_assigned, m_role2_show_equip_ring_tos, show_equip_ring});
		false ->
		case Show_equip_ring of
			true ->
				Show_equip_ringFinal = 1;
			false ->
				Show_equip_ringFinal = 0
		end
	end,

	<<Show_equip_ringFinal:8>>;
encode_m_role2_show_equip_ring_tos(_) -> 
	<<>>.

decode_m_role2_show_equip_ring_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Show_equip_ringTmp:8>> = Bin0,
case Show_equip_ringTmp of 
	1 -> 
		Show_equip_ring = true;
	_ ->
		Show_equip_ring = false
end,

	{m_role2_show_equip_ring_tos, Show_equip_ring};

decode_m_role2_show_equip_ring_tos(_) ->
	undefined.
encode_m_role2_show_equip_ring_toc(Record) when is_record(Record, m_role2_show_equip_ring_toc) ->
	#m_role2_show_equip_ring_toc{succ=Succ,reason=Reason,show_equip_ring=Show_equip_ring} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Show_equip_ring =:= undefined of
		true ->
				Show_equip_ringFinal = 1;
		false ->
			case Show_equip_ring of
				true ->
					Show_equip_ringFinal = 1;
				false ->
					Show_equip_ringFinal = 0
			end
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Show_equip_ringFinal:8>>;
encode_m_role2_show_equip_ring_toc(_) -> 
	<<>>.

decode_m_role2_show_equip_ring_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Show_equip_ringTmp:8>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Show_equip_ringTmp of 
	1 -> 
		Show_equip_ring = true;
	_ ->
		Show_equip_ring = false
end,

	{m_role2_show_equip_ring_toc, Succ,common_tool:to_list(Reason),Show_equip_ring};

decode_m_role2_show_equip_ring_toc(_) ->
	undefined.
encode_m_role2_pkpoint_left_tos(Record) when is_record(Record, m_role2_pkpoint_left_tos) ->
	#m_role2_pkpoint_left_tos{} = Record,

	<<>>;
encode_m_role2_pkpoint_left_tos(_) -> 
	<<>>.

decode_m_role2_pkpoint_left_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_role2_pkpoint_left_tos};

decode_m_role2_pkpoint_left_tos(_) ->
	undefined.
encode_m_role2_pkpoint_left_toc(Record) when is_record(Record, m_role2_pkpoint_left_toc) ->
	#m_role2_pkpoint_left_toc{time_left=Time_left} = Record,
	case Time_left =:= undefined of
		true ->
				Time_leftFinal = undefined,
				exit({required_field_not_assigned, m_role2_pkpoint_left_toc, time_left});
		false ->
			Time_leftFinal = Time_left
	end,

	<<Time_leftFinal:32/signed>>;
encode_m_role2_pkpoint_left_toc(_) -> 
	<<>>.

decode_m_role2_pkpoint_left_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Time_left:32/signed>> = Bin0,

	{m_role2_pkpoint_left_toc, Time_left};

decode_m_role2_pkpoint_left_toc(_) ->
	undefined.
encode_m_role2_hair_tos(Record) when is_record(Record, m_role2_hair_tos) ->
	#m_role2_hair_tos{hair_type=Hair_type,hair_color=Hair_color} = Record,
	case Hair_type =:= undefined of
		true ->
				Hair_typeFinal = undefined,
				exit({required_field_not_assigned, m_role2_hair_tos, hair_type});
		false ->
			Hair_typeFinal = Hair_type
	end,
	case Hair_color =:= undefined of
		true ->
				Hair_colorFinal = undefined,
				exit({required_field_not_assigned, m_role2_hair_tos, hair_color});
		false ->
			Hair_colorFinal = Hair_color
	end,
	Hair_color2 = common_tool:to_binary(Hair_colorFinal),
	Hair_colorLen = erlang:byte_size(Hair_color2),

	<<Hair_typeFinal:32/signed,Hair_colorLen:16, Hair_color2/binary>>;
encode_m_role2_hair_tos(_) -> 
	<<>>.

decode_m_role2_hair_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Hair_type:32/signed,Hair_colorLen:16, Bin1/binary>> = Bin0,
	<<Hair_color:Hair_colorLen/binary>> = Bin1,

	{m_role2_hair_tos, Hair_type,common_tool:to_list(Hair_color)};

decode_m_role2_hair_tos(_) ->
	undefined.
encode_m_role2_hair_toc(Record) when is_record(Record, m_role2_hair_toc) ->
	#m_role2_hair_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_role2_hair_toc(_) -> 
	<<>>.

decode_m_role2_hair_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_role2_hair_toc, Succ,common_tool:to_list(Reason)};

decode_m_role2_hair_toc(_) ->
	undefined.
encode_m_role2_head_tos(Record) when is_record(Record, m_role2_head_tos) ->
	#m_role2_head_tos{head_id=Head_id} = Record,
	case Head_id =:= undefined of
		true ->
				Head_idFinal = undefined,
				exit({required_field_not_assigned, m_role2_head_tos, head_id});
		false ->
			Head_idFinal = Head_id
	end,

	<<Head_idFinal:32/signed>>;
encode_m_role2_head_tos(_) -> 
	<<>>.

decode_m_role2_head_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Head_id:32/signed>> = Bin0,

	{m_role2_head_tos, Head_id};

decode_m_role2_head_tos(_) ->
	undefined.
encode_m_role2_head_toc(Record) when is_record(Record, m_role2_head_toc) ->
	#m_role2_head_toc{succ=Succ,reason=Reason,head_id=Head_id} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Head_id =:= undefined of
		true ->
				Head_idFinal = 0;
		false ->
			Head_idFinal = Head_id
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Head_idFinal:32/signed>>;
encode_m_role2_head_toc(_) -> 
	<<>>.

decode_m_role2_head_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Head_id:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_role2_head_toc, Succ,common_tool:to_list(Reason),Head_id};

decode_m_role2_head_toc(_) ->
	undefined.
encode_m_role2_sex_tos(Record) when is_record(Record, m_role2_sex_tos) ->
	#m_role2_sex_tos{} = Record,

	<<>>;
encode_m_role2_sex_tos(_) -> 
	<<>>.

decode_m_role2_sex_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_role2_sex_tos};

decode_m_role2_sex_tos(_) ->
	undefined.
encode_m_role2_sex_toc(Record) when is_record(Record, m_role2_sex_toc) ->
	#m_role2_sex_toc{succ=Succ,sex=Sex,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Sex =:= undefined of
		true ->
				SexFinal = 0;
		false ->
			SexFinal = Sex
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,SexFinal:32/signed,ReasonLen:16, Reason2/binary>>;
encode_m_role2_sex_toc(_) -> 
	<<>>.

decode_m_role2_sex_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,Sex:32/signed,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_role2_sex_toc, Succ,Sex,common_tool:to_list(Reason)};

decode_m_role2_sex_toc(_) ->
	undefined.
encode_m_role2_event_tos(Record) when is_record(Record, m_role2_event_tos) ->
	#m_role2_event_tos{event_id=Event_id} = Record,
	case Event_id =:= undefined of
		true ->
				Event_idFinal = undefined,
				exit({required_field_not_assigned, m_role2_event_tos, event_id});
		false ->
			Event_idFinal = Event_id
	end,

	<<Event_idFinal:32/signed>>;
encode_m_role2_event_tos(_) -> 
	<<>>.

decode_m_role2_event_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Event_id:32/signed>> = Bin0,

	{m_role2_event_tos, Event_id};

decode_m_role2_event_tos(_) ->
	undefined.
encode_m_role2_event_toc(Record) when is_record(Record, m_role2_event_toc) ->
	#m_role2_event_toc{succ=Succ,event_id=Event_id,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Event_id =:= undefined of
		true ->
				Event_idFinal = undefined,
				exit({required_field_not_assigned, m_role2_event_toc, event_id});
		false ->
			Event_idFinal = Event_id
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,Event_idFinal:32/signed,ReasonLen:16, Reason2/binary>>;
encode_m_role2_event_toc(_) -> 
	<<>>.

decode_m_role2_event_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,Event_id:32/signed,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_role2_event_toc, Succ,Event_id,common_tool:to_list(Reason)};

decode_m_role2_event_toc(_) ->
	undefined.
encode_m_role2_system_buff_toc(Record) when is_record(Record, m_role2_system_buff_toc) ->
	#m_role2_system_buff_toc{sys_buff=Sys_buff} = Record,
	case Sys_buff =:= undefined of
		true ->
			Sys_buffFinal = [];
		false ->
			Sys_buffFinal = Sys_buff
	end,
	Sys_buff_bin = encode_p_sys_buff_infos(Sys_buffFinal, <<>>),
	SizeSys_buffFinal = erlang:length(Sys_buffFinal),
	BinLen_sys_buff = erlang:byte_size(Sys_buff_bin),

	<<SizeSys_buffFinal:16, BinLen_sys_buff:32, Sys_buff_bin/binary>>;
encode_m_role2_system_buff_toc(_) -> 
	<<>>.

decode_m_role2_system_buff_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizesys_buff:16, _BinLensys_buff:32, SubBinsys_buff/binary>> = Bin0,
	Sys_buff = lists:reverse(decode_p_sys_buff_infos(SubBinsys_buff, [])),

	{m_role2_system_buff_toc, Sys_buff};

decode_m_role2_system_buff_toc(_) ->
	undefined.
encode_p_sys_buff_info(Record) when is_record(Record, p_sys_buff_info) ->
	#p_sys_buff_info{buff_type=Buff_type,multiple=Multiple,remain_time=Remain_time} = Record,
	case Buff_type =:= undefined of
		true ->
				Buff_typeFinal = undefined,
				exit({required_field_not_assigned, p_sys_buff_info, buff_type});
		false ->
			Buff_typeFinal = Buff_type
	end,
	case Multiple =:= undefined of
		true ->
				MultipleFinal = undefined,
				exit({required_field_not_assigned, p_sys_buff_info, multiple});
		false ->
			MultipleFinal = Multiple
	end,
	case Remain_time =:= undefined of
		true ->
				Remain_timeFinal = undefined,
				exit({required_field_not_assigned, p_sys_buff_info, remain_time});
		false ->
			Remain_timeFinal = Remain_time
	end,

	<<Buff_typeFinal:32/signed,MultipleFinal:32/signed,Remain_timeFinal:32/signed>>;
encode_p_sys_buff_info(_) -> 
	<<>>.

decode_p_sys_buff_info(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Buff_type:32/signed,Multiple:32/signed,Remain_time:32/signed>> = Bin0,

	{p_sys_buff_info, Buff_type,Multiple,Remain_time};

decode_p_sys_buff_info(_) ->
	undefined.
encode_m_role2_remove_skin_buff_tos(Record) when is_record(Record, m_role2_remove_skin_buff_tos) ->
	#m_role2_remove_skin_buff_tos{} = Record,

	<<>>;
encode_m_role2_remove_skin_buff_tos(_) -> 
	<<>>.

decode_m_role2_remove_skin_buff_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_role2_remove_skin_buff_tos};

decode_m_role2_remove_skin_buff_tos(_) ->
	undefined.
encode_m_role2_remove_skin_buff_toc(Record) when is_record(Record, m_role2_remove_skin_buff_toc) ->
	#m_role2_remove_skin_buff_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_role2_remove_skin_buff_toc(_) -> 
	<<>>.

decode_m_role2_remove_skin_buff_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_role2_remove_skin_buff_toc, Succ,common_tool:to_list(Reason)};

decode_m_role2_remove_skin_buff_toc(_) ->
	undefined.
encode_m_role2_add_energy_tos(Record) when is_record(Record, m_role2_add_energy_tos) ->
	#m_role2_add_energy_tos{gold_exchange=Gold_exchange} = Record,
	case Gold_exchange =:= undefined of
		true ->
				Gold_exchangeFinal = undefined,
				exit({required_field_not_assigned, m_role2_add_energy_tos, gold_exchange});
		false ->
			Gold_exchangeFinal = Gold_exchange
	end,

	<<Gold_exchangeFinal:32/signed>>;
encode_m_role2_add_energy_tos(_) -> 
	<<>>.

decode_m_role2_add_energy_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Gold_exchange:32/signed>> = Bin0,

	{m_role2_add_energy_tos, Gold_exchange};

decode_m_role2_add_energy_tos(_) ->
	undefined.
encode_m_role2_add_energy_toc(Record) when is_record(Record, m_role2_add_energy_toc) ->
	#m_role2_add_energy_toc{succ=Succ,reason=Reason,gold=Gold,gold_bind=Gold_bind,energy=Energy,energy_remain=Energy_remain} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Gold =:= undefined of
		true ->
				GoldFinal = 0;
		false ->
			GoldFinal = Gold
	end,
	case Gold_bind =:= undefined of
		true ->
				Gold_bindFinal = 0;
		false ->
			Gold_bindFinal = Gold_bind
	end,
	case Energy =:= undefined of
		true ->
				EnergyFinal = 0;
		false ->
			EnergyFinal = Energy
	end,
	case Energy_remain =:= undefined of
		true ->
				Energy_remainFinal = 0;
		false ->
			Energy_remainFinal = Energy_remain
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,GoldFinal:32/signed,Gold_bindFinal:32/signed,EnergyFinal:32/signed,Energy_remainFinal:32/signed>>;
encode_m_role2_add_energy_toc(_) -> 
	<<>>.

decode_m_role2_add_energy_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Gold:32/signed,Gold_bind:32/signed,Energy:32/signed,Energy_remain:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_role2_add_energy_toc, Succ,common_tool:to_list(Reason),Gold,Gold_bind,Energy,Energy_remain};

decode_m_role2_add_energy_toc(_) ->
	undefined.
encode_m_role2_online_broadcast_toc(Record) when is_record(Record, m_role2_online_broadcast_toc) ->
	#m_role2_online_broadcast_toc{role_type=Role_type,role_name=Role_name,faction_id=Faction_id} = Record,
	case Role_type =:= undefined of
		true ->
				Role_typeFinal = undefined,
				exit({required_field_not_assigned, m_role2_online_broadcast_toc, role_type});
		false ->
			Role_typeFinal = Role_type
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = undefined,
				exit({required_field_not_assigned, m_role2_online_broadcast_toc, role_name});
		false ->
			Role_nameFinal = Role_name
	end,
	case Faction_id =:= undefined of
		true ->
				Faction_idFinal = 0;
		false ->
			Faction_idFinal = Faction_id
	end,
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),

	<<Role_typeFinal:32/signed,Role_nameLen:16, Role_name2/binary,Faction_idFinal:32/signed>>;
encode_m_role2_online_broadcast_toc(_) -> 
	<<>>.

decode_m_role2_online_broadcast_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_type:32/signed,Role_nameLen:16, Bin1/binary>> = Bin0,
	<<Role_name:Role_nameLen/binary,Faction_id:32/signed>> = Bin1,

	{m_role2_online_broadcast_toc, Role_type,common_tool:to_list(Role_name),Faction_id};

decode_m_role2_online_broadcast_toc(_) ->
	undefined.
encode_m_role2_query_faction_online_rank_tos(Record) when is_record(Record, m_role2_query_faction_online_rank_tos) ->
	#m_role2_query_faction_online_rank_tos{op_type=Op_type,faction_id=Faction_id} = Record,
	case Op_type =:= undefined of
		true ->
				Op_typeFinal = 0;
		false ->
			Op_typeFinal = Op_type
	end,
	case Faction_id =:= undefined of
		true ->
				Faction_idFinal = 0;
		false ->
			Faction_idFinal = Faction_id
	end,

	<<Op_typeFinal:32/signed,Faction_idFinal:32/signed>>;
encode_m_role2_query_faction_online_rank_tos(_) -> 
	<<>>.

decode_m_role2_query_faction_online_rank_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Op_type:32/signed,Faction_id:32/signed>> = Bin0,

	{m_role2_query_faction_online_rank_tos, Op_type,Faction_id};

decode_m_role2_query_faction_online_rank_tos(_) ->
	undefined.
encode_m_role2_query_faction_online_rank_toc(Record) when is_record(Record, m_role2_query_faction_online_rank_toc) ->
	#m_role2_query_faction_online_rank_toc{op_type=Op_type,faction_id=Faction_id,succ=Succ,reason=Reason,reason_code=Reason_code,online_rank=Online_rank} = Record,
	case Op_type =:= undefined of
		true ->
				Op_typeFinal = 0;
		false ->
			Op_typeFinal = Op_type
	end,
	case Faction_id =:= undefined of
		true ->
				Faction_idFinal = 0;
		false ->
			Faction_idFinal = Faction_id
	end,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Reason_code =:= undefined of
		true ->
				Reason_codeFinal = 0;
		false ->
			Reason_codeFinal = Reason_code
	end,
	case Online_rank =:= undefined of
		true ->
			Online_rankFinal = [];
		false ->
			Online_rankFinal = Online_rank
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Online_rank_bin = encode_p_faction_online_ranks(Online_rankFinal, <<>>),
	SizeOnline_rankFinal = erlang:length(Online_rankFinal),
	BinLen_online_rank = erlang:byte_size(Online_rank_bin),

	<<Op_typeFinal:32/signed,Faction_idFinal:32/signed,SuccFinal:8,ReasonLen:16, Reason2/binary,Reason_codeFinal:32/signed,SizeOnline_rankFinal:16, BinLen_online_rank:32, Online_rank_bin/binary>>;
encode_m_role2_query_faction_online_rank_toc(_) -> 
	<<>>.

decode_m_role2_query_faction_online_rank_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Op_type:32/signed,Faction_id:32/signed,SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Reason_code:32/signed,_Sizeonline_rank:16, _BinLenonline_rank:32, SubBinonline_rank/binary>> = Bin1,
	Online_rank = lists:reverse(decode_p_faction_online_ranks(SubBinonline_rank, [])),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_role2_query_faction_online_rank_toc, Op_type,Faction_id,Succ,common_tool:to_list(Reason),Reason_code,Online_rank};

decode_m_role2_query_faction_online_rank_toc(_) ->
	undefined.
encode_p_faction_online_rank(Record) when is_record(Record, p_faction_online_rank) ->
	#p_faction_online_rank{faction_id=Faction_id,role_id=Role_id,role_name=Role_name,role_level=Role_level} = Record,
	case Faction_id =:= undefined of
		true ->
				Faction_idFinal = undefined,
				exit({required_field_not_assigned, p_faction_online_rank, faction_id});
		false ->
			Faction_idFinal = Faction_id
	end,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, p_faction_online_rank, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = undefined,
				exit({required_field_not_assigned, p_faction_online_rank, role_name});
		false ->
			Role_nameFinal = Role_name
	end,
	case Role_level =:= undefined of
		true ->
				Role_levelFinal = undefined,
				exit({required_field_not_assigned, p_faction_online_rank, role_level});
		false ->
			Role_levelFinal = Role_level
	end,
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),

	<<Faction_idFinal:32/signed,Role_idFinal:32/signed,Role_nameLen:16, Role_name2/binary,Role_levelFinal:32/signed>>;
encode_p_faction_online_rank(_) -> 
	<<>>.

decode_p_faction_online_rank(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Faction_id:32/signed,Role_id:32/signed,Role_nameLen:16, Bin1/binary>> = Bin0,
	<<Role_name:Role_nameLen/binary,Role_level:32/signed>> = Bin1,

	{p_faction_online_rank, Faction_id,Role_id,common_tool:to_list(Role_name),Role_level};

decode_p_faction_online_rank(_) ->
	undefined.
encode_m_mission_listener_toc(Record) when is_record(Record, m_mission_listener_toc) ->
	#m_mission_listener_toc{code=Code,code_data=Code_data,mission_id=Mission_id,listener=Listener} = Record,
	case Code =:= undefined of
		true ->
				CodeFinal = 0;
		false ->
			CodeFinal = Code
	end,
	case Code_data =:= undefined of
		true ->
			Code_dataFinal = [];
		false ->
			Code_dataFinal = Code_data
	end,
	case Mission_id =:= undefined of
		true ->
				Mission_idFinal = 0;
		false ->
			Mission_idFinal = Mission_id
	end,
	case Listener =:= undefined of
		true ->
				ListenerFinal = 0;
		false ->
			ListenerFinal = Listener
	end,
	Code_data_bin = encode_int32s(Code_dataFinal, <<>>),
	SizeCode_dataFinal = erlang:length(Code_dataFinal),
	BinLen_code_data = erlang:byte_size(Code_data_bin),
	Listener_bin = encode_p_mission_listener(ListenerFinal),
	BinLen_listener = erlang:byte_size(Listener_bin),

	<<CodeFinal:32/signed,SizeCode_dataFinal:16, BinLen_code_data:32, Code_data_bin/binary,Mission_idFinal:32/signed,BinLen_listener:32, Listener_bin/binary>>;
encode_m_mission_listener_toc(_) -> 
	<<>>.

decode_m_mission_listener_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Code:32/signed,_Sizecode_data:16, BinLencode_data:32, Bin1/binary>> = Bin0,
	<<SubBincode_data:BinLencode_data/binary, Bin2/binary>> = Bin1, 
	Code_data = lists:reverse(decode_int32s(SubBincode_data, [])),
	<<Mission_id:32/signed,_SubBinSizelistener:32, SubBinlistener/binary>> = Bin2,
	Listener = decode_p_mission_listener(SubBinlistener),

	{m_mission_listener_toc, Code,Code_data,Mission_id,Listener};

decode_m_mission_listener_toc(_) ->
	undefined.
encode_p_mission_listener(Record) when is_record(Record, p_mission_listener) ->
	#p_mission_listener{type=Type,value=Value,int_list=Int_list,need_num=Need_num,current_num=Current_num} = Record,
	case Type =:= undefined of
		true ->
				TypeFinal = undefined,
				exit({required_field_not_assigned, p_mission_listener, type});
		false ->
			TypeFinal = Type
	end,
	case Value =:= undefined of
		true ->
				ValueFinal = undefined,
				exit({required_field_not_assigned, p_mission_listener, value});
		false ->
			ValueFinal = Value
	end,
	case Int_list =:= undefined of
		true ->
			Int_listFinal = [];
		false ->
			Int_listFinal = Int_list
	end,
	case Need_num =:= undefined of
		true ->
				Need_numFinal = undefined,
				exit({required_field_not_assigned, p_mission_listener, need_num});
		false ->
			Need_numFinal = Need_num
	end,
	case Current_num =:= undefined of
		true ->
				Current_numFinal = undefined,
				exit({required_field_not_assigned, p_mission_listener, current_num});
		false ->
			Current_numFinal = Current_num
	end,
	Int_list_bin = encode_int32s(Int_listFinal, <<>>),
	SizeInt_listFinal = erlang:length(Int_listFinal),
	BinLen_int_list = erlang:byte_size(Int_list_bin),

	<<TypeFinal:32/signed,ValueFinal:32/signed,SizeInt_listFinal:16, BinLen_int_list:32, Int_list_bin/binary,Need_numFinal:32/signed,Current_numFinal:32/signed>>;
encode_p_mission_listener(_) -> 
	<<>>.

decode_p_mission_listener(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Type:32/signed,Value:32/signed,_Sizeint_list:16, BinLenint_list:32, Bin1/binary>> = Bin0,
	<<SubBinint_list:BinLenint_list/binary, Bin2/binary>> = Bin1, 
	Int_list = lists:reverse(decode_int32s(SubBinint_list, [])),
	<<Need_num:32/signed,Current_num:32/signed>> = Bin2,

	{p_mission_listener, Type,Value,Int_list,Need_num,Current_num};

decode_p_mission_listener(_) ->
	undefined.
encode_p_mission_info(Record) when is_record(Record, p_mission_info) ->
	#p_mission_info{id=Id,model=Model,type=Type,current_status=Current_status,pre_status=Pre_status,current_model_status=Current_model_status,pre_model_status=Pre_model_status,commit_times=Commit_times,succ_times=Succ_times,accept_time=Accept_time,accept_level=Accept_level,status_change_time=Status_change_time,listener_list=Listener_list,int_list_1=Int_list_1,int_list_2=Int_list_2,int_list_3=Int_list_3,int_list_4=Int_list_4} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = 0;
		false ->
			IdFinal = Id
	end,
	case Model =:= undefined of
		true ->
				ModelFinal = 0;
		false ->
			ModelFinal = Model
	end,
	case Type =:= undefined of
		true ->
				TypeFinal = 0;
		false ->
			TypeFinal = Type
	end,
	case Current_status =:= undefined of
		true ->
				Current_statusFinal = 0;
		false ->
			Current_statusFinal = Current_status
	end,
	case Pre_status =:= undefined of
		true ->
				Pre_statusFinal = 0;
		false ->
			Pre_statusFinal = Pre_status
	end,
	case Current_model_status =:= undefined of
		true ->
				Current_model_statusFinal = 0;
		false ->
			Current_model_statusFinal = Current_model_status
	end,
	case Pre_model_status =:= undefined of
		true ->
				Pre_model_statusFinal = 0;
		false ->
			Pre_model_statusFinal = Pre_model_status
	end,
	case Commit_times =:= undefined of
		true ->
				Commit_timesFinal = 0;
		false ->
			Commit_timesFinal = Commit_times
	end,
	case Succ_times =:= undefined of
		true ->
				Succ_timesFinal = 0;
		false ->
			Succ_timesFinal = Succ_times
	end,
	case Accept_time =:= undefined of
		true ->
				Accept_timeFinal = 0;
		false ->
			Accept_timeFinal = Accept_time
	end,
	case Accept_level =:= undefined of
		true ->
				Accept_levelFinal = 0;
		false ->
			Accept_levelFinal = Accept_level
	end,
	case Status_change_time =:= undefined of
		true ->
				Status_change_timeFinal = 0;
		false ->
			Status_change_timeFinal = Status_change_time
	end,
	case Listener_list =:= undefined of
		true ->
			Listener_listFinal = [];
		false ->
			Listener_listFinal = Listener_list
	end,
	case Int_list_1 =:= undefined of
		true ->
			Int_list_1Final = [];
		false ->
			Int_list_1Final = Int_list_1
	end,
	case Int_list_2 =:= undefined of
		true ->
			Int_list_2Final = [];
		false ->
			Int_list_2Final = Int_list_2
	end,
	case Int_list_3 =:= undefined of
		true ->
			Int_list_3Final = [];
		false ->
			Int_list_3Final = Int_list_3
	end,
	case Int_list_4 =:= undefined of
		true ->
			Int_list_4Final = [];
		false ->
			Int_list_4Final = Int_list_4
	end,
	Listener_list_bin = encode_p_mission_listeners(Listener_listFinal, <<>>),
	SizeListener_listFinal = erlang:length(Listener_listFinal),
	BinLen_listener_list = erlang:byte_size(Listener_list_bin),
	Int_list_1_bin = encode_int32s(Int_list_1Final, <<>>),
	SizeInt_list_1Final = erlang:length(Int_list_1Final),
	BinLen_int_list_1 = erlang:byte_size(Int_list_1_bin),
	Int_list_2_bin = encode_int32s(Int_list_2Final, <<>>),
	SizeInt_list_2Final = erlang:length(Int_list_2Final),
	BinLen_int_list_2 = erlang:byte_size(Int_list_2_bin),
	Int_list_3_bin = encode_int32s(Int_list_3Final, <<>>),
	SizeInt_list_3Final = erlang:length(Int_list_3Final),
	BinLen_int_list_3 = erlang:byte_size(Int_list_3_bin),
	Int_list_4_bin = encode_int32s(Int_list_4Final, <<>>),
	SizeInt_list_4Final = erlang:length(Int_list_4Final),
	BinLen_int_list_4 = erlang:byte_size(Int_list_4_bin),

	<<IdFinal:32/signed,ModelFinal:32/signed,TypeFinal:32/signed,Current_statusFinal:32/signed,Pre_statusFinal:32/signed,Current_model_statusFinal:32/signed,Pre_model_statusFinal:32/signed,Commit_timesFinal:32/signed,Succ_timesFinal:32/signed,Accept_timeFinal:32/signed,Accept_levelFinal:32/signed,Status_change_timeFinal:32/signed,SizeListener_listFinal:16, BinLen_listener_list:32, Listener_list_bin/binary,SizeInt_list_1Final:16, BinLen_int_list_1:32, Int_list_1_bin/binary,SizeInt_list_2Final:16, BinLen_int_list_2:32, Int_list_2_bin/binary,SizeInt_list_3Final:16, BinLen_int_list_3:32, Int_list_3_bin/binary,SizeInt_list_4Final:16, BinLen_int_list_4:32, Int_list_4_bin/binary>>;
encode_p_mission_info(_) -> 
	<<>>.

decode_p_mission_info(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed,Model:32/signed,Type:32/signed,Current_status:32/signed,Pre_status:32/signed,Current_model_status:32/signed,Pre_model_status:32/signed,Commit_times:32/signed,Succ_times:32/signed,Accept_time:32/signed,Accept_level:32/signed,Status_change_time:32/signed,_Sizelistener_list:16, BinLenlistener_list:32, Bin1/binary>> = Bin0,
	<<SubBinlistener_list:BinLenlistener_list/binary, Bin2/binary>> = Bin1, 
	Listener_list = lists:reverse(decode_p_mission_listeners(SubBinlistener_list, [])),
	<<_Sizeint_list_1:16, BinLenint_list_1:32, Bin3/binary>> = Bin2,
	<<SubBinint_list_1:BinLenint_list_1/binary, Bin4/binary>> = Bin3, 
	Int_list_1 = lists:reverse(decode_int32s(SubBinint_list_1, [])),
	<<_Sizeint_list_2:16, BinLenint_list_2:32, Bin5/binary>> = Bin4,
	<<SubBinint_list_2:BinLenint_list_2/binary, Bin6/binary>> = Bin5, 
	Int_list_2 = lists:reverse(decode_int32s(SubBinint_list_2, [])),
	<<_Sizeint_list_3:16, BinLenint_list_3:32, Bin7/binary>> = Bin6,
	<<SubBinint_list_3:BinLenint_list_3/binary, Bin8/binary>> = Bin7, 
	Int_list_3 = lists:reverse(decode_int32s(SubBinint_list_3, [])),
	<<_Sizeint_list_4:16, _BinLenint_list_4:32, SubBinint_list_4/binary>> = Bin8,
	Int_list_4 = lists:reverse(decode_int32s(SubBinint_list_4, [])),

	{p_mission_info, Id,Model,Type,Current_status,Pre_status,Current_model_status,Pre_model_status,Commit_times,Succ_times,Accept_time,Accept_level,Status_change_time,Listener_list,Int_list_1,Int_list_2,Int_list_3,Int_list_4};

decode_p_mission_info(_) ->
	undefined.
encode_m_mission_list_tos(Record) when is_record(Record, m_mission_list_tos) ->
	#m_mission_list_tos{} = Record,

	<<>>;
encode_m_mission_list_tos(_) -> 
	<<>>.

decode_m_mission_list_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_mission_list_tos};

decode_m_mission_list_tos(_) ->
	undefined.
encode_m_mission_list_toc(Record) when is_record(Record, m_mission_list_toc) ->
	#m_mission_list_toc{code=Code,code_data=Code_data,list=List} = Record,
	case Code =:= undefined of
		true ->
				CodeFinal = 0;
		false ->
			CodeFinal = Code
	end,
	case Code_data =:= undefined of
		true ->
			Code_dataFinal = [];
		false ->
			Code_dataFinal = Code_data
	end,
	case List =:= undefined of
		true ->
			ListFinal = [];
		false ->
			ListFinal = List
	end,
	Code_data_bin = encode_int32s(Code_dataFinal, <<>>),
	SizeCode_dataFinal = erlang:length(Code_dataFinal),
	BinLen_code_data = erlang:byte_size(Code_data_bin),
	List_bin = encode_p_mission_infos(ListFinal, <<>>),
	SizeListFinal = erlang:length(ListFinal),
	BinLen_list = erlang:byte_size(List_bin),

	<<CodeFinal:32/signed,SizeCode_dataFinal:16, BinLen_code_data:32, Code_data_bin/binary,SizeListFinal:16, BinLen_list:32, List_bin/binary>>;
encode_m_mission_list_toc(_) -> 
	<<>>.

decode_m_mission_list_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Code:32/signed,_Sizecode_data:16, BinLencode_data:32, Bin1/binary>> = Bin0,
	<<SubBincode_data:BinLencode_data/binary, Bin2/binary>> = Bin1, 
	Code_data = lists:reverse(decode_int32s(SubBincode_data, [])),
	<<_Sizelist:16, _BinLenlist:32, SubBinlist/binary>> = Bin2,
	List = lists:reverse(decode_p_mission_infos(SubBinlist, [])),

	{m_mission_list_toc, Code,Code_data,List};

decode_m_mission_list_toc(_) ->
	undefined.
encode_m_mission_vs_tos(Record) when is_record(Record, m_mission_vs_tos) ->
	#m_mission_vs_tos{} = Record,

	<<>>;
encode_m_mission_vs_tos(_) -> 
	<<>>.

decode_m_mission_vs_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_mission_vs_tos};

decode_m_mission_vs_tos(_) ->
	undefined.
encode_m_mission_vs_toc(Record) when is_record(Record, m_mission_vs_toc) ->
	#m_mission_vs_toc{version=Version} = Record,
	case Version =:= undefined of
		true ->
				VersionFinal = undefined,
				exit({required_field_not_assigned, m_mission_vs_toc, version});
		false ->
			VersionFinal = Version
	end,

	<<VersionFinal:32/signed>>;
encode_m_mission_vs_toc(_) -> 
	<<>>.

decode_m_mission_vs_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Version:32/signed>> = Bin0,

	{m_mission_vs_toc, Version};

decode_m_mission_vs_toc(_) ->
	undefined.
encode_m_mission_do_tos(Record) when is_record(Record, m_mission_do_tos) ->
	#m_mission_do_tos{id=Id,npc_id=Npc_id,prop_choose=Prop_choose,int_list_1=Int_list_1,int_list_2=Int_list_2} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, m_mission_do_tos, id});
		false ->
			IdFinal = Id
	end,
	case Npc_id =:= undefined of
		true ->
				Npc_idFinal = undefined,
				exit({required_field_not_assigned, m_mission_do_tos, npc_id});
		false ->
			Npc_idFinal = Npc_id
	end,
	case Prop_choose =:= undefined of
		true ->
			Prop_chooseFinal = [];
		false ->
			Prop_chooseFinal = Prop_choose
	end,
	case Int_list_1 =:= undefined of
		true ->
			Int_list_1Final = [];
		false ->
			Int_list_1Final = Int_list_1
	end,
	case Int_list_2 =:= undefined of
		true ->
			Int_list_2Final = [];
		false ->
			Int_list_2Final = Int_list_2
	end,
	Prop_choose_bin = encode_int32s(Prop_chooseFinal, <<>>),
	SizeProp_chooseFinal = erlang:length(Prop_chooseFinal),
	BinLen_prop_choose = erlang:byte_size(Prop_choose_bin),
	Int_list_1_bin = encode_int32s(Int_list_1Final, <<>>),
	SizeInt_list_1Final = erlang:length(Int_list_1Final),
	BinLen_int_list_1 = erlang:byte_size(Int_list_1_bin),
	Int_list_2_bin = encode_int32s(Int_list_2Final, <<>>),
	SizeInt_list_2Final = erlang:length(Int_list_2Final),
	BinLen_int_list_2 = erlang:byte_size(Int_list_2_bin),

	<<IdFinal:32/signed,Npc_idFinal:32/signed,SizeProp_chooseFinal:16, BinLen_prop_choose:32, Prop_choose_bin/binary,SizeInt_list_1Final:16, BinLen_int_list_1:32, Int_list_1_bin/binary,SizeInt_list_2Final:16, BinLen_int_list_2:32, Int_list_2_bin/binary>>;
encode_m_mission_do_tos(_) -> 
	<<>>.

decode_m_mission_do_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed,Npc_id:32/signed,_Sizeprop_choose:16, BinLenprop_choose:32, Bin1/binary>> = Bin0,
	<<SubBinprop_choose:BinLenprop_choose/binary, Bin2/binary>> = Bin1, 
	Prop_choose = lists:reverse(decode_int32s(SubBinprop_choose, [])),
	<<_Sizeint_list_1:16, BinLenint_list_1:32, Bin3/binary>> = Bin2,
	<<SubBinint_list_1:BinLenint_list_1/binary, Bin4/binary>> = Bin3, 
	Int_list_1 = lists:reverse(decode_int32s(SubBinint_list_1, [])),
	<<_Sizeint_list_2:16, _BinLenint_list_2:32, SubBinint_list_2/binary>> = Bin4,
	Int_list_2 = lists:reverse(decode_int32s(SubBinint_list_2, [])),

	{m_mission_do_tos, Id,Npc_id,Prop_choose,Int_list_1,Int_list_2};

decode_m_mission_do_tos(_) ->
	undefined.
encode_p_mission_reward_data(Record) when is_record(Record, p_mission_reward_data) ->
	#p_mission_reward_data{exp=Exp,silver=Silver,silver_bind=Silver_bind,prop=Prop,prestige=Prestige} = Record,
	case Exp =:= undefined of
		true ->
				ExpFinal = 0;
		false ->
			ExpFinal = Exp
	end,
	case Silver =:= undefined of
		true ->
				SilverFinal = 0;
		false ->
			SilverFinal = Silver
	end,
	case Silver_bind =:= undefined of
		true ->
				Silver_bindFinal = 0;
		false ->
			Silver_bindFinal = Silver_bind
	end,
	case Prop =:= undefined of
		true ->
			PropFinal = [];
		false ->
			PropFinal = Prop
	end,
	case Prestige =:= undefined of
		true ->
				PrestigeFinal = 0;
		false ->
			PrestigeFinal = Prestige
	end,
	Prop_bin = encode_p_mission_props(PropFinal, <<>>),
	SizePropFinal = erlang:length(PropFinal),
	BinLen_prop = erlang:byte_size(Prop_bin),

	<<ExpFinal:32/signed,SilverFinal:32/signed,Silver_bindFinal:32/signed,SizePropFinal:16, BinLen_prop:32, Prop_bin/binary,PrestigeFinal:32/signed>>;
encode_p_mission_reward_data(_) -> 
	<<>>.

decode_p_mission_reward_data(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Exp:32/signed,Silver:32/signed,Silver_bind:32/signed,_Sizeprop:16, BinLenprop:32, Bin1/binary>> = Bin0,
	<<SubBinprop:BinLenprop/binary, Bin2/binary>> = Bin1, 
	Prop = lists:reverse(decode_p_mission_props(SubBinprop, [])),
	<<Prestige:32/signed>> = Bin2,

	{p_mission_reward_data, Exp,Silver,Silver_bind,Prop,Prestige};

decode_p_mission_reward_data(_) ->
	undefined.
encode_p_mission_prop(Record) when is_record(Record, p_mission_prop) ->
	#p_mission_prop{prop_id=Prop_id,prop_type=Prop_type,prop_num=Prop_num,bind=Bind,color=Color} = Record,
	case Prop_id =:= undefined of
		true ->
				Prop_idFinal = undefined,
				exit({required_field_not_assigned, p_mission_prop, prop_id});
		false ->
			Prop_idFinal = Prop_id
	end,
	case Prop_type =:= undefined of
		true ->
				Prop_typeFinal = undefined,
				exit({required_field_not_assigned, p_mission_prop, prop_type});
		false ->
			Prop_typeFinal = Prop_type
	end,
	case Prop_num =:= undefined of
		true ->
				Prop_numFinal = undefined,
				exit({required_field_not_assigned, p_mission_prop, prop_num});
		false ->
			Prop_numFinal = Prop_num
	end,
	case Bind =:= undefined of
		true ->
				BindFinal = undefined,
				exit({required_field_not_assigned, p_mission_prop, bind});
		false ->
		case Bind of
			true ->
				BindFinal = 1;
			false ->
				BindFinal = 0
		end
	end,
	case Color =:= undefined of
		true ->
				ColorFinal = undefined,
				exit({required_field_not_assigned, p_mission_prop, color});
		false ->
			ColorFinal = Color
	end,

	<<Prop_idFinal:32/signed,Prop_typeFinal:32/signed,Prop_numFinal:32/signed,BindFinal:8,ColorFinal:32/signed>>;
encode_p_mission_prop(_) -> 
	<<>>.

decode_p_mission_prop(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Prop_id:32/signed,Prop_type:32/signed,Prop_num:32/signed,BindTmp:8,Color:32/signed>> = Bin0,
case BindTmp of 
	1 -> 
		Bind = true;
	_ ->
		Bind = false
end,

	{p_mission_prop, Prop_id,Prop_type,Prop_num,Bind,Color};

decode_p_mission_prop(_) ->
	undefined.
encode_m_mission_do_toc(Record) when is_record(Record, m_mission_do_toc) ->
	#m_mission_do_toc{id=Id,current_status=Current_status,pre_status=Pre_status,current_model_status=Current_model_status,pre_model_status=Pre_model_status,reward_data=Reward_data,code=Code,code_data=Code_data} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, m_mission_do_toc, id});
		false ->
			IdFinal = Id
	end,
	case Current_status =:= undefined of
		true ->
				Current_statusFinal = 0;
		false ->
			Current_statusFinal = Current_status
	end,
	case Pre_status =:= undefined of
		true ->
				Pre_statusFinal = 0;
		false ->
			Pre_statusFinal = Pre_status
	end,
	case Current_model_status =:= undefined of
		true ->
				Current_model_statusFinal = 0;
		false ->
			Current_model_statusFinal = Current_model_status
	end,
	case Pre_model_status =:= undefined of
		true ->
				Pre_model_statusFinal = 0;
		false ->
			Pre_model_statusFinal = Pre_model_status
	end,
	case Reward_data =:= undefined of
		true ->
				Reward_dataFinal = 0;
		false ->
			Reward_dataFinal = Reward_data
	end,
	case Code =:= undefined of
		true ->
				CodeFinal = 0;
		false ->
			CodeFinal = Code
	end,
	case Code_data =:= undefined of
		true ->
			Code_dataFinal = [];
		false ->
			Code_dataFinal = Code_data
	end,
	Reward_data_bin = encode_p_mission_reward_data(Reward_dataFinal),
	BinLen_reward_data = erlang:byte_size(Reward_data_bin),
	Code_data_bin = encode_int32s(Code_dataFinal, <<>>),
	SizeCode_dataFinal = erlang:length(Code_dataFinal),
	BinLen_code_data = erlang:byte_size(Code_data_bin),

	<<IdFinal:32/signed,Current_statusFinal:32/signed,Pre_statusFinal:32/signed,Current_model_statusFinal:32/signed,Pre_model_statusFinal:32/signed,BinLen_reward_data:32, Reward_data_bin/binary,CodeFinal:32/signed,SizeCode_dataFinal:16, BinLen_code_data:32, Code_data_bin/binary>>;
encode_m_mission_do_toc(_) -> 
	<<>>.

decode_m_mission_do_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed,Current_status:32/signed,Pre_status:32/signed,Current_model_status:32/signed,Pre_model_status:32/signed,SubBinSizereward_data:32, Bin1/binary>> = Bin0,
	<<SubBinreward_data:SubBinSizereward_data/binary, Bin2/binary>> = Bin1,
	Reward_data = decode_p_mission_reward_data(SubBinreward_data),
	<<Code:32/signed,_Sizecode_data:16, _BinLencode_data:32, SubBincode_data/binary>> = Bin2,
	Code_data = lists:reverse(decode_int32s(SubBincode_data, [])),

	{m_mission_do_toc, Id,Current_status,Pre_status,Current_model_status,Pre_model_status,Reward_data,Code,Code_data};

decode_m_mission_do_toc(_) ->
	undefined.
encode_m_mission_cancel_tos(Record) when is_record(Record, m_mission_cancel_tos) ->
	#m_mission_cancel_tos{id=Id} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, m_mission_cancel_tos, id});
		false ->
			IdFinal = Id
	end,

	<<IdFinal:32/signed>>;
encode_m_mission_cancel_tos(_) -> 
	<<>>.

decode_m_mission_cancel_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed>> = Bin0,

	{m_mission_cancel_tos, Id};

decode_m_mission_cancel_tos(_) ->
	undefined.
encode_m_mission_cancel_toc(Record) when is_record(Record, m_mission_cancel_toc) ->
	#m_mission_cancel_toc{id=Id,current_status=Current_status,current_model_status=Current_model_status,pre_model_status=Pre_model_status,code=Code,code_data=Code_data} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, m_mission_cancel_toc, id});
		false ->
			IdFinal = Id
	end,
	case Current_status =:= undefined of
		true ->
				Current_statusFinal = 0;
		false ->
			Current_statusFinal = Current_status
	end,
	case Current_model_status =:= undefined of
		true ->
				Current_model_statusFinal = 0;
		false ->
			Current_model_statusFinal = Current_model_status
	end,
	case Pre_model_status =:= undefined of
		true ->
				Pre_model_statusFinal = 0;
		false ->
			Pre_model_statusFinal = Pre_model_status
	end,
	case Code =:= undefined of
		true ->
				CodeFinal = 0;
		false ->
			CodeFinal = Code
	end,
	case Code_data =:= undefined of
		true ->
			Code_dataFinal = [];
		false ->
			Code_dataFinal = Code_data
	end,
	Code_data_bin = encode_int32s(Code_dataFinal, <<>>),
	SizeCode_dataFinal = erlang:length(Code_dataFinal),
	BinLen_code_data = erlang:byte_size(Code_data_bin),

	<<IdFinal:32/signed,Current_statusFinal:32/signed,Current_model_statusFinal:32/signed,Pre_model_statusFinal:32/signed,CodeFinal:32/signed,SizeCode_dataFinal:16, BinLen_code_data:32, Code_data_bin/binary>>;
encode_m_mission_cancel_toc(_) -> 
	<<>>.

decode_m_mission_cancel_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed,Current_status:32/signed,Current_model_status:32/signed,Pre_model_status:32/signed,Code:32/signed,_Sizecode_data:16, _BinLencode_data:32, SubBincode_data/binary>> = Bin0,
	Code_data = lists:reverse(decode_int32s(SubBincode_data, [])),

	{m_mission_cancel_toc, Id,Current_status,Current_model_status,Pre_model_status,Code,Code_data};

decode_m_mission_cancel_toc(_) ->
	undefined.
encode_m_mission_update_toc(Record) when is_record(Record, m_mission_update_toc) ->
	#m_mission_update_toc{del_mission_list=Del_mission_list,update_mission_list=Update_mission_list} = Record,
	case Del_mission_list =:= undefined of
		true ->
			Del_mission_listFinal = [];
		false ->
			Del_mission_listFinal = Del_mission_list
	end,
	case Update_mission_list =:= undefined of
		true ->
			Update_mission_listFinal = [];
		false ->
			Update_mission_listFinal = Update_mission_list
	end,
	Del_mission_list_bin = encode_int32s(Del_mission_listFinal, <<>>),
	SizeDel_mission_listFinal = erlang:length(Del_mission_listFinal),
	BinLen_del_mission_list = erlang:byte_size(Del_mission_list_bin),
	Update_mission_list_bin = encode_p_mission_infos(Update_mission_listFinal, <<>>),
	SizeUpdate_mission_listFinal = erlang:length(Update_mission_listFinal),
	BinLen_update_mission_list = erlang:byte_size(Update_mission_list_bin),

	<<SizeDel_mission_listFinal:16, BinLen_del_mission_list:32, Del_mission_list_bin/binary,SizeUpdate_mission_listFinal:16, BinLen_update_mission_list:32, Update_mission_list_bin/binary>>;
encode_m_mission_update_toc(_) -> 
	<<>>.

decode_m_mission_update_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizedel_mission_list:16, BinLendel_mission_list:32, Bin1/binary>> = Bin0,
	<<SubBindel_mission_list:BinLendel_mission_list/binary, Bin2/binary>> = Bin1, 
	Del_mission_list = lists:reverse(decode_int32s(SubBindel_mission_list, [])),
	<<_Sizeupdate_mission_list:16, _BinLenupdate_mission_list:32, SubBinupdate_mission_list/binary>> = Bin2,
	Update_mission_list = lists:reverse(decode_p_mission_infos(SubBinupdate_mission_list, [])),

	{m_mission_update_toc, Del_mission_list,Update_mission_list};

decode_m_mission_update_toc(_) ->
	undefined.
encode_p_mission_auto(Record) when is_record(Record, p_mission_auto) ->
	#p_mission_auto{id=Id,name=Name,big_group=Big_group,mission_id=Mission_id,loop_times=Loop_times,status=Status,start_time=Start_time,end_time=End_time,need_gold=Need_gold,loop_one_time=Loop_one_time,max_loop_times=Max_loop_times,role_level=Role_level,min_level=Min_level,rollback_times=Rollback_times,cur_times=Cur_times} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, p_mission_auto, id});
		false ->
			IdFinal = Id
	end,
	case Name =:= undefined of
		true ->
				NameFinal = undefined,
				exit({required_field_not_assigned, p_mission_auto, name});
		false ->
			NameFinal = Name
	end,
	case Big_group =:= undefined of
		true ->
				Big_groupFinal = undefined,
				exit({required_field_not_assigned, p_mission_auto, big_group});
		false ->
			Big_groupFinal = Big_group
	end,
	case Mission_id =:= undefined of
		true ->
				Mission_idFinal = undefined,
				exit({required_field_not_assigned, p_mission_auto, mission_id});
		false ->
			Mission_idFinal = Mission_id
	end,
	case Loop_times =:= undefined of
		true ->
				Loop_timesFinal = 0;
		false ->
			Loop_timesFinal = Loop_times
	end,
	case Status =:= undefined of
		true ->
				StatusFinal = 0;
		false ->
			StatusFinal = Status
	end,
	case Start_time =:= undefined of
		true ->
				Start_timeFinal = 0;
		false ->
			Start_timeFinal = Start_time
	end,
	case End_time =:= undefined of
		true ->
				End_timeFinal = 0;
		false ->
			End_timeFinal = End_time
	end,
	case Need_gold =:= undefined of
		true ->
				Need_goldFinal = 0;
		false ->
			Need_goldFinal = Need_gold
	end,
	case Loop_one_time =:= undefined of
		true ->
				Loop_one_timeFinal = 0;
		false ->
			Loop_one_timeFinal = Loop_one_time
	end,
	case Max_loop_times =:= undefined of
		true ->
				Max_loop_timesFinal = 0;
		false ->
			Max_loop_timesFinal = Max_loop_times
	end,
	case Role_level =:= undefined of
		true ->
				Role_levelFinal = 0;
		false ->
			Role_levelFinal = Role_level
	end,
	case Min_level =:= undefined of
		true ->
				Min_levelFinal = 0;
		false ->
			Min_levelFinal = Min_level
	end,
	case Rollback_times =:= undefined of
		true ->
				Rollback_timesFinal = 0;
		false ->
			Rollback_timesFinal = Rollback_times
	end,
	case Cur_times =:= undefined of
		true ->
				Cur_timesFinal = 0;
		false ->
			Cur_timesFinal = Cur_times
	end,
	Name2 = common_tool:to_binary(NameFinal),
	NameLen = erlang:byte_size(Name2),

	<<IdFinal:32/signed,NameLen:16, Name2/binary,Big_groupFinal:32/signed,Mission_idFinal:32/signed,Loop_timesFinal:32/signed,StatusFinal:32/signed,Start_timeFinal:32/signed,End_timeFinal:32/signed,Need_goldFinal:32/signed,Loop_one_timeFinal:32/signed,Max_loop_timesFinal:32/signed,Role_levelFinal:32/signed,Min_levelFinal:32/signed,Rollback_timesFinal:32/signed,Cur_timesFinal:32/signed>>;
encode_p_mission_auto(_) -> 
	<<>>.

decode_p_mission_auto(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed,NameLen:16, Bin1/binary>> = Bin0,
	<<Name:NameLen/binary,Big_group:32/signed,Mission_id:32/signed,Loop_times:32/signed,Status:32/signed,Start_time:32/signed,End_time:32/signed,Need_gold:32/signed,Loop_one_time:32/signed,Max_loop_times:32/signed,Role_level:32/signed,Min_level:32/signed,Rollback_times:32/signed,Cur_times:32/signed>> = Bin1,

	{p_mission_auto, Id,common_tool:to_list(Name),Big_group,Mission_id,Loop_times,Status,Start_time,End_time,Need_gold,Loop_one_time,Max_loop_times,Role_level,Min_level,Rollback_times,Cur_times};

decode_p_mission_auto(_) ->
	undefined.
encode_m_mission_list_auto_tos(Record) when is_record(Record, m_mission_list_auto_tos) ->
	#m_mission_list_auto_tos{} = Record,

	<<>>;
encode_m_mission_list_auto_tos(_) -> 
	<<>>.

decode_m_mission_list_auto_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_mission_list_auto_tos};

decode_m_mission_list_auto_tos(_) ->
	undefined.
encode_m_mission_list_auto_toc(Record) when is_record(Record, m_mission_list_auto_toc) ->
	#m_mission_list_auto_toc{list=List} = Record,
	case List =:= undefined of
		true ->
			ListFinal = [];
		false ->
			ListFinal = List
	end,
	List_bin = encode_p_mission_autos(ListFinal, <<>>),
	SizeListFinal = erlang:length(ListFinal),
	BinLen_list = erlang:byte_size(List_bin),

	<<SizeListFinal:16, BinLen_list:32, List_bin/binary>>;
encode_m_mission_list_auto_toc(_) -> 
	<<>>.

decode_m_mission_list_auto_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizelist:16, _BinLenlist:32, SubBinlist/binary>> = Bin0,
	List = lists:reverse(decode_p_mission_autos(SubBinlist, [])),

	{m_mission_list_auto_toc, List};

decode_m_mission_list_auto_toc(_) ->
	undefined.
encode_m_mission_do_auto_tos(Record) when is_record(Record, m_mission_do_auto_tos) ->
	#m_mission_do_auto_tos{id=Id,loop_times=Loop_times} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, m_mission_do_auto_tos, id});
		false ->
			IdFinal = Id
	end,
	case Loop_times =:= undefined of
		true ->
				Loop_timesFinal = undefined,
				exit({required_field_not_assigned, m_mission_do_auto_tos, loop_times});
		false ->
			Loop_timesFinal = Loop_times
	end,

	<<IdFinal:32/signed,Loop_timesFinal:32/signed>>;
encode_m_mission_do_auto_tos(_) -> 
	<<>>.

decode_m_mission_do_auto_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed,Loop_times:32/signed>> = Bin0,

	{m_mission_do_auto_tos, Id,Loop_times};

decode_m_mission_do_auto_tos(_) ->
	undefined.
encode_m_mission_do_auto_toc(Record) when is_record(Record, m_mission_do_auto_toc) ->
	#m_mission_do_auto_toc{id=Id,auto_info=Auto_info,code=Code,code_data=Code_data} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, m_mission_do_auto_toc, id});
		false ->
			IdFinal = Id
	end,
	case Auto_info =:= undefined of
		true ->
				Auto_infoFinal = 0;
		false ->
			Auto_infoFinal = Auto_info
	end,
	case Code =:= undefined of
		true ->
				CodeFinal = 0;
		false ->
			CodeFinal = Code
	end,
	case Code_data =:= undefined of
		true ->
			Code_dataFinal = [];
		false ->
			Code_dataFinal = Code_data
	end,
	Auto_info_bin = encode_p_mission_auto(Auto_infoFinal),
	BinLen_auto_info = erlang:byte_size(Auto_info_bin),
	Code_data_bin = encode_int32s(Code_dataFinal, <<>>),
	SizeCode_dataFinal = erlang:length(Code_dataFinal),
	BinLen_code_data = erlang:byte_size(Code_data_bin),

	<<IdFinal:32/signed,BinLen_auto_info:32, Auto_info_bin/binary,CodeFinal:32/signed,SizeCode_dataFinal:16, BinLen_code_data:32, Code_data_bin/binary>>;
encode_m_mission_do_auto_toc(_) -> 
	<<>>.

decode_m_mission_do_auto_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed,SubBinSizeauto_info:32, Bin1/binary>> = Bin0,
	<<SubBinauto_info:SubBinSizeauto_info/binary, Bin2/binary>> = Bin1,
	Auto_info = decode_p_mission_auto(SubBinauto_info),
	<<Code:32/signed,_Sizecode_data:16, _BinLencode_data:32, SubBincode_data/binary>> = Bin2,
	Code_data = lists:reverse(decode_int32s(SubBincode_data, [])),

	{m_mission_do_auto_toc, Id,Auto_info,Code,Code_data};

decode_m_mission_do_auto_toc(_) ->
	undefined.
encode_m_mission_cancel_auto_tos(Record) when is_record(Record, m_mission_cancel_auto_tos) ->
	#m_mission_cancel_auto_tos{id=Id} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, m_mission_cancel_auto_tos, id});
		false ->
			IdFinal = Id
	end,

	<<IdFinal:32/signed>>;
encode_m_mission_cancel_auto_tos(_) -> 
	<<>>.

decode_m_mission_cancel_auto_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed>> = Bin0,

	{m_mission_cancel_auto_tos, Id};

decode_m_mission_cancel_auto_tos(_) ->
	undefined.
encode_m_mission_cancel_auto_toc(Record) when is_record(Record, m_mission_cancel_auto_toc) ->
	#m_mission_cancel_auto_toc{id=Id,code=Code,code_data=Code_data} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, m_mission_cancel_auto_toc, id});
		false ->
			IdFinal = Id
	end,
	case Code =:= undefined of
		true ->
				CodeFinal = 0;
		false ->
			CodeFinal = Code
	end,
	case Code_data =:= undefined of
		true ->
			Code_dataFinal = [];
		false ->
			Code_dataFinal = Code_data
	end,
	Code_data_bin = encode_int32s(Code_dataFinal, <<>>),
	SizeCode_dataFinal = erlang:length(Code_dataFinal),
	BinLen_code_data = erlang:byte_size(Code_data_bin),

	<<IdFinal:32/signed,CodeFinal:32/signed,SizeCode_dataFinal:16, BinLen_code_data:32, Code_data_bin/binary>>;
encode_m_mission_cancel_auto_toc(_) -> 
	<<>>.

decode_m_mission_cancel_auto_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed,Code:32/signed,_Sizecode_data:16, _BinLencode_data:32, SubBincode_data/binary>> = Bin0,
	Code_data = lists:reverse(decode_int32s(SubBincode_data, [])),

	{m_mission_cancel_auto_toc, Id,Code,Code_data};

decode_m_mission_cancel_auto_toc(_) ->
	undefined.
encode_m_family_ybc_sure_tos(Record) when is_record(Record, m_family_ybc_sure_tos) ->
	#m_family_ybc_sure_tos{} = Record,

	<<>>;
encode_m_family_ybc_sure_tos(_) -> 
	<<>>.

decode_m_family_ybc_sure_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_family_ybc_sure_tos};

decode_m_family_ybc_sure_tos(_) ->
	undefined.
encode_m_family_ybc_sure_toc(Record) when is_record(Record, m_family_ybc_sure_toc) ->
	#m_family_ybc_sure_toc{succ=Succ,reason=Reason,return_self=Return_self} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Return_selfFinal:8>>;
encode_m_family_ybc_sure_toc(_) -> 
	<<>>.

decode_m_family_ybc_sure_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Return_selfTmp:8>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_family_ybc_sure_toc, Succ,common_tool:to_list(Reason),Return_self};

decode_m_family_ybc_sure_toc(_) ->
	undefined.
encode_m_family_ybc_giveup_tos(Record) when is_record(Record, m_family_ybc_giveup_tos) ->
	#m_family_ybc_giveup_tos{} = Record,

	<<>>;
encode_m_family_ybc_giveup_tos(_) -> 
	<<>>.

decode_m_family_ybc_giveup_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_family_ybc_giveup_tos};

decode_m_family_ybc_giveup_tos(_) ->
	undefined.
encode_m_family_ybc_giveup_toc(Record) when is_record(Record, m_family_ybc_giveup_toc) ->
	#m_family_ybc_giveup_toc{succ=Succ,reason=Reason,return_self=Return_self,role_id=Role_id} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = 0;
		false ->
			Role_idFinal = Role_id
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Return_selfFinal:8,Role_idFinal:32/signed>>;
encode_m_family_ybc_giveup_toc(_) -> 
	<<>>.

decode_m_family_ybc_giveup_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Return_selfTmp:8,Role_id:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_family_ybc_giveup_toc, Succ,common_tool:to_list(Reason),Return_self,Role_id};

decode_m_family_ybc_giveup_toc(_) ->
	undefined.
encode_m_family_ybc_join_tos(Record) when is_record(Record, m_family_ybc_join_tos) ->
	#m_family_ybc_join_tos{} = Record,

	<<>>;
encode_m_family_ybc_join_tos(_) -> 
	<<>>.

decode_m_family_ybc_join_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_family_ybc_join_tos};

decode_m_family_ybc_join_tos(_) ->
	undefined.
encode_m_family_ybc_join_toc(Record) when is_record(Record, m_family_ybc_join_toc) ->
	#m_family_ybc_join_toc{succ=Succ,reason=Reason,return_self=Return_self,role_id=Role_id} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, m_family_ybc_join_toc, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Return_selfFinal:8,Role_idFinal:32/signed>>;
encode_m_family_ybc_join_toc(_) -> 
	<<>>.

decode_m_family_ybc_join_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Return_selfTmp:8,Role_id:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_family_ybc_join_toc, Succ,common_tool:to_list(Reason),Return_self,Role_id};

decode_m_family_ybc_join_toc(_) ->
	undefined.
encode_m_family_ybc_publish_tos(Record) when is_record(Record, m_family_ybc_publish_tos) ->
	#m_family_ybc_publish_tos{type=Type} = Record,
	case Type =:= undefined of
		true ->
				TypeFinal = undefined,
				exit({required_field_not_assigned, m_family_ybc_publish_tos, type});
		false ->
			TypeFinal = Type
	end,

	<<TypeFinal:32/signed>>;
encode_m_family_ybc_publish_tos(_) -> 
	<<>>.

decode_m_family_ybc_publish_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Type:32/signed>> = Bin0,

	{m_family_ybc_publish_tos, Type};

decode_m_family_ybc_publish_tos(_) ->
	undefined.
encode_m_family_ybc_publish_toc(Record) when is_record(Record, m_family_ybc_publish_toc) ->
	#m_family_ybc_publish_toc{succ=Succ,reason=Reason,return_self=Return_self,type=Type,remain_time=Remain_time,owner_type=Owner_type,owner_name=Owner_name,silver=Silver,owner_id=Owner_id,is_alert=Is_alert} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Type =:= undefined of
		true ->
				TypeFinal = 0;
		false ->
			TypeFinal = Type
	end,
	case Remain_time =:= undefined of
		true ->
				Remain_timeFinal = 0;
		false ->
			Remain_timeFinal = Remain_time
	end,
	case Owner_type =:= undefined of
		true ->
				Owner_typeFinal = 0;
		false ->
			Owner_typeFinal = Owner_type
	end,
	case Owner_name =:= undefined of
		true ->
				Owner_nameFinal = <<>>;
		false ->
			Owner_nameFinal = Owner_name
	end,
	case Silver =:= undefined of
		true ->
				SilverFinal = 0;
		false ->
			SilverFinal = Silver
	end,
	case Owner_id =:= undefined of
		true ->
				Owner_idFinal = 0;
		false ->
			Owner_idFinal = Owner_id
	end,
	case Is_alert =:= undefined of
		true ->
				Is_alertFinal = 1;
		false ->
			case Is_alert of
				true ->
					Is_alertFinal = 1;
				false ->
					Is_alertFinal = 0
			end
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Owner_name2 = common_tool:to_binary(Owner_nameFinal),
	Owner_nameLen = erlang:byte_size(Owner_name2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Return_selfFinal:8,TypeFinal:32/signed,Remain_timeFinal:32/signed,Owner_typeFinal:32/signed,Owner_nameLen:16, Owner_name2/binary,SilverFinal:32/signed,Owner_idFinal:32/signed,Is_alertFinal:8>>;
encode_m_family_ybc_publish_toc(_) -> 
	<<>>.

decode_m_family_ybc_publish_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Return_selfTmp:8,Type:32/signed,Remain_time:32/signed,Owner_type:32/signed,Owner_nameLen:16, Bin2/binary>> = Bin1,
	<<Owner_name:Owner_nameLen/binary,Silver:32/signed,Owner_id:32/signed,Is_alertTmp:8>> = Bin2,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,
case Is_alertTmp of 
	1 -> 
		Is_alert = true;
	_ ->
		Is_alert = false
end,

	{m_family_ybc_publish_toc, Succ,common_tool:to_list(Reason),Return_self,Type,Remain_time,Owner_type,common_tool:to_list(Owner_name),Silver,Owner_id,Is_alert};

decode_m_family_ybc_publish_toc(_) ->
	undefined.
encode_m_family_ybc_status_toc(Record) when is_record(Record, m_family_ybc_status_toc) ->
	#m_family_ybc_status_toc{status=Status} = Record,
	case Status =:= undefined of
		true ->
				StatusFinal = undefined,
				exit({required_field_not_assigned, m_family_ybc_status_toc, status});
		false ->
			StatusFinal = Status
	end,

	<<StatusFinal:32/signed>>;
encode_m_family_ybc_status_toc(_) -> 
	<<>>.

decode_m_family_ybc_status_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Status:32/signed>> = Bin0,

	{m_family_ybc_status_toc, Status};

decode_m_family_ybc_status_toc(_) ->
	undefined.
encode_m_family_ybc_agree_publish_tos(Record) when is_record(Record, m_family_ybc_agree_publish_tos) ->
	#m_family_ybc_agree_publish_tos{} = Record,

	<<>>;
encode_m_family_ybc_agree_publish_tos(_) -> 
	<<>>.

decode_m_family_ybc_agree_publish_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_family_ybc_agree_publish_tos};

decode_m_family_ybc_agree_publish_tos(_) ->
	undefined.
encode_m_family_ybc_agree_publish_toc(Record) when is_record(Record, m_family_ybc_agree_publish_toc) ->
	#m_family_ybc_agree_publish_toc{succ=Succ,reason=Reason,return_self=Return_self,role_id=Role_id,role_name=Role_name,silver=Silver,begin_time=Begin_time,ybc_role_id_list=Ybc_role_id_list} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = 0;
		false ->
			Role_idFinal = Role_id
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = <<>>;
		false ->
			Role_nameFinal = Role_name
	end,
	case Silver =:= undefined of
		true ->
				SilverFinal = 0;
		false ->
			SilverFinal = Silver
	end,
	case Begin_time =:= undefined of
		true ->
				Begin_timeFinal = 0;
		false ->
			Begin_timeFinal = Begin_time
	end,
	case Ybc_role_id_list =:= undefined of
		true ->
			Ybc_role_id_listFinal = [];
		false ->
			Ybc_role_id_listFinal = Ybc_role_id_list
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),
	Ybc_role_id_list_bin = encode_int32s(Ybc_role_id_listFinal, <<>>),
	SizeYbc_role_id_listFinal = erlang:length(Ybc_role_id_listFinal),
	BinLen_ybc_role_id_list = erlang:byte_size(Ybc_role_id_list_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Return_selfFinal:8,Role_idFinal:32/signed,Role_nameLen:16, Role_name2/binary,SilverFinal:32/signed,Begin_timeFinal:32/signed,SizeYbc_role_id_listFinal:16, BinLen_ybc_role_id_list:32, Ybc_role_id_list_bin/binary>>;
encode_m_family_ybc_agree_publish_toc(_) -> 
	<<>>.

decode_m_family_ybc_agree_publish_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Return_selfTmp:8,Role_id:32/signed,Role_nameLen:16, Bin2/binary>> = Bin1,
	<<Role_name:Role_nameLen/binary,Silver:32/signed,Begin_time:32/signed,_Sizeybc_role_id_list:16, _BinLenybc_role_id_list:32, SubBinybc_role_id_list/binary>> = Bin2,
	Ybc_role_id_list = lists:reverse(decode_int32s(SubBinybc_role_id_list, [])),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_family_ybc_agree_publish_toc, Succ,common_tool:to_list(Reason),Return_self,Role_id,common_tool:to_list(Role_name),Silver,Begin_time,Ybc_role_id_list};

decode_m_family_ybc_agree_publish_toc(_) ->
	undefined.
encode_m_family_ybc_commit_tos(Record) when is_record(Record, m_family_ybc_commit_tos) ->
	#m_family_ybc_commit_tos{} = Record,

	<<>>;
encode_m_family_ybc_commit_tos(_) -> 
	<<>>.

decode_m_family_ybc_commit_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_family_ybc_commit_tos};

decode_m_family_ybc_commit_tos(_) ->
	undefined.
encode_m_family_ybc_commit_toc(Record) when is_record(Record, m_family_ybc_commit_toc) ->
	#m_family_ybc_commit_toc{succ=Succ,reason=Reason,return_self=Return_self,exp=Exp,silver=Silver,contribution=Contribution,family_money=Family_money,active_point=Active_point} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Exp =:= undefined of
		true ->
				ExpFinal = 0;
		false ->
			ExpFinal = Exp
	end,
	case Silver =:= undefined of
		true ->
				SilverFinal = 0;
		false ->
			SilverFinal = Silver
	end,
	case Contribution =:= undefined of
		true ->
				ContributionFinal = 0;
		false ->
			ContributionFinal = Contribution
	end,
	case Family_money =:= undefined of
		true ->
				Family_moneyFinal = 0;
		false ->
			Family_moneyFinal = Family_money
	end,
	case Active_point =:= undefined of
		true ->
				Active_pointFinal = 0;
		false ->
			Active_pointFinal = Active_point
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Return_selfFinal:8,ExpFinal:32/signed,SilverFinal:32/signed,ContributionFinal:32/signed,Family_moneyFinal:32/signed,Active_pointFinal:32/signed>>;
encode_m_family_ybc_commit_toc(_) -> 
	<<>>.

decode_m_family_ybc_commit_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Return_selfTmp:8,Exp:32/signed,Silver:32/signed,Contribution:32/signed,Family_money:32/signed,Active_point:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_family_ybc_commit_toc, Succ,common_tool:to_list(Reason),Return_self,Exp,Silver,Contribution,Family_money,Active_point};

decode_m_family_ybc_commit_toc(_) ->
	undefined.
encode_m_family_ybc_call_help_toc(Record) when is_record(Record, m_family_ybc_call_help_toc) ->
	#m_family_ybc_call_help_toc{map_id=Map_id} = Record,
	case Map_id =:= undefined of
		true ->
				Map_idFinal = undefined,
				exit({required_field_not_assigned, m_family_ybc_call_help_toc, map_id});
		false ->
			Map_idFinal = Map_id
	end,

	<<Map_idFinal:32/signed>>;
encode_m_family_ybc_call_help_toc(_) -> 
	<<>>.

decode_m_family_ybc_call_help_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Map_id:32/signed>> = Bin0,

	{m_family_ybc_call_help_toc, Map_id};

decode_m_family_ybc_call_help_toc(_) ->
	undefined.
encode_m_family_ybc_accept_help_tos(Record) when is_record(Record, m_family_ybc_accept_help_tos) ->
	#m_family_ybc_accept_help_tos{} = Record,

	<<>>;
encode_m_family_ybc_accept_help_tos(_) -> 
	<<>>.

decode_m_family_ybc_accept_help_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_family_ybc_accept_help_tos};

decode_m_family_ybc_accept_help_tos(_) ->
	undefined.
encode_m_family_ybc_accept_help_toc(Record) when is_record(Record, m_family_ybc_accept_help_toc) ->
	#m_family_ybc_accept_help_toc{succ=Succ,reason=Reason,return_self=Return_self,role_name=Role_name} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = <<>>;
		false ->
			Role_nameFinal = Role_name
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Return_selfFinal:8,Role_nameLen:16, Role_name2/binary>>;
encode_m_family_ybc_accept_help_toc(_) -> 
	<<>>.

decode_m_family_ybc_accept_help_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Return_selfTmp:8,Role_nameLen:16, Bin2/binary>> = Bin1,
	<<Role_name:Role_nameLen/binary>> = Bin2,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_family_ybc_accept_help_toc, Succ,common_tool:to_list(Reason),Return_self,common_tool:to_list(Role_name)};

decode_m_family_ybc_accept_help_toc(_) ->
	undefined.
encode_m_family_ybc_collect_tos(Record) when is_record(Record, m_family_ybc_collect_tos) ->
	#m_family_ybc_collect_tos{content=Content} = Record,
	case Content =:= undefined of
		true ->
				ContentFinal = undefined,
				exit({required_field_not_assigned, m_family_ybc_collect_tos, content});
		false ->
			ContentFinal = Content
	end,
	Content2 = common_tool:to_binary(ContentFinal),
	ContentLen = erlang:byte_size(Content2),

	<<ContentLen:16, Content2/binary>>;
encode_m_family_ybc_collect_tos(_) -> 
	<<>>.

decode_m_family_ybc_collect_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<ContentLen:16, Bin1/binary>> = Bin0,
	<<Content:ContentLen/binary>> = Bin1,

	{m_family_ybc_collect_tos, common_tool:to_list(Content)};

decode_m_family_ybc_collect_tos(_) ->
	undefined.
encode_m_family_ybc_collect_toc(Record) when is_record(Record, m_family_ybc_collect_toc) ->
	#m_family_ybc_collect_toc{succ=Succ,reason=Reason,return_self=Return_self,map_id=Map_id,owner_type=Owner_type,owner_name=Owner_name,content=Content} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Map_id =:= undefined of
		true ->
				Map_idFinal = 0;
		false ->
			Map_idFinal = Map_id
	end,
	case Owner_type =:= undefined of
		true ->
				Owner_typeFinal = 0;
		false ->
			Owner_typeFinal = Owner_type
	end,
	case Owner_name =:= undefined of
		true ->
				Owner_nameFinal = <<>>;
		false ->
			Owner_nameFinal = Owner_name
	end,
	case Content =:= undefined of
		true ->
				ContentFinal = <<>>;
		false ->
			ContentFinal = Content
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Owner_name2 = common_tool:to_binary(Owner_nameFinal),
	Owner_nameLen = erlang:byte_size(Owner_name2),
	Content2 = common_tool:to_binary(ContentFinal),
	ContentLen = erlang:byte_size(Content2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Return_selfFinal:8,Map_idFinal:32/signed,Owner_typeFinal:32/signed,Owner_nameLen:16, Owner_name2/binary,ContentLen:16, Content2/binary>>;
encode_m_family_ybc_collect_toc(_) -> 
	<<>>.

decode_m_family_ybc_collect_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Return_selfTmp:8,Map_id:32/signed,Owner_type:32/signed,Owner_nameLen:16, Bin2/binary>> = Bin1,
	<<Owner_name:Owner_nameLen/binary,ContentLen:16, Bin3/binary>> = Bin2,
	<<Content:ContentLen/binary>> = Bin3,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_family_ybc_collect_toc, Succ,common_tool:to_list(Reason),Return_self,Map_id,Owner_type,common_tool:to_list(Owner_name),common_tool:to_list(Content)};

decode_m_family_ybc_collect_toc(_) ->
	undefined.
encode_m_family_ybc_accept_collect_tos(Record) when is_record(Record, m_family_ybc_accept_collect_tos) ->
	#m_family_ybc_accept_collect_tos{} = Record,

	<<>>;
encode_m_family_ybc_accept_collect_tos(_) -> 
	<<>>.

decode_m_family_ybc_accept_collect_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_family_ybc_accept_collect_tos};

decode_m_family_ybc_accept_collect_tos(_) ->
	undefined.
encode_m_family_ybc_accept_collect_toc(Record) when is_record(Record, m_family_ybc_accept_collect_toc) ->
	#m_family_ybc_accept_collect_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_family_ybc_accept_collect_toc(_) -> 
	<<>>.

decode_m_family_ybc_accept_collect_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_family_ybc_accept_collect_toc, Succ,common_tool:to_list(Reason)};

decode_m_family_ybc_accept_collect_toc(_) ->
	undefined.
encode_m_family_ybc_list_tos(Record) when is_record(Record, m_family_ybc_list_tos) ->
	#m_family_ybc_list_tos{} = Record,

	<<>>;
encode_m_family_ybc_list_tos(_) -> 
	<<>>.

decode_m_family_ybc_list_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_family_ybc_list_tos};

decode_m_family_ybc_list_tos(_) ->
	undefined.
encode_m_family_ybc_list_toc(Record) when is_record(Record, m_family_ybc_list_toc) ->
	#m_family_ybc_list_toc{succ=Succ,reason=Reason,members=Members} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Members =:= undefined of
		true ->
			MembersFinal = [];
		false ->
			MembersFinal = Members
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Members_bin = encode_p_family_ybc_member_infos(MembersFinal, <<>>),
	SizeMembersFinal = erlang:length(MembersFinal),
	BinLen_members = erlang:byte_size(Members_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,SizeMembersFinal:16, BinLen_members:32, Members_bin/binary>>;
encode_m_family_ybc_list_toc(_) -> 
	<<>>.

decode_m_family_ybc_list_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_Sizemembers:16, _BinLenmembers:32, SubBinmembers/binary>> = Bin1,
	Members = lists:reverse(decode_p_family_ybc_member_infos(SubBinmembers, [])),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_family_ybc_list_toc, Succ,common_tool:to_list(Reason),Members};

decode_m_family_ybc_list_toc(_) ->
	undefined.
encode_p_family_ybc_member_info(Record) when is_record(Record, p_family_ybc_member_info) ->
	#p_family_ybc_member_info{role_id=Role_id,role_name=Role_name,status=Status} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, p_family_ybc_member_info, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = undefined,
				exit({required_field_not_assigned, p_family_ybc_member_info, role_name});
		false ->
			Role_nameFinal = Role_name
	end,
	case Status =:= undefined of
		true ->
				StatusFinal = undefined,
				exit({required_field_not_assigned, p_family_ybc_member_info, status});
		false ->
			StatusFinal = Status
	end,
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),

	<<Role_idFinal:32/signed,Role_nameLen:16, Role_name2/binary,StatusFinal:32/signed>>;
encode_p_family_ybc_member_info(_) -> 
	<<>>.

decode_p_family_ybc_member_info(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,Role_nameLen:16, Bin1/binary>> = Bin0,
	<<Role_name:Role_nameLen/binary,Status:32/signed>> = Bin1,

	{p_family_ybc_member_info, Role_id,common_tool:to_list(Role_name),Status};

decode_p_family_ybc_member_info(_) ->
	undefined.
encode_m_family_ybc_kick_tos(Record) when is_record(Record, m_family_ybc_kick_tos) ->
	#m_family_ybc_kick_tos{role_id=Role_id} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, m_family_ybc_kick_tos, role_id});
		false ->
			Role_idFinal = Role_id
	end,

	<<Role_idFinal:32/signed>>;
encode_m_family_ybc_kick_tos(_) -> 
	<<>>.

decode_m_family_ybc_kick_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed>> = Bin0,

	{m_family_ybc_kick_tos, Role_id};

decode_m_family_ybc_kick_tos(_) ->
	undefined.
encode_m_family_ybc_kick_toc(Record) when is_record(Record, m_family_ybc_kick_toc) ->
	#m_family_ybc_kick_toc{succ=Succ,reason=Reason,return_self=Return_self,role_id=Role_id,role_name=Role_name} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = 0;
		false ->
			Role_idFinal = Role_id
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = <<>>;
		false ->
			Role_nameFinal = Role_name
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Return_selfFinal:8,Role_idFinal:32/signed,Role_nameLen:16, Role_name2/binary>>;
encode_m_family_ybc_kick_toc(_) -> 
	<<>>.

decode_m_family_ybc_kick_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Return_selfTmp:8,Role_id:32/signed,Role_nameLen:16, Bin2/binary>> = Bin1,
	<<Role_name:Role_nameLen/binary>> = Bin2,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_family_ybc_kick_toc, Succ,common_tool:to_list(Reason),Return_self,Role_id,common_tool:to_list(Role_name)};

decode_m_family_ybc_kick_toc(_) ->
	undefined.
encode_m_family_ybc_add_hp_tos(Record) when is_record(Record, m_family_ybc_add_hp_tos) ->
	#m_family_ybc_add_hp_tos{} = Record,

	<<>>;
encode_m_family_ybc_add_hp_tos(_) -> 
	<<>>.

decode_m_family_ybc_add_hp_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_family_ybc_add_hp_tos};

decode_m_family_ybc_add_hp_tos(_) ->
	undefined.
encode_m_family_ybc_add_hp_toc(Record) when is_record(Record, m_family_ybc_add_hp_toc) ->
	#m_family_ybc_add_hp_toc{succ=Succ,reason=Reason,return_self=Return_self,hp=Hp} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Hp =:= undefined of
		true ->
				HpFinal = 0;
		false ->
			HpFinal = Hp
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Return_selfFinal:8,HpFinal:32/signed>>;
encode_m_family_ybc_add_hp_toc(_) -> 
	<<>>.

decode_m_family_ybc_add_hp_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Return_selfTmp:8,Hp:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_family_ybc_add_hp_toc, Succ,common_tool:to_list(Reason),Return_self,Hp};

decode_m_family_ybc_add_hp_toc(_) ->
	undefined.
encode_m_family_ybc_alert_tos(Record) when is_record(Record, m_family_ybc_alert_tos) ->
	#m_family_ybc_alert_tos{role_id=Role_id} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, m_family_ybc_alert_tos, role_id});
		false ->
			Role_idFinal = Role_id
	end,

	<<Role_idFinal:32/signed>>;
encode_m_family_ybc_alert_tos(_) -> 
	<<>>.

decode_m_family_ybc_alert_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed>> = Bin0,

	{m_family_ybc_alert_tos, Role_id};

decode_m_family_ybc_alert_tos(_) ->
	undefined.
encode_m_family_ybc_alert_toc(Record) when is_record(Record, m_family_ybc_alert_toc) ->
	#m_family_ybc_alert_toc{succ=Succ,reason=Reason,return_self=Return_self} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Return_selfFinal:8>>;
encode_m_family_ybc_alert_toc(_) -> 
	<<>>.

decode_m_family_ybc_alert_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Return_selfTmp:8>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_family_ybc_alert_toc, Succ,common_tool:to_list(Reason),Return_self};

decode_m_family_ybc_alert_toc(_) ->
	undefined.
encode_m_family_ybc_invite_tos(Record) when is_record(Record, m_family_ybc_invite_tos) ->
	#m_family_ybc_invite_tos{} = Record,

	<<>>;
encode_m_family_ybc_invite_tos(_) -> 
	<<>>.

decode_m_family_ybc_invite_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_family_ybc_invite_tos};

decode_m_family_ybc_invite_tos(_) ->
	undefined.
encode_m_family_ybc_invite_toc(Record) when is_record(Record, m_family_ybc_invite_toc) ->
	#m_family_ybc_invite_toc{succ=Succ,reason=Reason,return_self=Return_self,type=Type,role_id=Role_id} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Type =:= undefined of
		true ->
				TypeFinal = 0;
		false ->
			TypeFinal = Type
	end,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = 0;
		false ->
			Role_idFinal = Role_id
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Return_selfFinal:8,TypeFinal:32/signed,Role_idFinal:32/signed>>;
encode_m_family_ybc_invite_toc(_) -> 
	<<>>.

decode_m_family_ybc_invite_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Return_selfTmp:8,Type:32/signed,Role_id:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_family_ybc_invite_toc, Succ,common_tool:to_list(Reason),Return_self,Type,Role_id};

decode_m_family_ybc_invite_toc(_) ->
	undefined.
encode_m_ybc_faraway_toc(Record) when is_record(Record, m_ybc_faraway_toc) ->
	#m_ybc_faraway_toc{pos=Pos,map_id=Map_id} = Record,
	case Pos =:= undefined of
		true ->
				PosFinal = undefined,
				exit({required_field_not_assigned, m_ybc_faraway_toc, pos});
		false ->
			PosFinal = Pos
	end,
	case Map_id =:= undefined of
		true ->
				Map_idFinal = undefined,
				exit({required_field_not_assigned, m_ybc_faraway_toc, map_id});
		false ->
			Map_idFinal = Map_id
	end,
	Pos_bin = encode_p_pos(PosFinal),
	BinLen_pos = erlang:byte_size(Pos_bin),

	<<BinLen_pos:32, Pos_bin/binary,Map_idFinal:32/signed>>;
encode_m_ybc_faraway_toc(_) -> 
	<<>>.

decode_m_ybc_faraway_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SubBinSizepos:32, Bin1/binary>> = Bin0,
	<<SubBinpos:SubBinSizepos/binary, Bin2/binary>> = Bin1,
	Pos = decode_p_pos(SubBinpos),
	<<Map_id:32/signed>> = Bin2,

	{m_ybc_faraway_toc, Pos,Map_id};

decode_m_ybc_faraway_toc(_) ->
	undefined.
encode_m_ybc_enter_toc(Record) when is_record(Record, m_ybc_enter_toc) ->
	#m_ybc_enter_toc{ybc_info=Ybc_info} = Record,
	case Ybc_info =:= undefined of
		true ->
				Ybc_infoFinal = undefined,
				exit({required_field_not_assigned, m_ybc_enter_toc, ybc_info});
		false ->
			Ybc_infoFinal = Ybc_info
	end,
	Ybc_info_bin = encode_p_map_ybc(Ybc_infoFinal),
	BinLen_ybc_info = erlang:byte_size(Ybc_info_bin),

	<<BinLen_ybc_info:32, Ybc_info_bin/binary>>;
encode_m_ybc_enter_toc(_) -> 
	<<>>.

decode_m_ybc_enter_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_SubBinSizeybc_info:32, SubBinybc_info/binary>> = Bin0,
	Ybc_info = decode_p_map_ybc(SubBinybc_info),

	{m_ybc_enter_toc, Ybc_info};

decode_m_ybc_enter_toc(_) ->
	undefined.
encode_m_ybc_quit_toc(Record) when is_record(Record, m_ybc_quit_toc) ->
	#m_ybc_quit_toc{ybc_id=Ybc_id} = Record,
	case Ybc_id =:= undefined of
		true ->
				Ybc_idFinal = undefined,
				exit({required_field_not_assigned, m_ybc_quit_toc, ybc_id});
		false ->
			Ybc_idFinal = Ybc_id
	end,

	<<Ybc_idFinal:32/signed>>;
encode_m_ybc_quit_toc(_) -> 
	<<>>.

decode_m_ybc_quit_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Ybc_id:32/signed>> = Bin0,

	{m_ybc_quit_toc, Ybc_id};

decode_m_ybc_quit_toc(_) ->
	undefined.
encode_m_ybc_dead_toc(Record) when is_record(Record, m_ybc_dead_toc) ->
	#m_ybc_dead_toc{ybc_id=Ybc_id} = Record,
	case Ybc_id =:= undefined of
		true ->
				Ybc_idFinal = undefined,
				exit({required_field_not_assigned, m_ybc_dead_toc, ybc_id});
		false ->
			Ybc_idFinal = Ybc_id
	end,

	<<Ybc_idFinal:32/signed>>;
encode_m_ybc_dead_toc(_) -> 
	<<>>.

decode_m_ybc_dead_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Ybc_id:32/signed>> = Bin0,

	{m_ybc_dead_toc, Ybc_id};

decode_m_ybc_dead_toc(_) ->
	undefined.
encode_m_ybc_info_tos(Record) when is_record(Record, m_ybc_info_tos) ->
	#m_ybc_info_tos{ybc_id=Ybc_id} = Record,
	case Ybc_id =:= undefined of
		true ->
				Ybc_idFinal = undefined,
				exit({required_field_not_assigned, m_ybc_info_tos, ybc_id});
		false ->
			Ybc_idFinal = Ybc_id
	end,

	<<Ybc_idFinal:32/signed>>;
encode_m_ybc_info_tos(_) -> 
	<<>>.

decode_m_ybc_info_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Ybc_id:32/signed>> = Bin0,

	{m_ybc_info_tos, Ybc_id};

decode_m_ybc_info_tos(_) ->
	undefined.
encode_m_ybc_walk_toc(Record) when is_record(Record, m_ybc_walk_toc) ->
	#m_ybc_walk_toc{ybc_id=Ybc_id,pos=Pos} = Record,
	case Ybc_id =:= undefined of
		true ->
				Ybc_idFinal = undefined,
				exit({required_field_not_assigned, m_ybc_walk_toc, ybc_id});
		false ->
			Ybc_idFinal = Ybc_id
	end,
	case Pos =:= undefined of
		true ->
				PosFinal = undefined,
				exit({required_field_not_assigned, m_ybc_walk_toc, pos});
		false ->
			PosFinal = Pos
	end,
	Pos_bin = encode_p_pos(PosFinal),
	BinLen_pos = erlang:byte_size(Pos_bin),

	<<Ybc_idFinal:32/signed,BinLen_pos:32, Pos_bin/binary>>;
encode_m_ybc_walk_toc(_) -> 
	<<>>.

decode_m_ybc_walk_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Ybc_id:32/signed,_SubBinSizepos:32, SubBinpos/binary>> = Bin0,
	Pos = decode_p_pos(SubBinpos),

	{m_ybc_walk_toc, Ybc_id,Pos};

decode_m_ybc_walk_toc(_) ->
	undefined.
encode_m_ybc_speed_toc(Record) when is_record(Record, m_ybc_speed_toc) ->
	#m_ybc_speed_toc{ybc_id=Ybc_id,move_speed=Move_speed} = Record,
	case Ybc_id =:= undefined of
		true ->
				Ybc_idFinal = undefined,
				exit({required_field_not_assigned, m_ybc_speed_toc, ybc_id});
		false ->
			Ybc_idFinal = Ybc_id
	end,
	case Move_speed =:= undefined of
		true ->
				Move_speedFinal = undefined,
				exit({required_field_not_assigned, m_ybc_speed_toc, move_speed});
		false ->
			Move_speedFinal = Move_speed
	end,

	<<Ybc_idFinal:32/signed,Move_speedFinal:32/signed>>;
encode_m_ybc_speed_toc(_) -> 
	<<>>.

decode_m_ybc_speed_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Ybc_id:32/signed,Move_speed:32/signed>> = Bin0,

	{m_ybc_speed_toc, Ybc_id,Move_speed};

decode_m_ybc_speed_toc(_) ->
	undefined.
encode_m_ybc_pos_toc(Record) when is_record(Record, m_ybc_pos_toc) ->
	#m_ybc_pos_toc{ybc_id=Ybc_id,map_id=Map_id,tx=Tx,ty=Ty} = Record,
	case Ybc_id =:= undefined of
		true ->
				Ybc_idFinal = undefined,
				exit({required_field_not_assigned, m_ybc_pos_toc, ybc_id});
		false ->
			Ybc_idFinal = Ybc_id
	end,
	case Map_id =:= undefined of
		true ->
				Map_idFinal = undefined,
				exit({required_field_not_assigned, m_ybc_pos_toc, map_id});
		false ->
			Map_idFinal = Map_id
	end,
	case Tx =:= undefined of
		true ->
				TxFinal = undefined,
				exit({required_field_not_assigned, m_ybc_pos_toc, tx});
		false ->
			TxFinal = Tx
	end,
	case Ty =:= undefined of
		true ->
				TyFinal = undefined,
				exit({required_field_not_assigned, m_ybc_pos_toc, ty});
		false ->
			TyFinal = Ty
	end,

	<<Ybc_idFinal:32/signed,Map_idFinal:32/signed,TxFinal:32/signed,TyFinal:32/signed>>;
encode_m_ybc_pos_toc(_) -> 
	<<>>.

decode_m_ybc_pos_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Ybc_id:32/signed,Map_id:32/signed,Tx:32/signed,Ty:32/signed>> = Bin0,

	{m_ybc_pos_toc, Ybc_id,Map_id,Tx,Ty};

decode_m_ybc_pos_toc(_) ->
	undefined.
encode_m_ybc_notify_pos_toc(Record) when is_record(Record, m_ybc_notify_pos_toc) ->
	#m_ybc_notify_pos_toc{map_id=Map_id,tx=Tx,ty=Ty} = Record,
	case Map_id =:= undefined of
		true ->
				Map_idFinal = undefined,
				exit({required_field_not_assigned, m_ybc_notify_pos_toc, map_id});
		false ->
			Map_idFinal = Map_id
	end,
	case Tx =:= undefined of
		true ->
				TxFinal = undefined,
				exit({required_field_not_assigned, m_ybc_notify_pos_toc, tx});
		false ->
			TxFinal = Tx
	end,
	case Ty =:= undefined of
		true ->
				TyFinal = undefined,
				exit({required_field_not_assigned, m_ybc_notify_pos_toc, ty});
		false ->
			TyFinal = Ty
	end,

	<<Map_idFinal:32/signed,TxFinal:32/signed,TyFinal:32/signed>>;
encode_m_ybc_notify_pos_toc(_) -> 
	<<>>.

decode_m_ybc_notify_pos_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Map_id:32/signed,Tx:32/signed,Ty:32/signed>> = Bin0,

	{m_ybc_notify_pos_toc, Map_id,Tx,Ty};

decode_m_ybc_notify_pos_toc(_) ->
	undefined.
encode_m_monster_enter_toc(Record) when is_record(Record, m_monster_enter_toc) ->
	#m_monster_enter_toc{monsters=Monsters} = Record,
	case Monsters =:= undefined of
		true ->
			MonstersFinal = [];
		false ->
			MonstersFinal = Monsters
	end,
	Monsters_bin = encode_p_map_monsters(MonstersFinal, <<>>),
	SizeMonstersFinal = erlang:length(MonstersFinal),
	BinLen_monsters = erlang:byte_size(Monsters_bin),

	<<SizeMonstersFinal:16, BinLen_monsters:32, Monsters_bin/binary>>;
encode_m_monster_enter_toc(_) -> 
	<<>>.

decode_m_monster_enter_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizemonsters:16, _BinLenmonsters:32, SubBinmonsters/binary>> = Bin0,
	Monsters = lists:reverse(decode_p_map_monsters(SubBinmonsters, [])),

	{m_monster_enter_toc, Monsters};

decode_m_monster_enter_toc(_) ->
	undefined.
encode_m_monster_quit_toc(Record) when is_record(Record, m_monster_quit_toc) ->
	#m_monster_quit_toc{monsterid=Monsterid} = Record,
	case Monsterid =:= undefined of
		true ->
				MonsteridFinal = undefined,
				exit({required_field_not_assigned, m_monster_quit_toc, monsterid});
		false ->
			MonsteridFinal = Monsterid
	end,

	<<MonsteridFinal:32/signed>>;
encode_m_monster_quit_toc(_) -> 
	<<>>.

decode_m_monster_quit_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Monsterid:32/signed>> = Bin0,

	{m_monster_quit_toc, Monsterid};

decode_m_monster_quit_toc(_) ->
	undefined.
encode_m_monster_dead_toc(Record) when is_record(Record, m_monster_dead_toc) ->
	#m_monster_dead_toc{monsterid=Monsterid} = Record,
	case Monsterid =:= undefined of
		true ->
				MonsteridFinal = undefined,
				exit({required_field_not_assigned, m_monster_dead_toc, monsterid});
		false ->
			MonsteridFinal = Monsterid
	end,

	<<MonsteridFinal:32/signed>>;
encode_m_monster_dead_toc(_) -> 
	<<>>.

decode_m_monster_dead_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Monsterid:32/signed>> = Bin0,

	{m_monster_dead_toc, Monsterid};

decode_m_monster_dead_toc(_) ->
	undefined.
encode_m_monster_attr_change_toc(Record) when is_record(Record, m_monster_attr_change_toc) ->
	#m_monster_attr_change_toc{monsterid=Monsterid,change_type=Change_type,value=Value} = Record,
	case Monsterid =:= undefined of
		true ->
				MonsteridFinal = undefined,
				exit({required_field_not_assigned, m_monster_attr_change_toc, monsterid});
		false ->
			MonsteridFinal = Monsterid
	end,
	case Change_type =:= undefined of
		true ->
				Change_typeFinal = undefined,
				exit({required_field_not_assigned, m_monster_attr_change_toc, change_type});
		false ->
			Change_typeFinal = Change_type
	end,
	case Value =:= undefined of
		true ->
				ValueFinal = undefined,
				exit({required_field_not_assigned, m_monster_attr_change_toc, value});
		false ->
			ValueFinal = Value
	end,

	<<MonsteridFinal:32/signed,Change_typeFinal:32/signed,ValueFinal:32/signed>>;
encode_m_monster_attr_change_toc(_) -> 
	<<>>.

decode_m_monster_attr_change_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Monsterid:32/signed,Change_type:32/signed,Value:32/signed>> = Bin0,

	{m_monster_attr_change_toc, Monsterid,Change_type,Value};

decode_m_monster_attr_change_toc(_) ->
	undefined.
encode_m_monster_walk_path_toc(Record) when is_record(Record, m_monster_walk_path_toc) ->
	#m_monster_walk_path_toc{monsterid=Monsterid,walk_path=Walk_path} = Record,
	case Monsterid =:= undefined of
		true ->
				MonsteridFinal = undefined,
				exit({required_field_not_assigned, m_monster_walk_path_toc, monsterid});
		false ->
			MonsteridFinal = Monsterid
	end,
	case Walk_path =:= undefined of
		true ->
				Walk_pathFinal = undefined,
				exit({required_field_not_assigned, m_monster_walk_path_toc, walk_path});
		false ->
			Walk_pathFinal = Walk_path
	end,
	Walk_path_bin = encode_p_walk_path(Walk_pathFinal),
	BinLen_walk_path = erlang:byte_size(Walk_path_bin),

	<<MonsteridFinal:32/signed,BinLen_walk_path:32, Walk_path_bin/binary>>;
encode_m_monster_walk_path_toc(_) -> 
	<<>>.

decode_m_monster_walk_path_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Monsterid:32/signed,_SubBinSizewalk_path:32, SubBinwalk_path/binary>> = Bin0,
	Walk_path = decode_p_walk_path(SubBinwalk_path),

	{m_monster_walk_path_toc, Monsterid,Walk_path};

decode_m_monster_walk_path_toc(_) ->
	undefined.
encode_m_monster_walk_toc(Record) when is_record(Record, m_monster_walk_toc) ->
	#m_monster_walk_toc{monsterinfo=Monsterinfo,pos=Pos} = Record,
	case Monsterinfo =:= undefined of
		true ->
				MonsterinfoFinal = undefined,
				exit({required_field_not_assigned, m_monster_walk_toc, monsterinfo});
		false ->
			MonsterinfoFinal = Monsterinfo
	end,
	case Pos =:= undefined of
		true ->
				PosFinal = undefined,
				exit({required_field_not_assigned, m_monster_walk_toc, pos});
		false ->
			PosFinal = Pos
	end,
	Monsterinfo_bin = encode_p_map_monster(MonsterinfoFinal),
	BinLen_monsterinfo = erlang:byte_size(Monsterinfo_bin),
	Pos_bin = encode_p_pos(PosFinal),
	BinLen_pos = erlang:byte_size(Pos_bin),

	<<BinLen_monsterinfo:32, Monsterinfo_bin/binary,BinLen_pos:32, Pos_bin/binary>>;
encode_m_monster_walk_toc(_) -> 
	<<>>.

decode_m_monster_walk_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SubBinSizemonsterinfo:32, Bin1/binary>> = Bin0,
	<<SubBinmonsterinfo:SubBinSizemonsterinfo/binary, Bin2/binary>> = Bin1,
	Monsterinfo = decode_p_map_monster(SubBinmonsterinfo),
	<<_SubBinSizepos:32, SubBinpos/binary>> = Bin2,
	Pos = decode_p_pos(SubBinpos),

	{m_monster_walk_toc, Monsterinfo,Pos};

decode_m_monster_walk_toc(_) ->
	undefined.
encode_m_monster_summon_toc(Record) when is_record(Record, m_monster_summon_toc) ->
	#m_monster_summon_toc{monster_id=Monster_id} = Record,
	case Monster_id =:= undefined of
		true ->
				Monster_idFinal = undefined,
				exit({required_field_not_assigned, m_monster_summon_toc, monster_id});
		false ->
			Monster_idFinal = Monster_id
	end,

	<<Monster_idFinal:32/signed>>;
encode_m_monster_summon_toc(_) -> 
	<<>>.

decode_m_monster_summon_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Monster_id:32/signed>> = Bin0,

	{m_monster_summon_toc, Monster_id};

decode_m_monster_summon_toc(_) ->
	undefined.
encode_m_monster_talk_toc(Record) when is_record(Record, m_monster_talk_toc) ->
	#m_monster_talk_toc{monster_id=Monster_id,content=Content} = Record,
	case Monster_id =:= undefined of
		true ->
				Monster_idFinal = undefined,
				exit({required_field_not_assigned, m_monster_talk_toc, monster_id});
		false ->
			Monster_idFinal = Monster_id
	end,
	case Content =:= undefined of
		true ->
				ContentFinal = undefined,
				exit({required_field_not_assigned, m_monster_talk_toc, content});
		false ->
			ContentFinal = Content
	end,
	Content2 = common_tool:to_binary(ContentFinal),
	ContentLen = erlang:byte_size(Content2),

	<<Monster_idFinal:32/signed,ContentLen:16, Content2/binary>>;
encode_m_monster_talk_toc(_) -> 
	<<>>.

decode_m_monster_talk_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Monster_id:32/signed,ContentLen:16, Bin1/binary>> = Bin0,
	<<Content:ContentLen/binary>> = Bin1,

	{m_monster_talk_toc, Monster_id,common_tool:to_list(Content)};

decode_m_monster_talk_toc(_) ->
	undefined.
encode_m_monster_query_tos(Record) when is_record(Record, m_monster_query_tos) ->
	#m_monster_query_tos{} = Record,

	<<>>;
encode_m_monster_query_tos(_) -> 
	<<>>.

decode_m_monster_query_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_monster_query_tos};

decode_m_monster_query_tos(_) ->
	undefined.
encode_m_monster_query_toc(Record) when is_record(Record, m_monster_query_toc) ->
	#m_monster_query_toc{monster_type_list=Monster_type_list} = Record,
	case Monster_type_list =:= undefined of
		true ->
			Monster_type_listFinal = [];
		false ->
			Monster_type_listFinal = Monster_type_list
	end,
	Monster_type_list_bin = encode_int32s(Monster_type_listFinal, <<>>),
	SizeMonster_type_listFinal = erlang:length(Monster_type_listFinal),
	BinLen_monster_type_list = erlang:byte_size(Monster_type_list_bin),

	<<SizeMonster_type_listFinal:16, BinLen_monster_type_list:32, Monster_type_list_bin/binary>>;
encode_m_monster_query_toc(_) -> 
	<<>>.

decode_m_monster_query_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizemonster_type_list:16, _BinLenmonster_type_list:32, SubBinmonster_type_list/binary>> = Bin0,
	Monster_type_list = lists:reverse(decode_int32s(SubBinmonster_type_list, [])),

	{m_monster_query_toc, Monster_type_list};

decode_m_monster_query_toc(_) ->
	undefined.
encode_m_exchange_request_tos(Record) when is_record(Record, m_exchange_request_tos) ->
	#m_exchange_request_tos{target_roleid=Target_roleid,special_case=Special_case} = Record,
	case Target_roleid =:= undefined of
		true ->
				Target_roleidFinal = undefined,
				exit({required_field_not_assigned, m_exchange_request_tos, target_roleid});
		false ->
			Target_roleidFinal = Target_roleid
	end,
	case Special_case =:= undefined of
		true ->
				Special_caseFinal = 0;
		false ->
			Special_caseFinal = Special_case
	end,

	<<Target_roleidFinal:32/signed,Special_caseFinal:32/signed>>;
encode_m_exchange_request_tos(_) -> 
	<<>>.

decode_m_exchange_request_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Target_roleid:32/signed,Special_case:32/signed>> = Bin0,

	{m_exchange_request_tos, Target_roleid,Special_case};

decode_m_exchange_request_tos(_) ->
	undefined.
encode_m_exchange_request_toc(Record) when is_record(Record, m_exchange_request_toc) ->
	#m_exchange_request_toc{succ=Succ,reason=Reason,return_self=Return_self,src_role_id=Src_role_id,src_role_name=Src_role_name,special_case=Special_case} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Src_role_id =:= undefined of
		true ->
				Src_role_idFinal = 0;
		false ->
			Src_role_idFinal = Src_role_id
	end,
	case Src_role_name =:= undefined of
		true ->
				Src_role_nameFinal = <<>>;
		false ->
			Src_role_nameFinal = Src_role_name
	end,
	case Special_case =:= undefined of
		true ->
				Special_caseFinal = 0;
		false ->
			Special_caseFinal = Special_case
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Src_role_name2 = common_tool:to_binary(Src_role_nameFinal),
	Src_role_nameLen = erlang:byte_size(Src_role_name2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Return_selfFinal:8,Src_role_idFinal:32/signed,Src_role_nameLen:16, Src_role_name2/binary,Special_caseFinal:32/signed>>;
encode_m_exchange_request_toc(_) -> 
	<<>>.

decode_m_exchange_request_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Return_selfTmp:8,Src_role_id:32/signed,Src_role_nameLen:16, Bin2/binary>> = Bin1,
	<<Src_role_name:Src_role_nameLen/binary,Special_case:32/signed>> = Bin2,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_exchange_request_toc, Succ,common_tool:to_list(Reason),Return_self,Src_role_id,common_tool:to_list(Src_role_name),Special_case};

decode_m_exchange_request_toc(_) ->
	undefined.
encode_m_exchange_agree_tos(Record) when is_record(Record, m_exchange_agree_tos) ->
	#m_exchange_agree_tos{src_roleid=Src_roleid,special_case=Special_case} = Record,
	case Src_roleid =:= undefined of
		true ->
				Src_roleidFinal = undefined,
				exit({required_field_not_assigned, m_exchange_agree_tos, src_roleid});
		false ->
			Src_roleidFinal = Src_roleid
	end,
	case Special_case =:= undefined of
		true ->
				Special_caseFinal = 0;
		false ->
			Special_caseFinal = Special_case
	end,

	<<Src_roleidFinal:32/signed,Special_caseFinal:32/signed>>;
encode_m_exchange_agree_tos(_) -> 
	<<>>.

decode_m_exchange_agree_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Src_roleid:32/signed,Special_case:32/signed>> = Bin0,

	{m_exchange_agree_tos, Src_roleid,Special_case};

decode_m_exchange_agree_tos(_) ->
	undefined.
encode_m_exchange_agree_toc(Record) when is_record(Record, m_exchange_agree_toc) ->
	#m_exchange_agree_toc{succ=Succ,reason=Reason,return_self=Return_self,target_role_id=Target_role_id,target_role_name=Target_role_name,special_case=Special_case} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Target_role_id =:= undefined of
		true ->
				Target_role_idFinal = 0;
		false ->
			Target_role_idFinal = Target_role_id
	end,
	case Target_role_name =:= undefined of
		true ->
				Target_role_nameFinal = <<>>;
		false ->
			Target_role_nameFinal = Target_role_name
	end,
	case Special_case =:= undefined of
		true ->
				Special_caseFinal = 0;
		false ->
			Special_caseFinal = Special_case
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Target_role_name2 = common_tool:to_binary(Target_role_nameFinal),
	Target_role_nameLen = erlang:byte_size(Target_role_name2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Return_selfFinal:8,Target_role_idFinal:32/signed,Target_role_nameLen:16, Target_role_name2/binary,Special_caseFinal:32/signed>>;
encode_m_exchange_agree_toc(_) -> 
	<<>>.

decode_m_exchange_agree_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Return_selfTmp:8,Target_role_id:32/signed,Target_role_nameLen:16, Bin2/binary>> = Bin1,
	<<Target_role_name:Target_role_nameLen/binary,Special_case:32/signed>> = Bin2,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_exchange_agree_toc, Succ,common_tool:to_list(Reason),Return_self,Target_role_id,common_tool:to_list(Target_role_name),Special_case};

decode_m_exchange_agree_toc(_) ->
	undefined.
encode_m_exchange_refuse_tos(Record) when is_record(Record, m_exchange_refuse_tos) ->
	#m_exchange_refuse_tos{src_roleid=Src_roleid,special_case=Special_case} = Record,
	case Src_roleid =:= undefined of
		true ->
				Src_roleidFinal = undefined,
				exit({required_field_not_assigned, m_exchange_refuse_tos, src_roleid});
		false ->
			Src_roleidFinal = Src_roleid
	end,
	case Special_case =:= undefined of
		true ->
				Special_caseFinal = 0;
		false ->
			Special_caseFinal = Special_case
	end,

	<<Src_roleidFinal:32/signed,Special_caseFinal:32/signed>>;
encode_m_exchange_refuse_tos(_) -> 
	<<>>.

decode_m_exchange_refuse_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Src_roleid:32/signed,Special_case:32/signed>> = Bin0,

	{m_exchange_refuse_tos, Src_roleid,Special_case};

decode_m_exchange_refuse_tos(_) ->
	undefined.
encode_m_exchange_refuse_toc(Record) when is_record(Record, m_exchange_refuse_toc) ->
	#m_exchange_refuse_toc{succ=Succ,reason=Reason,return_self=Return_self,role_id=Role_id,role_name=Role_name,special_case=Special_case} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = 0;
		false ->
			Role_idFinal = Role_id
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = <<>>;
		false ->
			Role_nameFinal = Role_name
	end,
	case Special_case =:= undefined of
		true ->
				Special_caseFinal = 0;
		false ->
			Special_caseFinal = Special_case
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Return_selfFinal:8,Role_idFinal:32/signed,Role_nameLen:16, Role_name2/binary,Special_caseFinal:32/signed>>;
encode_m_exchange_refuse_toc(_) -> 
	<<>>.

decode_m_exchange_refuse_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Return_selfTmp:8,Role_id:32/signed,Role_nameLen:16, Bin2/binary>> = Bin1,
	<<Role_name:Role_nameLen/binary,Special_case:32/signed>> = Bin2,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_exchange_refuse_toc, Succ,common_tool:to_list(Reason),Return_self,Role_id,common_tool:to_list(Role_name),Special_case};

decode_m_exchange_refuse_toc(_) ->
	undefined.
encode_m_exchange_lock_tos(Record) when is_record(Record, m_exchange_lock_tos) ->
	#m_exchange_lock_tos{goods=Goods,silver=Silver,gold=Gold,special_case=Special_case} = Record,
	case Goods =:= undefined of
		true ->
			GoodsFinal = [];
		false ->
			GoodsFinal = Goods
	end,
	case Silver =:= undefined of
		true ->
				SilverFinal = 0;
		false ->
			SilverFinal = Silver
	end,
	case Gold =:= undefined of
		true ->
				GoldFinal = 0;
		false ->
			GoldFinal = Gold
	end,
	case Special_case =:= undefined of
		true ->
				Special_caseFinal = 0;
		false ->
			Special_caseFinal = Special_case
	end,
	Goods_bin = encode_int32s(GoodsFinal, <<>>),
	SizeGoodsFinal = erlang:length(GoodsFinal),
	BinLen_goods = erlang:byte_size(Goods_bin),

	<<SizeGoodsFinal:16, BinLen_goods:32, Goods_bin/binary,SilverFinal:32/signed,GoldFinal:32/signed,Special_caseFinal:32/signed>>;
encode_m_exchange_lock_tos(_) -> 
	<<>>.

decode_m_exchange_lock_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizegoods:16, BinLengoods:32, Bin1/binary>> = Bin0,
	<<SubBingoods:BinLengoods/binary, Bin2/binary>> = Bin1, 
	Goods = lists:reverse(decode_int32s(SubBingoods, [])),
	<<Silver:32/signed,Gold:32/signed,Special_case:32/signed>> = Bin2,

	{m_exchange_lock_tos, Goods,Silver,Gold,Special_case};

decode_m_exchange_lock_tos(_) ->
	undefined.
encode_m_exchange_lock_toc(Record) when is_record(Record, m_exchange_lock_toc) ->
	#m_exchange_lock_toc{succ=Succ,reason=Reason,return_self=Return_self,goods=Goods,silver=Silver,gold=Gold,special_case=Special_case} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Goods =:= undefined of
		true ->
			GoodsFinal = [];
		false ->
			GoodsFinal = Goods
	end,
	case Silver =:= undefined of
		true ->
				SilverFinal = 0;
		false ->
			SilverFinal = Silver
	end,
	case Gold =:= undefined of
		true ->
				GoldFinal = 0;
		false ->
			GoldFinal = Gold
	end,
	case Special_case =:= undefined of
		true ->
				Special_caseFinal = 0;
		false ->
			Special_caseFinal = Special_case
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Goods_bin = encode_p_goodss(GoodsFinal, <<>>),
	SizeGoodsFinal = erlang:length(GoodsFinal),
	BinLen_goods = erlang:byte_size(Goods_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Return_selfFinal:8,SizeGoodsFinal:16, BinLen_goods:32, Goods_bin/binary,SilverFinal:32/signed,GoldFinal:32/signed,Special_caseFinal:32/signed>>;
encode_m_exchange_lock_toc(_) -> 
	<<>>.

decode_m_exchange_lock_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Return_selfTmp:8,_Sizegoods:16, BinLengoods:32, Bin2/binary>> = Bin1,
	<<SubBingoods:BinLengoods/binary, Bin3/binary>> = Bin2, 
	Goods = lists:reverse(decode_p_goodss(SubBingoods, [])),
	<<Silver:32/signed,Gold:32/signed,Special_case:32/signed>> = Bin3,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_exchange_lock_toc, Succ,common_tool:to_list(Reason),Return_self,Goods,Silver,Gold,Special_case};

decode_m_exchange_lock_toc(_) ->
	undefined.
encode_m_exchange_confirm_tos(Record) when is_record(Record, m_exchange_confirm_tos) ->
	#m_exchange_confirm_tos{special_case=Special_case} = Record,
	case Special_case =:= undefined of
		true ->
				Special_caseFinal = 0;
		false ->
			Special_caseFinal = Special_case
	end,

	<<Special_caseFinal:32/signed>>;
encode_m_exchange_confirm_tos(_) -> 
	<<>>.

decode_m_exchange_confirm_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Special_case:32/signed>> = Bin0,

	{m_exchange_confirm_tos, Special_case};

decode_m_exchange_confirm_tos(_) ->
	undefined.
encode_m_exchange_confirm_toc(Record) when is_record(Record, m_exchange_confirm_toc) ->
	#m_exchange_confirm_toc{succ=Succ,reason=Reason,return_self=Return_self,goods_info=Goods_info,special_case=Special_case} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Goods_info =:= undefined of
		true ->
			Goods_infoFinal = [];
		false ->
			Goods_infoFinal = Goods_info
	end,
	case Special_case =:= undefined of
		true ->
				Special_caseFinal = 0;
		false ->
			Special_caseFinal = Special_case
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Goods_info_bin = encode_p_simple_goodss(Goods_infoFinal, <<>>),
	SizeGoods_infoFinal = erlang:length(Goods_infoFinal),
	BinLen_goods_info = erlang:byte_size(Goods_info_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Return_selfFinal:8,SizeGoods_infoFinal:16, BinLen_goods_info:32, Goods_info_bin/binary,Special_caseFinal:32/signed>>;
encode_m_exchange_confirm_toc(_) -> 
	<<>>.

decode_m_exchange_confirm_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Return_selfTmp:8,_Sizegoods_info:16, BinLengoods_info:32, Bin2/binary>> = Bin1,
	<<SubBingoods_info:BinLengoods_info/binary, Bin3/binary>> = Bin2, 
	Goods_info = lists:reverse(decode_p_simple_goodss(SubBingoods_info, [])),
	<<Special_case:32/signed>> = Bin3,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_exchange_confirm_toc, Succ,common_tool:to_list(Reason),Return_self,Goods_info,Special_case};

decode_m_exchange_confirm_toc(_) ->
	undefined.
encode_p_simple_goods(Record) when is_record(Record, p_simple_goods) ->
	#p_simple_goods{goodsid=Goodsid,bagid=Bagid,pos=Pos} = Record,
	case Goodsid =:= undefined of
		true ->
				GoodsidFinal = undefined,
				exit({required_field_not_assigned, p_simple_goods, goodsid});
		false ->
			GoodsidFinal = Goodsid
	end,
	case Bagid =:= undefined of
		true ->
				BagidFinal = undefined,
				exit({required_field_not_assigned, p_simple_goods, bagid});
		false ->
			BagidFinal = Bagid
	end,
	case Pos =:= undefined of
		true ->
				PosFinal = undefined,
				exit({required_field_not_assigned, p_simple_goods, pos});
		false ->
			PosFinal = Pos
	end,

	<<GoodsidFinal:32/signed,BagidFinal:32/signed,PosFinal:32/signed>>;
encode_p_simple_goods(_) -> 
	<<>>.

decode_p_simple_goods(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Goodsid:32/signed,Bagid:32/signed,Pos:32/signed>> = Bin0,

	{p_simple_goods, Goodsid,Bagid,Pos};

decode_p_simple_goods(_) ->
	undefined.
encode_m_exchange_cancel_tos(Record) when is_record(Record, m_exchange_cancel_tos) ->
	#m_exchange_cancel_tos{src_roleid=Src_roleid,cancel_type=Cancel_type,special_case=Special_case} = Record,
	case Src_roleid =:= undefined of
		true ->
				Src_roleidFinal = undefined,
				exit({required_field_not_assigned, m_exchange_cancel_tos, src_roleid});
		false ->
			Src_roleidFinal = Src_roleid
	end,
	case Cancel_type =:= undefined of
		true ->
				Cancel_typeFinal = undefined,
				exit({required_field_not_assigned, m_exchange_cancel_tos, cancel_type});
		false ->
			Cancel_typeFinal = Cancel_type
	end,
	case Special_case =:= undefined of
		true ->
				Special_caseFinal = 0;
		false ->
			Special_caseFinal = Special_case
	end,

	<<Src_roleidFinal:32/signed,Cancel_typeFinal:32/signed,Special_caseFinal:32/signed>>;
encode_m_exchange_cancel_tos(_) -> 
	<<>>.

decode_m_exchange_cancel_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Src_roleid:32/signed,Cancel_type:32/signed,Special_case:32/signed>> = Bin0,

	{m_exchange_cancel_tos, Src_roleid,Cancel_type,Special_case};

decode_m_exchange_cancel_tos(_) ->
	undefined.
encode_m_exchange_cancel_toc(Record) when is_record(Record, m_exchange_cancel_toc) ->
	#m_exchange_cancel_toc{succ=Succ,reason=Reason,return_self=Return_self,special_case=Special_case} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Special_case =:= undefined of
		true ->
				Special_caseFinal = 0;
		false ->
			Special_caseFinal = Special_case
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Return_selfFinal:8,Special_caseFinal:32/signed>>;
encode_m_exchange_cancel_toc(_) -> 
	<<>>.

decode_m_exchange_cancel_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Return_selfTmp:8,Special_case:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_exchange_cancel_toc, Succ,common_tool:to_list(Reason),Return_self,Special_case};

decode_m_exchange_cancel_toc(_) ->
	undefined.
encode_m_exchange_npc_deal_tos(Record) when is_record(Record, m_exchange_npc_deal_tos) ->
	#m_exchange_npc_deal_tos{deal_id=Deal_id,deal_amount=Deal_amount} = Record,
	case Deal_id =:= undefined of
		true ->
				Deal_idFinal = undefined,
				exit({required_field_not_assigned, m_exchange_npc_deal_tos, deal_id});
		false ->
			Deal_idFinal = Deal_id
	end,
	case Deal_amount =:= undefined of
		true ->
				Deal_amountFinal = 1;
		false ->
			Deal_amountFinal = Deal_amount
	end,

	<<Deal_idFinal:32/signed,Deal_amountFinal:32/signed>>;
encode_m_exchange_npc_deal_tos(_) -> 
	<<>>.

decode_m_exchange_npc_deal_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Deal_id:32/signed,Deal_amount:32/signed>> = Bin0,

	{m_exchange_npc_deal_tos, Deal_id,Deal_amount};

decode_m_exchange_npc_deal_tos(_) ->
	undefined.
encode_m_exchange_npc_deal_toc(Record) when is_record(Record, m_exchange_npc_deal_toc) ->
	#m_exchange_npc_deal_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_exchange_npc_deal_toc(_) -> 
	<<>>.

decode_m_exchange_npc_deal_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_exchange_npc_deal_toc, Succ,common_tool:to_list(Reason)};

decode_m_exchange_npc_deal_toc(_) ->
	undefined.
encode_m_exchange_equip_info_tos(Record) when is_record(Record, m_exchange_equip_info_tos) ->
	#m_exchange_equip_info_tos{chagetype=Chagetype,equiplist=Equiplist} = Record,
	case Chagetype =:= undefined of
		true ->
				ChagetypeFinal = undefined,
				exit({required_field_not_assigned, m_exchange_equip_info_tos, chagetype});
		false ->
			ChagetypeFinal = Chagetype
	end,
	case Equiplist =:= undefined of
		true ->
			EquiplistFinal = [];
		false ->
			EquiplistFinal = Equiplist
	end,
	Equiplist_bin = encode_p_equip_items(EquiplistFinal, <<>>),
	SizeEquiplistFinal = erlang:length(EquiplistFinal),
	BinLen_equiplist = erlang:byte_size(Equiplist_bin),

	<<ChagetypeFinal:32/signed,SizeEquiplistFinal:16, BinLen_equiplist:32, Equiplist_bin/binary>>;
encode_m_exchange_equip_info_tos(_) -> 
	<<>>.

decode_m_exchange_equip_info_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Chagetype:32/signed,_Sizeequiplist:16, _BinLenequiplist:32, SubBinequiplist/binary>> = Bin0,
	Equiplist = lists:reverse(decode_p_equip_items(SubBinequiplist, [])),

	{m_exchange_equip_info_tos, Chagetype,Equiplist};

decode_m_exchange_equip_info_tos(_) ->
	undefined.
encode_m_exchange_equip_info_toc(Record) when is_record(Record, m_exchange_equip_info_toc) ->
	#m_exchange_equip_info_toc{succ=Succ,reason=Reason,chagetype=Chagetype,newgoods=Newgoods} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Chagetype =:= undefined of
		true ->
				ChagetypeFinal = 0;
		false ->
			ChagetypeFinal = Chagetype
	end,
	case Newgoods =:= undefined of
		true ->
			NewgoodsFinal = [];
		false ->
			NewgoodsFinal = Newgoods
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Newgoods_bin = encode_p_goodss(NewgoodsFinal, <<>>),
	SizeNewgoodsFinal = erlang:length(NewgoodsFinal),
	BinLen_newgoods = erlang:byte_size(Newgoods_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,ChagetypeFinal:32/signed,SizeNewgoodsFinal:16, BinLen_newgoods:32, Newgoods_bin/binary>>;
encode_m_exchange_equip_info_toc(_) -> 
	<<>>.

decode_m_exchange_equip_info_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Chagetype:32/signed,_Sizenewgoods:16, _BinLennewgoods:32, SubBinnewgoods/binary>> = Bin1,
	Newgoods = lists:reverse(decode_p_goodss(SubBinnewgoods, [])),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_exchange_equip_info_toc, Succ,common_tool:to_list(Reason),Chagetype,Newgoods};

decode_m_exchange_equip_info_toc(_) ->
	undefined.
encode_m_stall_request_tos(Record) when is_record(Record, m_stall_request_tos) ->
	#m_stall_request_tos{name=Name,mode=Mode,time_hour=Time_hour} = Record,
	case Name =:= undefined of
		true ->
				NameFinal = undefined,
				exit({required_field_not_assigned, m_stall_request_tos, name});
		false ->
			NameFinal = Name
	end,
	case Mode =:= undefined of
		true ->
				ModeFinal = undefined,
				exit({required_field_not_assigned, m_stall_request_tos, mode});
		false ->
			ModeFinal = Mode
	end,
	case Time_hour =:= undefined of
		true ->
				Time_hourFinal = 0;
		false ->
			Time_hourFinal = Time_hour
	end,
	Name2 = common_tool:to_binary(NameFinal),
	NameLen = erlang:byte_size(Name2),

	<<NameLen:16, Name2/binary,ModeFinal:32/signed,Time_hourFinal:32/signed>>;
encode_m_stall_request_tos(_) -> 
	<<>>.

decode_m_stall_request_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<NameLen:16, Bin1/binary>> = Bin0,
	<<Name:NameLen/binary,Mode:32/signed,Time_hour:32/signed>> = Bin1,

	{m_stall_request_tos, common_tool:to_list(Name),Mode,Time_hour};

decode_m_stall_request_tos(_) ->
	undefined.
encode_m_stall_request_toc(Record) when is_record(Record, m_stall_request_toc) ->
	#m_stall_request_toc{succ=Succ,reason=Reason,return_self=Return_self,stall_info=Stall_info,silver=Silver,bind_silver=Bind_silver} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
			case Return_self of
				true ->
					Return_selfFinal = 1;
				false ->
					Return_selfFinal = 0
			end
	end,
	case Stall_info =:= undefined of
		true ->
				Stall_infoFinal = 0;
		false ->
			Stall_infoFinal = Stall_info
	end,
	case Silver =:= undefined of
		true ->
				SilverFinal = 0;
		false ->
			SilverFinal = Silver
	end,
	case Bind_silver =:= undefined of
		true ->
				Bind_silverFinal = 0;
		false ->
			Bind_silverFinal = Bind_silver
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Stall_info_bin = encode_p_map_stall(Stall_infoFinal),
	BinLen_stall_info = erlang:byte_size(Stall_info_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Return_selfFinal:8,BinLen_stall_info:32, Stall_info_bin/binary,SilverFinal:32/signed,Bind_silverFinal:32/signed>>;
encode_m_stall_request_toc(_) -> 
	<<>>.

decode_m_stall_request_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Return_selfTmp:8,SubBinSizestall_info:32, Bin2/binary>> = Bin1,
	<<SubBinstall_info:SubBinSizestall_info/binary, Bin3/binary>> = Bin2,
	Stall_info = decode_p_map_stall(SubBinstall_info),
	<<Silver:32/signed,Bind_silver:32/signed>> = Bin3,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_stall_request_toc, Succ,common_tool:to_list(Reason),Return_self,Stall_info,Silver,Bind_silver};

decode_m_stall_request_toc(_) ->
	undefined.
encode_m_stall_open_tos(Record) when is_record(Record, m_stall_open_tos) ->
	#m_stall_open_tos{} = Record,

	<<>>;
encode_m_stall_open_tos(_) -> 
	<<>>.

decode_m_stall_open_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_stall_open_tos};

decode_m_stall_open_tos(_) ->
	undefined.
encode_m_stall_open_toc(Record) when is_record(Record, m_stall_open_toc) ->
	#m_stall_open_toc{succ=Succ,reason=Reason,get_silver=Get_silver,tax=Tax,goods=Goods,name=Name,remain_time=Remain_time,mode=Mode,state=State,buy_logs=Buy_logs,chat_logs=Chat_logs,get_gold=Get_gold} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Get_silver =:= undefined of
		true ->
				Get_silverFinal = 0;
		false ->
			Get_silverFinal = Get_silver
	end,
	case Tax =:= undefined of
		true ->
				TaxFinal = 0;
		false ->
			TaxFinal = Tax
	end,
	case Goods =:= undefined of
		true ->
			GoodsFinal = [];
		false ->
			GoodsFinal = Goods
	end,
	case Name =:= undefined of
		true ->
				NameFinal = <<>>;
		false ->
			NameFinal = Name
	end,
	case Remain_time =:= undefined of
		true ->
				Remain_timeFinal = 0;
		false ->
			Remain_timeFinal = Remain_time
	end,
	case Mode =:= undefined of
		true ->
				ModeFinal = 0;
		false ->
			ModeFinal = Mode
	end,
	case State =:= undefined of
		true ->
				StateFinal = undefined,
				exit({required_field_not_assigned, m_stall_open_toc, state});
		false ->
			StateFinal = State
	end,
	case Buy_logs =:= undefined of
		true ->
			Buy_logsFinal = [];
		false ->
			Buy_logsFinal = Buy_logs
	end,
	case Chat_logs =:= undefined of
		true ->
			Chat_logsFinal = [];
		false ->
			Chat_logsFinal = Chat_logs
	end,
	case Get_gold =:= undefined of
		true ->
				Get_goldFinal = 0;
		false ->
			Get_goldFinal = Get_gold
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Goods_bin = encode_p_stall_goodss(GoodsFinal, <<>>),
	SizeGoodsFinal = erlang:length(GoodsFinal),
	BinLen_goods = erlang:byte_size(Goods_bin),
	Name2 = common_tool:to_binary(NameFinal),
	NameLen = erlang:byte_size(Name2),
	Buy_logs_bin = encode_p_stall_logs(Buy_logsFinal, <<>>),
	SizeBuy_logsFinal = erlang:length(Buy_logsFinal),
	BinLen_buy_logs = erlang:byte_size(Buy_logs_bin),
	Chat_logs_bin = encode_p_stall_logs(Chat_logsFinal, <<>>),
	SizeChat_logsFinal = erlang:length(Chat_logsFinal),
	BinLen_chat_logs = erlang:byte_size(Chat_logs_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Get_silverFinal:32/signed,TaxFinal:32/signed,SizeGoodsFinal:16, BinLen_goods:32, Goods_bin/binary,NameLen:16, Name2/binary,Remain_timeFinal:32/signed,ModeFinal:32/signed,StateFinal:32/signed,SizeBuy_logsFinal:16, BinLen_buy_logs:32, Buy_logs_bin/binary,SizeChat_logsFinal:16, BinLen_chat_logs:32, Chat_logs_bin/binary,Get_goldFinal:32/signed>>;
encode_m_stall_open_toc(_) -> 
	<<>>.

decode_m_stall_open_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Get_silver:32/signed,Tax:32/signed,_Sizegoods:16, BinLengoods:32, Bin2/binary>> = Bin1,
	<<SubBingoods:BinLengoods/binary, Bin3/binary>> = Bin2, 
	Goods = lists:reverse(decode_p_stall_goodss(SubBingoods, [])),
	<<NameLen:16, Bin4/binary>> = Bin3,
	<<Name:NameLen/binary,Remain_time:32/signed,Mode:32/signed,State:32/signed,_Sizebuy_logs:16, BinLenbuy_logs:32, Bin5/binary>> = Bin4,
	<<SubBinbuy_logs:BinLenbuy_logs/binary, Bin6/binary>> = Bin5, 
	Buy_logs = lists:reverse(decode_p_stall_logs(SubBinbuy_logs, [])),
	<<_Sizechat_logs:16, BinLenchat_logs:32, Bin7/binary>> = Bin6,
	<<SubBinchat_logs:BinLenchat_logs/binary, Bin8/binary>> = Bin7, 
	Chat_logs = lists:reverse(decode_p_stall_logs(SubBinchat_logs, [])),
	<<Get_gold:32/signed>> = Bin8,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_stall_open_toc, Succ,common_tool:to_list(Reason),Get_silver,Tax,Goods,common_tool:to_list(Name),Remain_time,Mode,State,Buy_logs,Chat_logs,Get_gold};

decode_m_stall_open_toc(_) ->
	undefined.
encode_m_stall_detail_tos(Record) when is_record(Record, m_stall_detail_tos) ->
	#m_stall_detail_tos{role_id=Role_id} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, m_stall_detail_tos, role_id});
		false ->
			Role_idFinal = Role_id
	end,

	<<Role_idFinal:32/signed>>;
encode_m_stall_detail_tos(_) -> 
	<<>>.

decode_m_stall_detail_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed>> = Bin0,

	{m_stall_detail_tos, Role_id};

decode_m_stall_detail_tos(_) ->
	undefined.
encode_m_stall_detail_toc(Record) when is_record(Record, m_stall_detail_toc) ->
	#m_stall_detail_toc{succ=Succ,reason=Reason,role_id=Role_id,role_name=Role_name,goods=Goods,mode=Mode,remain_time=Remain_time,name=Name,buy_logs=Buy_logs,chat_logs=Chat_logs} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = 0;
		false ->
			Role_idFinal = Role_id
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = <<>>;
		false ->
			Role_nameFinal = Role_name
	end,
	case Goods =:= undefined of
		true ->
			GoodsFinal = [];
		false ->
			GoodsFinal = Goods
	end,
	case Mode =:= undefined of
		true ->
				ModeFinal = 0;
		false ->
			ModeFinal = Mode
	end,
	case Remain_time =:= undefined of
		true ->
				Remain_timeFinal = 0;
		false ->
			Remain_timeFinal = Remain_time
	end,
	case Name =:= undefined of
		true ->
				NameFinal = <<>>;
		false ->
			NameFinal = Name
	end,
	case Buy_logs =:= undefined of
		true ->
			Buy_logsFinal = [];
		false ->
			Buy_logsFinal = Buy_logs
	end,
	case Chat_logs =:= undefined of
		true ->
			Chat_logsFinal = [];
		false ->
			Chat_logsFinal = Chat_logs
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),
	Goods_bin = encode_p_stall_goodss(GoodsFinal, <<>>),
	SizeGoodsFinal = erlang:length(GoodsFinal),
	BinLen_goods = erlang:byte_size(Goods_bin),
	Name2 = common_tool:to_binary(NameFinal),
	NameLen = erlang:byte_size(Name2),
	Buy_logs_bin = encode_p_stall_logs(Buy_logsFinal, <<>>),
	SizeBuy_logsFinal = erlang:length(Buy_logsFinal),
	BinLen_buy_logs = erlang:byte_size(Buy_logs_bin),
	Chat_logs_bin = encode_p_stall_logs(Chat_logsFinal, <<>>),
	SizeChat_logsFinal = erlang:length(Chat_logsFinal),
	BinLen_chat_logs = erlang:byte_size(Chat_logs_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Role_idFinal:32/signed,Role_nameLen:16, Role_name2/binary,SizeGoodsFinal:16, BinLen_goods:32, Goods_bin/binary,ModeFinal:32/signed,Remain_timeFinal:32/signed,NameLen:16, Name2/binary,SizeBuy_logsFinal:16, BinLen_buy_logs:32, Buy_logs_bin/binary,SizeChat_logsFinal:16, BinLen_chat_logs:32, Chat_logs_bin/binary>>;
encode_m_stall_detail_toc(_) -> 
	<<>>.

decode_m_stall_detail_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Role_id:32/signed,Role_nameLen:16, Bin2/binary>> = Bin1,
	<<Role_name:Role_nameLen/binary,_Sizegoods:16, BinLengoods:32, Bin3/binary>> = Bin2,
	<<SubBingoods:BinLengoods/binary, Bin4/binary>> = Bin3, 
	Goods = lists:reverse(decode_p_stall_goodss(SubBingoods, [])),
	<<Mode:32/signed,Remain_time:32/signed,NameLen:16, Bin5/binary>> = Bin4,
	<<Name:NameLen/binary,_Sizebuy_logs:16, BinLenbuy_logs:32, Bin6/binary>> = Bin5,
	<<SubBinbuy_logs:BinLenbuy_logs/binary, Bin7/binary>> = Bin6, 
	Buy_logs = lists:reverse(decode_p_stall_logs(SubBinbuy_logs, [])),
	<<_Sizechat_logs:16, _BinLenchat_logs:32, SubBinchat_logs/binary>> = Bin7,
	Chat_logs = lists:reverse(decode_p_stall_logs(SubBinchat_logs, [])),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_stall_detail_toc, Succ,common_tool:to_list(Reason),Role_id,common_tool:to_list(Role_name),Goods,Mode,Remain_time,common_tool:to_list(Name),Buy_logs,Chat_logs};

decode_m_stall_detail_toc(_) ->
	undefined.
encode_p_stall_goods(Record) when is_record(Record, p_stall_goods) ->
	#p_stall_goods{goods=Goods,price=Price,price_type=Price_type,pos=Pos} = Record,
	case Goods =:= undefined of
		true ->
				GoodsFinal = undefined,
				exit({required_field_not_assigned, p_stall_goods, goods});
		false ->
			GoodsFinal = Goods
	end,
	case Price =:= undefined of
		true ->
				PriceFinal = undefined,
				exit({required_field_not_assigned, p_stall_goods, price});
		false ->
			PriceFinal = Price
	end,
	case Price_type =:= undefined of
		true ->
				Price_typeFinal = undefined,
				exit({required_field_not_assigned, p_stall_goods, price_type});
		false ->
			Price_typeFinal = Price_type
	end,
	case Pos =:= undefined of
		true ->
				PosFinal = undefined,
				exit({required_field_not_assigned, p_stall_goods, pos});
		false ->
			PosFinal = Pos
	end,
	Goods_bin = encode_p_goods(GoodsFinal),
	BinLen_goods = erlang:byte_size(Goods_bin),

	<<BinLen_goods:32, Goods_bin/binary,PriceFinal:32/signed,Price_typeFinal:32/signed,PosFinal:32/signed>>;
encode_p_stall_goods(_) -> 
	<<>>.

decode_p_stall_goods(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SubBinSizegoods:32, Bin1/binary>> = Bin0,
	<<SubBingoods:SubBinSizegoods/binary, Bin2/binary>> = Bin1,
	Goods = decode_p_goods(SubBingoods),
	<<Price:32/signed,Price_type:32/signed,Pos:32/signed>> = Bin2,

	{p_stall_goods, Goods,Price,Price_type,Pos};

decode_p_stall_goods(_) ->
	undefined.
encode_p_stall_log(Record) when is_record(Record, p_stall_log) ->
	#p_stall_log{type=Type,src_role_id=Src_role_id,src_role_name=Src_role_name,dest_role_id=Dest_role_id,dest_role_name=Dest_role_name,goods_info=Goods_info,number=Number,price=Price,content=Content,time=Time,price_type=Price_type} = Record,
	case Type =:= undefined of
		true ->
				TypeFinal = undefined,
				exit({required_field_not_assigned, p_stall_log, type});
		false ->
			TypeFinal = Type
	end,
	case Src_role_id =:= undefined of
		true ->
				Src_role_idFinal = undefined,
				exit({required_field_not_assigned, p_stall_log, src_role_id});
		false ->
			Src_role_idFinal = Src_role_id
	end,
	case Src_role_name =:= undefined of
		true ->
				Src_role_nameFinal = undefined,
				exit({required_field_not_assigned, p_stall_log, src_role_name});
		false ->
			Src_role_nameFinal = Src_role_name
	end,
	case Dest_role_id =:= undefined of
		true ->
				Dest_role_idFinal = 0;
		false ->
			Dest_role_idFinal = Dest_role_id
	end,
	case Dest_role_name =:= undefined of
		true ->
				Dest_role_nameFinal = <<>>;
		false ->
			Dest_role_nameFinal = Dest_role_name
	end,
	case Goods_info =:= undefined of
		true ->
				Goods_infoFinal = 0;
		false ->
			Goods_infoFinal = Goods_info
	end,
	case Number =:= undefined of
		true ->
				NumberFinal = 0;
		false ->
			NumberFinal = Number
	end,
	case Price =:= undefined of
		true ->
				PriceFinal = 0;
		false ->
			PriceFinal = Price
	end,
	case Content =:= undefined of
		true ->
				ContentFinal = <<>>;
		false ->
			ContentFinal = Content
	end,
	case Time =:= undefined of
		true ->
				TimeFinal = undefined,
				exit({required_field_not_assigned, p_stall_log, time});
		false ->
			TimeFinal = Time
	end,
	case Price_type =:= undefined of
		true ->
				Price_typeFinal = 0;
		false ->
			Price_typeFinal = Price_type
	end,
	Src_role_name2 = common_tool:to_binary(Src_role_nameFinal),
	Src_role_nameLen = erlang:byte_size(Src_role_name2),
	Dest_role_name2 = common_tool:to_binary(Dest_role_nameFinal),
	Dest_role_nameLen = erlang:byte_size(Dest_role_name2),
	Goods_info_bin = encode_p_goods(Goods_infoFinal),
	BinLen_goods_info = erlang:byte_size(Goods_info_bin),
	Content2 = common_tool:to_binary(ContentFinal),
	ContentLen = erlang:byte_size(Content2),

	<<TypeFinal:32/signed,Src_role_idFinal:32/signed,Src_role_nameLen:16, Src_role_name2/binary,Dest_role_idFinal:32/signed,Dest_role_nameLen:16, Dest_role_name2/binary,BinLen_goods_info:32, Goods_info_bin/binary,NumberFinal:32/signed,PriceFinal:32/signed,ContentLen:16, Content2/binary,TimeFinal:32/signed,Price_typeFinal:32/signed>>;
encode_p_stall_log(_) -> 
	<<>>.

decode_p_stall_log(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Type:32/signed,Src_role_id:32/signed,Src_role_nameLen:16, Bin1/binary>> = Bin0,
	<<Src_role_name:Src_role_nameLen/binary,Dest_role_id:32/signed,Dest_role_nameLen:16, Bin2/binary>> = Bin1,
	<<Dest_role_name:Dest_role_nameLen/binary,SubBinSizegoods_info:32, Bin3/binary>> = Bin2,
	<<SubBingoods_info:SubBinSizegoods_info/binary, Bin4/binary>> = Bin3,
	Goods_info = decode_p_goods(SubBingoods_info),
	<<Number:32/signed,Price:32/signed,ContentLen:16, Bin5/binary>> = Bin4,
	<<Content:ContentLen/binary,Time:32/signed,Price_type:32/signed>> = Bin5,

	{p_stall_log, Type,Src_role_id,common_tool:to_list(Src_role_name),Dest_role_id,common_tool:to_list(Dest_role_name),Goods_info,Number,Price,common_tool:to_list(Content),Time,Price_type};

decode_p_stall_log(_) ->
	undefined.
encode_p_stall_list_item(Record) when is_record(Record, p_stall_list_item) ->
	#p_stall_list_item{role_id=Role_id,role_name=Role_name,price=Price,price_type=Price_type,goods_detail=Goods_detail} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, p_stall_list_item, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = undefined,
				exit({required_field_not_assigned, p_stall_list_item, role_name});
		false ->
			Role_nameFinal = Role_name
	end,
	case Price =:= undefined of
		true ->
				PriceFinal = undefined,
				exit({required_field_not_assigned, p_stall_list_item, price});
		false ->
			PriceFinal = Price
	end,
	case Price_type =:= undefined of
		true ->
				Price_typeFinal = undefined,
				exit({required_field_not_assigned, p_stall_list_item, price_type});
		false ->
			Price_typeFinal = Price_type
	end,
	case Goods_detail =:= undefined of
		true ->
				Goods_detailFinal = undefined,
				exit({required_field_not_assigned, p_stall_list_item, goods_detail});
		false ->
			Goods_detailFinal = Goods_detail
	end,
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),
	Goods_detail_bin = encode_p_goods(Goods_detailFinal),
	BinLen_goods_detail = erlang:byte_size(Goods_detail_bin),

	<<Role_idFinal:32/signed,Role_nameLen:16, Role_name2/binary,PriceFinal:32/signed,Price_typeFinal:32/signed,BinLen_goods_detail:32, Goods_detail_bin/binary>>;
encode_p_stall_list_item(_) -> 
	<<>>.

decode_p_stall_list_item(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,Role_nameLen:16, Bin1/binary>> = Bin0,
	<<Role_name:Role_nameLen/binary,Price:32/signed,Price_type:32/signed,_SubBinSizegoods_detail:32, SubBingoods_detail/binary>> = Bin1,
	Goods_detail = decode_p_goods(SubBingoods_detail),

	{p_stall_list_item, Role_id,common_tool:to_list(Role_name),Price,Price_type,Goods_detail};

decode_p_stall_list_item(_) ->
	undefined.
encode_m_stall_list_tos(Record) when is_record(Record, m_stall_list_tos) ->
	#m_stall_list_tos{type=Type,page=Page,typeid=Typeid,sort_type=Sort_type,is_reverse=Is_reverse,is_gold_first=Is_gold_first,min_level=Min_level,max_level=Max_level,color=Color,pro=Pro} = Record,
	case Type =:= undefined of
		true ->
				TypeFinal = 0;
		false ->
			TypeFinal = Type
	end,
	case Page =:= undefined of
		true ->
				PageFinal = 0;
		false ->
			PageFinal = Page
	end,
	case Typeid =:= undefined of
		true ->
			TypeidFinal = [];
		false ->
			TypeidFinal = Typeid
	end,
	case Sort_type =:= undefined of
		true ->
				Sort_typeFinal = 0;
		false ->
			Sort_typeFinal = Sort_type
	end,
	case Is_reverse =:= undefined of
		true ->
				Is_reverseFinal = 1;
		false ->
			case Is_reverse of
				true ->
					Is_reverseFinal = 1;
				false ->
					Is_reverseFinal = 0
			end
	end,
	case Is_gold_first =:= undefined of
		true ->
				Is_gold_firstFinal = 1;
		false ->
			case Is_gold_first of
				true ->
					Is_gold_firstFinal = 1;
				false ->
					Is_gold_firstFinal = 0
			end
	end,
	case Min_level =:= undefined of
		true ->
				Min_levelFinal = 0;
		false ->
			Min_levelFinal = Min_level
	end,
	case Max_level =:= undefined of
		true ->
				Max_levelFinal = 0;
		false ->
			Max_levelFinal = Max_level
	end,
	case Color =:= undefined of
		true ->
				ColorFinal = 0;
		false ->
			ColorFinal = Color
	end,
	case Pro =:= undefined of
		true ->
				ProFinal = 0;
		false ->
			ProFinal = Pro
	end,
	Typeid_bin = encode_int32s(TypeidFinal, <<>>),
	SizeTypeidFinal = erlang:length(TypeidFinal),
	BinLen_typeid = erlang:byte_size(Typeid_bin),

	<<TypeFinal:32/signed,PageFinal:32/signed,SizeTypeidFinal:16, BinLen_typeid:32, Typeid_bin/binary,Sort_typeFinal:32/signed,Is_reverseFinal:8,Is_gold_firstFinal:8,Min_levelFinal:32/signed,Max_levelFinal:32/signed,ColorFinal:32/signed,ProFinal:32/signed>>;
encode_m_stall_list_tos(_) -> 
	<<>>.

decode_m_stall_list_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Type:32/signed,Page:32/signed,_Sizetypeid:16, BinLentypeid:32, Bin1/binary>> = Bin0,
	<<SubBintypeid:BinLentypeid/binary, Bin2/binary>> = Bin1, 
	Typeid = lists:reverse(decode_int32s(SubBintypeid, [])),
	<<Sort_type:32/signed,Is_reverseTmp:8,Is_gold_firstTmp:8,Min_level:32/signed,Max_level:32/signed,Color:32/signed,Pro:32/signed>> = Bin2,
case Is_reverseTmp of 
	1 -> 
		Is_reverse = true;
	_ ->
		Is_reverse = false
end,
case Is_gold_firstTmp of 
	1 -> 
		Is_gold_first = true;
	_ ->
		Is_gold_first = false
end,

	{m_stall_list_tos, Type,Page,Typeid,Sort_type,Is_reverse,Is_gold_first,Min_level,Max_level,Color,Pro};

decode_m_stall_list_tos(_) ->
	undefined.
encode_m_stall_list_toc(Record) when is_record(Record, m_stall_list_toc) ->
	#m_stall_list_toc{succ=Succ,reason=Reason,type=Type,page=Page,typeid=Typeid,sort_type=Sort_type,is_reverse=Is_reverse,is_gold_first=Is_gold_first,min_level=Min_level,max_level=Max_level,color=Color,pro=Pro,goods_list=Goods_list,max_page=Max_page} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Type =:= undefined of
		true ->
				TypeFinal = 0;
		false ->
			TypeFinal = Type
	end,
	case Page =:= undefined of
		true ->
				PageFinal = 0;
		false ->
			PageFinal = Page
	end,
	case Typeid =:= undefined of
		true ->
			TypeidFinal = [];
		false ->
			TypeidFinal = Typeid
	end,
	case Sort_type =:= undefined of
		true ->
				Sort_typeFinal = 0;
		false ->
			Sort_typeFinal = Sort_type
	end,
	case Is_reverse =:= undefined of
		true ->
				Is_reverseFinal = 1;
		false ->
			case Is_reverse of
				true ->
					Is_reverseFinal = 1;
				false ->
					Is_reverseFinal = 0
			end
	end,
	case Is_gold_first =:= undefined of
		true ->
				Is_gold_firstFinal = 1;
		false ->
			case Is_gold_first of
				true ->
					Is_gold_firstFinal = 1;
				false ->
					Is_gold_firstFinal = 0
			end
	end,
	case Min_level =:= undefined of
		true ->
				Min_levelFinal = 0;
		false ->
			Min_levelFinal = Min_level
	end,
	case Max_level =:= undefined of
		true ->
				Max_levelFinal = 0;
		false ->
			Max_levelFinal = Max_level
	end,
	case Color =:= undefined of
		true ->
				ColorFinal = 0;
		false ->
			ColorFinal = Color
	end,
	case Pro =:= undefined of
		true ->
				ProFinal = 0;
		false ->
			ProFinal = Pro
	end,
	case Goods_list =:= undefined of
		true ->
			Goods_listFinal = [];
		false ->
			Goods_listFinal = Goods_list
	end,
	case Max_page =:= undefined of
		true ->
				Max_pageFinal = 0;
		false ->
			Max_pageFinal = Max_page
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Typeid_bin = encode_int32s(TypeidFinal, <<>>),
	SizeTypeidFinal = erlang:length(TypeidFinal),
	BinLen_typeid = erlang:byte_size(Typeid_bin),
	Goods_list_bin = encode_p_stall_list_items(Goods_listFinal, <<>>),
	SizeGoods_listFinal = erlang:length(Goods_listFinal),
	BinLen_goods_list = erlang:byte_size(Goods_list_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,TypeFinal:32/signed,PageFinal:32/signed,SizeTypeidFinal:16, BinLen_typeid:32, Typeid_bin/binary,Sort_typeFinal:32/signed,Is_reverseFinal:8,Is_gold_firstFinal:8,Min_levelFinal:32/signed,Max_levelFinal:32/signed,ColorFinal:32/signed,ProFinal:32/signed,SizeGoods_listFinal:16, BinLen_goods_list:32, Goods_list_bin/binary,Max_pageFinal:32/signed>>;
encode_m_stall_list_toc(_) -> 
	<<>>.

decode_m_stall_list_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Type:32/signed,Page:32/signed,_Sizetypeid:16, BinLentypeid:32, Bin2/binary>> = Bin1,
	<<SubBintypeid:BinLentypeid/binary, Bin3/binary>> = Bin2, 
	Typeid = lists:reverse(decode_int32s(SubBintypeid, [])),
	<<Sort_type:32/signed,Is_reverseTmp:8,Is_gold_firstTmp:8,Min_level:32/signed,Max_level:32/signed,Color:32/signed,Pro:32/signed,_Sizegoods_list:16, BinLengoods_list:32, Bin4/binary>> = Bin3,
	<<SubBingoods_list:BinLengoods_list/binary, Bin5/binary>> = Bin4, 
	Goods_list = lists:reverse(decode_p_stall_list_items(SubBingoods_list, [])),
	<<Max_page:32/signed>> = Bin5,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Is_reverseTmp of 
	1 -> 
		Is_reverse = true;
	_ ->
		Is_reverse = false
end,
case Is_gold_firstTmp of 
	1 -> 
		Is_gold_first = true;
	_ ->
		Is_gold_first = false
end,

	{m_stall_list_toc, Succ,common_tool:to_list(Reason),Type,Page,Typeid,Sort_type,Is_reverse,Is_gold_first,Min_level,Max_level,Color,Pro,Goods_list,Max_page};

decode_m_stall_list_toc(_) ->
	undefined.
encode_p_stall_info(Record) when is_record(Record, p_stall_info) ->
	#p_stall_info{role_id=Role_id,role_name=Role_name,mode=Mode,name=Name,tx=Tx,ty=Ty,goods=Goods} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, p_stall_info, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = undefined,
				exit({required_field_not_assigned, p_stall_info, role_name});
		false ->
			Role_nameFinal = Role_name
	end,
	case Mode =:= undefined of
		true ->
				ModeFinal = undefined,
				exit({required_field_not_assigned, p_stall_info, mode});
		false ->
			ModeFinal = Mode
	end,
	case Name =:= undefined of
		true ->
				NameFinal = undefined,
				exit({required_field_not_assigned, p_stall_info, name});
		false ->
			NameFinal = Name
	end,
	case Tx =:= undefined of
		true ->
				TxFinal = undefined,
				exit({required_field_not_assigned, p_stall_info, tx});
		false ->
			TxFinal = Tx
	end,
	case Ty =:= undefined of
		true ->
				TyFinal = undefined,
				exit({required_field_not_assigned, p_stall_info, ty});
		false ->
			TyFinal = Ty
	end,
	case Goods =:= undefined of
		true ->
			GoodsFinal = [];
		false ->
			GoodsFinal = Goods
	end,
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),
	Name2 = common_tool:to_binary(NameFinal),
	NameLen = erlang:byte_size(Name2),
	Goods_bin = encode_p_stall_goodss(GoodsFinal, <<>>),
	SizeGoodsFinal = erlang:length(GoodsFinal),
	BinLen_goods = erlang:byte_size(Goods_bin),

	<<Role_idFinal:32/signed,Role_nameLen:16, Role_name2/binary,ModeFinal:32/signed,NameLen:16, Name2/binary,TxFinal:32/signed,TyFinal:32/signed,SizeGoodsFinal:16, BinLen_goods:32, Goods_bin/binary>>;
encode_p_stall_info(_) -> 
	<<>>.

decode_p_stall_info(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,Role_nameLen:16, Bin1/binary>> = Bin0,
	<<Role_name:Role_nameLen/binary,Mode:32/signed,NameLen:16, Bin2/binary>> = Bin1,
	<<Name:NameLen/binary,Tx:32/signed,Ty:32/signed,_Sizegoods:16, _BinLengoods:32, SubBingoods/binary>> = Bin2,
	Goods = lists:reverse(decode_p_stall_goodss(SubBingoods, [])),

	{p_stall_info, Role_id,common_tool:to_list(Role_name),Mode,common_tool:to_list(Name),Tx,Ty,Goods};

decode_p_stall_info(_) ->
	undefined.
encode_m_stall_buy_tos(Record) when is_record(Record, m_stall_buy_tos) ->
	#m_stall_buy_tos{role_id=Role_id,goods_id=Goods_id,number=Number,goods_price=Goods_price,buy_from=Buy_from} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, m_stall_buy_tos, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Goods_id =:= undefined of
		true ->
				Goods_idFinal = undefined,
				exit({required_field_not_assigned, m_stall_buy_tos, goods_id});
		false ->
			Goods_idFinal = Goods_id
	end,
	case Number =:= undefined of
		true ->
				NumberFinal = undefined,
				exit({required_field_not_assigned, m_stall_buy_tos, number});
		false ->
			NumberFinal = Number
	end,
	case Goods_price =:= undefined of
		true ->
				Goods_priceFinal = undefined,
				exit({required_field_not_assigned, m_stall_buy_tos, goods_price});
		false ->
			Goods_priceFinal = Goods_price
	end,
	case Buy_from =:= undefined of
		true ->
				Buy_fromFinal = undefined,
				exit({required_field_not_assigned, m_stall_buy_tos, buy_from});
		false ->
			Buy_fromFinal = Buy_from
	end,

	<<Role_idFinal:32/signed,Goods_idFinal:32/signed,NumberFinal:32/signed,Goods_priceFinal:32/signed,Buy_fromFinal:32/signed>>;
encode_m_stall_buy_tos(_) -> 
	<<>>.

decode_m_stall_buy_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,Goods_id:32/signed,Number:32/signed,Goods_price:32/signed,Buy_from:32/signed>> = Bin0,

	{m_stall_buy_tos, Role_id,Goods_id,Number,Goods_price,Buy_from};

decode_m_stall_buy_tos(_) ->
	undefined.
encode_m_stall_buy_toc(Record) when is_record(Record, m_stall_buy_toc) ->
	#m_stall_buy_toc{succ=Succ,reason=Reason,return_self=Return_self,role_id=Role_id,role_name=Role_name,goods_id=Goods_id,num=Num,stall_finish=Stall_finish} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = 0;
		false ->
			Role_idFinal = Role_id
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = <<>>;
		false ->
			Role_nameFinal = Role_name
	end,
	case Goods_id =:= undefined of
		true ->
				Goods_idFinal = 0;
		false ->
			Goods_idFinal = Goods_id
	end,
	case Num =:= undefined of
		true ->
				NumFinal = 0;
		false ->
			NumFinal = Num
	end,
	case Stall_finish =:= undefined of
		true ->
				Stall_finishFinal = 0;
		false ->
			case Stall_finish of
				true ->
					Stall_finishFinal = 1;
				false ->
					Stall_finishFinal = 0
			end
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Return_selfFinal:8,Role_idFinal:32/signed,Role_nameLen:16, Role_name2/binary,Goods_idFinal:32/signed,NumFinal:32/signed,Stall_finishFinal:8>>;
encode_m_stall_buy_toc(_) -> 
	<<>>.

decode_m_stall_buy_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Return_selfTmp:8,Role_id:32/signed,Role_nameLen:16, Bin2/binary>> = Bin1,
	<<Role_name:Role_nameLen/binary,Goods_id:32/signed,Num:32/signed,Stall_finishTmp:8>> = Bin2,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,
case Stall_finishTmp of 
	1 -> 
		Stall_finish = true;
	_ ->
		Stall_finish = false
end,

	{m_stall_buy_toc, Succ,common_tool:to_list(Reason),Return_self,Role_id,common_tool:to_list(Role_name),Goods_id,Num,Stall_finish};

decode_m_stall_buy_toc(_) ->
	undefined.
encode_m_stall_extractmoney_tos(Record) when is_record(Record, m_stall_extractmoney_tos) ->
	#m_stall_extractmoney_tos{} = Record,

	<<>>;
encode_m_stall_extractmoney_tos(_) -> 
	<<>>.

decode_m_stall_extractmoney_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_stall_extractmoney_tos};

decode_m_stall_extractmoney_tos(_) ->
	undefined.
encode_m_stall_extractmoney_toc(Record) when is_record(Record, m_stall_extractmoney_toc) ->
	#m_stall_extractmoney_toc{succ=Succ,reason=Reason,silver=Silver,tax=Tax,gold=Gold} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Silver =:= undefined of
		true ->
				SilverFinal = 0;
		false ->
			SilverFinal = Silver
	end,
	case Tax =:= undefined of
		true ->
				TaxFinal = 0;
		false ->
			TaxFinal = Tax
	end,
	case Gold =:= undefined of
		true ->
				GoldFinal = 0;
		false ->
			GoldFinal = Gold
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,SilverFinal:32/signed,TaxFinal:32/signed,GoldFinal:32/signed>>;
encode_m_stall_extractmoney_toc(_) -> 
	<<>>.

decode_m_stall_extractmoney_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Silver:32/signed,Tax:32/signed,Gold:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_stall_extractmoney_toc, Succ,common_tool:to_list(Reason),Silver,Tax,Gold};

decode_m_stall_extractmoney_toc(_) ->
	undefined.
encode_m_stall_chat_tos(Record) when is_record(Record, m_stall_chat_tos) ->
	#m_stall_chat_tos{target_role_id=Target_role_id,content=Content} = Record,
	case Target_role_id =:= undefined of
		true ->
				Target_role_idFinal = undefined,
				exit({required_field_not_assigned, m_stall_chat_tos, target_role_id});
		false ->
			Target_role_idFinal = Target_role_id
	end,
	case Content =:= undefined of
		true ->
				ContentFinal = undefined,
				exit({required_field_not_assigned, m_stall_chat_tos, content});
		false ->
			ContentFinal = Content
	end,
	Content2 = common_tool:to_binary(ContentFinal),
	ContentLen = erlang:byte_size(Content2),

	<<Target_role_idFinal:32/signed,ContentLen:16, Content2/binary>>;
encode_m_stall_chat_tos(_) -> 
	<<>>.

decode_m_stall_chat_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Target_role_id:32/signed,ContentLen:16, Bin1/binary>> = Bin0,
	<<Content:ContentLen/binary>> = Bin1,

	{m_stall_chat_tos, Target_role_id,common_tool:to_list(Content)};

decode_m_stall_chat_tos(_) ->
	undefined.
encode_m_stall_chat_toc(Record) when is_record(Record, m_stall_chat_toc) ->
	#m_stall_chat_toc{succ=Succ,reason=Reason,return_self=Return_self,src_role_id=Src_role_id,src_role_name=Src_role_name,content=Content,time=Time} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Src_role_id =:= undefined of
		true ->
				Src_role_idFinal = 0;
		false ->
			Src_role_idFinal = Src_role_id
	end,
	case Src_role_name =:= undefined of
		true ->
				Src_role_nameFinal = <<>>;
		false ->
			Src_role_nameFinal = Src_role_name
	end,
	case Content =:= undefined of
		true ->
				ContentFinal = <<>>;
		false ->
			ContentFinal = Content
	end,
	case Time =:= undefined of
		true ->
				TimeFinal = 0;
		false ->
			TimeFinal = Time
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Src_role_name2 = common_tool:to_binary(Src_role_nameFinal),
	Src_role_nameLen = erlang:byte_size(Src_role_name2),
	Content2 = common_tool:to_binary(ContentFinal),
	ContentLen = erlang:byte_size(Content2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Return_selfFinal:8,Src_role_idFinal:32/signed,Src_role_nameLen:16, Src_role_name2/binary,ContentLen:16, Content2/binary,TimeFinal:32/signed>>;
encode_m_stall_chat_toc(_) -> 
	<<>>.

decode_m_stall_chat_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Return_selfTmp:8,Src_role_id:32/signed,Src_role_nameLen:16, Bin2/binary>> = Bin1,
	<<Src_role_name:Src_role_nameLen/binary,ContentLen:16, Bin3/binary>> = Bin2,
	<<Content:ContentLen/binary,Time:32/signed>> = Bin3,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_stall_chat_toc, Succ,common_tool:to_list(Reason),Return_self,Src_role_id,common_tool:to_list(Src_role_name),common_tool:to_list(Content),Time};

decode_m_stall_chat_toc(_) ->
	undefined.
encode_m_stall_finish_tos(Record) when is_record(Record, m_stall_finish_tos) ->
	#m_stall_finish_tos{} = Record,

	<<>>;
encode_m_stall_finish_tos(_) -> 
	<<>>.

decode_m_stall_finish_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_stall_finish_tos};

decode_m_stall_finish_tos(_) ->
	undefined.
encode_m_stall_finish_toc(Record) when is_record(Record, m_stall_finish_toc) ->
	#m_stall_finish_toc{succ=Succ,reason=Reason,return_self=Return_self,role_id=Role_id,tax=Tax,get_silver=Get_silver,silver=Silver,bind_silver=Bind_silver,time_over=Time_over,get_gold=Get_gold} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
			case Return_self of
				true ->
					Return_selfFinal = 1;
				false ->
					Return_selfFinal = 0
			end
	end,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = 0;
		false ->
			Role_idFinal = Role_id
	end,
	case Tax =:= undefined of
		true ->
				TaxFinal = 0;
		false ->
			TaxFinal = Tax
	end,
	case Get_silver =:= undefined of
		true ->
				Get_silverFinal = 0;
		false ->
			Get_silverFinal = Get_silver
	end,
	case Silver =:= undefined of
		true ->
				SilverFinal = 0;
		false ->
			SilverFinal = Silver
	end,
	case Bind_silver =:= undefined of
		true ->
				Bind_silverFinal = 0;
		false ->
			Bind_silverFinal = Bind_silver
	end,
	case Time_over =:= undefined of
		true ->
				Time_overFinal = 0;
		false ->
			case Time_over of
				true ->
					Time_overFinal = 1;
				false ->
					Time_overFinal = 0
			end
	end,
	case Get_gold =:= undefined of
		true ->
				Get_goldFinal = 0;
		false ->
			Get_goldFinal = Get_gold
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Return_selfFinal:8,Role_idFinal:32/signed,TaxFinal:32/signed,Get_silverFinal:32/signed,SilverFinal:32/signed,Bind_silverFinal:32/signed,Time_overFinal:8,Get_goldFinal:32/signed>>;
encode_m_stall_finish_toc(_) -> 
	<<>>.

decode_m_stall_finish_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Return_selfTmp:8,Role_id:32/signed,Tax:32/signed,Get_silver:32/signed,Silver:32/signed,Bind_silver:32/signed,Time_overTmp:8,Get_gold:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,
case Time_overTmp of 
	1 -> 
		Time_over = true;
	_ ->
		Time_over = false
end,

	{m_stall_finish_toc, Succ,common_tool:to_list(Reason),Return_self,Role_id,Tax,Get_silver,Silver,Bind_silver,Time_over,Get_gold};

decode_m_stall_finish_toc(_) ->
	undefined.
encode_m_stall_employ_tos(Record) when is_record(Record, m_stall_employ_tos) ->
	#m_stall_employ_tos{hour=Hour} = Record,
	case Hour =:= undefined of
		true ->
				HourFinal = undefined,
				exit({required_field_not_assigned, m_stall_employ_tos, hour});
		false ->
			HourFinal = Hour
	end,

	<<HourFinal:32/signed>>;
encode_m_stall_employ_tos(_) -> 
	<<>>.

decode_m_stall_employ_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Hour:32/signed>> = Bin0,

	{m_stall_employ_tos, Hour};

decode_m_stall_employ_tos(_) ->
	undefined.
encode_m_stall_employ_toc(Record) when is_record(Record, m_stall_employ_toc) ->
	#m_stall_employ_toc{succ=Succ,reason=Reason,return_self=Return_self,role_id=Role_id,silver=Silver,bind_silver=Bind_silver} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = 0;
		false ->
			Role_idFinal = Role_id
	end,
	case Silver =:= undefined of
		true ->
				SilverFinal = 0;
		false ->
			SilverFinal = Silver
	end,
	case Bind_silver =:= undefined of
		true ->
				Bind_silverFinal = 0;
		false ->
			Bind_silverFinal = Bind_silver
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Return_selfFinal:8,Role_idFinal:32/signed,SilverFinal:32/signed,Bind_silverFinal:32/signed>>;
encode_m_stall_employ_toc(_) -> 
	<<>>.

decode_m_stall_employ_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Return_selfTmp:8,Role_id:32/signed,Silver:32/signed,Bind_silver:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_stall_employ_toc, Succ,common_tool:to_list(Reason),Return_self,Role_id,Silver,Bind_silver};

decode_m_stall_employ_toc(_) ->
	undefined.
encode_m_stall_search_tos(Record) when is_record(Record, m_stall_search_tos) ->
	#m_stall_search_tos{content=Content,type=Type,page=Page} = Record,
	case Content =:= undefined of
		true ->
				ContentFinal = undefined,
				exit({required_field_not_assigned, m_stall_search_tos, content});
		false ->
			ContentFinal = Content
	end,
	case Type =:= undefined of
		true ->
				TypeFinal = 0;
		false ->
			TypeFinal = Type
	end,
	case Page =:= undefined of
		true ->
				PageFinal = 1;
		false ->
			PageFinal = Page
	end,
	Content2 = common_tool:to_binary(ContentFinal),
	ContentLen = erlang:byte_size(Content2),

	<<ContentLen:16, Content2/binary,TypeFinal:32/signed,PageFinal:32/signed>>;
encode_m_stall_search_tos(_) -> 
	<<>>.

decode_m_stall_search_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<ContentLen:16, Bin1/binary>> = Bin0,
	<<Content:ContentLen/binary,Type:32/signed,Page:32/signed>> = Bin1,

	{m_stall_search_tos, common_tool:to_list(Content),Type,Page};

decode_m_stall_search_tos(_) ->
	undefined.
encode_m_stall_search_toc(Record) when is_record(Record, m_stall_search_toc) ->
	#m_stall_search_toc{result=Result,total_page=Total_page} = Record,
	case Result =:= undefined of
		true ->
			ResultFinal = [];
		false ->
			ResultFinal = Result
	end,
	case Total_page =:= undefined of
		true ->
				Total_pageFinal = undefined,
				exit({required_field_not_assigned, m_stall_search_toc, total_page});
		false ->
			Total_pageFinal = Total_page
	end,
	Result_bin = encode_p_stall_search_goodss(ResultFinal, <<>>),
	SizeResultFinal = erlang:length(ResultFinal),
	BinLen_result = erlang:byte_size(Result_bin),

	<<SizeResultFinal:16, BinLen_result:32, Result_bin/binary,Total_pageFinal:32/signed>>;
encode_m_stall_search_toc(_) -> 
	<<>>.

decode_m_stall_search_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizeresult:16, BinLenresult:32, Bin1/binary>> = Bin0,
	<<SubBinresult:BinLenresult/binary, Bin2/binary>> = Bin1, 
	Result = lists:reverse(decode_p_stall_search_goodss(SubBinresult, [])),
	<<Total_page:32/signed>> = Bin2,

	{m_stall_search_toc, Result,Total_page};

decode_m_stall_search_toc(_) ->
	undefined.
encode_p_stall_search_goods(Record) when is_record(Record, p_stall_search_goods) ->
	#p_stall_search_goods{goods=Goods,stall_name=Stall_name,role_name=Role_name,pos=Pos} = Record,
	case Goods =:= undefined of
		true ->
				GoodsFinal = undefined,
				exit({required_field_not_assigned, p_stall_search_goods, goods});
		false ->
			GoodsFinal = Goods
	end,
	case Stall_name =:= undefined of
		true ->
				Stall_nameFinal = undefined,
				exit({required_field_not_assigned, p_stall_search_goods, stall_name});
		false ->
			Stall_nameFinal = Stall_name
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = undefined,
				exit({required_field_not_assigned, p_stall_search_goods, role_name});
		false ->
			Role_nameFinal = Role_name
	end,
	case Pos =:= undefined of
		true ->
				PosFinal = undefined,
				exit({required_field_not_assigned, p_stall_search_goods, pos});
		false ->
			PosFinal = Pos
	end,
	Goods_bin = encode_p_goods(GoodsFinal),
	BinLen_goods = erlang:byte_size(Goods_bin),
	Stall_name2 = common_tool:to_binary(Stall_nameFinal),
	Stall_nameLen = erlang:byte_size(Stall_name2),
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),
	Pos_bin = encode_p_pos(PosFinal),
	BinLen_pos = erlang:byte_size(Pos_bin),

	<<BinLen_goods:32, Goods_bin/binary,Stall_nameLen:16, Stall_name2/binary,Role_nameLen:16, Role_name2/binary,BinLen_pos:32, Pos_bin/binary>>;
encode_p_stall_search_goods(_) -> 
	<<>>.

decode_p_stall_search_goods(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SubBinSizegoods:32, Bin1/binary>> = Bin0,
	<<SubBingoods:SubBinSizegoods/binary, Bin2/binary>> = Bin1,
	Goods = decode_p_goods(SubBingoods),
	<<Stall_nameLen:16, Bin3/binary>> = Bin2,
	<<Stall_name:Stall_nameLen/binary,Role_nameLen:16, Bin4/binary>> = Bin3,
	<<Role_name:Role_nameLen/binary,_SubBinSizepos:32, SubBinpos/binary>> = Bin4,
	Pos = decode_p_pos(SubBinpos),

	{p_stall_search_goods, Goods,common_tool:to_list(Stall_name),common_tool:to_list(Role_name),Pos};

decode_p_stall_search_goods(_) ->
	undefined.
encode_m_stall_state_tos(Record) when is_record(Record, m_stall_state_tos) ->
	#m_stall_state_tos{} = Record,

	<<>>;
encode_m_stall_state_tos(_) -> 
	<<>>.

decode_m_stall_state_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_stall_state_tos};

decode_m_stall_state_tos(_) ->
	undefined.
encode_m_stall_state_toc(Record) when is_record(Record, m_stall_state_toc) ->
	#m_stall_state_toc{stall_state=Stall_state} = Record,
	case Stall_state =:= undefined of
		true ->
				Stall_stateFinal = undefined,
				exit({required_field_not_assigned, m_stall_state_toc, stall_state});
		false ->
			Stall_stateFinal = Stall_state
	end,

	<<Stall_stateFinal:32/signed>>;
encode_m_stall_state_toc(_) -> 
	<<>>.

decode_m_stall_state_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Stall_state:32/signed>> = Bin0,

	{m_stall_state_toc, Stall_state};

decode_m_stall_state_toc(_) ->
	undefined.
encode_p_role_skill(Record) when is_record(Record, p_role_skill) ->
	#p_role_skill{skill_id=Skill_id,cur_level=Cur_level} = Record,
	case Skill_id =:= undefined of
		true ->
				Skill_idFinal = undefined,
				exit({required_field_not_assigned, p_role_skill, skill_id});
		false ->
			Skill_idFinal = Skill_id
	end,
	case Cur_level =:= undefined of
		true ->
				Cur_levelFinal = undefined,
				exit({required_field_not_assigned, p_role_skill, cur_level});
		false ->
			Cur_levelFinal = Cur_level
	end,

	<<Skill_idFinal:32/signed,Cur_levelFinal:32/signed>>;
encode_p_role_skill(_) -> 
	<<>>.

decode_p_role_skill(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Skill_id:32/signed,Cur_level:32/signed>> = Bin0,

	{p_role_skill, Skill_id,Cur_level};

decode_p_role_skill(_) ->
	undefined.
encode_m_skill_learn_tos(Record) when is_record(Record, m_skill_learn_tos) ->
	#m_skill_learn_tos{skill_id=Skill_id} = Record,
	case Skill_id =:= undefined of
		true ->
				Skill_idFinal = undefined,
				exit({required_field_not_assigned, m_skill_learn_tos, skill_id});
		false ->
			Skill_idFinal = Skill_id
	end,

	<<Skill_idFinal:32/signed>>;
encode_m_skill_learn_tos(_) -> 
	<<>>.

decode_m_skill_learn_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Skill_id:32/signed>> = Bin0,

	{m_skill_learn_tos, Skill_id};

decode_m_skill_learn_tos(_) ->
	undefined.
encode_m_skill_learn_toc(Record) when is_record(Record, m_skill_learn_toc) ->
	#m_skill_learn_toc{succ=Succ,reason=Reason,skill=Skill} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Skill =:= undefined of
		true ->
				SkillFinal = 0;
		false ->
			SkillFinal = Skill
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Skill_bin = encode_p_role_skill(SkillFinal),
	BinLen_skill = erlang:byte_size(Skill_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_skill:32, Skill_bin/binary>>;
encode_m_skill_learn_toc(_) -> 
	<<>>.

decode_m_skill_learn_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_SubBinSizeskill:32, SubBinskill/binary>> = Bin1,
	Skill = decode_p_role_skill(SubBinskill),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_skill_learn_toc, Succ,common_tool:to_list(Reason),Skill};

decode_m_skill_learn_toc(_) ->
	undefined.
encode_m_skill_getskills_tos(Record) when is_record(Record, m_skill_getskills_tos) ->
	#m_skill_getskills_tos{} = Record,

	<<>>;
encode_m_skill_getskills_tos(_) -> 
	<<>>.

decode_m_skill_getskills_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_skill_getskills_tos};

decode_m_skill_getskills_tos(_) ->
	undefined.
encode_m_skill_getskills_toc(Record) when is_record(Record, m_skill_getskills_toc) ->
	#m_skill_getskills_toc{succ=Succ,reason=Reason,skills=Skills} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Skills =:= undefined of
		true ->
			SkillsFinal = [];
		false ->
			SkillsFinal = Skills
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Skills_bin = encode_p_role_skills(SkillsFinal, <<>>),
	SizeSkillsFinal = erlang:length(SkillsFinal),
	BinLen_skills = erlang:byte_size(Skills_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,SizeSkillsFinal:16, BinLen_skills:32, Skills_bin/binary>>;
encode_m_skill_getskills_toc(_) -> 
	<<>>.

decode_m_skill_getskills_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_Sizeskills:16, _BinLenskills:32, SubBinskills/binary>> = Bin1,
	Skills = lists:reverse(decode_p_role_skills(SubBinskills, [])),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_skill_getskills_toc, Succ,common_tool:to_list(Reason),Skills};

decode_m_skill_getskills_toc(_) ->
	undefined.
encode_m_skill_reset_toc(Record) when is_record(Record, m_skill_reset_toc) ->
	#m_skill_reset_toc{succ=Succ,reason=Reason,skill_points=Skill_points} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Skill_points =:= undefined of
		true ->
				Skill_pointsFinal = 0;
		false ->
			Skill_pointsFinal = Skill_points
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Skill_pointsFinal:32/signed>>;
encode_m_skill_reset_toc(_) -> 
	<<>>.

decode_m_skill_reset_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Skill_points:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_skill_reset_toc, Succ,common_tool:to_list(Reason),Skill_points};

decode_m_skill_reset_toc(_) ->
	undefined.
encode_m_skill_personal_forget_tos(Record) when is_record(Record, m_skill_personal_forget_tos) ->
	#m_skill_personal_forget_tos{skill_id=Skill_id} = Record,
	case Skill_id =:= undefined of
		true ->
				Skill_idFinal = undefined,
				exit({required_field_not_assigned, m_skill_personal_forget_tos, skill_id});
		false ->
			Skill_idFinal = Skill_id
	end,

	<<Skill_idFinal:32/signed>>;
encode_m_skill_personal_forget_tos(_) -> 
	<<>>.

decode_m_skill_personal_forget_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Skill_id:32/signed>> = Bin0,

	{m_skill_personal_forget_tos, Skill_id};

decode_m_skill_personal_forget_tos(_) ->
	undefined.
encode_m_skill_personal_forget_toc(Record) when is_record(Record, m_skill_personal_forget_toc) ->
	#m_skill_personal_forget_toc{succ=Succ,reason=Reason,skill_id=Skill_id} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Skill_id =:= undefined of
		true ->
				Skill_idFinal = 0;
		false ->
			Skill_idFinal = Skill_id
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Skill_idFinal:32/signed>>;
encode_m_skill_personal_forget_toc(_) -> 
	<<>>.

decode_m_skill_personal_forget_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Skill_id:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_skill_personal_forget_toc, Succ,common_tool:to_list(Reason),Skill_id};

decode_m_skill_personal_forget_toc(_) ->
	undefined.
encode_m_fmlskill_research_tos(Record) when is_record(Record, m_fmlskill_research_tos) ->
	#m_fmlskill_research_tos{skill_id=Skill_id} = Record,
	case Skill_id =:= undefined of
		true ->
				Skill_idFinal = undefined,
				exit({required_field_not_assigned, m_fmlskill_research_tos, skill_id});
		false ->
			Skill_idFinal = Skill_id
	end,

	<<Skill_idFinal:32/signed>>;
encode_m_fmlskill_research_tos(_) -> 
	<<>>.

decode_m_fmlskill_research_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Skill_id:32/signed>> = Bin0,

	{m_fmlskill_research_tos, Skill_id};

decode_m_fmlskill_research_tos(_) ->
	undefined.
encode_m_fmlskill_research_toc(Record) when is_record(Record, m_fmlskill_research_toc) ->
	#m_fmlskill_research_toc{succ=Succ,reason=Reason,skill=Skill} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Skill =:= undefined of
		true ->
				SkillFinal = 0;
		false ->
			SkillFinal = Skill
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Skill_bin = encode_p_role_skill(SkillFinal),
	BinLen_skill = erlang:byte_size(Skill_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_skill:32, Skill_bin/binary>>;
encode_m_fmlskill_research_toc(_) -> 
	<<>>.

decode_m_fmlskill_research_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_SubBinSizeskill:32, SubBinskill/binary>> = Bin1,
	Skill = decode_p_role_skill(SubBinskill),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_fmlskill_research_toc, Succ,common_tool:to_list(Reason),Skill};

decode_m_fmlskill_research_toc(_) ->
	undefined.
encode_m_fmlskill_forget_tos(Record) when is_record(Record, m_fmlskill_forget_tos) ->
	#m_fmlskill_forget_tos{skill_id=Skill_id} = Record,
	case Skill_id =:= undefined of
		true ->
				Skill_idFinal = undefined,
				exit({required_field_not_assigned, m_fmlskill_forget_tos, skill_id});
		false ->
			Skill_idFinal = Skill_id
	end,

	<<Skill_idFinal:32/signed>>;
encode_m_fmlskill_forget_tos(_) -> 
	<<>>.

decode_m_fmlskill_forget_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Skill_id:32/signed>> = Bin0,

	{m_fmlskill_forget_tos, Skill_id};

decode_m_fmlskill_forget_tos(_) ->
	undefined.
encode_m_fmlskill_forget_toc(Record) when is_record(Record, m_fmlskill_forget_toc) ->
	#m_fmlskill_forget_toc{succ=Succ,reason=Reason,skill_id=Skill_id} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Skill_id =:= undefined of
		true ->
				Skill_idFinal = 0;
		false ->
			Skill_idFinal = Skill_id
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Skill_idFinal:32/signed>>;
encode_m_fmlskill_forget_toc(_) -> 
	<<>>.

decode_m_fmlskill_forget_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Skill_id:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_fmlskill_forget_toc, Succ,common_tool:to_list(Reason),Skill_id};

decode_m_fmlskill_forget_toc(_) ->
	undefined.
encode_m_fmlskill_list_tos(Record) when is_record(Record, m_fmlskill_list_tos) ->
	#m_fmlskill_list_tos{} = Record,

	<<>>;
encode_m_fmlskill_list_tos(_) -> 
	<<>>.

decode_m_fmlskill_list_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_fmlskill_list_tos};

decode_m_fmlskill_list_tos(_) ->
	undefined.
encode_m_fmlskill_list_toc(Record) when is_record(Record, m_fmlskill_list_toc) ->
	#m_fmlskill_list_toc{succ=Succ,reason=Reason,skills=Skills} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Skills =:= undefined of
		true ->
			SkillsFinal = [];
		false ->
			SkillsFinal = Skills
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Skills_bin = encode_p_role_skills(SkillsFinal, <<>>),
	SizeSkillsFinal = erlang:length(SkillsFinal),
	BinLen_skills = erlang:byte_size(Skills_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,SizeSkillsFinal:16, BinLen_skills:32, Skills_bin/binary>>;
encode_m_fmlskill_list_toc(_) -> 
	<<>>.

decode_m_fmlskill_list_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_Sizeskills:16, _BinLenskills:32, SubBinskills/binary>> = Bin1,
	Skills = lists:reverse(decode_p_role_skills(SubBinskills, [])),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_fmlskill_list_toc, Succ,common_tool:to_list(Reason),Skills};

decode_m_fmlskill_list_toc(_) ->
	undefined.
encode_m_fmlskill_list_buff_tos(Record) when is_record(Record, m_fmlskill_list_buff_tos) ->
	#m_fmlskill_list_buff_tos{} = Record,

	<<>>;
encode_m_fmlskill_list_buff_tos(_) -> 
	<<>>.

decode_m_fmlskill_list_buff_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_fmlskill_list_buff_tos};

decode_m_fmlskill_list_buff_tos(_) ->
	undefined.
encode_m_fmlskill_list_buff_toc(Record) when is_record(Record, m_fmlskill_list_buff_toc) ->
	#m_fmlskill_list_buff_toc{succ=Succ,reason=Reason,buffs=Buffs,is_fetched=Is_fetched} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Buffs =:= undefined of
		true ->
			BuffsFinal = [];
		false ->
			BuffsFinal = Buffs
	end,
	case Is_fetched =:= undefined of
		true ->
				Is_fetchedFinal = 1;
		false ->
			case Is_fetched of
				true ->
					Is_fetchedFinal = 1;
				false ->
					Is_fetchedFinal = 0
			end
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Buffs_bin = encode_p_fml_buffs(BuffsFinal, <<>>),
	SizeBuffsFinal = erlang:length(BuffsFinal),
	BinLen_buffs = erlang:byte_size(Buffs_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,SizeBuffsFinal:16, BinLen_buffs:32, Buffs_bin/binary,Is_fetchedFinal:8>>;
encode_m_fmlskill_list_buff_toc(_) -> 
	<<>>.

decode_m_fmlskill_list_buff_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_Sizebuffs:16, BinLenbuffs:32, Bin2/binary>> = Bin1,
	<<SubBinbuffs:BinLenbuffs/binary, Bin3/binary>> = Bin2, 
	Buffs = lists:reverse(decode_p_fml_buffs(SubBinbuffs, [])),
<<Is_fetchedTmp:8>> = Bin3,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Is_fetchedTmp of 
	1 -> 
		Is_fetched = true;
	_ ->
		Is_fetched = false
end,

	{m_fmlskill_list_buff_toc, Succ,common_tool:to_list(Reason),Buffs,Is_fetched};

decode_m_fmlskill_list_buff_toc(_) ->
	undefined.
encode_m_fmlskill_fetch_buff_tos(Record) when is_record(Record, m_fmlskill_fetch_buff_tos) ->
	#m_fmlskill_fetch_buff_tos{fml_buff_id=Fml_buff_id} = Record,
	case Fml_buff_id =:= undefined of
		true ->
				Fml_buff_idFinal = undefined,
				exit({required_field_not_assigned, m_fmlskill_fetch_buff_tos, fml_buff_id});
		false ->
			Fml_buff_idFinal = Fml_buff_id
	end,

	<<Fml_buff_idFinal:32/signed>>;
encode_m_fmlskill_fetch_buff_tos(_) -> 
	<<>>.

decode_m_fmlskill_fetch_buff_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Fml_buff_id:32/signed>> = Bin0,

	{m_fmlskill_fetch_buff_tos, Fml_buff_id};

decode_m_fmlskill_fetch_buff_tos(_) ->
	undefined.
encode_m_fmlskill_fetch_buff_toc(Record) when is_record(Record, m_fmlskill_fetch_buff_toc) ->
	#m_fmlskill_fetch_buff_toc{succ=Succ,reason=Reason,fml_buff_id=Fml_buff_id} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Fml_buff_id =:= undefined of
		true ->
				Fml_buff_idFinal = 0;
		false ->
			Fml_buff_idFinal = Fml_buff_id
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Fml_buff_idFinal:32/signed>>;
encode_m_fmlskill_fetch_buff_toc(_) -> 
	<<>>.

decode_m_fmlskill_fetch_buff_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Fml_buff_id:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_fmlskill_fetch_buff_toc, Succ,common_tool:to_list(Reason),Fml_buff_id};

decode_m_fmlskill_fetch_buff_toc(_) ->
	undefined.
encode_m_skill_use_time_toc(Record) when is_record(Record, m_skill_use_time_toc) ->
	#m_skill_use_time_toc{skill_time=Skill_time,server_time=Server_time} = Record,
	case Skill_time =:= undefined of
		true ->
			Skill_timeFinal = [];
		false ->
			Skill_timeFinal = Skill_time
	end,
	case Server_time =:= undefined of
		true ->
				Server_timeFinal = undefined,
				exit({required_field_not_assigned, m_skill_use_time_toc, server_time});
		false ->
			Server_timeFinal = Server_time
	end,
	Skill_time_bin = encode_p_skill_times(Skill_timeFinal, <<>>),
	SizeSkill_timeFinal = erlang:length(Skill_timeFinal),
	BinLen_skill_time = erlang:byte_size(Skill_time_bin),

	<<SizeSkill_timeFinal:16, BinLen_skill_time:32, Skill_time_bin/binary,Server_timeFinal:32/signed>>;
encode_m_skill_use_time_toc(_) -> 
	<<>>.

decode_m_skill_use_time_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizeskill_time:16, BinLenskill_time:32, Bin1/binary>> = Bin0,
	<<SubBinskill_time:BinLenskill_time/binary, Bin2/binary>> = Bin1, 
	Skill_time = lists:reverse(decode_p_skill_times(SubBinskill_time, [])),
	<<Server_time:32/signed>> = Bin2,

	{m_skill_use_time_toc, Skill_time,Server_time};

decode_m_skill_use_time_toc(_) ->
	undefined.
encode_p_skill_time(Record) when is_record(Record, p_skill_time) ->
	#p_skill_time{skill_id=Skill_id,last_use_time=Last_use_time} = Record,
	case Skill_id =:= undefined of
		true ->
				Skill_idFinal = undefined,
				exit({required_field_not_assigned, p_skill_time, skill_id});
		false ->
			Skill_idFinal = Skill_id
	end,
	case Last_use_time =:= undefined of
		true ->
				Last_use_timeFinal = undefined,
				exit({required_field_not_assigned, p_skill_time, last_use_time});
		false ->
			Last_use_timeFinal = Last_use_time
	end,

	<<Skill_idFinal:32/signed,Last_use_timeFinal:32/signed>>;
encode_p_skill_time(_) -> 
	<<>>.

decode_p_skill_time(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Skill_id:32/signed,Last_use_time:32/signed>> = Bin0,

	{p_skill_time, Skill_id,Last_use_time};

decode_p_skill_time(_) ->
	undefined.
encode_m_stall_putin_tos(Record) when is_record(Record, m_stall_putin_tos) ->
	#m_stall_putin_tos{goods_id=Goods_id,price=Price,pos=Pos,price_type=Price_type} = Record,
	case Goods_id =:= undefined of
		true ->
				Goods_idFinal = undefined,
				exit({required_field_not_assigned, m_stall_putin_tos, goods_id});
		false ->
			Goods_idFinal = Goods_id
	end,
	case Price =:= undefined of
		true ->
				PriceFinal = undefined,
				exit({required_field_not_assigned, m_stall_putin_tos, price});
		false ->
			PriceFinal = Price
	end,
	case Pos =:= undefined of
		true ->
				PosFinal = undefined,
				exit({required_field_not_assigned, m_stall_putin_tos, pos});
		false ->
			PosFinal = Pos
	end,
	case Price_type =:= undefined of
		true ->
				Price_typeFinal = undefined,
				exit({required_field_not_assigned, m_stall_putin_tos, price_type});
		false ->
			Price_typeFinal = Price_type
	end,

	<<Goods_idFinal:32/signed,PriceFinal:32/signed,PosFinal:32/signed,Price_typeFinal:32/signed>>;
encode_m_stall_putin_tos(_) -> 
	<<>>.

decode_m_stall_putin_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Goods_id:32/signed,Price:32/signed,Pos:32/signed,Price_type:32/signed>> = Bin0,

	{m_stall_putin_tos, Goods_id,Price,Pos,Price_type};

decode_m_stall_putin_tos(_) ->
	undefined.
encode_m_stall_putin_toc(Record) when is_record(Record, m_stall_putin_toc) ->
	#m_stall_putin_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_stall_putin_toc(_) -> 
	<<>>.

decode_m_stall_putin_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_stall_putin_toc, Succ,common_tool:to_list(Reason)};

decode_m_stall_putin_toc(_) ->
	undefined.
encode_m_stall_getout_tos(Record) when is_record(Record, m_stall_getout_tos) ->
	#m_stall_getout_tos{goods_id=Goods_id,bagid=Bagid,pos=Pos} = Record,
	case Goods_id =:= undefined of
		true ->
				Goods_idFinal = undefined,
				exit({required_field_not_assigned, m_stall_getout_tos, goods_id});
		false ->
			Goods_idFinal = Goods_id
	end,
	case Bagid =:= undefined of
		true ->
				BagidFinal = undefined,
				exit({required_field_not_assigned, m_stall_getout_tos, bagid});
		false ->
			BagidFinal = Bagid
	end,
	case Pos =:= undefined of
		true ->
				PosFinal = undefined,
				exit({required_field_not_assigned, m_stall_getout_tos, pos});
		false ->
			PosFinal = Pos
	end,

	<<Goods_idFinal:32/signed,BagidFinal:32/signed,PosFinal:32/signed>>;
encode_m_stall_getout_tos(_) -> 
	<<>>.

decode_m_stall_getout_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Goods_id:32/signed,Bagid:32/signed,Pos:32/signed>> = Bin0,

	{m_stall_getout_tos, Goods_id,Bagid,Pos};

decode_m_stall_getout_tos(_) ->
	undefined.
encode_m_stall_getout_toc(Record) when is_record(Record, m_stall_getout_toc) ->
	#m_stall_getout_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_stall_getout_toc(_) -> 
	<<>>.

decode_m_stall_getout_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_stall_getout_toc, Succ,common_tool:to_list(Reason)};

decode_m_stall_getout_toc(_) ->
	undefined.
encode_m_stall_getall_tos(Record) when is_record(Record, m_stall_getall_tos) ->
	#m_stall_getall_tos{} = Record,

	<<>>;
encode_m_stall_getall_tos(_) -> 
	<<>>.

decode_m_stall_getall_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_stall_getall_tos};

decode_m_stall_getall_tos(_) ->
	undefined.
encode_m_stall_getall_toc(Record) when is_record(Record, m_stall_getall_toc) ->
	#m_stall_getall_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_stall_getall_toc(_) -> 
	<<>>.

decode_m_stall_getall_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_stall_getall_toc, Succ,common_tool:to_list(Reason)};

decode_m_stall_getall_toc(_) ->
	undefined.
encode_m_stall_move_tos(Record) when is_record(Record, m_stall_move_tos) ->
	#m_stall_move_tos{goodsid=Goodsid,pos=Pos} = Record,
	case Goodsid =:= undefined of
		true ->
				GoodsidFinal = undefined,
				exit({required_field_not_assigned, m_stall_move_tos, goodsid});
		false ->
			GoodsidFinal = Goodsid
	end,
	case Pos =:= undefined of
		true ->
				PosFinal = undefined,
				exit({required_field_not_assigned, m_stall_move_tos, pos});
		false ->
			PosFinal = Pos
	end,

	<<GoodsidFinal:32/signed,PosFinal:32/signed>>;
encode_m_stall_move_tos(_) -> 
	<<>>.

decode_m_stall_move_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Goodsid:32/signed,Pos:32/signed>> = Bin0,

	{m_stall_move_tos, Goodsid,Pos};

decode_m_stall_move_tos(_) ->
	undefined.
encode_m_stall_move_toc(Record) when is_record(Record, m_stall_move_toc) ->
	#m_stall_move_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_stall_move_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_stall_move_toc(_) -> 
	<<>>.

decode_m_stall_move_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_stall_move_toc, Succ,common_tool:to_list(Reason)};

decode_m_stall_move_toc(_) ->
	undefined.
encode_m_refining_inbag_list_tos(Record) when is_record(Record, m_refining_inbag_list_tos) ->
	#m_refining_inbag_list_tos{bagid=Bagid} = Record,
	case Bagid =:= undefined of
		true ->
				BagidFinal = undefined,
				exit({required_field_not_assigned, m_refining_inbag_list_tos, bagid});
		false ->
			BagidFinal = Bagid
	end,

	<<BagidFinal:32/signed>>;
encode_m_refining_inbag_list_tos(_) -> 
	<<>>.

decode_m_refining_inbag_list_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Bagid:32/signed>> = Bin0,

	{m_refining_inbag_list_tos, Bagid};

decode_m_refining_inbag_list_tos(_) ->
	undefined.
encode_m_refining_inbag_list_toc(Record) when is_record(Record, m_refining_inbag_list_toc) ->
	#m_refining_inbag_list_toc{bagid=Bagid,goods=Goods} = Record,
	case Bagid =:= undefined of
		true ->
				BagidFinal = undefined,
				exit({required_field_not_assigned, m_refining_inbag_list_toc, bagid});
		false ->
			BagidFinal = Bagid
	end,
	case Goods =:= undefined of
		true ->
			GoodsFinal = [];
		false ->
			GoodsFinal = Goods
	end,
	Goods_bin = encode_p_goodss(GoodsFinal, <<>>),
	SizeGoodsFinal = erlang:length(GoodsFinal),
	BinLen_goods = erlang:byte_size(Goods_bin),

	<<BagidFinal:32/signed,SizeGoodsFinal:16, BinLen_goods:32, Goods_bin/binary>>;
encode_m_refining_inbag_list_toc(_) -> 
	<<>>.

decode_m_refining_inbag_list_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Bagid:32/signed,_Sizegoods:16, _BinLengoods:32, SubBingoods/binary>> = Bin0,
	Goods = lists:reverse(decode_p_goodss(SubBingoods, [])),

	{m_refining_inbag_list_toc, Bagid,Goods};

decode_m_refining_inbag_list_toc(_) ->
	undefined.
encode_m_refining_info_tos(Record) when is_record(Record, m_refining_info_tos) ->
	#m_refining_info_tos{id=Id} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, m_refining_info_tos, id});
		false ->
			IdFinal = Id
	end,

	<<IdFinal:32/signed>>;
encode_m_refining_info_tos(_) -> 
	<<>>.

decode_m_refining_info_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed>> = Bin0,

	{m_refining_info_tos, Id};

decode_m_refining_info_tos(_) ->
	undefined.
encode_m_refining_info_toc(Record) when is_record(Record, m_refining_info_toc) ->
	#m_refining_info_toc{info=Info} = Record,
	case Info =:= undefined of
		true ->
				InfoFinal = 0;
		false ->
			InfoFinal = Info
	end,
	Info_bin = encode_p_goods(InfoFinal),
	BinLen_info = erlang:byte_size(Info_bin),

	<<BinLen_info:32, Info_bin/binary>>;
encode_m_refining_info_toc(_) -> 
	<<>>.

decode_m_refining_info_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_SubBinSizeinfo:32, SubBininfo/binary>> = Bin0,
	Info = decode_p_goods(SubBininfo),

	{m_refining_info_toc, Info};

decode_m_refining_info_toc(_) ->
	undefined.
encode_m_refining_destroy_tos(Record) when is_record(Record, m_refining_destroy_tos) ->
	#m_refining_destroy_tos{id=Id} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, m_refining_destroy_tos, id});
		false ->
			IdFinal = Id
	end,

	<<IdFinal:32/signed>>;
encode_m_refining_destroy_tos(_) -> 
	<<>>.

decode_m_refining_destroy_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed>> = Bin0,

	{m_refining_destroy_tos, Id};

decode_m_refining_destroy_tos(_) ->
	undefined.
encode_m_refining_destroy_toc(Record) when is_record(Record, m_refining_destroy_toc) ->
	#m_refining_destroy_toc{succ=Succ,reason=Reason,id=Id} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Id =:= undefined of
		true ->
				IdFinal = 0;
		false ->
			IdFinal = Id
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,IdFinal:32/signed>>;
encode_m_refining_destroy_toc(_) -> 
	<<>>.

decode_m_refining_destroy_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Id:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_refining_destroy_toc, Succ,common_tool:to_list(Reason),Id};

decode_m_refining_destroy_toc(_) ->
	undefined.
encode_m_refining_swap_tos(Record) when is_record(Record, m_refining_swap_tos) ->
	#m_refining_swap_tos{id1=Id1,position2=Position2,bagid2=Bagid2} = Record,
	case Id1 =:= undefined of
		true ->
				Id1Final = undefined,
				exit({required_field_not_assigned, m_refining_swap_tos, id1});
		false ->
			Id1Final = Id1
	end,
	case Position2 =:= undefined of
		true ->
				Position2Final = undefined,
				exit({required_field_not_assigned, m_refining_swap_tos, position2});
		false ->
			Position2Final = Position2
	end,
	case Bagid2 =:= undefined of
		true ->
				Bagid2Final = undefined,
				exit({required_field_not_assigned, m_refining_swap_tos, bagid2});
		false ->
			Bagid2Final = Bagid2
	end,

	<<Id1Final:32/signed,Position2Final:32/signed,Bagid2Final:32/signed>>;
encode_m_refining_swap_tos(_) -> 
	<<>>.

decode_m_refining_swap_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id1:32/signed,Position2:32/signed,Bagid2:32/signed>> = Bin0,

	{m_refining_swap_tos, Id1,Position2,Bagid2};

decode_m_refining_swap_tos(_) ->
	undefined.
encode_m_refining_swap_toc(Record) when is_record(Record, m_refining_swap_toc) ->
	#m_refining_swap_toc{succ=Succ,reason=Reason,goods1=Goods1,goods2=Goods2} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Goods1 =:= undefined of
		true ->
				Goods1Final = 0;
		false ->
			Goods1Final = Goods1
	end,
	case Goods2 =:= undefined of
		true ->
				Goods2Final = 0;
		false ->
			Goods2Final = Goods2
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Goods1_bin = encode_p_goods(Goods1Final),
	BinLen_goods1 = erlang:byte_size(Goods1_bin),
	Goods2_bin = encode_p_goods(Goods2Final),
	BinLen_goods2 = erlang:byte_size(Goods2_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_goods1:32, Goods1_bin/binary,BinLen_goods2:32, Goods2_bin/binary>>;
encode_m_refining_swap_toc(_) -> 
	<<>>.

decode_m_refining_swap_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,SubBinSizegoods1:32, Bin2/binary>> = Bin1,
	<<SubBingoods1:SubBinSizegoods1/binary, Bin3/binary>> = Bin2,
	Goods1 = decode_p_goods(SubBingoods1),
	<<_SubBinSizegoods2:32, SubBingoods2/binary>> = Bin3,
	Goods2 = decode_p_goods(SubBingoods2),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_refining_swap_toc, Succ,common_tool:to_list(Reason),Goods1,Goods2};

decode_m_refining_swap_toc(_) ->
	undefined.
encode_m_refining_divide_tos(Record) when is_record(Record, m_refining_divide_tos) ->
	#m_refining_divide_tos{id=Id,num=Num,bagposition=Bagposition,bagid=Bagid} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, m_refining_divide_tos, id});
		false ->
			IdFinal = Id
	end,
	case Num =:= undefined of
		true ->
				NumFinal = undefined,
				exit({required_field_not_assigned, m_refining_divide_tos, num});
		false ->
			NumFinal = Num
	end,
	case Bagposition =:= undefined of
		true ->
				BagpositionFinal = undefined,
				exit({required_field_not_assigned, m_refining_divide_tos, bagposition});
		false ->
			BagpositionFinal = Bagposition
	end,
	case Bagid =:= undefined of
		true ->
				BagidFinal = undefined,
				exit({required_field_not_assigned, m_refining_divide_tos, bagid});
		false ->
			BagidFinal = Bagid
	end,

	<<IdFinal:32/signed,NumFinal:32/signed,BagpositionFinal:32/signed,BagidFinal:32/signed>>;
encode_m_refining_divide_tos(_) -> 
	<<>>.

decode_m_refining_divide_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed,Num:32/signed,Bagposition:32/signed,Bagid:32/signed>> = Bin0,

	{m_refining_divide_tos, Id,Num,Bagposition,Bagid};

decode_m_refining_divide_tos(_) ->
	undefined.
encode_m_refining_divide_toc(Record) when is_record(Record, m_refining_divide_toc) ->
	#m_refining_divide_toc{succ=Succ,reason=Reason,goods1=Goods1,goods2=Goods2} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Goods1 =:= undefined of
		true ->
				Goods1Final = 0;
		false ->
			Goods1Final = Goods1
	end,
	case Goods2 =:= undefined of
		true ->
				Goods2Final = 0;
		false ->
			Goods2Final = Goods2
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Goods1_bin = encode_p_goods(Goods1Final),
	BinLen_goods1 = erlang:byte_size(Goods1_bin),
	Goods2_bin = encode_p_goods(Goods2Final),
	BinLen_goods2 = erlang:byte_size(Goods2_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_goods1:32, Goods1_bin/binary,BinLen_goods2:32, Goods2_bin/binary>>;
encode_m_refining_divide_toc(_) -> 
	<<>>.

decode_m_refining_divide_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,SubBinSizegoods1:32, Bin2/binary>> = Bin1,
	<<SubBingoods1:SubBinSizegoods1/binary, Bin3/binary>> = Bin2,
	Goods1 = decode_p_goods(SubBingoods1),
	<<_SubBinSizegoods2:32, SubBingoods2/binary>> = Bin3,
	Goods2 = decode_p_goods(SubBingoods2),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_refining_divide_toc, Succ,common_tool:to_list(Reason),Goods1,Goods2};

decode_m_refining_divide_toc(_) ->
	undefined.
encode_m_refining_reinforce_equip_tos(Record) when is_record(Record, m_refining_reinforce_equip_tos) ->
	#m_refining_reinforce_equip_tos{bagid=Bagid,equipid=Equipid} = Record,
	case Bagid =:= undefined of
		true ->
				BagidFinal = undefined,
				exit({required_field_not_assigned, m_refining_reinforce_equip_tos, bagid});
		false ->
			BagidFinal = Bagid
	end,
	case Equipid =:= undefined of
		true ->
				EquipidFinal = undefined,
				exit({required_field_not_assigned, m_refining_reinforce_equip_tos, equipid});
		false ->
			EquipidFinal = Equipid
	end,

	<<BagidFinal:32/signed,EquipidFinal:32/signed>>;
encode_m_refining_reinforce_equip_tos(_) -> 
	<<>>.

decode_m_refining_reinforce_equip_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Bagid:32/signed,Equipid:32/signed>> = Bin0,

	{m_refining_reinforce_equip_tos, Bagid,Equipid};

decode_m_refining_reinforce_equip_tos(_) ->
	undefined.
encode_m_refining_reinforce_equip_toc(Record) when is_record(Record, m_refining_reinforce_equip_toc) ->
	#m_refining_reinforce_equip_toc{succ=Succ,equip=Equip,stuff=Stuff,protect=Protect,prompt=Prompt} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_refining_reinforce_equip_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Equip =:= undefined of
		true ->
				EquipFinal = 0;
		false ->
			EquipFinal = Equip
	end,
	case Stuff =:= undefined of
		true ->
				StuffFinal = 0;
		false ->
			StuffFinal = Stuff
	end,
	case Protect =:= undefined of
		true ->
				ProtectFinal = 0;
		false ->
			ProtectFinal = Protect
	end,
	case Prompt =:= undefined of
		true ->
				PromptFinal = <<>>;
		false ->
			PromptFinal = Prompt
	end,
	Equip_bin = encode_p_goods(EquipFinal),
	BinLen_equip = erlang:byte_size(Equip_bin),
	Stuff_bin = encode_p_goods(StuffFinal),
	BinLen_stuff = erlang:byte_size(Stuff_bin),
	Protect_bin = encode_p_goods(ProtectFinal),
	BinLen_protect = erlang:byte_size(Protect_bin),
	Prompt2 = common_tool:to_binary(PromptFinal),
	PromptLen = erlang:byte_size(Prompt2),

	<<SuccFinal:8,BinLen_equip:32, Equip_bin/binary,BinLen_stuff:32, Stuff_bin/binary,BinLen_protect:32, Protect_bin/binary,PromptLen:16, Prompt2/binary>>;
encode_m_refining_reinforce_equip_toc(_) -> 
	<<>>.

decode_m_refining_reinforce_equip_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,SubBinSizeequip:32, Bin1/binary>> = Bin0,
	<<SubBinequip:SubBinSizeequip/binary, Bin2/binary>> = Bin1,
	Equip = decode_p_goods(SubBinequip),
	<<SubBinSizestuff:32, Bin3/binary>> = Bin2,
	<<SubBinstuff:SubBinSizestuff/binary, Bin4/binary>> = Bin3,
	Stuff = decode_p_goods(SubBinstuff),
	<<SubBinSizeprotect:32, Bin5/binary>> = Bin4,
	<<SubBinprotect:SubBinSizeprotect/binary, Bin6/binary>> = Bin5,
	Protect = decode_p_goods(SubBinprotect),
	<<PromptLen:16, Bin7/binary>> = Bin6,
	<<Prompt:PromptLen/binary>> = Bin7,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_refining_reinforce_equip_toc, Succ,Equip,Stuff,Protect,common_tool:to_list(Prompt)};

decode_m_refining_reinforce_equip_toc(_) ->
	undefined.
encode_m_refining_compose_tos(Record) when is_record(Record, m_refining_compose_tos) ->
	#m_refining_compose_tos{compose_type=Compose_type} = Record,
	case Compose_type =:= undefined of
		true ->
				Compose_typeFinal = undefined,
				exit({required_field_not_assigned, m_refining_compose_tos, compose_type});
		false ->
			Compose_typeFinal = Compose_type
	end,

	<<Compose_typeFinal:32/signed>>;
encode_m_refining_compose_tos(_) -> 
	<<>>.

decode_m_refining_compose_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Compose_type:32/signed>> = Bin0,

	{m_refining_compose_tos, Compose_type};

decode_m_refining_compose_tos(_) ->
	undefined.
encode_m_refining_compose_toc(Record) when is_record(Record, m_refining_compose_toc) ->
	#m_refining_compose_toc{succ=Succ,normal_goods=Normal_goods,bind_goods=Bind_goods,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_refining_compose_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Normal_goods =:= undefined of
		true ->
				Normal_goodsFinal = 0;
		false ->
			Normal_goodsFinal = Normal_goods
	end,
	case Bind_goods =:= undefined of
		true ->
				Bind_goodsFinal = 0;
		false ->
			Bind_goodsFinal = Bind_goods
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Normal_goods_bin = encode_p_goods(Normal_goodsFinal),
	BinLen_normal_goods = erlang:byte_size(Normal_goods_bin),
	Bind_goods_bin = encode_p_goods(Bind_goodsFinal),
	BinLen_bind_goods = erlang:byte_size(Bind_goods_bin),
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,BinLen_normal_goods:32, Normal_goods_bin/binary,BinLen_bind_goods:32, Bind_goods_bin/binary,ReasonLen:16, Reason2/binary>>;
encode_m_refining_compose_toc(_) -> 
	<<>>.

decode_m_refining_compose_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,SubBinSizenormal_goods:32, Bin1/binary>> = Bin0,
	<<SubBinnormal_goods:SubBinSizenormal_goods/binary, Bin2/binary>> = Bin1,
	Normal_goods = decode_p_goods(SubBinnormal_goods),
	<<SubBinSizebind_goods:32, Bin3/binary>> = Bin2,
	<<SubBinbind_goods:SubBinSizebind_goods/binary, Bin4/binary>> = Bin3,
	Bind_goods = decode_p_goods(SubBinbind_goods),
	<<ReasonLen:16, Bin5/binary>> = Bin4,
	<<Reason:ReasonLen/binary>> = Bin5,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_refining_compose_toc, Succ,Normal_goods,Bind_goods,common_tool:to_list(Reason)};

decode_m_refining_compose_toc(_) ->
	undefined.
encode_m_refining_punch_tos(Record) when is_record(Record, m_refining_punch_tos) ->
	#m_refining_punch_tos{} = Record,

	<<>>;
encode_m_refining_punch_tos(_) -> 
	<<>>.

decode_m_refining_punch_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_refining_punch_tos};

decode_m_refining_punch_tos(_) ->
	undefined.
encode_m_refining_punch_toc(Record) when is_record(Record, m_refining_punch_toc) ->
	#m_refining_punch_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_refining_punch_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_refining_punch_toc(_) -> 
	<<>>.

decode_m_refining_punch_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_refining_punch_toc, Succ,common_tool:to_list(Reason)};

decode_m_refining_punch_toc(_) ->
	undefined.
encode_m_refining_inlay_tos(Record) when is_record(Record, m_refining_inlay_tos) ->
	#m_refining_inlay_tos{bagid=Bagid,equipid=Equipid} = Record,
	case Bagid =:= undefined of
		true ->
				BagidFinal = undefined,
				exit({required_field_not_assigned, m_refining_inlay_tos, bagid});
		false ->
			BagidFinal = Bagid
	end,
	case Equipid =:= undefined of
		true ->
				EquipidFinal = undefined,
				exit({required_field_not_assigned, m_refining_inlay_tos, equipid});
		false ->
			EquipidFinal = Equipid
	end,

	<<BagidFinal:32/signed,EquipidFinal:32/signed>>;
encode_m_refining_inlay_tos(_) -> 
	<<>>.

decode_m_refining_inlay_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Bagid:32/signed,Equipid:32/signed>> = Bin0,

	{m_refining_inlay_tos, Bagid,Equipid};

decode_m_refining_inlay_tos(_) ->
	undefined.
encode_m_refining_inlay_toc(Record) when is_record(Record, m_refining_inlay_toc) ->
	#m_refining_inlay_toc{succ=Succ,equip=Equip,stone=Stone,symbol=Symbol,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_refining_inlay_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Equip =:= undefined of
		true ->
				EquipFinal = 0;
		false ->
			EquipFinal = Equip
	end,
	case Stone =:= undefined of
		true ->
				StoneFinal = 0;
		false ->
			StoneFinal = Stone
	end,
	case Symbol =:= undefined of
		true ->
				SymbolFinal = 0;
		false ->
			SymbolFinal = Symbol
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Equip_bin = encode_p_goods(EquipFinal),
	BinLen_equip = erlang:byte_size(Equip_bin),
	Stone_bin = encode_p_goods(StoneFinal),
	BinLen_stone = erlang:byte_size(Stone_bin),
	Symbol_bin = encode_p_goods(SymbolFinal),
	BinLen_symbol = erlang:byte_size(Symbol_bin),
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,BinLen_equip:32, Equip_bin/binary,BinLen_stone:32, Stone_bin/binary,BinLen_symbol:32, Symbol_bin/binary,ReasonLen:16, Reason2/binary>>;
encode_m_refining_inlay_toc(_) -> 
	<<>>.

decode_m_refining_inlay_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,SubBinSizeequip:32, Bin1/binary>> = Bin0,
	<<SubBinequip:SubBinSizeequip/binary, Bin2/binary>> = Bin1,
	Equip = decode_p_goods(SubBinequip),
	<<SubBinSizestone:32, Bin3/binary>> = Bin2,
	<<SubBinstone:SubBinSizestone/binary, Bin4/binary>> = Bin3,
	Stone = decode_p_goods(SubBinstone),
	<<SubBinSizesymbol:32, Bin5/binary>> = Bin4,
	<<SubBinsymbol:SubBinSizesymbol/binary, Bin6/binary>> = Bin5,
	Symbol = decode_p_goods(SubBinsymbol),
	<<ReasonLen:16, Bin7/binary>> = Bin6,
	<<Reason:ReasonLen/binary>> = Bin7,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_refining_inlay_toc, Succ,Equip,Stone,Symbol,common_tool:to_list(Reason)};

decode_m_refining_inlay_toc(_) ->
	undefined.
encode_m_refining_unload_tos(Record) when is_record(Record, m_refining_unload_tos) ->
	#m_refining_unload_tos{bagid=Bagid,equipid=Equipid} = Record,
	case Bagid =:= undefined of
		true ->
				BagidFinal = undefined,
				exit({required_field_not_assigned, m_refining_unload_tos, bagid});
		false ->
			BagidFinal = Bagid
	end,
	case Equipid =:= undefined of
		true ->
				EquipidFinal = undefined,
				exit({required_field_not_assigned, m_refining_unload_tos, equipid});
		false ->
			EquipidFinal = Equipid
	end,

	<<BagidFinal:32/signed,EquipidFinal:32/signed>>;
encode_m_refining_unload_tos(_) -> 
	<<>>.

decode_m_refining_unload_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Bagid:32/signed,Equipid:32/signed>> = Bin0,

	{m_refining_unload_tos, Bagid,Equipid};

decode_m_refining_unload_tos(_) ->
	undefined.
encode_m_refining_unload_toc(Record) when is_record(Record, m_refining_unload_toc) ->
	#m_refining_unload_toc{succ=Succ,equip=Equip,deplete_symbol=Deplete_symbol,delete_symbol=Delete_symbol,stones=Stones,delete_stones=Delete_stones,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_refining_unload_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Equip =:= undefined of
		true ->
				EquipFinal = 0;
		false ->
			EquipFinal = Equip
	end,
	case Deplete_symbol =:= undefined of
		true ->
			Deplete_symbolFinal = [];
		false ->
			Deplete_symbolFinal = Deplete_symbol
	end,
	case Delete_symbol =:= undefined of
		true ->
			Delete_symbolFinal = [];
		false ->
			Delete_symbolFinal = Delete_symbol
	end,
	case Stones =:= undefined of
		true ->
			StonesFinal = [];
		false ->
			StonesFinal = Stones
	end,
	case Delete_stones =:= undefined of
		true ->
			Delete_stonesFinal = [];
		false ->
			Delete_stonesFinal = Delete_stones
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Equip_bin = encode_p_goods(EquipFinal),
	BinLen_equip = erlang:byte_size(Equip_bin),
	Deplete_symbol_bin = encode_p_goodss(Deplete_symbolFinal, <<>>),
	SizeDeplete_symbolFinal = erlang:length(Deplete_symbolFinal),
	BinLen_deplete_symbol = erlang:byte_size(Deplete_symbol_bin),
	Delete_symbol_bin = encode_p_goodss(Delete_symbolFinal, <<>>),
	SizeDelete_symbolFinal = erlang:length(Delete_symbolFinal),
	BinLen_delete_symbol = erlang:byte_size(Delete_symbol_bin),
	Stones_bin = encode_p_goodss(StonesFinal, <<>>),
	SizeStonesFinal = erlang:length(StonesFinal),
	BinLen_stones = erlang:byte_size(Stones_bin),
	Delete_stones_bin = encode_p_goodss(Delete_stonesFinal, <<>>),
	SizeDelete_stonesFinal = erlang:length(Delete_stonesFinal),
	BinLen_delete_stones = erlang:byte_size(Delete_stones_bin),
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,BinLen_equip:32, Equip_bin/binary,SizeDeplete_symbolFinal:16, BinLen_deplete_symbol:32, Deplete_symbol_bin/binary,SizeDelete_symbolFinal:16, BinLen_delete_symbol:32, Delete_symbol_bin/binary,SizeStonesFinal:16, BinLen_stones:32, Stones_bin/binary,SizeDelete_stonesFinal:16, BinLen_delete_stones:32, Delete_stones_bin/binary,ReasonLen:16, Reason2/binary>>;
encode_m_refining_unload_toc(_) -> 
	<<>>.

decode_m_refining_unload_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,SubBinSizeequip:32, Bin1/binary>> = Bin0,
	<<SubBinequip:SubBinSizeequip/binary, Bin2/binary>> = Bin1,
	Equip = decode_p_goods(SubBinequip),
	<<_Sizedeplete_symbol:16, BinLendeplete_symbol:32, Bin3/binary>> = Bin2,
	<<SubBindeplete_symbol:BinLendeplete_symbol/binary, Bin4/binary>> = Bin3, 
	Deplete_symbol = lists:reverse(decode_p_goodss(SubBindeplete_symbol, [])),
	<<_Sizedelete_symbol:16, BinLendelete_symbol:32, Bin5/binary>> = Bin4,
	<<SubBindelete_symbol:BinLendelete_symbol/binary, Bin6/binary>> = Bin5, 
	Delete_symbol = lists:reverse(decode_p_goodss(SubBindelete_symbol, [])),
	<<_Sizestones:16, BinLenstones:32, Bin7/binary>> = Bin6,
	<<SubBinstones:BinLenstones/binary, Bin8/binary>> = Bin7, 
	Stones = lists:reverse(decode_p_goodss(SubBinstones, [])),
	<<_Sizedelete_stones:16, BinLendelete_stones:32, Bin9/binary>> = Bin8,
	<<SubBindelete_stones:BinLendelete_stones/binary, Bin10/binary>> = Bin9, 
	Delete_stones = lists:reverse(decode_p_goodss(SubBindelete_stones, [])),
	<<ReasonLen:16, Bin11/binary>> = Bin10,
	<<Reason:ReasonLen/binary>> = Bin11,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_refining_unload_toc, Succ,Equip,Deplete_symbol,Delete_symbol,Stones,Delete_stones,common_tool:to_list(Reason)};

decode_m_refining_unload_toc(_) ->
	undefined.
encode_m_refining_equip_bind_tos(Record) when is_record(Record, m_refining_equip_bind_tos) ->
	#m_refining_equip_bind_tos{type=Type,bag_id=Bag_id,equip_id=Equip_id} = Record,
	case Type =:= undefined of
		true ->
				TypeFinal = undefined,
				exit({required_field_not_assigned, m_refining_equip_bind_tos, type});
		false ->
			TypeFinal = Type
	end,
	case Bag_id =:= undefined of
		true ->
				Bag_idFinal = undefined,
				exit({required_field_not_assigned, m_refining_equip_bind_tos, bag_id});
		false ->
			Bag_idFinal = Bag_id
	end,
	case Equip_id =:= undefined of
		true ->
				Equip_idFinal = undefined,
				exit({required_field_not_assigned, m_refining_equip_bind_tos, equip_id});
		false ->
			Equip_idFinal = Equip_id
	end,

	<<TypeFinal:32/signed,Bag_idFinal:32/signed,Equip_idFinal:32/signed>>;
encode_m_refining_equip_bind_tos(_) -> 
	<<>>.

decode_m_refining_equip_bind_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Type:32/signed,Bag_id:32/signed,Equip_id:32/signed>> = Bin0,

	{m_refining_equip_bind_tos, Type,Bag_id,Equip_id};

decode_m_refining_equip_bind_tos(_) ->
	undefined.
encode_m_refining_equip_bind_toc(Record) when is_record(Record, m_refining_equip_bind_toc) ->
	#m_refining_equip_bind_toc{succ=Succ,type=Type,reason=Reason,equip_goods=Equip_goods,bind_goods=Bind_goods,depletion_goods=Depletion_goods} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_refining_equip_bind_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Type =:= undefined of
		true ->
				TypeFinal = undefined,
				exit({required_field_not_assigned, m_refining_equip_bind_toc, type});
		false ->
			TypeFinal = Type
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Equip_goods =:= undefined of
		true ->
				Equip_goodsFinal = 0;
		false ->
			Equip_goodsFinal = Equip_goods
	end,
	case Bind_goods =:= undefined of
		true ->
			Bind_goodsFinal = [];
		false ->
			Bind_goodsFinal = Bind_goods
	end,
	case Depletion_goods =:= undefined of
		true ->
				Depletion_goodsFinal = 0;
		false ->
			Depletion_goodsFinal = Depletion_goods
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Equip_goods_bin = encode_p_goods(Equip_goodsFinal),
	BinLen_equip_goods = erlang:byte_size(Equip_goods_bin),
	Bind_goods_bin = encode_p_goodss(Bind_goodsFinal, <<>>),
	SizeBind_goodsFinal = erlang:length(Bind_goodsFinal),
	BinLen_bind_goods = erlang:byte_size(Bind_goods_bin),
	Depletion_goods_bin = encode_p_goods(Depletion_goodsFinal),
	BinLen_depletion_goods = erlang:byte_size(Depletion_goods_bin),

	<<SuccFinal:8,TypeFinal:32/signed,ReasonLen:16, Reason2/binary,BinLen_equip_goods:32, Equip_goods_bin/binary,SizeBind_goodsFinal:16, BinLen_bind_goods:32, Bind_goods_bin/binary,BinLen_depletion_goods:32, Depletion_goods_bin/binary>>;
encode_m_refining_equip_bind_toc(_) -> 
	<<>>.

decode_m_refining_equip_bind_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,Type:32/signed,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,SubBinSizeequip_goods:32, Bin2/binary>> = Bin1,
	<<SubBinequip_goods:SubBinSizeequip_goods/binary, Bin3/binary>> = Bin2,
	Equip_goods = decode_p_goods(SubBinequip_goods),
	<<_Sizebind_goods:16, BinLenbind_goods:32, Bin4/binary>> = Bin3,
	<<SubBinbind_goods:BinLenbind_goods/binary, Bin5/binary>> = Bin4, 
	Bind_goods = lists:reverse(decode_p_goodss(SubBinbind_goods, [])),
	<<_SubBinSizedepletion_goods:32, SubBindepletion_goods/binary>> = Bin5,
	Depletion_goods = decode_p_goods(SubBindepletion_goods),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_refining_equip_bind_toc, Succ,Type,common_tool:to_list(Reason),Equip_goods,Bind_goods,Depletion_goods};

decode_m_refining_equip_bind_toc(_) ->
	undefined.
encode_m_refining_forging_tos(Record) when is_record(Record, m_refining_forging_tos) ->
	#m_refining_forging_tos{bag_id=Bag_id} = Record,
	case Bag_id =:= undefined of
		true ->
				Bag_idFinal = undefined,
				exit({required_field_not_assigned, m_refining_forging_tos, bag_id});
		false ->
			Bag_idFinal = Bag_id
	end,

	<<Bag_idFinal:32/signed>>;
encode_m_refining_forging_tos(_) -> 
	<<>>.

decode_m_refining_forging_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Bag_id:32/signed>> = Bin0,

	{m_refining_forging_tos, Bag_id};

decode_m_refining_forging_tos(_) ->
	undefined.
encode_m_refining_forging_toc(Record) when is_record(Record, m_refining_forging_toc) ->
	#m_refining_forging_toc{succ=Succ,reason=Reason,goods_list=Goods_list,depletion_goods=Depletion_goods} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_refining_forging_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Goods_list =:= undefined of
		true ->
			Goods_listFinal = [];
		false ->
			Goods_listFinal = Goods_list
	end,
	case Depletion_goods =:= undefined of
		true ->
			Depletion_goodsFinal = [];
		false ->
			Depletion_goodsFinal = Depletion_goods
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Goods_list_bin = encode_p_goodss(Goods_listFinal, <<>>),
	SizeGoods_listFinal = erlang:length(Goods_listFinal),
	BinLen_goods_list = erlang:byte_size(Goods_list_bin),
	Depletion_goods_bin = encode_p_goodss(Depletion_goodsFinal, <<>>),
	SizeDepletion_goodsFinal = erlang:length(Depletion_goodsFinal),
	BinLen_depletion_goods = erlang:byte_size(Depletion_goods_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,SizeGoods_listFinal:16, BinLen_goods_list:32, Goods_list_bin/binary,SizeDepletion_goodsFinal:16, BinLen_depletion_goods:32, Depletion_goods_bin/binary>>;
encode_m_refining_forging_toc(_) -> 
	<<>>.

decode_m_refining_forging_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_Sizegoods_list:16, BinLengoods_list:32, Bin2/binary>> = Bin1,
	<<SubBingoods_list:BinLengoods_list/binary, Bin3/binary>> = Bin2, 
	Goods_list = lists:reverse(decode_p_goodss(SubBingoods_list, [])),
	<<_Sizedepletion_goods:16, _BinLendepletion_goods:32, SubBindepletion_goods/binary>> = Bin3,
	Depletion_goods = lists:reverse(decode_p_goodss(SubBindepletion_goods, [])),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_refining_forging_toc, Succ,common_tool:to_list(Reason),Goods_list,Depletion_goods};

decode_m_refining_forging_toc(_) ->
	undefined.
encode_m_refining_firing_tos(Record) when is_record(Record, m_refining_firing_tos) ->
	#m_refining_firing_tos{op_type=Op_type,sub_op_type=Sub_op_type,firing_list=Firing_list} = Record,
	case Op_type =:= undefined of
		true ->
				Op_typeFinal = 0;
		false ->
			Op_typeFinal = Op_type
	end,
	case Sub_op_type =:= undefined of
		true ->
				Sub_op_typeFinal = 0;
		false ->
			Sub_op_typeFinal = Sub_op_type
	end,
	case Firing_list =:= undefined of
		true ->
			Firing_listFinal = [];
		false ->
			Firing_listFinal = Firing_list
	end,
	Firing_list_bin = encode_p_refinings(Firing_listFinal, <<>>),
	SizeFiring_listFinal = erlang:length(Firing_listFinal),
	BinLen_firing_list = erlang:byte_size(Firing_list_bin),

	<<Op_typeFinal:32/signed,Sub_op_typeFinal:32/signed,SizeFiring_listFinal:16, BinLen_firing_list:32, Firing_list_bin/binary>>;
encode_m_refining_firing_tos(_) -> 
	<<>>.

decode_m_refining_firing_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Op_type:32/signed,Sub_op_type:32/signed,_Sizefiring_list:16, _BinLenfiring_list:32, SubBinfiring_list/binary>> = Bin0,
	Firing_list = lists:reverse(decode_p_refinings(SubBinfiring_list, [])),

	{m_refining_firing_tos, Op_type,Sub_op_type,Firing_list};

decode_m_refining_firing_tos(_) ->
	undefined.
encode_m_refining_firing_toc(Record) when is_record(Record, m_refining_firing_toc) ->
	#m_refining_firing_toc{succ=Succ,reason=Reason,reason_code=Reason_code,op_type=Op_type,sub_op_type=Sub_op_type,firing_list=Firing_list,new_list=New_list,del_list=Del_list,update_list=Update_list} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Reason_code =:= undefined of
		true ->
				Reason_codeFinal = 0;
		false ->
			Reason_codeFinal = Reason_code
	end,
	case Op_type =:= undefined of
		true ->
				Op_typeFinal = 0;
		false ->
			Op_typeFinal = Op_type
	end,
	case Sub_op_type =:= undefined of
		true ->
				Sub_op_typeFinal = 0;
		false ->
			Sub_op_typeFinal = Sub_op_type
	end,
	case Firing_list =:= undefined of
		true ->
			Firing_listFinal = [];
		false ->
			Firing_listFinal = Firing_list
	end,
	case New_list =:= undefined of
		true ->
			New_listFinal = [];
		false ->
			New_listFinal = New_list
	end,
	case Del_list =:= undefined of
		true ->
			Del_listFinal = [];
		false ->
			Del_listFinal = Del_list
	end,
	case Update_list =:= undefined of
		true ->
			Update_listFinal = [];
		false ->
			Update_listFinal = Update_list
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Firing_list_bin = encode_p_refinings(Firing_listFinal, <<>>),
	SizeFiring_listFinal = erlang:length(Firing_listFinal),
	BinLen_firing_list = erlang:byte_size(Firing_list_bin),
	New_list_bin = encode_p_goodss(New_listFinal, <<>>),
	SizeNew_listFinal = erlang:length(New_listFinal),
	BinLen_new_list = erlang:byte_size(New_list_bin),
	Del_list_bin = encode_p_goodss(Del_listFinal, <<>>),
	SizeDel_listFinal = erlang:length(Del_listFinal),
	BinLen_del_list = erlang:byte_size(Del_list_bin),
	Update_list_bin = encode_p_goodss(Update_listFinal, <<>>),
	SizeUpdate_listFinal = erlang:length(Update_listFinal),
	BinLen_update_list = erlang:byte_size(Update_list_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Reason_codeFinal:32/signed,Op_typeFinal:32/signed,Sub_op_typeFinal:32/signed,SizeFiring_listFinal:16, BinLen_firing_list:32, Firing_list_bin/binary,SizeNew_listFinal:16, BinLen_new_list:32, New_list_bin/binary,SizeDel_listFinal:16, BinLen_del_list:32, Del_list_bin/binary,SizeUpdate_listFinal:16, BinLen_update_list:32, Update_list_bin/binary>>;
encode_m_refining_firing_toc(_) -> 
	<<>>.

decode_m_refining_firing_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Reason_code:32/signed,Op_type:32/signed,Sub_op_type:32/signed,_Sizefiring_list:16, BinLenfiring_list:32, Bin2/binary>> = Bin1,
	<<SubBinfiring_list:BinLenfiring_list/binary, Bin3/binary>> = Bin2, 
	Firing_list = lists:reverse(decode_p_refinings(SubBinfiring_list, [])),
	<<_Sizenew_list:16, BinLennew_list:32, Bin4/binary>> = Bin3,
	<<SubBinnew_list:BinLennew_list/binary, Bin5/binary>> = Bin4, 
	New_list = lists:reverse(decode_p_goodss(SubBinnew_list, [])),
	<<_Sizedel_list:16, BinLendel_list:32, Bin6/binary>> = Bin5,
	<<SubBindel_list:BinLendel_list/binary, Bin7/binary>> = Bin6, 
	Del_list = lists:reverse(decode_p_goodss(SubBindel_list, [])),
	<<_Sizeupdate_list:16, _BinLenupdate_list:32, SubBinupdate_list/binary>> = Bin7,
	Update_list = lists:reverse(decode_p_goodss(SubBinupdate_list, [])),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_refining_firing_toc, Succ,common_tool:to_list(Reason),Reason_code,Op_type,Sub_op_type,Firing_list,New_list,Del_list,Update_list};

decode_m_refining_firing_toc(_) ->
	undefined.
encode_m_refining_box_tos(Record) when is_record(Record, m_refining_box_tos) ->
	#m_refining_box_tos{op_type=Op_type,op_fee_type=Op_fee_type,goods_ids=Goods_ids,page_no=Page_no,page_type=Page_type} = Record,
	case Op_type =:= undefined of
		true ->
				Op_typeFinal = 0;
		false ->
			Op_typeFinal = Op_type
	end,
	case Op_fee_type =:= undefined of
		true ->
				Op_fee_typeFinal = 0;
		false ->
			Op_fee_typeFinal = Op_fee_type
	end,
	case Goods_ids =:= undefined of
		true ->
			Goods_idsFinal = [];
		false ->
			Goods_idsFinal = Goods_ids
	end,
	case Page_no =:= undefined of
		true ->
				Page_noFinal = 0;
		false ->
			Page_noFinal = Page_no
	end,
	case Page_type =:= undefined of
		true ->
				Page_typeFinal = 0;
		false ->
			Page_typeFinal = Page_type
	end,
	Goods_ids_bin = encode_int32s(Goods_idsFinal, <<>>),
	SizeGoods_idsFinal = erlang:length(Goods_idsFinal),
	BinLen_goods_ids = erlang:byte_size(Goods_ids_bin),

	<<Op_typeFinal:32/signed,Op_fee_typeFinal:32/signed,SizeGoods_idsFinal:16, BinLen_goods_ids:32, Goods_ids_bin/binary,Page_noFinal:32/signed,Page_typeFinal:32/signed>>;
encode_m_refining_box_tos(_) -> 
	<<>>.

decode_m_refining_box_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Op_type:32/signed,Op_fee_type:32/signed,_Sizegoods_ids:16, BinLengoods_ids:32, Bin1/binary>> = Bin0,
	<<SubBingoods_ids:BinLengoods_ids/binary, Bin2/binary>> = Bin1, 
	Goods_ids = lists:reverse(decode_int32s(SubBingoods_ids, [])),
	<<Page_no:32/signed,Page_type:32/signed>> = Bin2,

	{m_refining_box_tos, Op_type,Op_fee_type,Goods_ids,Page_no,Page_type};

decode_m_refining_box_tos(_) ->
	undefined.
encode_m_refining_box_toc(Record) when is_record(Record, m_refining_box_toc) ->
	#m_refining_box_toc{succ=Succ,reason=Reason,reason_code=Reason_code,op_type=Op_type,op_fee_type=Op_fee_type,goods_ids=Goods_ids,page_no=Page_no,page_type=Page_type,is_open=Is_open,is_free=Is_free,award_time=Award_time,box_list=Box_list,award_list=Award_list,cur_list=Cur_list,award_status=Award_status,all_log_list=All_log_list,self_log_list=Self_log_list,generate_type=Generate_type,total_pages=Total_pages,is_restore=Is_restore} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Reason_code =:= undefined of
		true ->
				Reason_codeFinal = 0;
		false ->
			Reason_codeFinal = Reason_code
	end,
	case Op_type =:= undefined of
		true ->
				Op_typeFinal = 0;
		false ->
			Op_typeFinal = Op_type
	end,
	case Op_fee_type =:= undefined of
		true ->
				Op_fee_typeFinal = 0;
		false ->
			Op_fee_typeFinal = Op_fee_type
	end,
	case Goods_ids =:= undefined of
		true ->
			Goods_idsFinal = [];
		false ->
			Goods_idsFinal = Goods_ids
	end,
	case Page_no =:= undefined of
		true ->
				Page_noFinal = 0;
		false ->
			Page_noFinal = Page_no
	end,
	case Page_type =:= undefined of
		true ->
				Page_typeFinal = 0;
		false ->
			Page_typeFinal = Page_type
	end,
	case Is_open =:= undefined of
		true ->
				Is_openFinal = 1;
		false ->
			case Is_open of
				true ->
					Is_openFinal = 1;
				false ->
					Is_openFinal = 0
			end
	end,
	case Is_free =:= undefined of
		true ->
				Is_freeFinal = 1;
		false ->
			case Is_free of
				true ->
					Is_freeFinal = 1;
				false ->
					Is_freeFinal = 0
			end
	end,
	case Award_time =:= undefined of
		true ->
				Award_timeFinal = 0;
		false ->
			Award_timeFinal = Award_time
	end,
	case Box_list =:= undefined of
		true ->
			Box_listFinal = [];
		false ->
			Box_listFinal = Box_list
	end,
	case Award_list =:= undefined of
		true ->
			Award_listFinal = [];
		false ->
			Award_listFinal = Award_list
	end,
	case Cur_list =:= undefined of
		true ->
			Cur_listFinal = [];
		false ->
			Cur_listFinal = Cur_list
	end,
	case Award_status =:= undefined of
		true ->
				Award_statusFinal = 0;
		false ->
			Award_statusFinal = Award_status
	end,
	case All_log_list =:= undefined of
		true ->
			All_log_listFinal = [];
		false ->
			All_log_listFinal = All_log_list
	end,
	case Self_log_list =:= undefined of
		true ->
			Self_log_listFinal = [];
		false ->
			Self_log_listFinal = Self_log_list
	end,
	case Generate_type =:= undefined of
		true ->
				Generate_typeFinal = 0;
		false ->
			Generate_typeFinal = Generate_type
	end,
	case Total_pages =:= undefined of
		true ->
				Total_pagesFinal = 0;
		false ->
			Total_pagesFinal = Total_pages
	end,
	case Is_restore =:= undefined of
		true ->
				Is_restoreFinal = 0;
		false ->
			Is_restoreFinal = Is_restore
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Goods_ids_bin = encode_int32s(Goods_idsFinal, <<>>),
	SizeGoods_idsFinal = erlang:length(Goods_idsFinal),
	BinLen_goods_ids = erlang:byte_size(Goods_ids_bin),
	Box_list_bin = encode_p_goodss(Box_listFinal, <<>>),
	SizeBox_listFinal = erlang:length(Box_listFinal),
	BinLen_box_list = erlang:byte_size(Box_list_bin),
	Award_list_bin = encode_p_goodss(Award_listFinal, <<>>),
	SizeAward_listFinal = erlang:length(Award_listFinal),
	BinLen_award_list = erlang:byte_size(Award_list_bin),
	Cur_list_bin = encode_p_goodss(Cur_listFinal, <<>>),
	SizeCur_listFinal = erlang:length(Cur_listFinal),
	BinLen_cur_list = erlang:byte_size(Cur_list_bin),
	All_log_list_bin = encode_p_refining_box_logs(All_log_listFinal, <<>>),
	SizeAll_log_listFinal = erlang:length(All_log_listFinal),
	BinLen_all_log_list = erlang:byte_size(All_log_list_bin),
	Self_log_list_bin = encode_p_refining_box_logs(Self_log_listFinal, <<>>),
	SizeSelf_log_listFinal = erlang:length(Self_log_listFinal),
	BinLen_self_log_list = erlang:byte_size(Self_log_list_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Reason_codeFinal:32/signed,Op_typeFinal:32/signed,Op_fee_typeFinal:32/signed,SizeGoods_idsFinal:16, BinLen_goods_ids:32, Goods_ids_bin/binary,Page_noFinal:32/signed,Page_typeFinal:32/signed,Is_openFinal:8,Is_freeFinal:8,Award_timeFinal:32/signed,SizeBox_listFinal:16, BinLen_box_list:32, Box_list_bin/binary,SizeAward_listFinal:16, BinLen_award_list:32, Award_list_bin/binary,SizeCur_listFinal:16, BinLen_cur_list:32, Cur_list_bin/binary,Award_statusFinal:32/signed,SizeAll_log_listFinal:16, BinLen_all_log_list:32, All_log_list_bin/binary,SizeSelf_log_listFinal:16, BinLen_self_log_list:32, Self_log_list_bin/binary,Generate_typeFinal:32/signed,Total_pagesFinal:32/signed,Is_restoreFinal:32/signed>>;
encode_m_refining_box_toc(_) -> 
	<<>>.

decode_m_refining_box_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Reason_code:32/signed,Op_type:32/signed,Op_fee_type:32/signed,_Sizegoods_ids:16, BinLengoods_ids:32, Bin2/binary>> = Bin1,
	<<SubBingoods_ids:BinLengoods_ids/binary, Bin3/binary>> = Bin2, 
	Goods_ids = lists:reverse(decode_int32s(SubBingoods_ids, [])),
	<<Page_no:32/signed,Page_type:32/signed,Is_openTmp:8,Is_freeTmp:8,Award_time:32/signed,_Sizebox_list:16, BinLenbox_list:32, Bin4/binary>> = Bin3,
	<<SubBinbox_list:BinLenbox_list/binary, Bin5/binary>> = Bin4, 
	Box_list = lists:reverse(decode_p_goodss(SubBinbox_list, [])),
	<<_Sizeaward_list:16, BinLenaward_list:32, Bin6/binary>> = Bin5,
	<<SubBinaward_list:BinLenaward_list/binary, Bin7/binary>> = Bin6, 
	Award_list = lists:reverse(decode_p_goodss(SubBinaward_list, [])),
	<<_Sizecur_list:16, BinLencur_list:32, Bin8/binary>> = Bin7,
	<<SubBincur_list:BinLencur_list/binary, Bin9/binary>> = Bin8, 
	Cur_list = lists:reverse(decode_p_goodss(SubBincur_list, [])),
	<<Award_status:32/signed,_Sizeall_log_list:16, BinLenall_log_list:32, Bin10/binary>> = Bin9,
	<<SubBinall_log_list:BinLenall_log_list/binary, Bin11/binary>> = Bin10, 
	All_log_list = lists:reverse(decode_p_refining_box_logs(SubBinall_log_list, [])),
	<<_Sizeself_log_list:16, BinLenself_log_list:32, Bin12/binary>> = Bin11,
	<<SubBinself_log_list:BinLenself_log_list/binary, Bin13/binary>> = Bin12, 
	Self_log_list = lists:reverse(decode_p_refining_box_logs(SubBinself_log_list, [])),
	<<Generate_type:32/signed,Total_pages:32/signed,Is_restore:32/signed>> = Bin13,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Is_openTmp of 
	1 -> 
		Is_open = true;
	_ ->
		Is_open = false
end,
case Is_freeTmp of 
	1 -> 
		Is_free = true;
	_ ->
		Is_free = false
end,

	{m_refining_box_toc, Succ,common_tool:to_list(Reason),Reason_code,Op_type,Op_fee_type,Goods_ids,Page_no,Page_type,Is_open,Is_free,Award_time,Box_list,Award_list,Cur_list,Award_status,All_log_list,Self_log_list,Generate_type,Total_pages,Is_restore};

decode_m_refining_box_toc(_) ->
	undefined.
encode_m_depot_get_goods_tos(Record) when is_record(Record, m_depot_get_goods_tos) ->
	#m_depot_get_goods_tos{npcid=Npcid,depot_id=Depot_id} = Record,
	case Npcid =:= undefined of
		true ->
				NpcidFinal = undefined,
				exit({required_field_not_assigned, m_depot_get_goods_tos, npcid});
		false ->
			NpcidFinal = Npcid
	end,
	case Depot_id =:= undefined of
		true ->
				Depot_idFinal = undefined,
				exit({required_field_not_assigned, m_depot_get_goods_tos, depot_id});
		false ->
			Depot_idFinal = Depot_id
	end,

	<<NpcidFinal:32/signed,Depot_idFinal:32/signed>>;
encode_m_depot_get_goods_tos(_) -> 
	<<>>.

decode_m_depot_get_goods_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Npcid:32/signed,Depot_id:32/signed>> = Bin0,

	{m_depot_get_goods_tos, Npcid,Depot_id};

decode_m_depot_get_goods_tos(_) ->
	undefined.
encode_m_depot_get_goods_toc(Record) when is_record(Record, m_depot_get_goods_toc) ->
	#m_depot_get_goods_toc{succ=Succ,reason=Reason,depot_num=Depot_num,depots=Depots} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Depot_num =:= undefined of
		true ->
				Depot_numFinal = 0;
		false ->
			Depot_numFinal = Depot_num
	end,
	case Depots =:= undefined of
		true ->
			DepotsFinal = [];
		false ->
			DepotsFinal = Depots
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Depots_bin = encode_p_depot_bags(DepotsFinal, <<>>),
	SizeDepotsFinal = erlang:length(DepotsFinal),
	BinLen_depots = erlang:byte_size(Depots_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Depot_numFinal:32/signed,SizeDepotsFinal:16, BinLen_depots:32, Depots_bin/binary>>;
encode_m_depot_get_goods_toc(_) -> 
	<<>>.

decode_m_depot_get_goods_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Depot_num:32/signed,_Sizedepots:16, _BinLendepots:32, SubBindepots/binary>> = Bin1,
	Depots = lists:reverse(decode_p_depot_bags(SubBindepots, [])),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_depot_get_goods_toc, Succ,common_tool:to_list(Reason),Depot_num,Depots};

decode_m_depot_get_goods_toc(_) ->
	undefined.
encode_p_depot_bag(Record) when is_record(Record, p_depot_bag) ->
	#p_depot_bag{bagid=Bagid,goods_list=Goods_list} = Record,
	case Bagid =:= undefined of
		true ->
				BagidFinal = undefined,
				exit({required_field_not_assigned, p_depot_bag, bagid});
		false ->
			BagidFinal = Bagid
	end,
	case Goods_list =:= undefined of
		true ->
			Goods_listFinal = [];
		false ->
			Goods_listFinal = Goods_list
	end,
	Goods_list_bin = encode_p_goodss(Goods_listFinal, <<>>),
	SizeGoods_listFinal = erlang:length(Goods_listFinal),
	BinLen_goods_list = erlang:byte_size(Goods_list_bin),

	<<BagidFinal:32/signed,SizeGoods_listFinal:16, BinLen_goods_list:32, Goods_list_bin/binary>>;
encode_p_depot_bag(_) -> 
	<<>>.

decode_p_depot_bag(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Bagid:32/signed,_Sizegoods_list:16, _BinLengoods_list:32, SubBingoods_list/binary>> = Bin0,
	Goods_list = lists:reverse(decode_p_goodss(SubBingoods_list, [])),

	{p_depot_bag, Bagid,Goods_list};

decode_p_depot_bag(_) ->
	undefined.
encode_m_depot_dredge_tos(Record) when is_record(Record, m_depot_dredge_tos) ->
	#m_depot_dredge_tos{bagid=Bagid} = Record,
	case Bagid =:= undefined of
		true ->
				BagidFinal = undefined,
				exit({required_field_not_assigned, m_depot_dredge_tos, bagid});
		false ->
			BagidFinal = Bagid
	end,

	<<BagidFinal:32/signed>>;
encode_m_depot_dredge_tos(_) -> 
	<<>>.

decode_m_depot_dredge_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Bagid:32/signed>> = Bin0,

	{m_depot_dredge_tos, Bagid};

decode_m_depot_dredge_tos(_) ->
	undefined.
encode_m_depot_dredge_toc(Record) when is_record(Record, m_depot_dredge_toc) ->
	#m_depot_dredge_toc{succ=Succ,bagid=Bagid,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_depot_dredge_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Bagid =:= undefined of
		true ->
				BagidFinal = 0;
		false ->
			BagidFinal = Bagid
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,BagidFinal:32/signed,ReasonLen:16, Reason2/binary>>;
encode_m_depot_dredge_toc(_) -> 
	<<>>.

decode_m_depot_dredge_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,Bagid:32/signed,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_depot_dredge_toc, Succ,Bagid,common_tool:to_list(Reason)};

decode_m_depot_dredge_toc(_) ->
	undefined.
encode_m_depot_destroy_tos(Record) when is_record(Record, m_depot_destroy_tos) ->
	#m_depot_destroy_tos{id=Id} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, m_depot_destroy_tos, id});
		false ->
			IdFinal = Id
	end,

	<<IdFinal:32/signed>>;
encode_m_depot_destroy_tos(_) -> 
	<<>>.

decode_m_depot_destroy_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed>> = Bin0,

	{m_depot_destroy_tos, Id};

decode_m_depot_destroy_tos(_) ->
	undefined.
encode_m_depot_destroy_toc(Record) when is_record(Record, m_depot_destroy_toc) ->
	#m_depot_destroy_toc{succ=Succ,reason=Reason,id=Id} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Id =:= undefined of
		true ->
				IdFinal = 0;
		false ->
			IdFinal = Id
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,IdFinal:32/signed>>;
encode_m_depot_destroy_toc(_) -> 
	<<>>.

decode_m_depot_destroy_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Id:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_depot_destroy_toc, Succ,common_tool:to_list(Reason),Id};

decode_m_depot_destroy_toc(_) ->
	undefined.
encode_m_depot_swap_tos(Record) when is_record(Record, m_depot_swap_tos) ->
	#m_depot_swap_tos{goodsid=Goodsid,position=Position,bagid=Bagid} = Record,
	case Goodsid =:= undefined of
		true ->
				GoodsidFinal = undefined,
				exit({required_field_not_assigned, m_depot_swap_tos, goodsid});
		false ->
			GoodsidFinal = Goodsid
	end,
	case Position =:= undefined of
		true ->
				PositionFinal = 0;
		false ->
			PositionFinal = Position
	end,
	case Bagid =:= undefined of
		true ->
				BagidFinal = 0;
		false ->
			BagidFinal = Bagid
	end,

	<<GoodsidFinal:32/signed,PositionFinal:32/signed,BagidFinal:32/signed>>;
encode_m_depot_swap_tos(_) -> 
	<<>>.

decode_m_depot_swap_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Goodsid:32/signed,Position:32/signed,Bagid:32/signed>> = Bin0,

	{m_depot_swap_tos, Goodsid,Position,Bagid};

decode_m_depot_swap_tos(_) ->
	undefined.
encode_m_depot_swap_toc(Record) when is_record(Record, m_depot_swap_toc) ->
	#m_depot_swap_toc{succ=Succ,reason=Reason,goods1=Goods1,goods2=Goods2} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Goods1 =:= undefined of
		true ->
				Goods1Final = 0;
		false ->
			Goods1Final = Goods1
	end,
	case Goods2 =:= undefined of
		true ->
				Goods2Final = 0;
		false ->
			Goods2Final = Goods2
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Goods1_bin = encode_p_goods(Goods1Final),
	BinLen_goods1 = erlang:byte_size(Goods1_bin),
	Goods2_bin = encode_p_goods(Goods2Final),
	BinLen_goods2 = erlang:byte_size(Goods2_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_goods1:32, Goods1_bin/binary,BinLen_goods2:32, Goods2_bin/binary>>;
encode_m_depot_swap_toc(_) -> 
	<<>>.

decode_m_depot_swap_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,SubBinSizegoods1:32, Bin2/binary>> = Bin1,
	<<SubBingoods1:SubBinSizegoods1/binary, Bin3/binary>> = Bin2,
	Goods1 = decode_p_goods(SubBingoods1),
	<<_SubBinSizegoods2:32, SubBingoods2/binary>> = Bin3,
	Goods2 = decode_p_goods(SubBingoods2),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_depot_swap_toc, Succ,common_tool:to_list(Reason),Goods1,Goods2};

decode_m_depot_swap_toc(_) ->
	undefined.
encode_m_depot_divide_tos(Record) when is_record(Record, m_depot_divide_tos) ->
	#m_depot_divide_tos{id=Id,num=Num,bagid=Bagid,position=Position} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, m_depot_divide_tos, id});
		false ->
			IdFinal = Id
	end,
	case Num =:= undefined of
		true ->
				NumFinal = undefined,
				exit({required_field_not_assigned, m_depot_divide_tos, num});
		false ->
			NumFinal = Num
	end,
	case Bagid =:= undefined of
		true ->
				BagidFinal = undefined,
				exit({required_field_not_assigned, m_depot_divide_tos, bagid});
		false ->
			BagidFinal = Bagid
	end,
	case Position =:= undefined of
		true ->
				PositionFinal = undefined,
				exit({required_field_not_assigned, m_depot_divide_tos, position});
		false ->
			PositionFinal = Position
	end,

	<<IdFinal:32/signed,NumFinal:32/signed,BagidFinal:32/signed,PositionFinal:32/signed>>;
encode_m_depot_divide_tos(_) -> 
	<<>>.

decode_m_depot_divide_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed,Num:32/signed,Bagid:32/signed,Position:32/signed>> = Bin0,

	{m_depot_divide_tos, Id,Num,Bagid,Position};

decode_m_depot_divide_tos(_) ->
	undefined.
encode_m_depot_divide_toc(Record) when is_record(Record, m_depot_divide_toc) ->
	#m_depot_divide_toc{succ=Succ,reason=Reason,goods1=Goods1,goods2=Goods2} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Goods1 =:= undefined of
		true ->
				Goods1Final = 0;
		false ->
			Goods1Final = Goods1
	end,
	case Goods2 =:= undefined of
		true ->
				Goods2Final = 0;
		false ->
			Goods2Final = Goods2
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Goods1_bin = encode_p_goods(Goods1Final),
	BinLen_goods1 = erlang:byte_size(Goods1_bin),
	Goods2_bin = encode_p_goods(Goods2Final),
	BinLen_goods2 = erlang:byte_size(Goods2_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_goods1:32, Goods1_bin/binary,BinLen_goods2:32, Goods2_bin/binary>>;
encode_m_depot_divide_toc(_) -> 
	<<>>.

decode_m_depot_divide_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,SubBinSizegoods1:32, Bin2/binary>> = Bin1,
	<<SubBingoods1:SubBinSizegoods1/binary, Bin3/binary>> = Bin2,
	Goods1 = decode_p_goods(SubBingoods1),
	<<_SubBinSizegoods2:32, SubBingoods2/binary>> = Bin3,
	Goods2 = decode_p_goods(SubBingoods2),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_depot_divide_toc, Succ,common_tool:to_list(Reason),Goods1,Goods2};

decode_m_depot_divide_toc(_) ->
	undefined.
encode_m_depot_tidy_tos(Record) when is_record(Record, m_depot_tidy_tos) ->
	#m_depot_tidy_tos{bagid=Bagid} = Record,
	case Bagid =:= undefined of
		true ->
				BagidFinal = undefined,
				exit({required_field_not_assigned, m_depot_tidy_tos, bagid});
		false ->
			BagidFinal = Bagid
	end,

	<<BagidFinal:32/signed>>;
encode_m_depot_tidy_tos(_) -> 
	<<>>.

decode_m_depot_tidy_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Bagid:32/signed>> = Bin0,

	{m_depot_tidy_tos, Bagid};

decode_m_depot_tidy_tos(_) ->
	undefined.
encode_m_depot_tidy_toc(Record) when is_record(Record, m_depot_tidy_toc) ->
	#m_depot_tidy_toc{succ=Succ,bagid=Bagid,goods_list=Goods_list} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_depot_tidy_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Bagid =:= undefined of
		true ->
				BagidFinal = undefined,
				exit({required_field_not_assigned, m_depot_tidy_toc, bagid});
		false ->
			BagidFinal = Bagid
	end,
	case Goods_list =:= undefined of
		true ->
			Goods_listFinal = [];
		false ->
			Goods_listFinal = Goods_list
	end,
	Goods_list_bin = encode_p_goodss(Goods_listFinal, <<>>),
	SizeGoods_listFinal = erlang:length(Goods_listFinal),
	BinLen_goods_list = erlang:byte_size(Goods_list_bin),

	<<SuccFinal:8,BagidFinal:32/signed,SizeGoods_listFinal:16, BinLen_goods_list:32, Goods_list_bin/binary>>;
encode_m_depot_tidy_toc(_) -> 
	<<>>.

decode_m_depot_tidy_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,Bagid:32/signed,_Sizegoods_list:16, _BinLengoods_list:32, SubBingoods_list/binary>> = Bin0,
	Goods_list = lists:reverse(decode_p_goodss(SubBingoods_list, [])),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_depot_tidy_toc, Succ,Bagid,Goods_list};

decode_m_depot_tidy_toc(_) ->
	undefined.
encode_m_educate_teacher_online_toc(Record) when is_record(Record, m_educate_teacher_online_toc) ->
	#m_educate_teacher_online_toc{name=Name} = Record,
	case Name =:= undefined of
		true ->
				NameFinal = undefined,
				exit({required_field_not_assigned, m_educate_teacher_online_toc, name});
		false ->
			NameFinal = Name
	end,
	Name2 = common_tool:to_binary(NameFinal),
	NameLen = erlang:byte_size(Name2),

	<<NameLen:16, Name2/binary>>;
encode_m_educate_teacher_online_toc(_) -> 
	<<>>.

decode_m_educate_teacher_online_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<NameLen:16, Bin1/binary>> = Bin0,
	<<Name:NameLen/binary>> = Bin1,

	{m_educate_teacher_online_toc, common_tool:to_list(Name)};

decode_m_educate_teacher_online_toc(_) ->
	undefined.
encode_m_educate_transfer_tos(Record) when is_record(Record, m_educate_transfer_tos) ->
	#m_educate_transfer_tos{} = Record,

	<<>>;
encode_m_educate_transfer_tos(_) -> 
	<<>>.

decode_m_educate_transfer_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_educate_transfer_tos};

decode_m_educate_transfer_tos(_) ->
	undefined.
encode_m_educate_student_online_toc(Record) when is_record(Record, m_educate_student_online_toc) ->
	#m_educate_student_online_toc{name=Name} = Record,
	case Name =:= undefined of
		true ->
				NameFinal = undefined,
				exit({required_field_not_assigned, m_educate_student_online_toc, name});
		false ->
			NameFinal = Name
	end,
	Name2 = common_tool:to_binary(NameFinal),
	NameLen = erlang:byte_size(Name2),

	<<NameLen:16, Name2/binary>>;
encode_m_educate_student_online_toc(_) -> 
	<<>>.

decode_m_educate_student_online_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<NameLen:16, Bin1/binary>> = Bin0,
	<<Name:NameLen/binary>> = Bin1,

	{m_educate_student_online_toc, common_tool:to_list(Name)};

decode_m_educate_student_online_toc(_) ->
	undefined.
encode_m_educate_invite_apprentice_toc(Record) when is_record(Record, m_educate_invite_apprentice_toc) ->
	#m_educate_invite_apprentice_toc{ref=Ref,rolename=Rolename} = Record,
	case Ref =:= undefined of
		true ->
				RefFinal = undefined,
				exit({required_field_not_assigned, m_educate_invite_apprentice_toc, ref});
		false ->
			RefFinal = Ref
	end,
	case Rolename =:= undefined of
		true ->
				RolenameFinal = undefined,
				exit({required_field_not_assigned, m_educate_invite_apprentice_toc, rolename});
		false ->
			RolenameFinal = Rolename
	end,
	Ref2 = common_tool:to_binary(RefFinal),
	RefLen = erlang:byte_size(Ref2),
	Rolename2 = common_tool:to_binary(RolenameFinal),
	RolenameLen = erlang:byte_size(Rolename2),

	<<RefLen:16, Ref2/binary,RolenameLen:16, Rolename2/binary>>;
encode_m_educate_invite_apprentice_toc(_) -> 
	<<>>.

decode_m_educate_invite_apprentice_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<RefLen:16, Bin1/binary>> = Bin0,
	<<Ref:RefLen/binary,RolenameLen:16, Bin2/binary>> = Bin1,
	<<Rolename:RolenameLen/binary>> = Bin2,

	{m_educate_invite_apprentice_toc, common_tool:to_list(Ref),common_tool:to_list(Rolename)};

decode_m_educate_invite_apprentice_toc(_) ->
	undefined.
encode_m_educate_invite_apprentice_result_toc(Record) when is_record(Record, m_educate_invite_apprentice_result_toc) ->
	#m_educate_invite_apprentice_result_toc{succ=Succ,reason=Reason,info=Info} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_educate_invite_apprentice_result_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Info =:= undefined of
		true ->
				InfoFinal = 0;
		false ->
			InfoFinal = Info
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Info_bin = encode_p_educate_role_info(InfoFinal),
	BinLen_info = erlang:byte_size(Info_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_info:32, Info_bin/binary>>;
encode_m_educate_invite_apprentice_result_toc(_) -> 
	<<>>.

decode_m_educate_invite_apprentice_result_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_SubBinSizeinfo:32, SubBininfo/binary>> = Bin1,
	Info = decode_p_educate_role_info(SubBininfo),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_educate_invite_apprentice_result_toc, Succ,common_tool:to_list(Reason),Info};

decode_m_educate_invite_apprentice_result_toc(_) ->
	undefined.
encode_m_educate_invite_admissions_toc(Record) when is_record(Record, m_educate_invite_admissions_toc) ->
	#m_educate_invite_admissions_toc{ref=Ref,rolename=Rolename} = Record,
	case Ref =:= undefined of
		true ->
				RefFinal = undefined,
				exit({required_field_not_assigned, m_educate_invite_admissions_toc, ref});
		false ->
			RefFinal = Ref
	end,
	case Rolename =:= undefined of
		true ->
				RolenameFinal = undefined,
				exit({required_field_not_assigned, m_educate_invite_admissions_toc, rolename});
		false ->
			RolenameFinal = Rolename
	end,
	Ref2 = common_tool:to_binary(RefFinal),
	RefLen = erlang:byte_size(Ref2),
	Rolename2 = common_tool:to_binary(RolenameFinal),
	RolenameLen = erlang:byte_size(Rolename2),

	<<RefLen:16, Ref2/binary,RolenameLen:16, Rolename2/binary>>;
encode_m_educate_invite_admissions_toc(_) -> 
	<<>>.

decode_m_educate_invite_admissions_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<RefLen:16, Bin1/binary>> = Bin0,
	<<Ref:RefLen/binary,RolenameLen:16, Bin2/binary>> = Bin1,
	<<Rolename:RolenameLen/binary>> = Bin2,

	{m_educate_invite_admissions_toc, common_tool:to_list(Ref),common_tool:to_list(Rolename)};

decode_m_educate_invite_admissions_toc(_) ->
	undefined.
encode_m_educate_invite_admissions_result_toc(Record) when is_record(Record, m_educate_invite_admissions_result_toc) ->
	#m_educate_invite_admissions_result_toc{succ=Succ,reason=Reason,info=Info} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_educate_invite_admissions_result_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Info =:= undefined of
		true ->
				InfoFinal = 0;
		false ->
			InfoFinal = Info
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Info_bin = encode_p_educate_role_info(InfoFinal),
	BinLen_info = erlang:byte_size(Info_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_info:32, Info_bin/binary>>;
encode_m_educate_invite_admissions_result_toc(_) -> 
	<<>>.

decode_m_educate_invite_admissions_result_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_SubBinSizeinfo:32, SubBininfo/binary>> = Bin1,
	Info = decode_p_educate_role_info(SubBininfo),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_educate_invite_admissions_result_toc, Succ,common_tool:to_list(Reason),Info};

decode_m_educate_invite_admissions_result_toc(_) ->
	undefined.
encode_m_educate_reply_invite_apprentice_tos(Record) when is_record(Record, m_educate_reply_invite_apprentice_tos) ->
	#m_educate_reply_invite_apprentice_tos{ref=Ref,is_agree=Is_agree} = Record,
	case Ref =:= undefined of
		true ->
				RefFinal = undefined,
				exit({required_field_not_assigned, m_educate_reply_invite_apprentice_tos, ref});
		false ->
			RefFinal = Ref
	end,
	case Is_agree =:= undefined of
		true ->
				Is_agreeFinal = undefined,
				exit({required_field_not_assigned, m_educate_reply_invite_apprentice_tos, is_agree});
		false ->
		case Is_agree of
			true ->
				Is_agreeFinal = 1;
			false ->
				Is_agreeFinal = 0
		end
	end,
	Ref2 = common_tool:to_binary(RefFinal),
	RefLen = erlang:byte_size(Ref2),

	<<RefLen:16, Ref2/binary,Is_agreeFinal:8>>;
encode_m_educate_reply_invite_apprentice_tos(_) -> 
	<<>>.

decode_m_educate_reply_invite_apprentice_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<RefLen:16, Bin1/binary>> = Bin0,
	<<Ref:RefLen/binary,Is_agreeTmp:8>> = Bin1,
case Is_agreeTmp of 
	1 -> 
		Is_agree = true;
	_ ->
		Is_agree = false
end,

	{m_educate_reply_invite_apprentice_tos, common_tool:to_list(Ref),Is_agree};

decode_m_educate_reply_invite_apprentice_tos(_) ->
	undefined.
encode_m_educate_reply_invite_apprentice_toc(Record) when is_record(Record, m_educate_reply_invite_apprentice_toc) ->
	#m_educate_reply_invite_apprentice_toc{succ=Succ,reason=Reason,info=Info} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_educate_reply_invite_apprentice_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Info =:= undefined of
		true ->
				InfoFinal = 0;
		false ->
			InfoFinal = Info
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Info_bin = encode_p_educate_role_info(InfoFinal),
	BinLen_info = erlang:byte_size(Info_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_info:32, Info_bin/binary>>;
encode_m_educate_reply_invite_apprentice_toc(_) -> 
	<<>>.

decode_m_educate_reply_invite_apprentice_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_SubBinSizeinfo:32, SubBininfo/binary>> = Bin1,
	Info = decode_p_educate_role_info(SubBininfo),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_educate_reply_invite_apprentice_toc, Succ,common_tool:to_list(Reason),Info};

decode_m_educate_reply_invite_apprentice_toc(_) ->
	undefined.
encode_m_educate_reply_invite_admissions_tos(Record) when is_record(Record, m_educate_reply_invite_admissions_tos) ->
	#m_educate_reply_invite_admissions_tos{ref=Ref,is_agree=Is_agree} = Record,
	case Ref =:= undefined of
		true ->
				RefFinal = undefined,
				exit({required_field_not_assigned, m_educate_reply_invite_admissions_tos, ref});
		false ->
			RefFinal = Ref
	end,
	case Is_agree =:= undefined of
		true ->
				Is_agreeFinal = undefined,
				exit({required_field_not_assigned, m_educate_reply_invite_admissions_tos, is_agree});
		false ->
		case Is_agree of
			true ->
				Is_agreeFinal = 1;
			false ->
				Is_agreeFinal = 0
		end
	end,
	Ref2 = common_tool:to_binary(RefFinal),
	RefLen = erlang:byte_size(Ref2),

	<<RefLen:16, Ref2/binary,Is_agreeFinal:8>>;
encode_m_educate_reply_invite_admissions_tos(_) -> 
	<<>>.

decode_m_educate_reply_invite_admissions_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<RefLen:16, Bin1/binary>> = Bin0,
	<<Ref:RefLen/binary,Is_agreeTmp:8>> = Bin1,
case Is_agreeTmp of 
	1 -> 
		Is_agree = true;
	_ ->
		Is_agree = false
end,

	{m_educate_reply_invite_admissions_tos, common_tool:to_list(Ref),Is_agree};

decode_m_educate_reply_invite_admissions_tos(_) ->
	undefined.
encode_m_educate_reply_invite_admissions_toc(Record) when is_record(Record, m_educate_reply_invite_admissions_toc) ->
	#m_educate_reply_invite_admissions_toc{succ=Succ,reason=Reason,info=Info} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_educate_reply_invite_admissions_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Info =:= undefined of
		true ->
				InfoFinal = 0;
		false ->
			InfoFinal = Info
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Info_bin = encode_p_educate_role_info(InfoFinal),
	BinLen_info = erlang:byte_size(Info_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_info:32, Info_bin/binary>>;
encode_m_educate_reply_invite_admissions_toc(_) -> 
	<<>>.

decode_m_educate_reply_invite_admissions_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_SubBinSizeinfo:32, SubBininfo/binary>> = Bin1,
	Info = decode_p_educate_role_info(SubBininfo),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_educate_reply_invite_admissions_toc, Succ,common_tool:to_list(Reason),Info};

decode_m_educate_reply_invite_admissions_toc(_) ->
	undefined.
encode_m_educate_sworn_mentoring_tos(Record) when is_record(Record, m_educate_sworn_mentoring_tos) ->
	#m_educate_sworn_mentoring_tos{roleid=Roleid} = Record,
	case Roleid =:= undefined of
		true ->
				RoleidFinal = 0;
		false ->
			RoleidFinal = Roleid
	end,

	<<RoleidFinal:32/signed>>;
encode_m_educate_sworn_mentoring_tos(_) -> 
	<<>>.

decode_m_educate_sworn_mentoring_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Roleid:32/signed>> = Bin0,

	{m_educate_sworn_mentoring_tos, Roleid};

decode_m_educate_sworn_mentoring_tos(_) ->
	undefined.
encode_m_educate_sworn_mentoring_toc(Record) when is_record(Record, m_educate_sworn_mentoring_toc) ->
	#m_educate_sworn_mentoring_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_educate_sworn_mentoring_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_educate_sworn_mentoring_toc(_) -> 
	<<>>.

decode_m_educate_sworn_mentoring_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_educate_sworn_mentoring_toc, Succ,common_tool:to_list(Reason)};

decode_m_educate_sworn_mentoring_toc(_) ->
	undefined.
encode_m_educate_filter_student_tos(Record) when is_record(Record, m_educate_filter_student_tos) ->
	#m_educate_filter_student_tos{} = Record,

	<<>>;
encode_m_educate_filter_student_tos(_) -> 
	<<>>.

decode_m_educate_filter_student_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_educate_filter_student_tos};

decode_m_educate_filter_student_tos(_) ->
	undefined.
encode_m_educate_filter_student_toc(Record) when is_record(Record, m_educate_filter_student_toc) ->
	#m_educate_filter_student_toc{roles=Roles} = Record,
	case Roles =:= undefined of
		true ->
			RolesFinal = [];
		false ->
			RolesFinal = Roles
	end,
	Roles_bin = encode_p_educate_role_infos(RolesFinal, <<>>),
	SizeRolesFinal = erlang:length(RolesFinal),
	BinLen_roles = erlang:byte_size(Roles_bin),

	<<SizeRolesFinal:16, BinLen_roles:32, Roles_bin/binary>>;
encode_m_educate_filter_student_toc(_) -> 
	<<>>.

decode_m_educate_filter_student_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizeroles:16, _BinLenroles:32, SubBinroles/binary>> = Bin0,
	Roles = lists:reverse(decode_p_educate_role_infos(SubBinroles, [])),

	{m_educate_filter_student_toc, Roles};

decode_m_educate_filter_student_toc(_) ->
	undefined.
encode_m_educate_filter_teacher_tos(Record) when is_record(Record, m_educate_filter_teacher_tos) ->
	#m_educate_filter_teacher_tos{} = Record,

	<<>>;
encode_m_educate_filter_teacher_tos(_) -> 
	<<>>.

decode_m_educate_filter_teacher_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_educate_filter_teacher_tos};

decode_m_educate_filter_teacher_tos(_) ->
	undefined.
encode_m_educate_filter_teacher_toc(Record) when is_record(Record, m_educate_filter_teacher_toc) ->
	#m_educate_filter_teacher_toc{roles=Roles} = Record,
	case Roles =:= undefined of
		true ->
			RolesFinal = [];
		false ->
			RolesFinal = Roles
	end,
	Roles_bin = encode_p_educate_role_infos(RolesFinal, <<>>),
	SizeRolesFinal = erlang:length(RolesFinal),
	BinLen_roles = erlang:byte_size(Roles_bin),

	<<SizeRolesFinal:16, BinLen_roles:32, Roles_bin/binary>>;
encode_m_educate_filter_teacher_toc(_) -> 
	<<>>.

decode_m_educate_filter_teacher_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizeroles:16, _BinLenroles:32, SubBinroles/binary>> = Bin0,
	Roles = lists:reverse(decode_p_educate_role_infos(SubBinroles, [])),

	{m_educate_filter_teacher_toc, Roles};

decode_m_educate_filter_teacher_toc(_) ->
	undefined.
encode_m_educate_get_expel_moral_value_tos(Record) when is_record(Record, m_educate_get_expel_moral_value_tos) ->
	#m_educate_get_expel_moral_value_tos{roleid=Roleid} = Record,
	case Roleid =:= undefined of
		true ->
				RoleidFinal = undefined,
				exit({required_field_not_assigned, m_educate_get_expel_moral_value_tos, roleid});
		false ->
			RoleidFinal = Roleid
	end,

	<<RoleidFinal:32/signed>>;
encode_m_educate_get_expel_moral_value_tos(_) -> 
	<<>>.

decode_m_educate_get_expel_moral_value_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Roleid:32/signed>> = Bin0,

	{m_educate_get_expel_moral_value_tos, Roleid};

decode_m_educate_get_expel_moral_value_tos(_) ->
	undefined.
encode_m_educate_get_expel_moral_value_toc(Record) when is_record(Record, m_educate_get_expel_moral_value_toc) ->
	#m_educate_get_expel_moral_value_toc{succ=Succ,roleid=Roleid,reason=Reason,value=Value,name=Name} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_educate_get_expel_moral_value_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Roleid =:= undefined of
		true ->
				RoleidFinal = undefined,
				exit({required_field_not_assigned, m_educate_get_expel_moral_value_toc, roleid});
		false ->
			RoleidFinal = Roleid
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Value =:= undefined of
		true ->
				ValueFinal = 0;
		false ->
			ValueFinal = Value
	end,
	case Name =:= undefined of
		true ->
				NameFinal = <<>>;
		false ->
			NameFinal = Name
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Name2 = common_tool:to_binary(NameFinal),
	NameLen = erlang:byte_size(Name2),

	<<SuccFinal:8,RoleidFinal:32/signed,ReasonLen:16, Reason2/binary,ValueFinal:32/signed,NameLen:16, Name2/binary>>;
encode_m_educate_get_expel_moral_value_toc(_) -> 
	<<>>.

decode_m_educate_get_expel_moral_value_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,Roleid:32/signed,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Value:32/signed,NameLen:16, Bin2/binary>> = Bin1,
	<<Name:NameLen/binary>> = Bin2,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_educate_get_expel_moral_value_toc, Succ,Roleid,common_tool:to_list(Reason),Value,common_tool:to_list(Name)};

decode_m_educate_get_expel_moral_value_toc(_) ->
	undefined.
encode_m_educate_get_dropout_moral_value_tos(Record) when is_record(Record, m_educate_get_dropout_moral_value_tos) ->
	#m_educate_get_dropout_moral_value_tos{} = Record,

	<<>>;
encode_m_educate_get_dropout_moral_value_tos(_) -> 
	<<>>.

decode_m_educate_get_dropout_moral_value_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_educate_get_dropout_moral_value_tos};

decode_m_educate_get_dropout_moral_value_tos(_) ->
	undefined.
encode_m_educate_get_dropout_moral_value_toc(Record) when is_record(Record, m_educate_get_dropout_moral_value_toc) ->
	#m_educate_get_dropout_moral_value_toc{succ=Succ,reason=Reason,value=Value} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_educate_get_dropout_moral_value_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Value =:= undefined of
		true ->
				ValueFinal = 0;
		false ->
			ValueFinal = Value
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,ValueFinal:32/signed>>;
encode_m_educate_get_dropout_moral_value_toc(_) -> 
	<<>>.

decode_m_educate_get_dropout_moral_value_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Value:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_educate_get_dropout_moral_value_toc, Succ,common_tool:to_list(Reason),Value};

decode_m_educate_get_dropout_moral_value_toc(_) ->
	undefined.
encode_m_educate_expel_tos(Record) when is_record(Record, m_educate_expel_tos) ->
	#m_educate_expel_tos{roleid=Roleid} = Record,
	case Roleid =:= undefined of
		true ->
				RoleidFinal = undefined,
				exit({required_field_not_assigned, m_educate_expel_tos, roleid});
		false ->
			RoleidFinal = Roleid
	end,

	<<RoleidFinal:32/signed>>;
encode_m_educate_expel_tos(_) -> 
	<<>>.

decode_m_educate_expel_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Roleid:32/signed>> = Bin0,

	{m_educate_expel_tos, Roleid};

decode_m_educate_expel_tos(_) ->
	undefined.
encode_m_educate_expel_toc(Record) when is_record(Record, m_educate_expel_toc) ->
	#m_educate_expel_toc{succ=Succ,roleid=Roleid,info=Info,reason=Reason,is_teacher=Is_teacher} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_educate_expel_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Roleid =:= undefined of
		true ->
				RoleidFinal = 0;
		false ->
			RoleidFinal = Roleid
	end,
	case Info =:= undefined of
		true ->
				InfoFinal = 0;
		false ->
			InfoFinal = Info
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Is_teacher =:= undefined of
		true ->
				Is_teacherFinal = 1;
		false ->
			case Is_teacher of
				true ->
					Is_teacherFinal = 1;
				false ->
					Is_teacherFinal = 0
			end
	end,
	Info_bin = encode_p_educate_role_info(InfoFinal),
	BinLen_info = erlang:byte_size(Info_bin),
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,RoleidFinal:32/signed,BinLen_info:32, Info_bin/binary,ReasonLen:16, Reason2/binary,Is_teacherFinal:8>>;
encode_m_educate_expel_toc(_) -> 
	<<>>.

decode_m_educate_expel_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,Roleid:32/signed,SubBinSizeinfo:32, Bin1/binary>> = Bin0,
	<<SubBininfo:SubBinSizeinfo/binary, Bin2/binary>> = Bin1,
	Info = decode_p_educate_role_info(SubBininfo),
	<<ReasonLen:16, Bin3/binary>> = Bin2,
	<<Reason:ReasonLen/binary,Is_teacherTmp:8>> = Bin3,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Is_teacherTmp of 
	1 -> 
		Is_teacher = true;
	_ ->
		Is_teacher = false
end,

	{m_educate_expel_toc, Succ,Roleid,Info,common_tool:to_list(Reason),Is_teacher};

decode_m_educate_expel_toc(_) ->
	undefined.
encode_m_educate_dropout_tos(Record) when is_record(Record, m_educate_dropout_tos) ->
	#m_educate_dropout_tos{} = Record,

	<<>>;
encode_m_educate_dropout_tos(_) -> 
	<<>>.

decode_m_educate_dropout_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_educate_dropout_tos};

decode_m_educate_dropout_tos(_) ->
	undefined.
encode_m_educate_dropout_toc(Record) when is_record(Record, m_educate_dropout_toc) ->
	#m_educate_dropout_toc{succ=Succ,roleid=Roleid,info=Info,reason=Reason,is_teacher=Is_teacher} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_educate_dropout_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Roleid =:= undefined of
		true ->
				RoleidFinal = 0;
		false ->
			RoleidFinal = Roleid
	end,
	case Info =:= undefined of
		true ->
				InfoFinal = 0;
		false ->
			InfoFinal = Info
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Is_teacher =:= undefined of
		true ->
				Is_teacherFinal = 1;
		false ->
			case Is_teacher of
				true ->
					Is_teacherFinal = 1;
				false ->
					Is_teacherFinal = 0
			end
	end,
	Info_bin = encode_p_educate_role_info(InfoFinal),
	BinLen_info = erlang:byte_size(Info_bin),
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,RoleidFinal:32/signed,BinLen_info:32, Info_bin/binary,ReasonLen:16, Reason2/binary,Is_teacherFinal:8>>;
encode_m_educate_dropout_toc(_) -> 
	<<>>.

decode_m_educate_dropout_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,Roleid:32/signed,SubBinSizeinfo:32, Bin1/binary>> = Bin0,
	<<SubBininfo:SubBinSizeinfo/binary, Bin2/binary>> = Bin1,
	Info = decode_p_educate_role_info(SubBininfo),
	<<ReasonLen:16, Bin3/binary>> = Bin2,
	<<Reason:ReasonLen/binary,Is_teacherTmp:8>> = Bin3,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Is_teacherTmp of 
	1 -> 
		Is_teacher = true;
	_ ->
		Is_teacher = false
end,

	{m_educate_dropout_toc, Succ,Roleid,Info,common_tool:to_list(Reason),Is_teacher};

decode_m_educate_dropout_toc(_) ->
	undefined.
encode_m_educate_graduate_to_teacher_toc(Record) when is_record(Record, m_educate_graduate_to_teacher_toc) ->
	#m_educate_graduate_to_teacher_toc{address=Address} = Record,
	case Address =:= undefined of
		true ->
				AddressFinal = undefined,
				exit({required_field_not_assigned, m_educate_graduate_to_teacher_toc, address});
		false ->
			AddressFinal = Address
	end,
	Address2 = common_tool:to_binary(AddressFinal),
	AddressLen = erlang:byte_size(Address2),

	<<AddressLen:16, Address2/binary>>;
encode_m_educate_graduate_to_teacher_toc(_) -> 
	<<>>.

decode_m_educate_graduate_to_teacher_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<AddressLen:16, Bin1/binary>> = Bin0,
	<<Address:AddressLen/binary>> = Bin1,

	{m_educate_graduate_to_teacher_toc, common_tool:to_list(Address)};

decode_m_educate_graduate_to_teacher_toc(_) ->
	undefined.
encode_m_educate_graduate_to_student_toc(Record) when is_record(Record, m_educate_graduate_to_student_toc) ->
	#m_educate_graduate_to_student_toc{address=Address} = Record,
	case Address =:= undefined of
		true ->
				AddressFinal = undefined,
				exit({required_field_not_assigned, m_educate_graduate_to_student_toc, address});
		false ->
			AddressFinal = Address
	end,
	Address2 = common_tool:to_binary(AddressFinal),
	AddressLen = erlang:byte_size(Address2),

	<<AddressLen:16, Address2/binary>>;
encode_m_educate_graduate_to_student_toc(_) -> 
	<<>>.

decode_m_educate_graduate_to_student_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<AddressLen:16, Bin1/binary>> = Bin0,
	<<Address:AddressLen/binary>> = Bin1,

	{m_educate_graduate_to_student_toc, common_tool:to_list(Address)};

decode_m_educate_graduate_to_student_toc(_) ->
	undefined.
encode_m_educate_get_clan_info_tos(Record) when is_record(Record, m_educate_get_clan_info_tos) ->
	#m_educate_get_clan_info_tos{} = Record,

	<<>>;
encode_m_educate_get_clan_info_tos(_) -> 
	<<>>.

decode_m_educate_get_clan_info_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_educate_get_clan_info_tos};

decode_m_educate_get_clan_info_tos(_) ->
	undefined.
encode_m_educate_get_clan_info_toc(Record) when is_record(Record, m_educate_get_clan_info_toc) ->
	#m_educate_get_clan_info_toc{clans=Clans} = Record,
	case Clans =:= undefined of
		true ->
			ClansFinal = [];
		false ->
			ClansFinal = Clans
	end,
	Clans_bin = encode_p_educate_role_infos(ClansFinal, <<>>),
	SizeClansFinal = erlang:length(ClansFinal),
	BinLen_clans = erlang:byte_size(Clans_bin),

	<<SizeClansFinal:16, BinLen_clans:32, Clans_bin/binary>>;
encode_m_educate_get_clan_info_toc(_) -> 
	<<>>.

decode_m_educate_get_clan_info_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizeclans:16, _BinLenclans:32, SubBinclans/binary>> = Bin0,
	Clans = lists:reverse(decode_p_educate_role_infos(SubBinclans, [])),

	{m_educate_get_clan_info_toc, Clans};

decode_m_educate_get_clan_info_toc(_) ->
	undefined.
encode_m_educate_get_students_info_tos(Record) when is_record(Record, m_educate_get_students_info_tos) ->
	#m_educate_get_students_info_tos{} = Record,

	<<>>;
encode_m_educate_get_students_info_tos(_) -> 
	<<>>.

decode_m_educate_get_students_info_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_educate_get_students_info_tos};

decode_m_educate_get_students_info_tos(_) ->
	undefined.
encode_m_educate_get_students_info_toc(Record) when is_record(Record, m_educate_get_students_info_toc) ->
	#m_educate_get_students_info_toc{students=Students} = Record,
	case Students =:= undefined of
		true ->
			StudentsFinal = [];
		false ->
			StudentsFinal = Students
	end,
	Students_bin = encode_p_educate_role_infos(StudentsFinal, <<>>),
	SizeStudentsFinal = erlang:length(StudentsFinal),
	BinLen_students = erlang:byte_size(Students_bin),

	<<SizeStudentsFinal:16, BinLen_students:32, Students_bin/binary>>;
encode_m_educate_get_students_info_toc(_) -> 
	<<>>.

decode_m_educate_get_students_info_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizestudents:16, _BinLenstudents:32, SubBinstudents/binary>> = Bin0,
	Students = lists:reverse(decode_p_educate_role_infos(SubBinstudents, [])),

	{m_educate_get_students_info_toc, Students};

decode_m_educate_get_students_info_toc(_) ->
	undefined.
encode_m_educate_get_info_tos(Record) when is_record(Record, m_educate_get_info_tos) ->
	#m_educate_get_info_tos{} = Record,

	<<>>;
encode_m_educate_get_info_tos(_) -> 
	<<>>.

decode_m_educate_get_info_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_educate_get_info_tos};

decode_m_educate_get_info_tos(_) ->
	undefined.
encode_m_educate_get_info_toc(Record) when is_record(Record, m_educate_get_info_toc) ->
	#m_educate_get_info_toc{roleinfo=Roleinfo,reason=Reason} = Record,
	case Roleinfo =:= undefined of
		true ->
				RoleinfoFinal = 0;
		false ->
			RoleinfoFinal = Roleinfo
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Roleinfo_bin = encode_p_educate_role_info(RoleinfoFinal),
	BinLen_roleinfo = erlang:byte_size(Roleinfo_bin),
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<BinLen_roleinfo:32, Roleinfo_bin/binary,ReasonLen:16, Reason2/binary>>;
encode_m_educate_get_info_toc(_) -> 
	<<>>.

decode_m_educate_get_info_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SubBinSizeroleinfo:32, Bin1/binary>> = Bin0,
	<<SubBinroleinfo:SubBinSizeroleinfo/binary, Bin2/binary>> = Bin1,
	Roleinfo = decode_p_educate_role_info(SubBinroleinfo),
	<<ReasonLen:16, Bin3/binary>> = Bin2,
	<<Reason:ReasonLen/binary>> = Bin3,

	{m_educate_get_info_toc, Roleinfo,common_tool:to_list(Reason)};

decode_m_educate_get_info_toc(_) ->
	undefined.
encode_m_educate_moral_value_to_exp_tos(Record) when is_record(Record, m_educate_moral_value_to_exp_tos) ->
	#m_educate_moral_value_to_exp_tos{moral_value=Moral_value} = Record,
	case Moral_value =:= undefined of
		true ->
				Moral_valueFinal = undefined,
				exit({required_field_not_assigned, m_educate_moral_value_to_exp_tos, moral_value});
		false ->
			Moral_valueFinal = Moral_value
	end,

	<<Moral_valueFinal:32/signed>>;
encode_m_educate_moral_value_to_exp_tos(_) -> 
	<<>>.

decode_m_educate_moral_value_to_exp_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Moral_value:32/signed>> = Bin0,

	{m_educate_moral_value_to_exp_tos, Moral_value};

decode_m_educate_moral_value_to_exp_tos(_) ->
	undefined.
encode_m_educate_moral_value_to_exp_toc(Record) when is_record(Record, m_educate_moral_value_to_exp_toc) ->
	#m_educate_moral_value_to_exp_toc{succ=Succ,info=Info,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_educate_moral_value_to_exp_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Info =:= undefined of
		true ->
				InfoFinal = 0;
		false ->
			InfoFinal = Info
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Info_bin = encode_p_educate_role_info(InfoFinal),
	BinLen_info = erlang:byte_size(Info_bin),
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,BinLen_info:32, Info_bin/binary,ReasonLen:16, Reason2/binary>>;
encode_m_educate_moral_value_to_exp_toc(_) -> 
	<<>>.

decode_m_educate_moral_value_to_exp_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,SubBinSizeinfo:32, Bin1/binary>> = Bin0,
	<<SubBininfo:SubBinSizeinfo/binary, Bin2/binary>> = Bin1,
	Info = decode_p_educate_role_info(SubBininfo),
	<<ReasonLen:16, Bin3/binary>> = Bin2,
	<<Reason:ReasonLen/binary>> = Bin3,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_educate_moral_value_to_exp_toc, Succ,Info,common_tool:to_list(Reason)};

decode_m_educate_moral_value_to_exp_toc(_) ->
	undefined.
encode_m_educate_moral_value_to_pkpoint_tos(Record) when is_record(Record, m_educate_moral_value_to_pkpoint_tos) ->
	#m_educate_moral_value_to_pkpoint_tos{moral_value=Moral_value} = Record,
	case Moral_value =:= undefined of
		true ->
				Moral_valueFinal = undefined,
				exit({required_field_not_assigned, m_educate_moral_value_to_pkpoint_tos, moral_value});
		false ->
			Moral_valueFinal = Moral_value
	end,

	<<Moral_valueFinal:32/signed>>;
encode_m_educate_moral_value_to_pkpoint_tos(_) -> 
	<<>>.

decode_m_educate_moral_value_to_pkpoint_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Moral_value:32/signed>> = Bin0,

	{m_educate_moral_value_to_pkpoint_tos, Moral_value};

decode_m_educate_moral_value_to_pkpoint_tos(_) ->
	undefined.
encode_m_educate_moral_value_to_pkpoint_toc(Record) when is_record(Record, m_educate_moral_value_to_pkpoint_toc) ->
	#m_educate_moral_value_to_pkpoint_toc{succ=Succ,moral_value=Moral_value,reason=Reason,pk_point=Pk_point} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Moral_value =:= undefined of
		true ->
				Moral_valueFinal = 0;
		false ->
			Moral_valueFinal = Moral_value
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Pk_point =:= undefined of
		true ->
				Pk_pointFinal = 0;
		false ->
			Pk_pointFinal = Pk_point
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,Moral_valueFinal:32/signed,ReasonLen:16, Reason2/binary,Pk_pointFinal:32/signed>>;
encode_m_educate_moral_value_to_pkpoint_toc(_) -> 
	<<>>.

decode_m_educate_moral_value_to_pkpoint_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,Moral_value:32/signed,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Pk_point:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_educate_moral_value_to_pkpoint_toc, Succ,Moral_value,common_tool:to_list(Reason),Pk_point};

decode_m_educate_moral_value_to_pkpoint_toc(_) ->
	undefined.
encode_m_educate_upgrade_tos(Record) when is_record(Record, m_educate_upgrade_tos) ->
	#m_educate_upgrade_tos{} = Record,

	<<>>;
encode_m_educate_upgrade_tos(_) -> 
	<<>>.

decode_m_educate_upgrade_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_educate_upgrade_tos};

decode_m_educate_upgrade_tos(_) ->
	undefined.
encode_m_educate_upgrade_toc(Record) when is_record(Record, m_educate_upgrade_toc) ->
	#m_educate_upgrade_toc{succ=Succ,student_num=Student_num,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_educate_upgrade_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Student_num =:= undefined of
		true ->
				Student_numFinal = 0;
		false ->
			Student_numFinal = Student_num
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,Student_numFinal:32/signed,ReasonLen:16, Reason2/binary>>;
encode_m_educate_upgrade_toc(_) -> 
	<<>>.

decode_m_educate_upgrade_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,Student_num:32/signed,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_educate_upgrade_toc, Succ,Student_num,common_tool:to_list(Reason)};

decode_m_educate_upgrade_toc(_) ->
	undefined.
encode_m_educate_tip_captain_toc(Record) when is_record(Record, m_educate_tip_captain_toc) ->
	#m_educate_tip_captain_toc{tip=Tip} = Record,
	case Tip =:= undefined of
		true ->
				TipFinal = undefined,
				exit({required_field_not_assigned, m_educate_tip_captain_toc, tip});
		false ->
			TipFinal = Tip
	end,
	Tip2 = common_tool:to_binary(TipFinal),
	TipLen = erlang:byte_size(Tip2),

	<<TipLen:16, Tip2/binary>>;
encode_m_educate_tip_captain_toc(_) -> 
	<<>>.

decode_m_educate_tip_captain_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<TipLen:16, Bin1/binary>> = Bin0,
	<<Tip:TipLen/binary>> = Bin1,

	{m_educate_tip_captain_toc, common_tool:to_list(Tip)};

decode_m_educate_tip_captain_toc(_) ->
	undefined.
encode_m_educate_release_tos(Record) when is_record(Record, m_educate_release_tos) ->
	#m_educate_release_tos{opt=Opt,msg=Msg} = Record,
	case Opt =:= undefined of
		true ->
				OptFinal = undefined,
				exit({required_field_not_assigned, m_educate_release_tos, opt});
		false ->
			OptFinal = Opt
	end,
	case Msg =:= undefined of
		true ->
				MsgFinal = undefined,
				exit({required_field_not_assigned, m_educate_release_tos, msg});
		false ->
			MsgFinal = Msg
	end,
	Msg2 = common_tool:to_binary(MsgFinal),
	MsgLen = erlang:byte_size(Msg2),

	<<OptFinal:32/signed,MsgLen:16, Msg2/binary>>;
encode_m_educate_release_tos(_) -> 
	<<>>.

decode_m_educate_release_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Opt:32/signed,MsgLen:16, Bin1/binary>> = Bin0,
	<<Msg:MsgLen/binary>> = Bin1,

	{m_educate_release_tos, Opt,common_tool:to_list(Msg)};

decode_m_educate_release_tos(_) ->
	undefined.
encode_m_educate_release_toc(Record) when is_record(Record, m_educate_release_toc) ->
	#m_educate_release_toc{succ=Succ,info=Info,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_educate_release_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Info =:= undefined of
		true ->
				InfoFinal = 0;
		false ->
			InfoFinal = Info
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Info_bin = encode_p_educate_role_info(InfoFinal),
	BinLen_info = erlang:byte_size(Info_bin),
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,BinLen_info:32, Info_bin/binary,ReasonLen:16, Reason2/binary>>;
encode_m_educate_release_toc(_) -> 
	<<>>.

decode_m_educate_release_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,SubBinSizeinfo:32, Bin1/binary>> = Bin0,
	<<SubBininfo:SubBinSizeinfo/binary, Bin2/binary>> = Bin1,
	Info = decode_p_educate_role_info(SubBininfo),
	<<ReasonLen:16, Bin3/binary>> = Bin2,
	<<Reason:ReasonLen/binary>> = Bin3,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_educate_release_toc, Succ,Info,common_tool:to_list(Reason)};

decode_m_educate_release_toc(_) ->
	undefined.
encode_p_educate_role_info(Record) when is_record(Record, p_educate_role_info) ->
	#p_educate_role_info{roleid=Roleid,level=Level,sex=Sex,title=Title,name=Name,moral_values=Moral_values,student_num=Student_num,student_max_num=Student_max_num,exp_gifts1=Exp_gifts1,exp_grfts2=Exp_grfts2,teacher=Teacher,teacher_name=Teacher_name,exp_devote1=Exp_devote1,exp_devote2=Exp_devote2,online=Online,apprentice_level=Apprentice_level,rel_admissions=Rel_admissions,rel_adm_msg=Rel_adm_msg,rel_adm_time=Rel_adm_time,rel_apprentice=Rel_apprentice,rel_app_msg=Rel_app_msg,rel_app_time=Rel_app_time,relation=Relation} = Record,
	case Roleid =:= undefined of
		true ->
				RoleidFinal = undefined,
				exit({required_field_not_assigned, p_educate_role_info, roleid});
		false ->
			RoleidFinal = Roleid
	end,
	case Level =:= undefined of
		true ->
				LevelFinal = undefined,
				exit({required_field_not_assigned, p_educate_role_info, level});
		false ->
			LevelFinal = Level
	end,
	case Sex =:= undefined of
		true ->
				SexFinal = undefined,
				exit({required_field_not_assigned, p_educate_role_info, sex});
		false ->
			SexFinal = Sex
	end,
	case Title =:= undefined of
		true ->
				TitleFinal = undefined,
				exit({required_field_not_assigned, p_educate_role_info, title});
		false ->
			TitleFinal = Title
	end,
	case Name =:= undefined of
		true ->
				NameFinal = <<>>;
		false ->
			NameFinal = Name
	end,
	case Moral_values =:= undefined of
		true ->
				Moral_valuesFinal = 0;
		false ->
			Moral_valuesFinal = Moral_values
	end,
	case Student_num =:= undefined of
		true ->
				Student_numFinal = 0;
		false ->
			Student_numFinal = Student_num
	end,
	case Student_max_num =:= undefined of
		true ->
				Student_max_numFinal = 0;
		false ->
			Student_max_numFinal = Student_max_num
	end,
	case Exp_gifts1 =:= undefined of
		true ->
				Exp_gifts1Final = 0;
		false ->
			Exp_gifts1Final = Exp_gifts1
	end,
	case Exp_grfts2 =:= undefined of
		true ->
				Exp_grfts2Final = 0;
		false ->
			Exp_grfts2Final = Exp_grfts2
	end,
	case Teacher =:= undefined of
		true ->
				TeacherFinal = 0;
		false ->
			TeacherFinal = Teacher
	end,
	case Teacher_name =:= undefined of
		true ->
				Teacher_nameFinal = <<>>;
		false ->
			Teacher_nameFinal = Teacher_name
	end,
	case Exp_devote1 =:= undefined of
		true ->
				Exp_devote1Final = 0;
		false ->
			Exp_devote1Final = Exp_devote1
	end,
	case Exp_devote2 =:= undefined of
		true ->
				Exp_devote2Final = 0;
		false ->
			Exp_devote2Final = Exp_devote2
	end,
	case Online =:= undefined of
		true ->
				OnlineFinal = 1;
		false ->
			case Online of
				true ->
					OnlineFinal = 1;
				false ->
					OnlineFinal = 0
			end
	end,
	case Apprentice_level =:= undefined of
		true ->
				Apprentice_levelFinal = 0;
		false ->
			Apprentice_levelFinal = Apprentice_level
	end,
	case Rel_admissions =:= undefined of
		true ->
				Rel_admissionsFinal = 1;
		false ->
			case Rel_admissions of
				true ->
					Rel_admissionsFinal = 1;
				false ->
					Rel_admissionsFinal = 0
			end
	end,
	case Rel_adm_msg =:= undefined of
		true ->
				Rel_adm_msgFinal = <<>>;
		false ->
			Rel_adm_msgFinal = Rel_adm_msg
	end,
	case Rel_adm_time =:= undefined of
		true ->
				Rel_adm_timeFinal = 0;
		false ->
			Rel_adm_timeFinal = Rel_adm_time
	end,
	case Rel_apprentice =:= undefined of
		true ->
				Rel_apprenticeFinal = 1;
		false ->
			case Rel_apprentice of
				true ->
					Rel_apprenticeFinal = 1;
				false ->
					Rel_apprenticeFinal = 0
			end
	end,
	case Rel_app_msg =:= undefined of
		true ->
				Rel_app_msgFinal = <<>>;
		false ->
			Rel_app_msgFinal = Rel_app_msg
	end,
	case Rel_app_time =:= undefined of
		true ->
				Rel_app_timeFinal = 0;
		false ->
			Rel_app_timeFinal = Rel_app_time
	end,
	case Relation =:= undefined of
		true ->
				RelationFinal = 0;
		false ->
			RelationFinal = Relation
	end,
	Name2 = common_tool:to_binary(NameFinal),
	NameLen = erlang:byte_size(Name2),
	Teacher_name2 = common_tool:to_binary(Teacher_nameFinal),
	Teacher_nameLen = erlang:byte_size(Teacher_name2),
	Rel_adm_msg2 = common_tool:to_binary(Rel_adm_msgFinal),
	Rel_adm_msgLen = erlang:byte_size(Rel_adm_msg2),
	Rel_app_msg2 = common_tool:to_binary(Rel_app_msgFinal),
	Rel_app_msgLen = erlang:byte_size(Rel_app_msg2),

	<<RoleidFinal:32/signed,LevelFinal:32/signed,SexFinal:32/signed,TitleFinal:32/signed,NameLen:16, Name2/binary,Moral_valuesFinal:32/signed,Student_numFinal:32/signed,Student_max_numFinal:32/signed,Exp_gifts1Final:32/signed,Exp_grfts2Final:32/signed,TeacherFinal:32/signed,Teacher_nameLen:16, Teacher_name2/binary,Exp_devote1Final:32/signed,Exp_devote2Final:32/signed,OnlineFinal:8,Apprentice_levelFinal:32/signed,Rel_admissionsFinal:8,Rel_adm_msgLen:16, Rel_adm_msg2/binary,Rel_adm_timeFinal:32/signed,Rel_apprenticeFinal:8,Rel_app_msgLen:16, Rel_app_msg2/binary,Rel_app_timeFinal:32/signed,RelationFinal:32/signed>>;
encode_p_educate_role_info(_) -> 
	<<>>.

decode_p_educate_role_info(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Roleid:32/signed,Level:32/signed,Sex:32/signed,Title:32/signed,NameLen:16, Bin1/binary>> = Bin0,
	<<Name:NameLen/binary,Moral_values:32/signed,Student_num:32/signed,Student_max_num:32/signed,Exp_gifts1:32/signed,Exp_grfts2:32/signed,Teacher:32/signed,Teacher_nameLen:16, Bin2/binary>> = Bin1,
	<<Teacher_name:Teacher_nameLen/binary,Exp_devote1:32/signed,Exp_devote2:32/signed,OnlineTmp:8,Apprentice_level:32/signed,Rel_admissionsTmp:8,Rel_adm_msgLen:16, Bin3/binary>> = Bin2,
	<<Rel_adm_msg:Rel_adm_msgLen/binary,Rel_adm_time:32/signed,Rel_apprenticeTmp:8,Rel_app_msgLen:16, Bin4/binary>> = Bin3,
	<<Rel_app_msg:Rel_app_msgLen/binary,Rel_app_time:32/signed,Relation:32/signed>> = Bin4,
case OnlineTmp of 
	1 -> 
		Online = true;
	_ ->
		Online = false
end,
case Rel_admissionsTmp of 
	1 -> 
		Rel_admissions = true;
	_ ->
		Rel_admissions = false
end,
case Rel_apprenticeTmp of 
	1 -> 
		Rel_apprentice = true;
	_ ->
		Rel_apprentice = false
end,

	{p_educate_role_info, Roleid,Level,Sex,Title,common_tool:to_list(Name),Moral_values,Student_num,Student_max_num,Exp_gifts1,Exp_grfts2,Teacher,common_tool:to_list(Teacher_name),Exp_devote1,Exp_devote2,Online,Apprentice_level,Rel_admissions,common_tool:to_list(Rel_adm_msg),Rel_adm_time,Rel_apprentice,common_tool:to_list(Rel_app_msg),Rel_app_time,Relation};

decode_p_educate_role_info(_) ->
	undefined.
encode_m_educate_call_helper_toc(Record) when is_record(Record, m_educate_call_helper_toc) ->
	#m_educate_call_helper_toc{message=Message,role_id=Role_id} = Record,
	case Message =:= undefined of
		true ->
				MessageFinal = undefined,
				exit({required_field_not_assigned, m_educate_call_helper_toc, message});
		false ->
			MessageFinal = Message
	end,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, m_educate_call_helper_toc, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	Message2 = common_tool:to_binary(MessageFinal),
	MessageLen = erlang:byte_size(Message2),

	<<MessageLen:16, Message2/binary,Role_idFinal:32/signed>>;
encode_m_educate_call_helper_toc(_) -> 
	<<>>.

decode_m_educate_call_helper_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<MessageLen:16, Bin1/binary>> = Bin0,
	<<Message:MessageLen/binary,Role_id:32/signed>> = Bin1,

	{m_educate_call_helper_toc, common_tool:to_list(Message),Role_id};

decode_m_educate_call_helper_toc(_) ->
	undefined.
encode_m_educate_agree_help_tos(Record) when is_record(Record, m_educate_agree_help_tos) ->
	#m_educate_agree_help_tos{role_id=Role_id} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, m_educate_agree_help_tos, role_id});
		false ->
			Role_idFinal = Role_id
	end,

	<<Role_idFinal:32/signed>>;
encode_m_educate_agree_help_tos(_) -> 
	<<>>.

decode_m_educate_agree_help_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed>> = Bin0,

	{m_educate_agree_help_tos, Role_id};

decode_m_educate_agree_help_tos(_) ->
	undefined.
encode_m_educate_agree_help_toc(Record) when is_record(Record, m_educate_agree_help_toc) ->
	#m_educate_agree_help_toc{again=Again,message=Message,role_id=Role_id,reason=Reason} = Record,
	case Again =:= undefined of
		true ->
				AgainFinal = 0;
		false ->
		case Again of
			true ->
				AgainFinal = 1;
			false ->
				AgainFinal = 0
		end
	end,
	case Message =:= undefined of
		true ->
				MessageFinal = <<>>;
		false ->
			MessageFinal = Message
	end,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = 0;
		false ->
			Role_idFinal = Role_id
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Message2 = common_tool:to_binary(MessageFinal),
	MessageLen = erlang:byte_size(Message2),
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<AgainFinal:8,MessageLen:16, Message2/binary,Role_idFinal:32/signed,ReasonLen:16, Reason2/binary>>;
encode_m_educate_agree_help_toc(_) -> 
	<<>>.

decode_m_educate_agree_help_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<AgainTmp:8,MessageLen:16, Bin1/binary>> = Bin0,
	<<Message:MessageLen/binary,Role_id:32/signed,ReasonLen:16, Bin2/binary>> = Bin1,
	<<Reason:ReasonLen/binary>> = Bin2,
case AgainTmp of 
	1 -> 
		Again = true;
	_ ->
		Again = false
end,

	{m_educate_agree_help_toc, Again,common_tool:to_list(Message),Role_id,common_tool:to_list(Reason)};

decode_m_educate_agree_help_toc(_) ->
	undefined.
encode_m_educate_get_relate_people_tos(Record) when is_record(Record, m_educate_get_relate_people_tos) ->
	#m_educate_get_relate_people_tos{} = Record,

	<<>>;
encode_m_educate_get_relate_people_tos(_) -> 
	<<>>.

decode_m_educate_get_relate_people_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_educate_get_relate_people_tos};

decode_m_educate_get_relate_people_tos(_) ->
	undefined.
encode_m_educate_get_relate_people_toc(Record) when is_record(Record, m_educate_get_relate_people_toc) ->
	#m_educate_get_relate_people_toc{educate_role_info=Educate_role_info} = Record,
	case Educate_role_info =:= undefined of
		true ->
			Educate_role_infoFinal = [];
		false ->
			Educate_role_infoFinal = Educate_role_info
	end,
	Educate_role_info_bin = encode_p_educate_role_infos(Educate_role_infoFinal, <<>>),
	SizeEducate_role_infoFinal = erlang:length(Educate_role_infoFinal),
	BinLen_educate_role_info = erlang:byte_size(Educate_role_info_bin),

	<<SizeEducate_role_infoFinal:16, BinLen_educate_role_info:32, Educate_role_info_bin/binary>>;
encode_m_educate_get_relate_people_toc(_) -> 
	<<>>.

decode_m_educate_get_relate_people_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizeeducate_role_info:16, _BinLeneducate_role_info:32, SubBineducate_role_info/binary>> = Bin0,
	Educate_role_info = lists:reverse(decode_p_educate_role_infos(SubBineducate_role_info, [])),

	{m_educate_get_relate_people_toc, Educate_role_info};

decode_m_educate_get_relate_people_toc(_) ->
	undefined.
encode_m_message_error_toc(Record) when is_record(Record, m_message_error_toc) ->
	#m_message_error_toc{error_msg=Error_msg,error_no=Error_no} = Record,
	case Error_msg =:= undefined of
		true ->
				Error_msgFinal = undefined,
				exit({required_field_not_assigned, m_message_error_toc, error_msg});
		false ->
			Error_msgFinal = Error_msg
	end,
	case Error_no =:= undefined of
		true ->
				Error_noFinal = undefined,
				exit({required_field_not_assigned, m_message_error_toc, error_no});
		false ->
			Error_noFinal = Error_no
	end,
	Error_msg2 = common_tool:to_binary(Error_msgFinal),
	Error_msgLen = erlang:byte_size(Error_msg2),

	<<Error_msgLen:16, Error_msg2/binary,Error_noFinal:32/signed>>;
encode_m_message_error_toc(_) -> 
	<<>>.

decode_m_message_error_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Error_msgLen:16, Bin1/binary>> = Bin0,
	<<Error_msg:Error_msgLen/binary,Error_no:32/signed>> = Bin1,

	{m_message_error_toc, common_tool:to_list(Error_msg),Error_no};

decode_m_message_error_toc(_) ->
	undefined.
encode_p_bank_sheet(Record) when is_record(Record, p_bank_sheet) ->
	#p_bank_sheet{sheet_id=Sheet_id,roleid=Roleid,price=Price,num=Num,type=Type,time=Time} = Record,
	case Sheet_id =:= undefined of
		true ->
				Sheet_idFinal = undefined,
				exit({required_field_not_assigned, p_bank_sheet, sheet_id});
		false ->
			Sheet_idFinal = Sheet_id
	end,
	case Roleid =:= undefined of
		true ->
				RoleidFinal = undefined,
				exit({required_field_not_assigned, p_bank_sheet, roleid});
		false ->
			RoleidFinal = Roleid
	end,
	case Price =:= undefined of
		true ->
				PriceFinal = undefined,
				exit({required_field_not_assigned, p_bank_sheet, price});
		false ->
			PriceFinal = Price
	end,
	case Num =:= undefined of
		true ->
				NumFinal = undefined,
				exit({required_field_not_assigned, p_bank_sheet, num});
		false ->
			NumFinal = Num
	end,
	case Type =:= undefined of
		true ->
				TypeFinal = undefined,
				exit({required_field_not_assigned, p_bank_sheet, type});
		false ->
		case Type of
			true ->
				TypeFinal = 1;
			false ->
				TypeFinal = 0
		end
	end,
	case Time =:= undefined of
		true ->
				TimeFinal = undefined,
				exit({required_field_not_assigned, p_bank_sheet, time});
		false ->
			TimeFinal = Time
	end,

	<<Sheet_idFinal:32/signed,RoleidFinal:32/signed,PriceFinal:32/signed,NumFinal:32/signed,TypeFinal:8,TimeFinal:32/signed>>;
encode_p_bank_sheet(_) -> 
	<<>>.

decode_p_bank_sheet(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Sheet_id:32/signed,Roleid:32/signed,Price:32/signed,Num:32/signed,TypeTmp:8,Time:32/signed>> = Bin0,
case TypeTmp of 
	1 -> 
		Type = true;
	_ ->
		Type = false
end,

	{p_bank_sheet, Sheet_id,Roleid,Price,Num,Type,Time};

decode_p_bank_sheet(_) ->
	undefined.
encode_p_bank_simple_sheet(Record) when is_record(Record, p_bank_simple_sheet) ->
	#p_bank_simple_sheet{price=Price,num=Num} = Record,
	case Price =:= undefined of
		true ->
				PriceFinal = undefined,
				exit({required_field_not_assigned, p_bank_simple_sheet, price});
		false ->
			PriceFinal = Price
	end,
	case Num =:= undefined of
		true ->
				NumFinal = undefined,
				exit({required_field_not_assigned, p_bank_simple_sheet, num});
		false ->
			NumFinal = Num
	end,

	<<PriceFinal:32/signed,NumFinal:32/signed>>;
encode_p_bank_simple_sheet(_) -> 
	<<>>.

decode_p_bank_simple_sheet(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Price:32/signed,Num:32/signed>> = Bin0,

	{p_bank_simple_sheet, Price,Num};

decode_p_bank_simple_sheet(_) ->
	undefined.
encode_m_bank_init_tos(Record) when is_record(Record, m_bank_init_tos) ->
	#m_bank_init_tos{} = Record,

	<<>>;
encode_m_bank_init_tos(_) -> 
	<<>>.

decode_m_bank_init_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_bank_init_tos};

decode_m_bank_init_tos(_) ->
	undefined.
encode_m_bank_init_toc(Record) when is_record(Record, m_bank_init_toc) ->
	#m_bank_init_toc{succ=Succ,bank_sell=Bank_sell,bank_buy=Bank_buy,self_sell=Self_sell,self_buy=Self_buy,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Bank_sell =:= undefined of
		true ->
			Bank_sellFinal = [];
		false ->
			Bank_sellFinal = Bank_sell
	end,
	case Bank_buy =:= undefined of
		true ->
			Bank_buyFinal = [];
		false ->
			Bank_buyFinal = Bank_buy
	end,
	case Self_sell =:= undefined of
		true ->
			Self_sellFinal = [];
		false ->
			Self_sellFinal = Self_sell
	end,
	case Self_buy =:= undefined of
		true ->
			Self_buyFinal = [];
		false ->
			Self_buyFinal = Self_buy
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Bank_sell_bin = encode_p_bank_simple_sheets(Bank_sellFinal, <<>>),
	SizeBank_sellFinal = erlang:length(Bank_sellFinal),
	BinLen_bank_sell = erlang:byte_size(Bank_sell_bin),
	Bank_buy_bin = encode_p_bank_simple_sheets(Bank_buyFinal, <<>>),
	SizeBank_buyFinal = erlang:length(Bank_buyFinal),
	BinLen_bank_buy = erlang:byte_size(Bank_buy_bin),
	Self_sell_bin = encode_p_bank_sheets(Self_sellFinal, <<>>),
	SizeSelf_sellFinal = erlang:length(Self_sellFinal),
	BinLen_self_sell = erlang:byte_size(Self_sell_bin),
	Self_buy_bin = encode_p_bank_sheets(Self_buyFinal, <<>>),
	SizeSelf_buyFinal = erlang:length(Self_buyFinal),
	BinLen_self_buy = erlang:byte_size(Self_buy_bin),
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,SizeBank_sellFinal:16, BinLen_bank_sell:32, Bank_sell_bin/binary,SizeBank_buyFinal:16, BinLen_bank_buy:32, Bank_buy_bin/binary,SizeSelf_sellFinal:16, BinLen_self_sell:32, Self_sell_bin/binary,SizeSelf_buyFinal:16, BinLen_self_buy:32, Self_buy_bin/binary,ReasonLen:16, Reason2/binary>>;
encode_m_bank_init_toc(_) -> 
	<<>>.

decode_m_bank_init_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,_Sizebank_sell:16, BinLenbank_sell:32, Bin1/binary>> = Bin0,
	<<SubBinbank_sell:BinLenbank_sell/binary, Bin2/binary>> = Bin1, 
	Bank_sell = lists:reverse(decode_p_bank_simple_sheets(SubBinbank_sell, [])),
	<<_Sizebank_buy:16, BinLenbank_buy:32, Bin3/binary>> = Bin2,
	<<SubBinbank_buy:BinLenbank_buy/binary, Bin4/binary>> = Bin3, 
	Bank_buy = lists:reverse(decode_p_bank_simple_sheets(SubBinbank_buy, [])),
	<<_Sizeself_sell:16, BinLenself_sell:32, Bin5/binary>> = Bin4,
	<<SubBinself_sell:BinLenself_sell/binary, Bin6/binary>> = Bin5, 
	Self_sell = lists:reverse(decode_p_bank_sheets(SubBinself_sell, [])),
	<<_Sizeself_buy:16, BinLenself_buy:32, Bin7/binary>> = Bin6,
	<<SubBinself_buy:BinLenself_buy/binary, Bin8/binary>> = Bin7, 
	Self_buy = lists:reverse(decode_p_bank_sheets(SubBinself_buy, [])),
	<<ReasonLen:16, Bin9/binary>> = Bin8,
	<<Reason:ReasonLen/binary>> = Bin9,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_bank_init_toc, Succ,Bank_sell,Bank_buy,Self_sell,Self_buy,common_tool:to_list(Reason)};

decode_m_bank_init_toc(_) ->
	undefined.
encode_m_bank_buy_tos(Record) when is_record(Record, m_bank_buy_tos) ->
	#m_bank_buy_tos{price=Price,num=Num} = Record,
	case Price =:= undefined of
		true ->
				PriceFinal = undefined,
				exit({required_field_not_assigned, m_bank_buy_tos, price});
		false ->
			PriceFinal = Price
	end,
	case Num =:= undefined of
		true ->
				NumFinal = undefined,
				exit({required_field_not_assigned, m_bank_buy_tos, num});
		false ->
			NumFinal = Num
	end,

	<<PriceFinal:32/signed,NumFinal:32/signed>>;
encode_m_bank_buy_tos(_) -> 
	<<>>.

decode_m_bank_buy_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Price:32/signed,Num:32/signed>> = Bin0,

	{m_bank_buy_tos, Price,Num};

decode_m_bank_buy_tos(_) ->
	undefined.
encode_m_bank_buy_toc(Record) when is_record(Record, m_bank_buy_toc) ->
	#m_bank_buy_toc{succ=Succ,reason=Reason,num=Num,price=Price,silver=Silver,gold=Gold,sheet=Sheet} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Num =:= undefined of
		true ->
				NumFinal = 0;
		false ->
			NumFinal = Num
	end,
	case Price =:= undefined of
		true ->
				PriceFinal = 0;
		false ->
			PriceFinal = Price
	end,
	case Silver =:= undefined of
		true ->
				SilverFinal = 0;
		false ->
			SilverFinal = Silver
	end,
	case Gold =:= undefined of
		true ->
				GoldFinal = 0;
		false ->
			GoldFinal = Gold
	end,
	case Sheet =:= undefined of
		true ->
				SheetFinal = 0;
		false ->
			SheetFinal = Sheet
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Sheet_bin = encode_p_bank_sheet(SheetFinal),
	BinLen_sheet = erlang:byte_size(Sheet_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,NumFinal:32/signed,PriceFinal:32/signed,SilverFinal:32/signed,GoldFinal:32/signed,BinLen_sheet:32, Sheet_bin/binary>>;
encode_m_bank_buy_toc(_) -> 
	<<>>.

decode_m_bank_buy_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Num:32/signed,Price:32/signed,Silver:32/signed,Gold:32/signed,_SubBinSizesheet:32, SubBinsheet/binary>> = Bin1,
	Sheet = decode_p_bank_sheet(SubBinsheet),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_bank_buy_toc, Succ,common_tool:to_list(Reason),Num,Price,Silver,Gold,Sheet};

decode_m_bank_buy_toc(_) ->
	undefined.
encode_m_bank_sell_tos(Record) when is_record(Record, m_bank_sell_tos) ->
	#m_bank_sell_tos{price=Price,num=Num} = Record,
	case Price =:= undefined of
		true ->
				PriceFinal = undefined,
				exit({required_field_not_assigned, m_bank_sell_tos, price});
		false ->
			PriceFinal = Price
	end,
	case Num =:= undefined of
		true ->
				NumFinal = undefined,
				exit({required_field_not_assigned, m_bank_sell_tos, num});
		false ->
			NumFinal = Num
	end,

	<<PriceFinal:32/signed,NumFinal:32/signed>>;
encode_m_bank_sell_tos(_) -> 
	<<>>.

decode_m_bank_sell_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Price:32/signed,Num:32/signed>> = Bin0,

	{m_bank_sell_tos, Price,Num};

decode_m_bank_sell_tos(_) ->
	undefined.
encode_m_bank_sell_toc(Record) when is_record(Record, m_bank_sell_toc) ->
	#m_bank_sell_toc{succ=Succ,reason=Reason,num=Num,price=Price,silver=Silver,gold=Gold,sheet=Sheet} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Num =:= undefined of
		true ->
				NumFinal = 0;
		false ->
			NumFinal = Num
	end,
	case Price =:= undefined of
		true ->
				PriceFinal = 0;
		false ->
			PriceFinal = Price
	end,
	case Silver =:= undefined of
		true ->
				SilverFinal = 0;
		false ->
			SilverFinal = Silver
	end,
	case Gold =:= undefined of
		true ->
				GoldFinal = 0;
		false ->
			GoldFinal = Gold
	end,
	case Sheet =:= undefined of
		true ->
				SheetFinal = 0;
		false ->
			SheetFinal = Sheet
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Sheet_bin = encode_p_bank_sheet(SheetFinal),
	BinLen_sheet = erlang:byte_size(Sheet_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,NumFinal:32/signed,PriceFinal:32/signed,SilverFinal:32/signed,GoldFinal:32/signed,BinLen_sheet:32, Sheet_bin/binary>>;
encode_m_bank_sell_toc(_) -> 
	<<>>.

decode_m_bank_sell_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Num:32/signed,Price:32/signed,Silver:32/signed,Gold:32/signed,_SubBinSizesheet:32, SubBinsheet/binary>> = Bin1,
	Sheet = decode_p_bank_sheet(SubBinsheet),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_bank_sell_toc, Succ,common_tool:to_list(Reason),Num,Price,Silver,Gold,Sheet};

decode_m_bank_sell_toc(_) ->
	undefined.
encode_m_bank_undo_tos(Record) when is_record(Record, m_bank_undo_tos) ->
	#m_bank_undo_tos{sheet_id=Sheet_id} = Record,
	case Sheet_id =:= undefined of
		true ->
				Sheet_idFinal = undefined,
				exit({required_field_not_assigned, m_bank_undo_tos, sheet_id});
		false ->
			Sheet_idFinal = Sheet_id
	end,

	<<Sheet_idFinal:32/signed>>;
encode_m_bank_undo_tos(_) -> 
	<<>>.

decode_m_bank_undo_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Sheet_id:32/signed>> = Bin0,

	{m_bank_undo_tos, Sheet_id};

decode_m_bank_undo_tos(_) ->
	undefined.
encode_m_bank_undo_toc(Record) when is_record(Record, m_bank_undo_toc) ->
	#m_bank_undo_toc{succ=Succ,reason=Reason,self_sell=Self_sell,self_buy=Self_buy,bank_sell=Bank_sell,bank_buy=Bank_buy,return_back=Return_back} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_bank_undo_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Self_sell =:= undefined of
		true ->
			Self_sellFinal = [];
		false ->
			Self_sellFinal = Self_sell
	end,
	case Self_buy =:= undefined of
		true ->
			Self_buyFinal = [];
		false ->
			Self_buyFinal = Self_buy
	end,
	case Bank_sell =:= undefined of
		true ->
			Bank_sellFinal = [];
		false ->
			Bank_sellFinal = Bank_sell
	end,
	case Bank_buy =:= undefined of
		true ->
			Bank_buyFinal = [];
		false ->
			Bank_buyFinal = Bank_buy
	end,
	case Return_back =:= undefined of
		true ->
				Return_backFinal = 0;
		false ->
			Return_backFinal = Return_back
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Self_sell_bin = encode_p_bank_sheets(Self_sellFinal, <<>>),
	SizeSelf_sellFinal = erlang:length(Self_sellFinal),
	BinLen_self_sell = erlang:byte_size(Self_sell_bin),
	Self_buy_bin = encode_p_bank_sheets(Self_buyFinal, <<>>),
	SizeSelf_buyFinal = erlang:length(Self_buyFinal),
	BinLen_self_buy = erlang:byte_size(Self_buy_bin),
	Bank_sell_bin = encode_p_bank_simple_sheets(Bank_sellFinal, <<>>),
	SizeBank_sellFinal = erlang:length(Bank_sellFinal),
	BinLen_bank_sell = erlang:byte_size(Bank_sell_bin),
	Bank_buy_bin = encode_p_bank_simple_sheets(Bank_buyFinal, <<>>),
	SizeBank_buyFinal = erlang:length(Bank_buyFinal),
	BinLen_bank_buy = erlang:byte_size(Bank_buy_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,SizeSelf_sellFinal:16, BinLen_self_sell:32, Self_sell_bin/binary,SizeSelf_buyFinal:16, BinLen_self_buy:32, Self_buy_bin/binary,SizeBank_sellFinal:16, BinLen_bank_sell:32, Bank_sell_bin/binary,SizeBank_buyFinal:16, BinLen_bank_buy:32, Bank_buy_bin/binary,Return_backFinal:32/signed>>;
encode_m_bank_undo_toc(_) -> 
	<<>>.

decode_m_bank_undo_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_Sizeself_sell:16, BinLenself_sell:32, Bin2/binary>> = Bin1,
	<<SubBinself_sell:BinLenself_sell/binary, Bin3/binary>> = Bin2, 
	Self_sell = lists:reverse(decode_p_bank_sheets(SubBinself_sell, [])),
	<<_Sizeself_buy:16, BinLenself_buy:32, Bin4/binary>> = Bin3,
	<<SubBinself_buy:BinLenself_buy/binary, Bin5/binary>> = Bin4, 
	Self_buy = lists:reverse(decode_p_bank_sheets(SubBinself_buy, [])),
	<<_Sizebank_sell:16, BinLenbank_sell:32, Bin6/binary>> = Bin5,
	<<SubBinbank_sell:BinLenbank_sell/binary, Bin7/binary>> = Bin6, 
	Bank_sell = lists:reverse(decode_p_bank_simple_sheets(SubBinbank_sell, [])),
	<<_Sizebank_buy:16, BinLenbank_buy:32, Bin8/binary>> = Bin7,
	<<SubBinbank_buy:BinLenbank_buy/binary, Bin9/binary>> = Bin8, 
	Bank_buy = lists:reverse(decode_p_bank_simple_sheets(SubBinbank_buy, [])),
	<<Return_back:32/signed>> = Bin9,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_bank_undo_toc, Succ,common_tool:to_list(Reason),Self_sell,Self_buy,Bank_sell,Bank_buy,Return_back};

decode_m_bank_undo_toc(_) ->
	undefined.
encode_m_bank_add_silver_toc(Record) when is_record(Record, m_bank_add_silver_toc) ->
	#m_bank_add_silver_toc{silver=Silver,type=Type,sheet_id=Sheet_id,num=Num,if_self=If_self} = Record,
	case Silver =:= undefined of
		true ->
				SilverFinal = undefined,
				exit({required_field_not_assigned, m_bank_add_silver_toc, silver});
		false ->
			SilverFinal = Silver
	end,
	case Type =:= undefined of
		true ->
				TypeFinal = undefined,
				exit({required_field_not_assigned, m_bank_add_silver_toc, type});
		false ->
		case Type of
			true ->
				TypeFinal = 1;
			false ->
				TypeFinal = 0
		end
	end,
	case Sheet_id =:= undefined of
		true ->
				Sheet_idFinal = 0;
		false ->
			Sheet_idFinal = Sheet_id
	end,
	case Num =:= undefined of
		true ->
				NumFinal = 0;
		false ->
			NumFinal = Num
	end,
	case If_self =:= undefined of
		true ->
				If_selfFinal = 1;
		false ->
			case If_self of
				true ->
					If_selfFinal = 1;
				false ->
					If_selfFinal = 0
			end
	end,

	<<SilverFinal:32/signed,TypeFinal:8,Sheet_idFinal:32/signed,NumFinal:32/signed,If_selfFinal:8>>;
encode_m_bank_add_silver_toc(_) -> 
	<<>>.

decode_m_bank_add_silver_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Silver:32/signed,TypeTmp:8,Sheet_id:32/signed,Num:32/signed,If_selfTmp:8>> = Bin0,
case TypeTmp of 
	1 -> 
		Type = true;
	_ ->
		Type = false
end,
case If_selfTmp of 
	1 -> 
		If_self = true;
	_ ->
		If_self = false
end,

	{m_bank_add_silver_toc, Silver,Type,Sheet_id,Num,If_self};

decode_m_bank_add_silver_toc(_) ->
	undefined.
encode_m_bank_add_gold_toc(Record) when is_record(Record, m_bank_add_gold_toc) ->
	#m_bank_add_gold_toc{gold=Gold,type=Type,sheet_id=Sheet_id,num=Num,if_self=If_self} = Record,
	case Gold =:= undefined of
		true ->
				GoldFinal = undefined,
				exit({required_field_not_assigned, m_bank_add_gold_toc, gold});
		false ->
			GoldFinal = Gold
	end,
	case Type =:= undefined of
		true ->
				TypeFinal = undefined,
				exit({required_field_not_assigned, m_bank_add_gold_toc, type});
		false ->
		case Type of
			true ->
				TypeFinal = 1;
			false ->
				TypeFinal = 0
		end
	end,
	case Sheet_id =:= undefined of
		true ->
				Sheet_idFinal = undefined,
				exit({required_field_not_assigned, m_bank_add_gold_toc, sheet_id});
		false ->
			Sheet_idFinal = Sheet_id
	end,
	case Num =:= undefined of
		true ->
				NumFinal = undefined,
				exit({required_field_not_assigned, m_bank_add_gold_toc, num});
		false ->
			NumFinal = Num
	end,
	case If_self =:= undefined of
		true ->
				If_selfFinal = 1;
		false ->
			case If_self of
				true ->
					If_selfFinal = 1;
				false ->
					If_selfFinal = 0
			end
	end,

	<<GoldFinal:32/signed,TypeFinal:8,Sheet_idFinal:32/signed,NumFinal:32/signed,If_selfFinal:8>>;
encode_m_bank_add_gold_toc(_) -> 
	<<>>.

decode_m_bank_add_gold_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Gold:32/signed,TypeTmp:8,Sheet_id:32/signed,Num:32/signed,If_selfTmp:8>> = Bin0,
case TypeTmp of 
	1 -> 
		Type = true;
	_ ->
		Type = false
end,
case If_selfTmp of 
	1 -> 
		If_self = true;
	_ ->
		If_self = false
end,

	{m_bank_add_gold_toc, Gold,Type,Sheet_id,Num,If_self};

decode_m_bank_add_gold_toc(_) ->
	undefined.
encode_p_shortcut(Record) when is_record(Record, p_shortcut) ->
	#p_shortcut{type=Type,id=Id,name=Name} = Record,
	case Type =:= undefined of
		true ->
				TypeFinal = undefined,
				exit({required_field_not_assigned, p_shortcut, type});
		false ->
			TypeFinal = Type
	end,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, p_shortcut, id});
		false ->
			IdFinal = Id
	end,
	case Name =:= undefined of
		true ->
				NameFinal = <<>>;
		false ->
			NameFinal = Name
	end,
	Name2 = common_tool:to_binary(NameFinal),
	NameLen = erlang:byte_size(Name2),

	<<TypeFinal:32/signed,IdFinal:32/signed,NameLen:16, Name2/binary>>;
encode_p_shortcut(_) -> 
	<<>>.

decode_p_shortcut(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Type:32/signed,Id:32/signed,NameLen:16, Bin1/binary>> = Bin0,
	<<Name:NameLen/binary>> = Bin1,

	{p_shortcut, Type,Id,common_tool:to_list(Name)};

decode_p_shortcut(_) ->
	undefined.
encode_m_shortcut_init_toc(Record) when is_record(Record, m_shortcut_init_toc) ->
	#m_shortcut_init_toc{shortcut_list=Shortcut_list,selected=Selected} = Record,
	case Shortcut_list =:= undefined of
		true ->
			Shortcut_listFinal = [];
		false ->
			Shortcut_listFinal = Shortcut_list
	end,
	case Selected =:= undefined of
		true ->
				SelectedFinal = undefined,
				exit({required_field_not_assigned, m_shortcut_init_toc, selected});
		false ->
			SelectedFinal = Selected
	end,
	Shortcut_list_bin = encode_p_shortcuts(Shortcut_listFinal, <<>>),
	SizeShortcut_listFinal = erlang:length(Shortcut_listFinal),
	BinLen_shortcut_list = erlang:byte_size(Shortcut_list_bin),

	<<SizeShortcut_listFinal:16, BinLen_shortcut_list:32, Shortcut_list_bin/binary,SelectedFinal:32/signed>>;
encode_m_shortcut_init_toc(_) -> 
	<<>>.

decode_m_shortcut_init_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizeshortcut_list:16, BinLenshortcut_list:32, Bin1/binary>> = Bin0,
	<<SubBinshortcut_list:BinLenshortcut_list/binary, Bin2/binary>> = Bin1, 
	Shortcut_list = lists:reverse(decode_p_shortcuts(SubBinshortcut_list, [])),
	<<Selected:32/signed>> = Bin2,

	{m_shortcut_init_toc, Shortcut_list,Selected};

decode_m_shortcut_init_toc(_) ->
	undefined.
encode_m_shortcut_update_tos(Record) when is_record(Record, m_shortcut_update_tos) ->
	#m_shortcut_update_tos{shortcut_list=Shortcut_list,selected=Selected} = Record,
	case Shortcut_list =:= undefined of
		true ->
			Shortcut_listFinal = [];
		false ->
			Shortcut_listFinal = Shortcut_list
	end,
	case Selected =:= undefined of
		true ->
				SelectedFinal = undefined,
				exit({required_field_not_assigned, m_shortcut_update_tos, selected});
		false ->
			SelectedFinal = Selected
	end,
	Shortcut_list_bin = encode_p_shortcuts(Shortcut_listFinal, <<>>),
	SizeShortcut_listFinal = erlang:length(Shortcut_listFinal),
	BinLen_shortcut_list = erlang:byte_size(Shortcut_list_bin),

	<<SizeShortcut_listFinal:16, BinLen_shortcut_list:32, Shortcut_list_bin/binary,SelectedFinal:32/signed>>;
encode_m_shortcut_update_tos(_) -> 
	<<>>.

decode_m_shortcut_update_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizeshortcut_list:16, BinLenshortcut_list:32, Bin1/binary>> = Bin0,
	<<SubBinshortcut_list:BinLenshortcut_list/binary, Bin2/binary>> = Bin1, 
	Shortcut_list = lists:reverse(decode_p_shortcuts(SubBinshortcut_list, [])),
	<<Selected:32/signed>> = Bin2,

	{m_shortcut_update_tos, Shortcut_list,Selected};

decode_m_shortcut_update_tos(_) ->
	undefined.
encode_m_bubble_send_tos(Record) when is_record(Record, m_bubble_send_tos) ->
	#m_bubble_send_tos{action_type=Action_type,msg=Msg,to_role_id=To_role_id} = Record,
	case Action_type =:= undefined of
		true ->
				Action_typeFinal = undefined,
				exit({required_field_not_assigned, m_bubble_send_tos, action_type});
		false ->
			Action_typeFinal = Action_type
	end,
	case Msg =:= undefined of
		true ->
				MsgFinal = undefined,
				exit({required_field_not_assigned, m_bubble_send_tos, msg});
		false ->
			MsgFinal = Msg
	end,
	case To_role_id =:= undefined of
		true ->
				To_role_idFinal = 0;
		false ->
			To_role_idFinal = To_role_id
	end,
	Msg2 = common_tool:to_binary(MsgFinal),
	MsgLen = erlang:byte_size(Msg2),

	<<Action_typeFinal:32/signed,MsgLen:16, Msg2/binary,To_role_idFinal:32/signed>>;
encode_m_bubble_send_tos(_) -> 
	<<>>.

decode_m_bubble_send_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Action_type:32/signed,MsgLen:16, Bin1/binary>> = Bin0,
	<<Msg:MsgLen/binary,To_role_id:32/signed>> = Bin1,

	{m_bubble_send_tos, Action_type,common_tool:to_list(Msg),To_role_id};

decode_m_bubble_send_tos(_) ->
	undefined.
encode_m_bubble_send_toc(Record) when is_record(Record, m_bubble_send_toc) ->
	#m_bubble_send_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_bubble_send_toc(_) -> 
	<<>>.

decode_m_bubble_send_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_bubble_send_toc, Succ,common_tool:to_list(Reason)};

decode_m_bubble_send_toc(_) ->
	undefined.
encode_m_bubble_msg_toc(Record) when is_record(Record, m_bubble_msg_toc) ->
	#m_bubble_msg_toc{actor_type=Actor_type,actor_id=Actor_id,actor_name=Actor_name,actor_sex=Actor_sex,actor_faction=Actor_faction,action_type=Action_type,msg=Msg,to_role_id=To_role_id,actor_head=Actor_head} = Record,
	case Actor_type =:= undefined of
		true ->
				Actor_typeFinal = undefined,
				exit({required_field_not_assigned, m_bubble_msg_toc, actor_type});
		false ->
			Actor_typeFinal = Actor_type
	end,
	case Actor_id =:= undefined of
		true ->
				Actor_idFinal = undefined,
				exit({required_field_not_assigned, m_bubble_msg_toc, actor_id});
		false ->
			Actor_idFinal = Actor_id
	end,
	case Actor_name =:= undefined of
		true ->
				Actor_nameFinal = undefined,
				exit({required_field_not_assigned, m_bubble_msg_toc, actor_name});
		false ->
			Actor_nameFinal = Actor_name
	end,
	case Actor_sex =:= undefined of
		true ->
				Actor_sexFinal = 0;
		false ->
			Actor_sexFinal = Actor_sex
	end,
	case Actor_faction =:= undefined of
		true ->
				Actor_factionFinal = 0;
		false ->
			Actor_factionFinal = Actor_faction
	end,
	case Action_type =:= undefined of
		true ->
				Action_typeFinal = undefined,
				exit({required_field_not_assigned, m_bubble_msg_toc, action_type});
		false ->
			Action_typeFinal = Action_type
	end,
	case Msg =:= undefined of
		true ->
				MsgFinal = undefined,
				exit({required_field_not_assigned, m_bubble_msg_toc, msg});
		false ->
			MsgFinal = Msg
	end,
	case To_role_id =:= undefined of
		true ->
				To_role_idFinal = 0;
		false ->
			To_role_idFinal = To_role_id
	end,
	case Actor_head =:= undefined of
		true ->
				Actor_headFinal = 1;
		false ->
			Actor_headFinal = Actor_head
	end,
	Actor_name2 = common_tool:to_binary(Actor_nameFinal),
	Actor_nameLen = erlang:byte_size(Actor_name2),
	Msg2 = common_tool:to_binary(MsgFinal),
	MsgLen = erlang:byte_size(Msg2),

	<<Actor_typeFinal:32/signed,Actor_idFinal:32/signed,Actor_nameLen:16, Actor_name2/binary,Actor_sexFinal:32/signed,Actor_factionFinal:32/signed,Action_typeFinal:32/signed,MsgLen:16, Msg2/binary,To_role_idFinal:32/signed,Actor_headFinal:32/signed>>;
encode_m_bubble_msg_toc(_) -> 
	<<>>.

decode_m_bubble_msg_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Actor_type:32/signed,Actor_id:32/signed,Actor_nameLen:16, Bin1/binary>> = Bin0,
	<<Actor_name:Actor_nameLen/binary,Actor_sex:32/signed,Actor_faction:32/signed,Action_type:32/signed,MsgLen:16, Bin2/binary>> = Bin1,
	<<Msg:MsgLen/binary,To_role_id:32/signed,Actor_head:32/signed>> = Bin2,

	{m_bubble_msg_toc, Actor_type,Actor_id,common_tool:to_list(Actor_name),Actor_sex,Actor_faction,Action_type,common_tool:to_list(Msg),To_role_id,Actor_head};

decode_m_bubble_msg_toc(_) ->
	undefined.
encode_m_family_create_tos(Record) when is_record(Record, m_family_create_tos) ->
	#m_family_create_tos{family_name=Family_name,public_notice=Public_notice,private_notice=Private_notice,is_invite=Is_invite} = Record,
	case Family_name =:= undefined of
		true ->
				Family_nameFinal = undefined,
				exit({required_field_not_assigned, m_family_create_tos, family_name});
		false ->
			Family_nameFinal = Family_name
	end,
	case Public_notice =:= undefined of
		true ->
				Public_noticeFinal = undefined,
				exit({required_field_not_assigned, m_family_create_tos, public_notice});
		false ->
			Public_noticeFinal = Public_notice
	end,
	case Private_notice =:= undefined of
		true ->
				Private_noticeFinal = undefined,
				exit({required_field_not_assigned, m_family_create_tos, private_notice});
		false ->
			Private_noticeFinal = Private_notice
	end,
	case Is_invite =:= undefined of
		true ->
				Is_inviteFinal = undefined,
				exit({required_field_not_assigned, m_family_create_tos, is_invite});
		false ->
		case Is_invite of
			true ->
				Is_inviteFinal = 1;
			false ->
				Is_inviteFinal = 0
		end
	end,
	Family_name2 = common_tool:to_binary(Family_nameFinal),
	Family_nameLen = erlang:byte_size(Family_name2),
	Public_notice2 = common_tool:to_binary(Public_noticeFinal),
	Public_noticeLen = erlang:byte_size(Public_notice2),
	Private_notice2 = common_tool:to_binary(Private_noticeFinal),
	Private_noticeLen = erlang:byte_size(Private_notice2),

	<<Family_nameLen:16, Family_name2/binary,Public_noticeLen:16, Public_notice2/binary,Private_noticeLen:16, Private_notice2/binary,Is_inviteFinal:8>>;
encode_m_family_create_tos(_) -> 
	<<>>.

decode_m_family_create_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Family_nameLen:16, Bin1/binary>> = Bin0,
	<<Family_name:Family_nameLen/binary,Public_noticeLen:16, Bin2/binary>> = Bin1,
	<<Public_notice:Public_noticeLen/binary,Private_noticeLen:16, Bin3/binary>> = Bin2,
	<<Private_notice:Private_noticeLen/binary,Is_inviteTmp:8>> = Bin3,
case Is_inviteTmp of 
	1 -> 
		Is_invite = true;
	_ ->
		Is_invite = false
end,

	{m_family_create_tos, common_tool:to_list(Family_name),common_tool:to_list(Public_notice),common_tool:to_list(Private_notice),Is_invite};

decode_m_family_create_tos(_) ->
	undefined.
encode_m_family_create_toc(Record) when is_record(Record, m_family_create_toc) ->
	#m_family_create_toc{succ=Succ,reason=Reason,family_info=Family_info,new_silver=New_silver,new_silver_bind=New_silver_bind,new_gold=New_gold,new_gold_bind=New_gold_bind} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Family_info =:= undefined of
		true ->
				Family_infoFinal = 0;
		false ->
			Family_infoFinal = Family_info
	end,
	case New_silver =:= undefined of
		true ->
				New_silverFinal = 0;
		false ->
			New_silverFinal = New_silver
	end,
	case New_silver_bind =:= undefined of
		true ->
				New_silver_bindFinal = 0;
		false ->
			New_silver_bindFinal = New_silver_bind
	end,
	case New_gold =:= undefined of
		true ->
				New_goldFinal = 0;
		false ->
			New_goldFinal = New_gold
	end,
	case New_gold_bind =:= undefined of
		true ->
				New_gold_bindFinal = 0;
		false ->
			New_gold_bindFinal = New_gold_bind
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Family_info_bin = encode_p_family_info(Family_infoFinal),
	BinLen_family_info = erlang:byte_size(Family_info_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_family_info:32, Family_info_bin/binary,New_silverFinal:32/signed,New_silver_bindFinal:32/signed,New_goldFinal:32/signed,New_gold_bindFinal:32/signed>>;
encode_m_family_create_toc(_) -> 
	<<>>.

decode_m_family_create_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,SubBinSizefamily_info:32, Bin2/binary>> = Bin1,
	<<SubBinfamily_info:SubBinSizefamily_info/binary, Bin3/binary>> = Bin2,
	Family_info = decode_p_family_info(SubBinfamily_info),
	<<New_silver:32/signed,New_silver_bind:32/signed,New_gold:32/signed,New_gold_bind:32/signed>> = Bin3,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_family_create_toc, Succ,common_tool:to_list(Reason),Family_info,New_silver,New_silver_bind,New_gold,New_gold_bind};

decode_m_family_create_toc(_) ->
	undefined.
encode_m_family_introduce_tos(Record) when is_record(Record, m_family_introduce_tos) ->
	#m_family_introduce_tos{} = Record,

	<<>>;
encode_m_family_introduce_tos(_) -> 
	<<>>.

decode_m_family_introduce_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_family_introduce_tos};

decode_m_family_introduce_tos(_) ->
	undefined.
encode_m_family_introduce_toc(Record) when is_record(Record, m_family_introduce_toc) ->
	#m_family_introduce_toc{status=Status} = Record,
	case Status =:= undefined of
		true ->
			StatusFinal = [];
		false ->
			StatusFinal = Status
	end,
	Status_bin = encode_int32s(StatusFinal, <<>>),
	SizeStatusFinal = erlang:length(StatusFinal),
	BinLen_status = erlang:byte_size(Status_bin),

	<<SizeStatusFinal:16, BinLen_status:32, Status_bin/binary>>;
encode_m_family_introduce_toc(_) -> 
	<<>>.

decode_m_family_introduce_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizestatus:16, _BinLenstatus:32, SubBinstatus/binary>> = Bin0,
	Status = lists:reverse(decode_int32s(SubBinstatus, [])),

	{m_family_introduce_toc, Status};

decode_m_family_introduce_toc(_) ->
	undefined.
encode_m_family_self_tos(Record) when is_record(Record, m_family_self_tos) ->
	#m_family_self_tos{} = Record,

	<<>>;
encode_m_family_self_tos(_) -> 
	<<>>.

decode_m_family_self_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_family_self_tos};

decode_m_family_self_tos(_) ->
	undefined.
encode_m_family_self_toc(Record) when is_record(Record, m_family_self_toc) ->
	#m_family_self_toc{succ=Succ,reason=Reason,family_info=Family_info} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Family_info =:= undefined of
		true ->
				Family_infoFinal = undefined,
				exit({required_field_not_assigned, m_family_self_toc, family_info});
		false ->
			Family_infoFinal = Family_info
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Family_info_bin = encode_p_family_info(Family_infoFinal),
	BinLen_family_info = erlang:byte_size(Family_info_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_family_info:32, Family_info_bin/binary>>;
encode_m_family_self_toc(_) -> 
	<<>>.

decode_m_family_self_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_SubBinSizefamily_info:32, SubBinfamily_info/binary>> = Bin1,
	Family_info = decode_p_family_info(SubBinfamily_info),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_family_self_toc, Succ,common_tool:to_list(Reason),Family_info};

decode_m_family_self_toc(_) ->
	undefined.
encode_m_family_panel_tos(Record) when is_record(Record, m_family_panel_tos) ->
	#m_family_panel_tos{num_per_page=Num_per_page} = Record,
	case Num_per_page =:= undefined of
		true ->
				Num_per_pageFinal = undefined,
				exit({required_field_not_assigned, m_family_panel_tos, num_per_page});
		false ->
			Num_per_pageFinal = Num_per_page
	end,

	<<Num_per_pageFinal:32/signed>>;
encode_m_family_panel_tos(_) -> 
	<<>>.

decode_m_family_panel_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Num_per_page:32/signed>> = Bin0,

	{m_family_panel_tos, Num_per_page};

decode_m_family_panel_tos(_) ->
	undefined.
encode_m_family_panel_toc(Record) when is_record(Record, m_family_panel_toc) ->
	#m_family_panel_toc{invites=Invites,family_list=Family_list,requests=Requests,total_page=Total_page} = Record,
	case Invites =:= undefined of
		true ->
			InvitesFinal = [];
		false ->
			InvitesFinal = Invites
	end,
	case Family_list =:= undefined of
		true ->
			Family_listFinal = [];
		false ->
			Family_listFinal = Family_list
	end,
	case Requests =:= undefined of
		true ->
			RequestsFinal = [];
		false ->
			RequestsFinal = Requests
	end,
	case Total_page =:= undefined of
		true ->
				Total_pageFinal = 0;
		false ->
			Total_pageFinal = Total_page
	end,
	Invites_bin = encode_p_family_invite_infos(InvitesFinal, <<>>),
	SizeInvitesFinal = erlang:length(InvitesFinal),
	BinLen_invites = erlang:byte_size(Invites_bin),
	Family_list_bin = encode_p_family_summarys(Family_listFinal, <<>>),
	SizeFamily_listFinal = erlang:length(Family_listFinal),
	BinLen_family_list = erlang:byte_size(Family_list_bin),
	Requests_bin = encode_p_family_request_infos(RequestsFinal, <<>>),
	SizeRequestsFinal = erlang:length(RequestsFinal),
	BinLen_requests = erlang:byte_size(Requests_bin),

	<<SizeInvitesFinal:16, BinLen_invites:32, Invites_bin/binary,SizeFamily_listFinal:16, BinLen_family_list:32, Family_list_bin/binary,SizeRequestsFinal:16, BinLen_requests:32, Requests_bin/binary,Total_pageFinal:32/signed>>;
encode_m_family_panel_toc(_) -> 
	<<>>.

decode_m_family_panel_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizeinvites:16, BinLeninvites:32, Bin1/binary>> = Bin0,
	<<SubBininvites:BinLeninvites/binary, Bin2/binary>> = Bin1, 
	Invites = lists:reverse(decode_p_family_invite_infos(SubBininvites, [])),
	<<_Sizefamily_list:16, BinLenfamily_list:32, Bin3/binary>> = Bin2,
	<<SubBinfamily_list:BinLenfamily_list/binary, Bin4/binary>> = Bin3, 
	Family_list = lists:reverse(decode_p_family_summarys(SubBinfamily_list, [])),
	<<_Sizerequests:16, BinLenrequests:32, Bin5/binary>> = Bin4,
	<<SubBinrequests:BinLenrequests/binary, Bin6/binary>> = Bin5, 
	Requests = lists:reverse(decode_p_family_request_infos(SubBinrequests, [])),
	<<Total_page:32/signed>> = Bin6,

	{m_family_panel_toc, Invites,Family_list,Requests,Total_page};

decode_m_family_panel_toc(_) ->
	undefined.
encode_p_family_summary(Record) when is_record(Record, p_family_summary) ->
	#p_family_summary{id=Id,name=Name,create_role_id=Create_role_id,create_role_name=Create_role_name,owner_role_id=Owner_role_id,owner_role_name=Owner_role_name,cur_members=Cur_members,faction_id=Faction_id,level=Level,active_points=Active_points} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, p_family_summary, id});
		false ->
			IdFinal = Id
	end,
	case Name =:= undefined of
		true ->
				NameFinal = undefined,
				exit({required_field_not_assigned, p_family_summary, name});
		false ->
			NameFinal = Name
	end,
	case Create_role_id =:= undefined of
		true ->
				Create_role_idFinal = undefined,
				exit({required_field_not_assigned, p_family_summary, create_role_id});
		false ->
			Create_role_idFinal = Create_role_id
	end,
	case Create_role_name =:= undefined of
		true ->
				Create_role_nameFinal = undefined,
				exit({required_field_not_assigned, p_family_summary, create_role_name});
		false ->
			Create_role_nameFinal = Create_role_name
	end,
	case Owner_role_id =:= undefined of
		true ->
				Owner_role_idFinal = undefined,
				exit({required_field_not_assigned, p_family_summary, owner_role_id});
		false ->
			Owner_role_idFinal = Owner_role_id
	end,
	case Owner_role_name =:= undefined of
		true ->
				Owner_role_nameFinal = undefined,
				exit({required_field_not_assigned, p_family_summary, owner_role_name});
		false ->
			Owner_role_nameFinal = Owner_role_name
	end,
	case Cur_members =:= undefined of
		true ->
				Cur_membersFinal = undefined,
				exit({required_field_not_assigned, p_family_summary, cur_members});
		false ->
			Cur_membersFinal = Cur_members
	end,
	case Faction_id =:= undefined of
		true ->
				Faction_idFinal = undefined,
				exit({required_field_not_assigned, p_family_summary, faction_id});
		false ->
			Faction_idFinal = Faction_id
	end,
	case Level =:= undefined of
		true ->
				LevelFinal = undefined,
				exit({required_field_not_assigned, p_family_summary, level});
		false ->
			LevelFinal = Level
	end,
	case Active_points =:= undefined of
		true ->
				Active_pointsFinal = undefined,
				exit({required_field_not_assigned, p_family_summary, active_points});
		false ->
			Active_pointsFinal = Active_points
	end,
	Name2 = common_tool:to_binary(NameFinal),
	NameLen = erlang:byte_size(Name2),
	Create_role_name2 = common_tool:to_binary(Create_role_nameFinal),
	Create_role_nameLen = erlang:byte_size(Create_role_name2),
	Owner_role_name2 = common_tool:to_binary(Owner_role_nameFinal),
	Owner_role_nameLen = erlang:byte_size(Owner_role_name2),

	<<IdFinal:32/signed,NameLen:16, Name2/binary,Create_role_idFinal:32/signed,Create_role_nameLen:16, Create_role_name2/binary,Owner_role_idFinal:32/signed,Owner_role_nameLen:16, Owner_role_name2/binary,Cur_membersFinal:32/signed,Faction_idFinal:32/signed,LevelFinal:32/signed,Active_pointsFinal:32/signed>>;
encode_p_family_summary(_) -> 
	<<>>.

decode_p_family_summary(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed,NameLen:16, Bin1/binary>> = Bin0,
	<<Name:NameLen/binary,Create_role_id:32/signed,Create_role_nameLen:16, Bin2/binary>> = Bin1,
	<<Create_role_name:Create_role_nameLen/binary,Owner_role_id:32/signed,Owner_role_nameLen:16, Bin3/binary>> = Bin2,
	<<Owner_role_name:Owner_role_nameLen/binary,Cur_members:32/signed,Faction_id:32/signed,Level:32/signed,Active_points:32/signed>> = Bin3,

	{p_family_summary, Id,common_tool:to_list(Name),Create_role_id,common_tool:to_list(Create_role_name),Owner_role_id,common_tool:to_list(Owner_role_name),Cur_members,Faction_id,Level,Active_points};

decode_p_family_summary(_) ->
	undefined.
encode_p_family_invite_info(Record) when is_record(Record, p_family_invite_info) ->
	#p_family_invite_info{target_role_id=Target_role_id,family_id=Family_id,family_name=Family_name,src_role_id=Src_role_id,src_role_name=Src_role_name} = Record,
	case Target_role_id =:= undefined of
		true ->
				Target_role_idFinal = undefined,
				exit({required_field_not_assigned, p_family_invite_info, target_role_id});
		false ->
			Target_role_idFinal = Target_role_id
	end,
	case Family_id =:= undefined of
		true ->
				Family_idFinal = undefined,
				exit({required_field_not_assigned, p_family_invite_info, family_id});
		false ->
			Family_idFinal = Family_id
	end,
	case Family_name =:= undefined of
		true ->
				Family_nameFinal = undefined,
				exit({required_field_not_assigned, p_family_invite_info, family_name});
		false ->
			Family_nameFinal = Family_name
	end,
	case Src_role_id =:= undefined of
		true ->
				Src_role_idFinal = undefined,
				exit({required_field_not_assigned, p_family_invite_info, src_role_id});
		false ->
			Src_role_idFinal = Src_role_id
	end,
	case Src_role_name =:= undefined of
		true ->
				Src_role_nameFinal = undefined,
				exit({required_field_not_assigned, p_family_invite_info, src_role_name});
		false ->
			Src_role_nameFinal = Src_role_name
	end,
	Family_name2 = common_tool:to_binary(Family_nameFinal),
	Family_nameLen = erlang:byte_size(Family_name2),
	Src_role_name2 = common_tool:to_binary(Src_role_nameFinal),
	Src_role_nameLen = erlang:byte_size(Src_role_name2),

	<<Target_role_idFinal:32/signed,Family_idFinal:32/signed,Family_nameLen:16, Family_name2/binary,Src_role_idFinal:32/signed,Src_role_nameLen:16, Src_role_name2/binary>>;
encode_p_family_invite_info(_) -> 
	<<>>.

decode_p_family_invite_info(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Target_role_id:32/signed,Family_id:32/signed,Family_nameLen:16, Bin1/binary>> = Bin0,
	<<Family_name:Family_nameLen/binary,Src_role_id:32/signed,Src_role_nameLen:16, Bin2/binary>> = Bin1,
	<<Src_role_name:Src_role_nameLen/binary>> = Bin2,

	{p_family_invite_info, Target_role_id,Family_id,common_tool:to_list(Family_name),Src_role_id,common_tool:to_list(Src_role_name)};

decode_p_family_invite_info(_) ->
	undefined.
encode_m_family_enter_map_tos(Record) when is_record(Record, m_family_enter_map_tos) ->
	#m_family_enter_map_tos{} = Record,

	<<>>;
encode_m_family_enter_map_tos(_) -> 
	<<>>.

decode_m_family_enter_map_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_family_enter_map_tos};

decode_m_family_enter_map_tos(_) ->
	undefined.
encode_m_family_enter_map_toc(Record) when is_record(Record, m_family_enter_map_toc) ->
	#m_family_enter_map_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_family_enter_map_toc(_) -> 
	<<>>.

decode_m_family_enter_map_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_family_enter_map_toc, Succ,common_tool:to_list(Reason)};

decode_m_family_enter_map_toc(_) ->
	undefined.
encode_m_family_call_uplevelboss_tos(Record) when is_record(Record, m_family_call_uplevelboss_tos) ->
	#m_family_call_uplevelboss_tos{} = Record,

	<<>>;
encode_m_family_call_uplevelboss_tos(_) -> 
	<<>>.

decode_m_family_call_uplevelboss_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_family_call_uplevelboss_tos};

decode_m_family_call_uplevelboss_tos(_) ->
	undefined.
encode_m_family_call_uplevelboss_toc(Record) when is_record(Record, m_family_call_uplevelboss_toc) ->
	#m_family_call_uplevelboss_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_family_call_uplevelboss_toc(_) -> 
	<<>>.

decode_m_family_call_uplevelboss_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_family_call_uplevelboss_toc, Succ,common_tool:to_list(Reason)};

decode_m_family_call_uplevelboss_toc(_) ->
	undefined.
encode_m_family_call_commonboss_tos(Record) when is_record(Record, m_family_call_commonboss_tos) ->
	#m_family_call_commonboss_tos{} = Record,

	<<>>;
encode_m_family_call_commonboss_tos(_) -> 
	<<>>.

decode_m_family_call_commonboss_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_family_call_commonboss_tos};

decode_m_family_call_commonboss_tos(_) ->
	undefined.
encode_m_family_call_commonboss_toc(Record) when is_record(Record, m_family_call_commonboss_toc) ->
	#m_family_call_commonboss_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_family_call_commonboss_toc(_) -> 
	<<>>.

decode_m_family_call_commonboss_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_family_call_commonboss_toc, Succ,common_tool:to_list(Reason)};

decode_m_family_call_commonboss_toc(_) ->
	undefined.
encode_m_family_uplevel_tos(Record) when is_record(Record, m_family_uplevel_tos) ->
	#m_family_uplevel_tos{} = Record,

	<<>>;
encode_m_family_uplevel_tos(_) -> 
	<<>>.

decode_m_family_uplevel_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_family_uplevel_tos};

decode_m_family_uplevel_tos(_) ->
	undefined.
encode_m_family_uplevel_toc(Record) when is_record(Record, m_family_uplevel_toc) ->
	#m_family_uplevel_toc{succ=Succ,reason=Reason,return_self=Return_self,new_level=New_level,money=Money,active_points=Active_points} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case New_level =:= undefined of
		true ->
				New_levelFinal = 0;
		false ->
			New_levelFinal = New_level
	end,
	case Money =:= undefined of
		true ->
				MoneyFinal = 0;
		false ->
			MoneyFinal = Money
	end,
	case Active_points =:= undefined of
		true ->
				Active_pointsFinal = 0;
		false ->
			Active_pointsFinal = Active_points
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Return_selfFinal:8,New_levelFinal:32/signed,MoneyFinal:32/signed,Active_pointsFinal:32/signed>>;
encode_m_family_uplevel_toc(_) -> 
	<<>>.

decode_m_family_uplevel_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Return_selfTmp:8,New_level:32/signed,Money:32/signed,Active_points:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_family_uplevel_toc, Succ,common_tool:to_list(Reason),Return_self,New_level,Money,Active_points};

decode_m_family_uplevel_toc(_) ->
	undefined.
encode_m_family_invite_list_toc(Record) when is_record(Record, m_family_invite_list_toc) ->
	#m_family_invite_list_toc{invite_list=Invite_list} = Record,
	case Invite_list =:= undefined of
		true ->
			Invite_listFinal = [];
		false ->
			Invite_listFinal = Invite_list
	end,
	Invite_list_bin = encode_p_family_invites(Invite_listFinal, <<>>),
	SizeInvite_listFinal = erlang:length(Invite_listFinal),
	BinLen_invite_list = erlang:byte_size(Invite_list_bin),

	<<SizeInvite_listFinal:16, BinLen_invite_list:32, Invite_list_bin/binary>>;
encode_m_family_invite_list_toc(_) -> 
	<<>>.

decode_m_family_invite_list_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizeinvite_list:16, _BinLeninvite_list:32, SubBininvite_list/binary>> = Bin0,
	Invite_list = lists:reverse(decode_p_family_invites(SubBininvite_list, [])),

	{m_family_invite_list_toc, Invite_list};

decode_m_family_invite_list_toc(_) ->
	undefined.
encode_m_family_request_list_toc(Record) when is_record(Record, m_family_request_list_toc) ->
	#m_family_request_list_toc{request_list=Request_list} = Record,
	case Request_list =:= undefined of
		true ->
			Request_listFinal = [];
		false ->
			Request_listFinal = Request_list
	end,
	Request_list_bin = encode_p_family_requests(Request_listFinal, <<>>),
	SizeRequest_listFinal = erlang:length(Request_listFinal),
	BinLen_request_list = erlang:byte_size(Request_list_bin),

	<<SizeRequest_listFinal:16, BinLen_request_list:32, Request_list_bin/binary>>;
encode_m_family_request_list_toc(_) -> 
	<<>>.

decode_m_family_request_list_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizerequest_list:16, _BinLenrequest_list:32, SubBinrequest_list/binary>> = Bin0,
	Request_list = lists:reverse(decode_p_family_requests(SubBinrequest_list, [])),

	{m_family_request_list_toc, Request_list};

decode_m_family_request_list_toc(_) ->
	undefined.
encode_m_family_member_join_toc(Record) when is_record(Record, m_family_member_join_toc) ->
	#m_family_member_join_toc{member=Member} = Record,
	case Member =:= undefined of
		true ->
				MemberFinal = undefined,
				exit({required_field_not_assigned, m_family_member_join_toc, member});
		false ->
			MemberFinal = Member
	end,
	Member_bin = encode_p_family_member_info(MemberFinal),
	BinLen_member = erlang:byte_size(Member_bin),

	<<BinLen_member:32, Member_bin/binary>>;
encode_m_family_member_join_toc(_) -> 
	<<>>.

decode_m_family_member_join_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_SubBinSizemember:32, SubBinmember/binary>> = Bin0,
	Member = decode_p_family_member_info(SubBinmember),

	{m_family_member_join_toc, Member};

decode_m_family_member_join_toc(_) ->
	undefined.
encode_m_family_member_leave_tos(Record) when is_record(Record, m_family_member_leave_tos) ->
	#m_family_member_leave_tos{} = Record,

	<<>>;
encode_m_family_member_leave_tos(_) -> 
	<<>>.

decode_m_family_member_leave_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_family_member_leave_tos};

decode_m_family_member_leave_tos(_) ->
	undefined.
encode_m_family_member_leave_toc(Record) when is_record(Record, m_family_member_leave_toc) ->
	#m_family_member_leave_toc{succ=Succ,reason=Reason,return_self=Return_self,role_id=Role_id} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, m_family_member_leave_toc, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Return_selfFinal:8,Role_idFinal:32/signed>>;
encode_m_family_member_leave_toc(_) -> 
	<<>>.

decode_m_family_member_leave_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Return_selfTmp:8,Role_id:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_family_member_leave_toc, Succ,common_tool:to_list(Reason),Return_self,Role_id};

decode_m_family_member_leave_toc(_) ->
	undefined.
encode_m_family_list_tos(Record) when is_record(Record, m_family_list_tos) ->
	#m_family_list_tos{page_id=Page_id,num_per_page=Num_per_page,search_content=Search_content,search_type=Search_type,request_from=Request_from} = Record,
	case Page_id =:= undefined of
		true ->
				Page_idFinal = 1;
		false ->
			Page_idFinal = Page_id
	end,
	case Num_per_page =:= undefined of
		true ->
				Num_per_pageFinal = 5;
		false ->
			Num_per_pageFinal = Num_per_page
	end,
	case Search_content =:= undefined of
		true ->
				Search_contentFinal = <<>>;
		false ->
			Search_contentFinal = Search_content
	end,
	case Search_type =:= undefined of
		true ->
				Search_typeFinal = 1;
		false ->
			Search_typeFinal = Search_type
	end,
	case Request_from =:= undefined of
		true ->
				Request_fromFinal = 1;
		false ->
			Request_fromFinal = Request_from
	end,
	Search_content2 = common_tool:to_binary(Search_contentFinal),
	Search_contentLen = erlang:byte_size(Search_content2),

	<<Page_idFinal:32/signed,Num_per_pageFinal:32/signed,Search_contentLen:16, Search_content2/binary,Search_typeFinal:32/signed,Request_fromFinal:32/signed>>;
encode_m_family_list_tos(_) -> 
	<<>>.

decode_m_family_list_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Page_id:32/signed,Num_per_page:32/signed,Search_contentLen:16, Bin1/binary>> = Bin0,
	<<Search_content:Search_contentLen/binary,Search_type:32/signed,Request_from:32/signed>> = Bin1,

	{m_family_list_tos, Page_id,Num_per_page,common_tool:to_list(Search_content),Search_type,Request_from};

decode_m_family_list_tos(_) ->
	undefined.
encode_m_family_list_toc(Record) when is_record(Record, m_family_list_toc) ->
	#m_family_list_toc{family_list=Family_list,total_page=Total_page,page_id=Page_id,request_from=Request_from} = Record,
	case Family_list =:= undefined of
		true ->
			Family_listFinal = [];
		false ->
			Family_listFinal = Family_list
	end,
	case Total_page =:= undefined of
		true ->
				Total_pageFinal = 0;
		false ->
			Total_pageFinal = Total_page
	end,
	case Page_id =:= undefined of
		true ->
				Page_idFinal = undefined,
				exit({required_field_not_assigned, m_family_list_toc, page_id});
		false ->
			Page_idFinal = Page_id
	end,
	case Request_from =:= undefined of
		true ->
				Request_fromFinal = 1;
		false ->
			Request_fromFinal = Request_from
	end,
	Family_list_bin = encode_p_family_summarys(Family_listFinal, <<>>),
	SizeFamily_listFinal = erlang:length(Family_listFinal),
	BinLen_family_list = erlang:byte_size(Family_list_bin),

	<<SizeFamily_listFinal:16, BinLen_family_list:32, Family_list_bin/binary,Total_pageFinal:32/signed,Page_idFinal:32/signed,Request_fromFinal:32/signed>>;
encode_m_family_list_toc(_) -> 
	<<>>.

decode_m_family_list_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizefamily_list:16, BinLenfamily_list:32, Bin1/binary>> = Bin0,
	<<SubBinfamily_list:BinLenfamily_list/binary, Bin2/binary>> = Bin1, 
	Family_list = lists:reverse(decode_p_family_summarys(SubBinfamily_list, [])),
	<<Total_page:32/signed,Page_id:32/signed,Request_from:32/signed>> = Bin2,

	{m_family_list_toc, Family_list,Total_page,Page_id,Request_from};

decode_m_family_list_toc(_) ->
	undefined.
encode_m_family_request_tos(Record) when is_record(Record, m_family_request_tos) ->
	#m_family_request_tos{family_id=Family_id} = Record,
	case Family_id =:= undefined of
		true ->
				Family_idFinal = undefined,
				exit({required_field_not_assigned, m_family_request_tos, family_id});
		false ->
			Family_idFinal = Family_id
	end,

	<<Family_idFinal:32/signed>>;
encode_m_family_request_tos(_) -> 
	<<>>.

decode_m_family_request_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Family_id:32/signed>> = Bin0,

	{m_family_request_tos, Family_id};

decode_m_family_request_tos(_) ->
	undefined.
encode_m_family_request_toc(Record) when is_record(Record, m_family_request_toc) ->
	#m_family_request_toc{succ=Succ,reason=Reason,return_self=Return_self,request=Request,family_id=Family_id} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Request =:= undefined of
		true ->
				RequestFinal = 0;
		false ->
			RequestFinal = Request
	end,
	case Family_id =:= undefined of
		true ->
				Family_idFinal = 0;
		false ->
			Family_idFinal = Family_id
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Request_bin = encode_p_family_request(RequestFinal),
	BinLen_request = erlang:byte_size(Request_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Return_selfFinal:8,BinLen_request:32, Request_bin/binary,Family_idFinal:32/signed>>;
encode_m_family_request_toc(_) -> 
	<<>>.

decode_m_family_request_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Return_selfTmp:8,SubBinSizerequest:32, Bin2/binary>> = Bin1,
	<<SubBinrequest:SubBinSizerequest/binary, Bin3/binary>> = Bin2,
	Request = decode_p_family_request(SubBinrequest),
	<<Family_id:32/signed>> = Bin3,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_family_request_toc, Succ,common_tool:to_list(Reason),Return_self,Request,Family_id};

decode_m_family_request_toc(_) ->
	undefined.
encode_m_family_invite_tos(Record) when is_record(Record, m_family_invite_tos) ->
	#m_family_invite_tos{role_name=Role_name} = Record,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = undefined,
				exit({required_field_not_assigned, m_family_invite_tos, role_name});
		false ->
			Role_nameFinal = Role_name
	end,
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),

	<<Role_nameLen:16, Role_name2/binary>>;
encode_m_family_invite_tos(_) -> 
	<<>>.

decode_m_family_invite_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_nameLen:16, Bin1/binary>> = Bin0,
	<<Role_name:Role_nameLen/binary>> = Bin1,

	{m_family_invite_tos, common_tool:to_list(Role_name)};

decode_m_family_invite_tos(_) ->
	undefined.
encode_m_family_invite_toc(Record) when is_record(Record, m_family_invite_toc) ->
	#m_family_invite_toc{succ=Succ,reason=Reason,return_self=Return_self,role_name=Role_name,family_id=Family_id,family_name=Family_name} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = <<>>;
		false ->
			Role_nameFinal = Role_name
	end,
	case Family_id =:= undefined of
		true ->
				Family_idFinal = 0;
		false ->
			Family_idFinal = Family_id
	end,
	case Family_name =:= undefined of
		true ->
				Family_nameFinal = <<>>;
		false ->
			Family_nameFinal = Family_name
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),
	Family_name2 = common_tool:to_binary(Family_nameFinal),
	Family_nameLen = erlang:byte_size(Family_name2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Return_selfFinal:8,Role_nameLen:16, Role_name2/binary,Family_idFinal:32/signed,Family_nameLen:16, Family_name2/binary>>;
encode_m_family_invite_toc(_) -> 
	<<>>.

decode_m_family_invite_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Return_selfTmp:8,Role_nameLen:16, Bin2/binary>> = Bin1,
	<<Role_name:Role_nameLen/binary,Family_id:32/signed,Family_nameLen:16, Bin3/binary>> = Bin2,
	<<Family_name:Family_nameLen/binary>> = Bin3,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_family_invite_toc, Succ,common_tool:to_list(Reason),Return_self,common_tool:to_list(Role_name),Family_id,common_tool:to_list(Family_name)};

decode_m_family_invite_toc(_) ->
	undefined.
encode_m_family_cancel_invite_tos(Record) when is_record(Record, m_family_cancel_invite_tos) ->
	#m_family_cancel_invite_tos{role_id=Role_id} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, m_family_cancel_invite_tos, role_id});
		false ->
			Role_idFinal = Role_id
	end,

	<<Role_idFinal:32/signed>>;
encode_m_family_cancel_invite_tos(_) -> 
	<<>>.

decode_m_family_cancel_invite_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed>> = Bin0,

	{m_family_cancel_invite_tos, Role_id};

decode_m_family_cancel_invite_tos(_) ->
	undefined.
encode_m_family_cancel_invite_toc(Record) when is_record(Record, m_family_cancel_invite_toc) ->
	#m_family_cancel_invite_toc{succ=Succ,reason=Reason,return_self=Return_self,role_id=Role_id} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = 0;
		false ->
			Role_idFinal = Role_id
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Return_selfFinal:8,Role_idFinal:32/signed>>;
encode_m_family_cancel_invite_toc(_) -> 
	<<>>.

decode_m_family_cancel_invite_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Return_selfTmp:8,Role_id:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_family_cancel_invite_toc, Succ,common_tool:to_list(Reason),Return_self,Role_id};

decode_m_family_cancel_invite_toc(_) ->
	undefined.
encode_m_family_refuse_tos(Record) when is_record(Record, m_family_refuse_tos) ->
	#m_family_refuse_tos{family_id=Family_id} = Record,
	case Family_id =:= undefined of
		true ->
				Family_idFinal = undefined,
				exit({required_field_not_assigned, m_family_refuse_tos, family_id});
		false ->
			Family_idFinal = Family_id
	end,

	<<Family_idFinal:32/signed>>;
encode_m_family_refuse_tos(_) -> 
	<<>>.

decode_m_family_refuse_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Family_id:32/signed>> = Bin0,

	{m_family_refuse_tos, Family_id};

decode_m_family_refuse_tos(_) ->
	undefined.
encode_m_family_refuse_toc(Record) when is_record(Record, m_family_refuse_toc) ->
	#m_family_refuse_toc{succ=Succ,reason=Reason,return_self=Return_self,role_id=Role_id,role_name=Role_name} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = 0;
		false ->
			Role_idFinal = Role_id
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = <<>>;
		false ->
			Role_nameFinal = Role_name
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Return_selfFinal:8,Role_idFinal:32/signed,Role_nameLen:16, Role_name2/binary>>;
encode_m_family_refuse_toc(_) -> 
	<<>>.

decode_m_family_refuse_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Return_selfTmp:8,Role_id:32/signed,Role_nameLen:16, Bin2/binary>> = Bin1,
	<<Role_name:Role_nameLen/binary>> = Bin2,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_family_refuse_toc, Succ,common_tool:to_list(Reason),Return_self,Role_id,common_tool:to_list(Role_name)};

decode_m_family_refuse_toc(_) ->
	undefined.
encode_m_family_agree_f_tos(Record) when is_record(Record, m_family_agree_f_tos) ->
	#m_family_agree_f_tos{role_id=Role_id} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, m_family_agree_f_tos, role_id});
		false ->
			Role_idFinal = Role_id
	end,

	<<Role_idFinal:32/signed>>;
encode_m_family_agree_f_tos(_) -> 
	<<>>.

decode_m_family_agree_f_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed>> = Bin0,

	{m_family_agree_f_tos, Role_id};

decode_m_family_agree_f_tos(_) ->
	undefined.
encode_m_family_agree_f_toc(Record) when is_record(Record, m_family_agree_f_toc) ->
	#m_family_agree_f_toc{succ=Succ,reason=Reason,return_self=Return_self,family_info=Family_info,admit_role_id=Admit_role_id} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Family_info =:= undefined of
		true ->
				Family_infoFinal = 0;
		false ->
			Family_infoFinal = Family_info
	end,
	case Admit_role_id =:= undefined of
		true ->
				Admit_role_idFinal = 0;
		false ->
			Admit_role_idFinal = Admit_role_id
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Family_info_bin = encode_p_family_info(Family_infoFinal),
	BinLen_family_info = erlang:byte_size(Family_info_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Return_selfFinal:8,BinLen_family_info:32, Family_info_bin/binary,Admit_role_idFinal:32/signed>>;
encode_m_family_agree_f_toc(_) -> 
	<<>>.

decode_m_family_agree_f_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Return_selfTmp:8,SubBinSizefamily_info:32, Bin2/binary>> = Bin1,
	<<SubBinfamily_info:SubBinSizefamily_info/binary, Bin3/binary>> = Bin2,
	Family_info = decode_p_family_info(SubBinfamily_info),
	<<Admit_role_id:32/signed>> = Bin3,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_family_agree_f_toc, Succ,common_tool:to_list(Reason),Return_self,Family_info,Admit_role_id};

decode_m_family_agree_f_toc(_) ->
	undefined.
encode_m_family_dismiss_tos(Record) when is_record(Record, m_family_dismiss_tos) ->
	#m_family_dismiss_tos{} = Record,

	<<>>;
encode_m_family_dismiss_tos(_) -> 
	<<>>.

decode_m_family_dismiss_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_family_dismiss_tos};

decode_m_family_dismiss_tos(_) ->
	undefined.
encode_m_family_dismiss_toc(Record) when is_record(Record, m_family_dismiss_toc) ->
	#m_family_dismiss_toc{succ=Succ,reason=Reason,return_self=Return_self} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Return_selfFinal:8>>;
encode_m_family_dismiss_toc(_) -> 
	<<>>.

decode_m_family_dismiss_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Return_selfTmp:8>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_family_dismiss_toc, Succ,common_tool:to_list(Reason),Return_self};

decode_m_family_dismiss_toc(_) ->
	undefined.
encode_m_family_set_title_tos(Record) when is_record(Record, m_family_set_title_tos) ->
	#m_family_set_title_tos{role_id=Role_id,title=Title} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, m_family_set_title_tos, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Title =:= undefined of
		true ->
				TitleFinal = undefined,
				exit({required_field_not_assigned, m_family_set_title_tos, title});
		false ->
			TitleFinal = Title
	end,
	Title2 = common_tool:to_binary(TitleFinal),
	TitleLen = erlang:byte_size(Title2),

	<<Role_idFinal:32/signed,TitleLen:16, Title2/binary>>;
encode_m_family_set_title_tos(_) -> 
	<<>>.

decode_m_family_set_title_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,TitleLen:16, Bin1/binary>> = Bin0,
	<<Title:TitleLen/binary>> = Bin1,

	{m_family_set_title_tos, Role_id,common_tool:to_list(Title)};

decode_m_family_set_title_tos(_) ->
	undefined.
encode_m_family_set_title_toc(Record) when is_record(Record, m_family_set_title_toc) ->
	#m_family_set_title_toc{succ=Succ,reason=Reason,return_self=Return_self,role_id=Role_id,role_name=Role_name,title=Title} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = 0;
		false ->
			Role_idFinal = Role_id
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = <<>>;
		false ->
			Role_nameFinal = Role_name
	end,
	case Title =:= undefined of
		true ->
				TitleFinal = <<>>;
		false ->
			TitleFinal = Title
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),
	Title2 = common_tool:to_binary(TitleFinal),
	TitleLen = erlang:byte_size(Title2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Return_selfFinal:8,Role_idFinal:32/signed,Role_nameLen:16, Role_name2/binary,TitleLen:16, Title2/binary>>;
encode_m_family_set_title_toc(_) -> 
	<<>>.

decode_m_family_set_title_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Return_selfTmp:8,Role_id:32/signed,Role_nameLen:16, Bin2/binary>> = Bin1,
	<<Role_name:Role_nameLen/binary,TitleLen:16, Bin3/binary>> = Bin2,
	<<Title:TitleLen/binary>> = Bin3,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_family_set_title_toc, Succ,common_tool:to_list(Reason),Return_self,Role_id,common_tool:to_list(Role_name),common_tool:to_list(Title)};

decode_m_family_set_title_toc(_) ->
	undefined.
encode_m_family_set_owner_tos(Record) when is_record(Record, m_family_set_owner_tos) ->
	#m_family_set_owner_tos{role_id=Role_id} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, m_family_set_owner_tos, role_id});
		false ->
			Role_idFinal = Role_id
	end,

	<<Role_idFinal:32/signed>>;
encode_m_family_set_owner_tos(_) -> 
	<<>>.

decode_m_family_set_owner_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed>> = Bin0,

	{m_family_set_owner_tos, Role_id};

decode_m_family_set_owner_tos(_) ->
	undefined.
encode_m_family_set_owner_toc(Record) when is_record(Record, m_family_set_owner_toc) ->
	#m_family_set_owner_toc{succ=Succ,reason=Reason,return_self=Return_self,role_id=Role_id} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = 0;
		false ->
			Role_idFinal = Role_id
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Return_selfFinal:8,Role_idFinal:32/signed>>;
encode_m_family_set_owner_toc(_) -> 
	<<>>.

decode_m_family_set_owner_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Return_selfTmp:8,Role_id:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_family_set_owner_toc, Succ,common_tool:to_list(Reason),Return_self,Role_id};

decode_m_family_set_owner_toc(_) ->
	undefined.
encode_m_family_set_second_owner_tos(Record) when is_record(Record, m_family_set_second_owner_tos) ->
	#m_family_set_second_owner_tos{role_id=Role_id} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, m_family_set_second_owner_tos, role_id});
		false ->
			Role_idFinal = Role_id
	end,

	<<Role_idFinal:32/signed>>;
encode_m_family_set_second_owner_tos(_) -> 
	<<>>.

decode_m_family_set_second_owner_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed>> = Bin0,

	{m_family_set_second_owner_tos, Role_id};

decode_m_family_set_second_owner_tos(_) ->
	undefined.
encode_m_family_set_second_owner_toc(Record) when is_record(Record, m_family_set_second_owner_toc) ->
	#m_family_set_second_owner_toc{succ=Succ,reason=Reason,return_self=Return_self,role_id=Role_id,role_name=Role_name} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = 0;
		false ->
			Role_idFinal = Role_id
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = <<>>;
		false ->
			Role_nameFinal = Role_name
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Return_selfFinal:8,Role_idFinal:32/signed,Role_nameLen:16, Role_name2/binary>>;
encode_m_family_set_second_owner_toc(_) -> 
	<<>>.

decode_m_family_set_second_owner_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Return_selfTmp:8,Role_id:32/signed,Role_nameLen:16, Bin2/binary>> = Bin1,
	<<Role_name:Role_nameLen/binary>> = Bin2,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_family_set_second_owner_toc, Succ,common_tool:to_list(Reason),Return_self,Role_id,common_tool:to_list(Role_name)};

decode_m_family_set_second_owner_toc(_) ->
	undefined.
encode_m_family_unset_second_owner_tos(Record) when is_record(Record, m_family_unset_second_owner_tos) ->
	#m_family_unset_second_owner_tos{role_id=Role_id} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, m_family_unset_second_owner_tos, role_id});
		false ->
			Role_idFinal = Role_id
	end,

	<<Role_idFinal:32/signed>>;
encode_m_family_unset_second_owner_tos(_) -> 
	<<>>.

decode_m_family_unset_second_owner_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed>> = Bin0,

	{m_family_unset_second_owner_tos, Role_id};

decode_m_family_unset_second_owner_tos(_) ->
	undefined.
encode_m_family_unset_second_owner_toc(Record) when is_record(Record, m_family_unset_second_owner_toc) ->
	#m_family_unset_second_owner_toc{succ=Succ,reason=Reason,return_self=Return_self,role_id=Role_id} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = 0;
		false ->
			Role_idFinal = Role_id
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Return_selfFinal:8,Role_idFinal:32/signed>>;
encode_m_family_unset_second_owner_toc(_) -> 
	<<>>.

decode_m_family_unset_second_owner_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Return_selfTmp:8,Role_id:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_family_unset_second_owner_toc, Succ,common_tool:to_list(Reason),Return_self,Role_id};

decode_m_family_unset_second_owner_toc(_) ->
	undefined.
encode_m_family_update_pub_notice_tos(Record) when is_record(Record, m_family_update_pub_notice_tos) ->
	#m_family_update_pub_notice_tos{content=Content} = Record,
	case Content =:= undefined of
		true ->
				ContentFinal = undefined,
				exit({required_field_not_assigned, m_family_update_pub_notice_tos, content});
		false ->
			ContentFinal = Content
	end,
	Content2 = common_tool:to_binary(ContentFinal),
	ContentLen = erlang:byte_size(Content2),

	<<ContentLen:16, Content2/binary>>;
encode_m_family_update_pub_notice_tos(_) -> 
	<<>>.

decode_m_family_update_pub_notice_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<ContentLen:16, Bin1/binary>> = Bin0,
	<<Content:ContentLen/binary>> = Bin1,

	{m_family_update_pub_notice_tos, common_tool:to_list(Content)};

decode_m_family_update_pub_notice_tos(_) ->
	undefined.
encode_m_family_update_pub_notice_toc(Record) when is_record(Record, m_family_update_pub_notice_toc) ->
	#m_family_update_pub_notice_toc{succ=Succ,reason=Reason,return_self=Return_self,content=Content} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Content =:= undefined of
		true ->
				ContentFinal = <<>>;
		false ->
			ContentFinal = Content
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Content2 = common_tool:to_binary(ContentFinal),
	ContentLen = erlang:byte_size(Content2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Return_selfFinal:8,ContentLen:16, Content2/binary>>;
encode_m_family_update_pub_notice_toc(_) -> 
	<<>>.

decode_m_family_update_pub_notice_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Return_selfTmp:8,ContentLen:16, Bin2/binary>> = Bin1,
	<<Content:ContentLen/binary>> = Bin2,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_family_update_pub_notice_toc, Succ,common_tool:to_list(Reason),Return_self,common_tool:to_list(Content)};

decode_m_family_update_pub_notice_toc(_) ->
	undefined.
encode_m_family_update_pri_notice_tos(Record) when is_record(Record, m_family_update_pri_notice_tos) ->
	#m_family_update_pri_notice_tos{content=Content} = Record,
	case Content =:= undefined of
		true ->
				ContentFinal = undefined,
				exit({required_field_not_assigned, m_family_update_pri_notice_tos, content});
		false ->
			ContentFinal = Content
	end,
	Content2 = common_tool:to_binary(ContentFinal),
	ContentLen = erlang:byte_size(Content2),

	<<ContentLen:16, Content2/binary>>;
encode_m_family_update_pri_notice_tos(_) -> 
	<<>>.

decode_m_family_update_pri_notice_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<ContentLen:16, Bin1/binary>> = Bin0,
	<<Content:ContentLen/binary>> = Bin1,

	{m_family_update_pri_notice_tos, common_tool:to_list(Content)};

decode_m_family_update_pri_notice_tos(_) ->
	undefined.
encode_m_family_update_pri_notice_toc(Record) when is_record(Record, m_family_update_pri_notice_toc) ->
	#m_family_update_pri_notice_toc{succ=Succ,reason=Reason,return_self=Return_self,content=Content} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Content =:= undefined of
		true ->
				ContentFinal = <<>>;
		false ->
			ContentFinal = Content
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Content2 = common_tool:to_binary(ContentFinal),
	ContentLen = erlang:byte_size(Content2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Return_selfFinal:8,ContentLen:16, Content2/binary>>;
encode_m_family_update_pri_notice_toc(_) -> 
	<<>>.

decode_m_family_update_pri_notice_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Return_selfTmp:8,ContentLen:16, Bin2/binary>> = Bin1,
	<<Content:ContentLen/binary>> = Bin2,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_family_update_pri_notice_toc, Succ,common_tool:to_list(Reason),Return_self,common_tool:to_list(Content)};

decode_m_family_update_pri_notice_toc(_) ->
	undefined.
encode_m_family_update_connect_number_tos(Record) when is_record(Record, m_family_update_connect_number_tos) ->
	#m_family_update_connect_number_tos{content=Content,type=Type} = Record,
	case Content =:= undefined of
		true ->
				ContentFinal = undefined,
				exit({required_field_not_assigned, m_family_update_connect_number_tos, content});
		false ->
			ContentFinal = Content
	end,
	case Type =:= undefined of
		true ->
				TypeFinal = undefined,
				exit({required_field_not_assigned, m_family_update_connect_number_tos, type});
		false ->
			TypeFinal = Type
	end,
	Content2 = common_tool:to_binary(ContentFinal),
	ContentLen = erlang:byte_size(Content2),
	Type2 = common_tool:to_binary(TypeFinal),
	TypeLen = erlang:byte_size(Type2),

	<<ContentLen:16, Content2/binary,TypeLen:16, Type2/binary>>;
encode_m_family_update_connect_number_tos(_) -> 
	<<>>.

decode_m_family_update_connect_number_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<ContentLen:16, Bin1/binary>> = Bin0,
	<<Content:ContentLen/binary,TypeLen:16, Bin2/binary>> = Bin1,
	<<Type:TypeLen/binary>> = Bin2,

	{m_family_update_connect_number_tos, common_tool:to_list(Content),common_tool:to_list(Type)};

decode_m_family_update_connect_number_tos(_) ->
	undefined.
encode_m_family_update_connect_number_toc(Record) when is_record(Record, m_family_update_connect_number_toc) ->
	#m_family_update_connect_number_toc{succ=Succ,reason=Reason,return_self=Return_self,content=Content,type=Type} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Content =:= undefined of
		true ->
				ContentFinal = <<>>;
		false ->
			ContentFinal = Content
	end,
	case Type =:= undefined of
		true ->
				TypeFinal = undefined,
				exit({required_field_not_assigned, m_family_update_connect_number_toc, type});
		false ->
			TypeFinal = Type
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Content2 = common_tool:to_binary(ContentFinal),
	ContentLen = erlang:byte_size(Content2),
	Type2 = common_tool:to_binary(TypeFinal),
	TypeLen = erlang:byte_size(Type2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Return_selfFinal:8,ContentLen:16, Content2/binary,TypeLen:16, Type2/binary>>;
encode_m_family_update_connect_number_toc(_) -> 
	<<>>.

decode_m_family_update_connect_number_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Return_selfTmp:8,ContentLen:16, Bin2/binary>> = Bin1,
	<<Content:ContentLen/binary,TypeLen:16, Bin3/binary>> = Bin2,
	<<Type:TypeLen/binary>> = Bin3,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_family_update_connect_number_toc, Succ,common_tool:to_list(Reason),Return_self,common_tool:to_list(Content),common_tool:to_list(Type)};

decode_m_family_update_connect_number_toc(_) ->
	undefined.
encode_m_family_refuse_f_tos(Record) when is_record(Record, m_family_refuse_f_tos) ->
	#m_family_refuse_f_tos{role_id=Role_id} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, m_family_refuse_f_tos, role_id});
		false ->
			Role_idFinal = Role_id
	end,

	<<Role_idFinal:32/signed>>;
encode_m_family_refuse_f_tos(_) -> 
	<<>>.

decode_m_family_refuse_f_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed>> = Bin0,

	{m_family_refuse_f_tos, Role_id};

decode_m_family_refuse_f_tos(_) ->
	undefined.
encode_m_family_refuse_f_toc(Record) when is_record(Record, m_family_refuse_f_toc) ->
	#m_family_refuse_f_toc{succ=Succ,reason=Reason,return_self=Return_self,family_name=Family_name} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Family_name =:= undefined of
		true ->
				Family_nameFinal = <<>>;
		false ->
			Family_nameFinal = Family_name
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Family_name2 = common_tool:to_binary(Family_nameFinal),
	Family_nameLen = erlang:byte_size(Family_name2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Return_selfFinal:8,Family_nameLen:16, Family_name2/binary>>;
encode_m_family_refuse_f_toc(_) -> 
	<<>>.

decode_m_family_refuse_f_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Return_selfTmp:8,Family_nameLen:16, Bin2/binary>> = Bin1,
	<<Family_name:Family_nameLen/binary>> = Bin2,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_family_refuse_f_toc, Succ,common_tool:to_list(Reason),Return_self,common_tool:to_list(Family_name)};

decode_m_family_refuse_f_toc(_) ->
	undefined.
encode_m_family_fire_tos(Record) when is_record(Record, m_family_fire_tos) ->
	#m_family_fire_tos{role_id=Role_id} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, m_family_fire_tos, role_id});
		false ->
			Role_idFinal = Role_id
	end,

	<<Role_idFinal:32/signed>>;
encode_m_family_fire_tos(_) -> 
	<<>>.

decode_m_family_fire_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed>> = Bin0,

	{m_family_fire_tos, Role_id};

decode_m_family_fire_tos(_) ->
	undefined.
encode_m_family_fire_toc(Record) when is_record(Record, m_family_fire_toc) ->
	#m_family_fire_toc{succ=Succ,reason=Reason,return_self=Return_self,role_id=Role_id,role_name=Role_name} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = 0;
		false ->
			Role_idFinal = Role_id
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = <<>>;
		false ->
			Role_nameFinal = Role_name
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Return_selfFinal:8,Role_idFinal:32/signed,Role_nameLen:16, Role_name2/binary>>;
encode_m_family_fire_toc(_) -> 
	<<>>.

decode_m_family_fire_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Return_selfTmp:8,Role_id:32/signed,Role_nameLen:16, Bin2/binary>> = Bin1,
	<<Role_name:Role_nameLen/binary>> = Bin2,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_family_fire_toc, Succ,common_tool:to_list(Reason),Return_self,Role_id,common_tool:to_list(Role_name)};

decode_m_family_fire_toc(_) ->
	undefined.
encode_m_family_agree_tos(Record) when is_record(Record, m_family_agree_tos) ->
	#m_family_agree_tos{family_id=Family_id} = Record,
	case Family_id =:= undefined of
		true ->
				Family_idFinal = undefined,
				exit({required_field_not_assigned, m_family_agree_tos, family_id});
		false ->
			Family_idFinal = Family_id
	end,

	<<Family_idFinal:32/signed>>;
encode_m_family_agree_tos(_) -> 
	<<>>.

decode_m_family_agree_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Family_id:32/signed>> = Bin0,

	{m_family_agree_tos, Family_id};

decode_m_family_agree_tos(_) ->
	undefined.
encode_m_family_agree_toc(Record) when is_record(Record, m_family_agree_toc) ->
	#m_family_agree_toc{succ=Succ,reason=Reason,return_self=Return_self,member_info=Member_info,family_info=Family_info} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Member_info =:= undefined of
		true ->
				Member_infoFinal = 0;
		false ->
			Member_infoFinal = Member_info
	end,
	case Family_info =:= undefined of
		true ->
				Family_infoFinal = 0;
		false ->
			Family_infoFinal = Family_info
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Member_info_bin = encode_p_family_member_info(Member_infoFinal),
	BinLen_member_info = erlang:byte_size(Member_info_bin),
	Family_info_bin = encode_p_family_info(Family_infoFinal),
	BinLen_family_info = erlang:byte_size(Family_info_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Return_selfFinal:8,BinLen_member_info:32, Member_info_bin/binary,BinLen_family_info:32, Family_info_bin/binary>>;
encode_m_family_agree_toc(_) -> 
	<<>>.

decode_m_family_agree_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Return_selfTmp:8,SubBinSizemember_info:32, Bin2/binary>> = Bin1,
	<<SubBinmember_info:SubBinSizemember_info/binary, Bin3/binary>> = Bin2,
	Member_info = decode_p_family_member_info(SubBinmember_info),
	<<_SubBinSizefamily_info:32, SubBinfamily_info/binary>> = Bin3,
	Family_info = decode_p_family_info(SubBinfamily_info),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_family_agree_toc, Succ,common_tool:to_list(Reason),Return_self,Member_info,Family_info};

decode_m_family_agree_toc(_) ->
	undefined.
encode_m_family_leave_tos(Record) when is_record(Record, m_family_leave_tos) ->
	#m_family_leave_tos{} = Record,

	<<>>;
encode_m_family_leave_tos(_) -> 
	<<>>.

decode_m_family_leave_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_family_leave_tos};

decode_m_family_leave_tos(_) ->
	undefined.
encode_m_family_leave_toc(Record) when is_record(Record, m_family_leave_toc) ->
	#m_family_leave_toc{succ=Succ,reason=Reason,return_self=Return_self,role_id=Role_id} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = 0;
		false ->
			Role_idFinal = Role_id
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Return_selfFinal:8,Role_idFinal:32/signed>>;
encode_m_family_leave_toc(_) -> 
	<<>>.

decode_m_family_leave_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Return_selfTmp:8,Role_id:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_family_leave_toc, Succ,common_tool:to_list(Reason),Return_self,Role_id};

decode_m_family_leave_toc(_) ->
	undefined.
encode_m_family_leave_map_tos(Record) when is_record(Record, m_family_leave_map_tos) ->
	#m_family_leave_map_tos{} = Record,

	<<>>;
encode_m_family_leave_map_tos(_) -> 
	<<>>.

decode_m_family_leave_map_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_family_leave_map_tos};

decode_m_family_leave_map_tos(_) ->
	undefined.
encode_m_family_leave_map_toc(Record) when is_record(Record, m_family_leave_map_toc) ->
	#m_family_leave_map_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_family_leave_map_toc(_) -> 
	<<>>.

decode_m_family_leave_map_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_family_leave_map_toc, Succ,common_tool:to_list(Reason)};

decode_m_family_leave_map_toc(_) ->
	undefined.
encode_m_family_enter_bossmap_tos(Record) when is_record(Record, m_family_enter_bossmap_tos) ->
	#m_family_enter_bossmap_tos{} = Record,

	<<>>;
encode_m_family_enter_bossmap_tos(_) -> 
	<<>>.

decode_m_family_enter_bossmap_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_family_enter_bossmap_tos};

decode_m_family_enter_bossmap_tos(_) ->
	undefined.
encode_m_family_enter_bossmap_toc(Record) when is_record(Record, m_family_enter_bossmap_toc) ->
	#m_family_enter_bossmap_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_family_enter_bossmap_toc(_) -> 
	<<>>.

decode_m_family_enter_bossmap_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_family_enter_bossmap_toc, Succ,common_tool:to_list(Reason)};

decode_m_family_enter_bossmap_toc(_) ->
	undefined.
encode_m_family_leave_bossmap_tos(Record) when is_record(Record, m_family_leave_bossmap_tos) ->
	#m_family_leave_bossmap_tos{} = Record,

	<<>>;
encode_m_family_leave_bossmap_tos(_) -> 
	<<>>.

decode_m_family_leave_bossmap_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_family_leave_bossmap_tos};

decode_m_family_leave_bossmap_tos(_) ->
	undefined.
encode_m_family_leave_bossmap_toc(Record) when is_record(Record, m_family_leave_bossmap_toc) ->
	#m_family_leave_bossmap_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_family_leave_bossmap_toc(_) -> 
	<<>>.

decode_m_family_leave_bossmap_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_family_leave_bossmap_toc, Succ,common_tool:to_list(Reason)};

decode_m_family_leave_bossmap_toc(_) ->
	undefined.
encode_m_family_role_online_toc(Record) when is_record(Record, m_family_role_online_toc) ->
	#m_family_role_online_toc{role_id=Role_id} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, m_family_role_online_toc, role_id});
		false ->
			Role_idFinal = Role_id
	end,

	<<Role_idFinal:32/signed>>;
encode_m_family_role_online_toc(_) -> 
	<<>>.

decode_m_family_role_online_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed>> = Bin0,

	{m_family_role_online_toc, Role_id};

decode_m_family_role_online_toc(_) ->
	undefined.
encode_m_family_role_offline_toc(Record) when is_record(Record, m_family_role_offline_toc) ->
	#m_family_role_offline_toc{role_id=Role_id} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, m_family_role_offline_toc, role_id});
		false ->
			Role_idFinal = Role_id
	end,

	<<Role_idFinal:32/signed>>;
encode_m_family_role_offline_toc(_) -> 
	<<>>.

decode_m_family_role_offline_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed>> = Bin0,

	{m_family_role_offline_toc, Role_id};

decode_m_family_role_offline_toc(_) ->
	undefined.
encode_m_family_can_invite_tos(Record) when is_record(Record, m_family_can_invite_tos) ->
	#m_family_can_invite_tos{} = Record,

	<<>>;
encode_m_family_can_invite_tos(_) -> 
	<<>>.

decode_m_family_can_invite_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_family_can_invite_tos};

decode_m_family_can_invite_tos(_) ->
	undefined.
encode_m_family_can_invite_toc(Record) when is_record(Record, m_family_can_invite_toc) ->
	#m_family_can_invite_toc{roles=Roles} = Record,
	case Roles =:= undefined of
		true ->
			RolesFinal = [];
		false ->
			RolesFinal = Roles
	end,
	Roles_bin = encode_p_recommend_member_infos(RolesFinal, <<>>),
	SizeRolesFinal = erlang:length(RolesFinal),
	BinLen_roles = erlang:byte_size(Roles_bin),

	<<SizeRolesFinal:16, BinLen_roles:32, Roles_bin/binary>>;
encode_m_family_can_invite_toc(_) -> 
	<<>>.

decode_m_family_can_invite_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizeroles:16, _BinLenroles:32, SubBinroles/binary>> = Bin0,
	Roles = lists:reverse(decode_p_recommend_member_infos(SubBinroles, [])),

	{m_family_can_invite_toc, Roles};

decode_m_family_can_invite_toc(_) ->
	undefined.
encode_m_family_cancel_title_tos(Record) when is_record(Record, m_family_cancel_title_tos) ->
	#m_family_cancel_title_tos{role_id=Role_id} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, m_family_cancel_title_tos, role_id});
		false ->
			Role_idFinal = Role_id
	end,

	<<Role_idFinal:32/signed>>;
encode_m_family_cancel_title_tos(_) -> 
	<<>>.

decode_m_family_cancel_title_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed>> = Bin0,

	{m_family_cancel_title_tos, Role_id};

decode_m_family_cancel_title_tos(_) ->
	undefined.
encode_m_family_cancel_title_toc(Record) when is_record(Record, m_family_cancel_title_toc) ->
	#m_family_cancel_title_toc{succ=Succ,reason=Reason,role_id=Role_id} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = 0;
		false ->
			Role_idFinal = Role_id
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Role_idFinal:32/signed>>;
encode_m_family_cancel_title_toc(_) -> 
	<<>>.

decode_m_family_cancel_title_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Role_id:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_family_cancel_title_toc, Succ,common_tool:to_list(Reason),Role_id};

decode_m_family_cancel_title_toc(_) ->
	undefined.
encode_m_family_enable_map_tos(Record) when is_record(Record, m_family_enable_map_tos) ->
	#m_family_enable_map_tos{} = Record,

	<<>>;
encode_m_family_enable_map_tos(_) -> 
	<<>>.

decode_m_family_enable_map_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_family_enable_map_tos};

decode_m_family_enable_map_tos(_) ->
	undefined.
encode_m_family_enable_map_toc(Record) when is_record(Record, m_family_enable_map_toc) ->
	#m_family_enable_map_toc{succ=Succ,reason=Reason,return_self=Return_self} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Return_selfFinal:8>>;
encode_m_family_enable_map_toc(_) -> 
	<<>>.

decode_m_family_enable_map_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Return_selfTmp:8>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_family_enable_map_toc, Succ,common_tool:to_list(Reason),Return_self};

decode_m_family_enable_map_toc(_) ->
	undefined.
encode_m_family_del_request_toc(Record) when is_record(Record, m_family_del_request_toc) ->
	#m_family_del_request_toc{role_id=Role_id} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, m_family_del_request_toc, role_id});
		false ->
			Role_idFinal = Role_id
	end,

	<<Role_idFinal:32/signed>>;
encode_m_family_del_request_toc(_) -> 
	<<>>.

decode_m_family_del_request_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed>> = Bin0,

	{m_family_del_request_toc, Role_id};

decode_m_family_del_request_toc(_) ->
	undefined.
encode_m_family_map_closed_toc(Record) when is_record(Record, m_family_map_closed_toc) ->
	#m_family_map_closed_toc{} = Record,

	<<>>;
encode_m_family_map_closed_toc(_) -> 
	<<>>.

decode_m_family_map_closed_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_family_map_closed_toc};

decode_m_family_map_closed_toc(_) ->
	undefined.
encode_p_family_request_info(Record) when is_record(Record, p_family_request_info) ->
	#p_family_request_info{role_id=Role_id,family_id=Family_id} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, p_family_request_info, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Family_id =:= undefined of
		true ->
				Family_idFinal = undefined,
				exit({required_field_not_assigned, p_family_request_info, family_id});
		false ->
			Family_idFinal = Family_id
	end,

	<<Role_idFinal:32/signed,Family_idFinal:32/signed>>;
encode_p_family_request_info(_) -> 
	<<>>.

decode_p_family_request_info(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,Family_id:32/signed>> = Bin0,

	{p_family_request_info, Role_id,Family_id};

decode_p_family_request_info(_) ->
	undefined.
encode_m_family_info_change_toc(Record) when is_record(Record, m_family_info_change_toc) ->
	#m_family_info_change_toc{changes=Changes} = Record,
	case Changes =:= undefined of
		true ->
			ChangesFinal = [];
		false ->
			ChangesFinal = Changes
	end,
	Changes_bin = encode_p_family_info_changes(ChangesFinal, <<>>),
	SizeChangesFinal = erlang:length(ChangesFinal),
	BinLen_changes = erlang:byte_size(Changes_bin),

	<<SizeChangesFinal:16, BinLen_changes:32, Changes_bin/binary>>;
encode_m_family_info_change_toc(_) -> 
	<<>>.

decode_m_family_info_change_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizechanges:16, _BinLenchanges:32, SubBinchanges/binary>> = Bin0,
	Changes = lists:reverse(decode_p_family_info_changes(SubBinchanges, [])),

	{m_family_info_change_toc, Changes};

decode_m_family_info_change_toc(_) ->
	undefined.
encode_m_family_active_points_toc(Record) when is_record(Record, m_family_active_points_toc) ->
	#m_family_active_points_toc{new_points=New_points} = Record,
	case New_points =:= undefined of
		true ->
				New_pointsFinal = undefined,
				exit({required_field_not_assigned, m_family_active_points_toc, new_points});
		false ->
			New_pointsFinal = New_points
	end,

	<<New_pointsFinal:32/signed>>;
encode_m_family_active_points_toc(_) -> 
	<<>>.

decode_m_family_active_points_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<New_points:32/signed>> = Bin0,

	{m_family_active_points_toc, New_points};

decode_m_family_active_points_toc(_) ->
	undefined.
encode_m_family_money_toc(Record) when is_record(Record, m_family_money_toc) ->
	#m_family_money_toc{new_money=New_money} = Record,
	case New_money =:= undefined of
		true ->
				New_moneyFinal = undefined,
				exit({required_field_not_assigned, m_family_money_toc, new_money});
		false ->
			New_moneyFinal = New_money
	end,

	<<New_moneyFinal:32/signed>>;
encode_m_family_money_toc(_) -> 
	<<>>.

decode_m_family_money_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<New_money:32/signed>> = Bin0,

	{m_family_money_toc, New_money};

decode_m_family_money_toc(_) ->
	undefined.
encode_m_family_downlevel_toc(Record) when is_record(Record, m_family_downlevel_toc) ->
	#m_family_downlevel_toc{level=Level,reason=Reason} = Record,
	case Level =:= undefined of
		true ->
				LevelFinal = undefined,
				exit({required_field_not_assigned, m_family_downlevel_toc, level});
		false ->
			LevelFinal = Level
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<LevelFinal:32/signed,ReasonLen:16, Reason2/binary>>;
encode_m_family_downlevel_toc(_) -> 
	<<>>.

decode_m_family_downlevel_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Level:32/signed,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,

	{m_family_downlevel_toc, Level,common_tool:to_list(Reason)};

decode_m_family_downlevel_toc(_) ->
	undefined.
encode_m_family_callmember_toc(Record) when is_record(Record, m_family_callmember_toc) ->
	#m_family_callmember_toc{call_type=Call_type,succ=Succ,reason=Reason,message=Message} = Record,
	case Call_type =:= undefined of
		true ->
				Call_typeFinal = 1;
		false ->
			Call_typeFinal = Call_type
	end,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Message =:= undefined of
		true ->
				MessageFinal = <<>>;
		false ->
			MessageFinal = Message
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Message2 = common_tool:to_binary(MessageFinal),
	MessageLen = erlang:byte_size(Message2),

	<<Call_typeFinal:32/signed,SuccFinal:8,ReasonLen:16, Reason2/binary,MessageLen:16, Message2/binary>>;
encode_m_family_callmember_toc(_) -> 
	<<>>.

decode_m_family_callmember_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Call_type:32/signed,SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,MessageLen:16, Bin2/binary>> = Bin1,
	<<Message:MessageLen/binary>> = Bin2,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_family_callmember_toc, Call_type,Succ,common_tool:to_list(Reason),common_tool:to_list(Message)};

decode_m_family_callmember_toc(_) ->
	undefined.
encode_m_family_callmember_tos(Record) when is_record(Record, m_family_callmember_tos) ->
	#m_family_callmember_tos{message=Message} = Record,
	case Message =:= undefined of
		true ->
				MessageFinal = undefined,
				exit({required_field_not_assigned, m_family_callmember_tos, message});
		false ->
			MessageFinal = Message
	end,
	Message2 = common_tool:to_binary(MessageFinal),
	MessageLen = erlang:byte_size(Message2),

	<<MessageLen:16, Message2/binary>>;
encode_m_family_callmember_tos(_) -> 
	<<>>.

decode_m_family_callmember_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<MessageLen:16, Bin1/binary>> = Bin0,
	<<Message:MessageLen/binary>> = Bin1,

	{m_family_callmember_tos, common_tool:to_list(Message)};

decode_m_family_callmember_tos(_) ->
	undefined.
encode_m_family_member_enter_map_toc(Record) when is_record(Record, m_family_member_enter_map_toc) ->
	#m_family_member_enter_map_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_family_member_enter_map_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_family_member_enter_map_toc(_) -> 
	<<>>.

decode_m_family_member_enter_map_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_family_member_enter_map_toc, Succ,common_tool:to_list(Reason)};

decode_m_family_member_enter_map_toc(_) ->
	undefined.
encode_m_family_member_enter_map_tos(Record) when is_record(Record, m_family_member_enter_map_tos) ->
	#m_family_member_enter_map_tos{call_type=Call_type} = Record,
	case Call_type =:= undefined of
		true ->
				Call_typeFinal = 1;
		false ->
			Call_typeFinal = Call_type
	end,

	<<Call_typeFinal:32/signed>>;
encode_m_family_member_enter_map_tos(_) -> 
	<<>>.

decode_m_family_member_enter_map_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Call_type:32/signed>> = Bin0,

	{m_family_member_enter_map_tos, Call_type};

decode_m_family_member_enter_map_tos(_) ->
	undefined.
encode_m_family_maintainfail_toc(Record) when is_record(Record, m_family_maintainfail_toc) ->
	#m_family_maintainfail_toc{message=Message,result=Result,new_level=New_level} = Record,
	case Message =:= undefined of
		true ->
				MessageFinal = undefined,
				exit({required_field_not_assigned, m_family_maintainfail_toc, message});
		false ->
			MessageFinal = Message
	end,
	case Result =:= undefined of
		true ->
				ResultFinal = undefined,
				exit({required_field_not_assigned, m_family_maintainfail_toc, result});
		false ->
			ResultFinal = Result
	end,
	case New_level =:= undefined of
		true ->
				New_levelFinal = 0;
		false ->
			New_levelFinal = New_level
	end,
	Message2 = common_tool:to_binary(MessageFinal),
	MessageLen = erlang:byte_size(Message2),

	<<MessageLen:16, Message2/binary,ResultFinal:32/signed,New_levelFinal:32/signed>>;
encode_m_family_maintainfail_toc(_) -> 
	<<>>.

decode_m_family_maintainfail_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<MessageLen:16, Bin1/binary>> = Bin0,
	<<Message:MessageLen/binary,Result:32/signed,New_level:32/signed>> = Bin1,

	{m_family_maintainfail_toc, common_tool:to_list(Message),Result,New_level};

decode_m_family_maintainfail_toc(_) ->
	undefined.
encode_m_family_activestate_toc(Record) when is_record(Record, m_family_activestate_toc) ->
	#m_family_activestate_toc{succ=Succ,familytasklist=Familytasklist} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Familytasklist =:= undefined of
		true ->
			FamilytasklistFinal = [];
		false ->
			FamilytasklistFinal = Familytasklist
	end,
	Familytasklist_bin = encode_p_family_tasks(FamilytasklistFinal, <<>>),
	SizeFamilytasklistFinal = erlang:length(FamilytasklistFinal),
	BinLen_familytasklist = erlang:byte_size(Familytasklist_bin),

	<<SuccFinal:8,SizeFamilytasklistFinal:16, BinLen_familytasklist:32, Familytasklist_bin/binary>>;
encode_m_family_activestate_toc(_) -> 
	<<>>.

decode_m_family_activestate_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,_Sizefamilytasklist:16, _BinLenfamilytasklist:32, SubBinfamilytasklist/binary>> = Bin0,
	Familytasklist = lists:reverse(decode_p_family_tasks(SubBinfamilytasklist, [])),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_family_activestate_toc, Succ,Familytasklist};

decode_m_family_activestate_toc(_) ->
	undefined.
encode_m_family_activestate_tos(Record) when is_record(Record, m_family_activestate_tos) ->
	#m_family_activestate_tos{family_id=Family_id} = Record,
	case Family_id =:= undefined of
		true ->
				Family_idFinal = undefined,
				exit({required_field_not_assigned, m_family_activestate_tos, family_id});
		false ->
			Family_idFinal = Family_id
	end,

	<<Family_idFinal:32/signed>>;
encode_m_family_activestate_tos(_) -> 
	<<>>.

decode_m_family_activestate_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Family_id:32/signed>> = Bin0,

	{m_family_activestate_tos, Family_id};

decode_m_family_activestate_tos(_) ->
	undefined.
encode_m_family_membergather_toc(Record) when is_record(Record, m_family_membergather_toc) ->
	#m_family_membergather_toc{message=Message} = Record,
	case Message =:= undefined of
		true ->
				MessageFinal = undefined,
				exit({required_field_not_assigned, m_family_membergather_toc, message});
		false ->
			MessageFinal = Message
	end,
	Message2 = common_tool:to_binary(MessageFinal),
	MessageLen = erlang:byte_size(Message2),

	<<MessageLen:16, Message2/binary>>;
encode_m_family_membergather_toc(_) -> 
	<<>>.

decode_m_family_membergather_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<MessageLen:16, Bin1/binary>> = Bin0,
	<<Message:MessageLen/binary>> = Bin1,

	{m_family_membergather_toc, common_tool:to_list(Message)};

decode_m_family_membergather_toc(_) ->
	undefined.
encode_m_family_gatherrequest_tos(Record) when is_record(Record, m_family_gatherrequest_tos) ->
	#m_family_gatherrequest_tos{} = Record,

	<<>>;
encode_m_family_gatherrequest_tos(_) -> 
	<<>>.

decode_m_family_gatherrequest_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_family_gatherrequest_tos};

decode_m_family_gatherrequest_tos(_) ->
	undefined.
encode_m_family_gatherrequest_toc(Record) when is_record(Record, m_family_gatherrequest_toc) ->
	#m_family_gatherrequest_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_family_gatherrequest_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = undefined,
				exit({required_field_not_assigned, m_family_gatherrequest_toc, reason});
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_family_gatherrequest_toc(_) -> 
	<<>>.

decode_m_family_gatherrequest_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_family_gatherrequest_toc, Succ,common_tool:to_list(Reason)};

decode_m_family_gatherrequest_toc(_) ->
	undefined.
encode_m_family_detail_tos(Record) when is_record(Record, m_family_detail_tos) ->
	#m_family_detail_tos{family_id=Family_id} = Record,
	case Family_id =:= undefined of
		true ->
				Family_idFinal = undefined,
				exit({required_field_not_assigned, m_family_detail_tos, family_id});
		false ->
			Family_idFinal = Family_id
	end,

	<<Family_idFinal:32/signed>>;
encode_m_family_detail_tos(_) -> 
	<<>>.

decode_m_family_detail_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Family_id:32/signed>> = Bin0,

	{m_family_detail_tos, Family_id};

decode_m_family_detail_tos(_) ->
	undefined.
encode_m_family_detail_toc(Record) when is_record(Record, m_family_detail_toc) ->
	#m_family_detail_toc{succ=Succ,reason=Reason,content=Content} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Content =:= undefined of
		true ->
				ContentFinal = 0;
		false ->
			ContentFinal = Content
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Content_bin = encode_p_family_info(ContentFinal),
	BinLen_content = erlang:byte_size(Content_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_content:32, Content_bin/binary>>;
encode_m_family_detail_toc(_) -> 
	<<>>.

decode_m_family_detail_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_SubBinSizecontent:32, SubBincontent/binary>> = Bin1,
	Content = decode_p_family_info(SubBincontent),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_family_detail_toc, Succ,common_tool:to_list(Reason),Content};

decode_m_family_detail_toc(_) ->
	undefined.
encode_m_family_collect_begin_toc(Record) when is_record(Record, m_family_collect_begin_toc) ->
	#m_family_collect_begin_toc{left_tick=Left_tick} = Record,
	case Left_tick =:= undefined of
		true ->
				Left_tickFinal = undefined,
				exit({required_field_not_assigned, m_family_collect_begin_toc, left_tick});
		false ->
			Left_tickFinal = Left_tick
	end,

	<<Left_tickFinal:32/signed>>;
encode_m_family_collect_begin_toc(_) -> 
	<<>>.

decode_m_family_collect_begin_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Left_tick:32/signed>> = Bin0,

	{m_family_collect_begin_toc, Left_tick};

decode_m_family_collect_begin_toc(_) ->
	undefined.
encode_m_family_collect_info_toc(Record) when is_record(Record, m_family_collect_info_toc) ->
	#m_family_collect_info_toc{score=Score,collect_num=Collect_num,monster_kill_num=Monster_kill_num,left_tick=Left_tick} = Record,
	case Score =:= undefined of
		true ->
				ScoreFinal = 0;
		false ->
			ScoreFinal = Score
	end,
	case Collect_num =:= undefined of
		true ->
				Collect_numFinal = 0;
		false ->
			Collect_numFinal = Collect_num
	end,
	case Monster_kill_num =:= undefined of
		true ->
				Monster_kill_numFinal = 0;
		false ->
			Monster_kill_numFinal = Monster_kill_num
	end,
	case Left_tick =:= undefined of
		true ->
				Left_tickFinal = undefined,
				exit({required_field_not_assigned, m_family_collect_info_toc, left_tick});
		false ->
			Left_tickFinal = Left_tick
	end,

	<<ScoreFinal:32/signed,Collect_numFinal:32/signed,Monster_kill_numFinal:32/signed,Left_tickFinal:32/signed>>;
encode_m_family_collect_info_toc(_) -> 
	<<>>.

decode_m_family_collect_info_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Score:32/signed,Collect_num:32/signed,Monster_kill_num:32/signed,Left_tick:32/signed>> = Bin0,

	{m_family_collect_info_toc, Score,Collect_num,Monster_kill_num,Left_tick};

decode_m_family_collect_info_toc(_) ->
	undefined.
encode_m_family_collect_prize_info_tos(Record) when is_record(Record, m_family_collect_prize_info_tos) ->
	#m_family_collect_prize_info_tos{} = Record,

	<<>>;
encode_m_family_collect_prize_info_tos(_) -> 
	<<>>.

decode_m_family_collect_prize_info_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_family_collect_prize_info_tos};

decode_m_family_collect_prize_info_tos(_) ->
	undefined.
encode_m_family_collect_prize_info_toc(Record) when is_record(Record, m_family_collect_prize_info_toc) ->
	#m_family_collect_prize_info_toc{succ=Succ,reason=Reason,info=Info} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Info =:= undefined of
		true ->
				InfoFinal = 0;
		false ->
			InfoFinal = Info
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Info_bin = encode_p_family_collect_role_prize_info(InfoFinal),
	BinLen_info = erlang:byte_size(Info_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_info:32, Info_bin/binary>>;
encode_m_family_collect_prize_info_toc(_) -> 
	<<>>.

decode_m_family_collect_prize_info_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_SubBinSizeinfo:32, SubBininfo/binary>> = Bin1,
	Info = decode_p_family_collect_role_prize_info(SubBininfo),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_family_collect_prize_info_toc, Succ,common_tool:to_list(Reason),Info};

decode_m_family_collect_prize_info_toc(_) ->
	undefined.
encode_m_family_collect_refresh_prize_tos(Record) when is_record(Record, m_family_collect_refresh_prize_tos) ->
	#m_family_collect_refresh_prize_tos{} = Record,

	<<>>;
encode_m_family_collect_refresh_prize_tos(_) -> 
	<<>>.

decode_m_family_collect_refresh_prize_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_family_collect_refresh_prize_tos};

decode_m_family_collect_refresh_prize_tos(_) ->
	undefined.
encode_m_family_collect_refresh_prize_toc(Record) when is_record(Record, m_family_collect_refresh_prize_toc) ->
	#m_family_collect_refresh_prize_toc{succ=Succ,reason=Reason,info=Info} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Info =:= undefined of
		true ->
				InfoFinal = 0;
		false ->
			InfoFinal = Info
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Info_bin = encode_p_family_collect_role_prize_info(InfoFinal),
	BinLen_info = erlang:byte_size(Info_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_info:32, Info_bin/binary>>;
encode_m_family_collect_refresh_prize_toc(_) -> 
	<<>>.

decode_m_family_collect_refresh_prize_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_SubBinSizeinfo:32, SubBininfo/binary>> = Bin1,
	Info = decode_p_family_collect_role_prize_info(SubBininfo),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_family_collect_refresh_prize_toc, Succ,common_tool:to_list(Reason),Info};

decode_m_family_collect_refresh_prize_toc(_) ->
	undefined.
encode_m_family_collect_get_prize_tos(Record) when is_record(Record, m_family_collect_get_prize_tos) ->
	#m_family_collect_get_prize_tos{} = Record,

	<<>>;
encode_m_family_collect_get_prize_tos(_) -> 
	<<>>.

decode_m_family_collect_get_prize_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_family_collect_get_prize_tos};

decode_m_family_collect_get_prize_tos(_) ->
	undefined.
encode_m_family_collect_get_prize_toc(Record) when is_record(Record, m_family_collect_get_prize_toc) ->
	#m_family_collect_get_prize_toc{succ=Succ,reason=Reason,addexp=Addexp} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Addexp =:= undefined of
		true ->
				AddexpFinal = 0;
		false ->
			AddexpFinal = Addexp
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,AddexpFinal:32/signed>>;
encode_m_family_collect_get_prize_toc(_) -> 
	<<>>.

decode_m_family_collect_get_prize_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Addexp:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_family_collect_get_prize_toc, Succ,common_tool:to_list(Reason),Addexp};

decode_m_family_collect_get_prize_toc(_) ->
	undefined.
encode_m_family_set_bonfire_start_time_tos(Record) when is_record(Record, m_family_set_bonfire_start_time_tos) ->
	#m_family_set_bonfire_start_time_tos{hour=Hour,minute=Minute,seconds=Seconds} = Record,
	case Hour =:= undefined of
		true ->
				HourFinal = 0;
		false ->
			HourFinal = Hour
	end,
	case Minute =:= undefined of
		true ->
				MinuteFinal = 0;
		false ->
			MinuteFinal = Minute
	end,
	case Seconds =:= undefined of
		true ->
				SecondsFinal = 0;
		false ->
			SecondsFinal = Seconds
	end,

	<<HourFinal:32/signed,MinuteFinal:32/signed,SecondsFinal:32/signed>>;
encode_m_family_set_bonfire_start_time_tos(_) -> 
	<<>>.

decode_m_family_set_bonfire_start_time_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Hour:32/signed,Minute:32/signed,Seconds:32/signed>> = Bin0,

	{m_family_set_bonfire_start_time_tos, Hour,Minute,Seconds};

decode_m_family_set_bonfire_start_time_tos(_) ->
	undefined.
encode_m_family_set_bonfire_start_time_toc(Record) when is_record(Record, m_family_set_bonfire_start_time_toc) ->
	#m_family_set_bonfire_start_time_toc{succ=Succ,reason=Reason,hour=Hour,minute=Minute,seconds=Seconds} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Hour =:= undefined of
		true ->
				HourFinal = 0;
		false ->
			HourFinal = Hour
	end,
	case Minute =:= undefined of
		true ->
				MinuteFinal = 0;
		false ->
			MinuteFinal = Minute
	end,
	case Seconds =:= undefined of
		true ->
				SecondsFinal = 0;
		false ->
			SecondsFinal = Seconds
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,HourFinal:32/signed,MinuteFinal:32/signed,SecondsFinal:32/signed>>;
encode_m_family_set_bonfire_start_time_toc(_) -> 
	<<>>.

decode_m_family_set_bonfire_start_time_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Hour:32/signed,Minute:32/signed,Seconds:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_family_set_bonfire_start_time_toc, Succ,common_tool:to_list(Reason),Hour,Minute,Seconds};

decode_m_family_set_bonfire_start_time_toc(_) ->
	undefined.
encode_m_family_get_donate_info_tos(Record) when is_record(Record, m_family_get_donate_info_tos) ->
	#m_family_get_donate_info_tos{} = Record,

	<<>>;
encode_m_family_get_donate_info_tos(_) -> 
	<<>>.

decode_m_family_get_donate_info_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_family_get_donate_info_tos};

decode_m_family_get_donate_info_tos(_) ->
	undefined.
encode_m_family_get_donate_info_toc(Record) when is_record(Record, m_family_get_donate_info_toc) ->
	#m_family_get_donate_info_toc{succ=Succ,reason=Reason,reason_code=Reason_code,donate_gold_list=Donate_gold_list,donate_silver_list=Donate_silver_list} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
			case Succ of
				true ->
					SuccFinal = 1;
				false ->
					SuccFinal = 0
			end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Reason_code =:= undefined of
		true ->
				Reason_codeFinal = 0;
		false ->
			Reason_codeFinal = Reason_code
	end,
	case Donate_gold_list =:= undefined of
		true ->
			Donate_gold_listFinal = [];
		false ->
			Donate_gold_listFinal = Donate_gold_list
	end,
	case Donate_silver_list =:= undefined of
		true ->
			Donate_silver_listFinal = [];
		false ->
			Donate_silver_listFinal = Donate_silver_list
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Donate_gold_list_bin = encode_p_role_family_donate_infos(Donate_gold_listFinal, <<>>),
	SizeDonate_gold_listFinal = erlang:length(Donate_gold_listFinal),
	BinLen_donate_gold_list = erlang:byte_size(Donate_gold_list_bin),
	Donate_silver_list_bin = encode_p_role_family_donate_infos(Donate_silver_listFinal, <<>>),
	SizeDonate_silver_listFinal = erlang:length(Donate_silver_listFinal),
	BinLen_donate_silver_list = erlang:byte_size(Donate_silver_list_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Reason_codeFinal:32/signed,SizeDonate_gold_listFinal:16, BinLen_donate_gold_list:32, Donate_gold_list_bin/binary,SizeDonate_silver_listFinal:16, BinLen_donate_silver_list:32, Donate_silver_list_bin/binary>>;
encode_m_family_get_donate_info_toc(_) -> 
	<<>>.

decode_m_family_get_donate_info_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Reason_code:32/signed,_Sizedonate_gold_list:16, BinLendonate_gold_list:32, Bin2/binary>> = Bin1,
	<<SubBindonate_gold_list:BinLendonate_gold_list/binary, Bin3/binary>> = Bin2, 
	Donate_gold_list = lists:reverse(decode_p_role_family_donate_infos(SubBindonate_gold_list, [])),
	<<_Sizedonate_silver_list:16, _BinLendonate_silver_list:32, SubBindonate_silver_list/binary>> = Bin3,
	Donate_silver_list = lists:reverse(decode_p_role_family_donate_infos(SubBindonate_silver_list, [])),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_family_get_donate_info_toc, Succ,common_tool:to_list(Reason),Reason_code,Donate_gold_list,Donate_silver_list};

decode_m_family_get_donate_info_toc(_) ->
	undefined.
encode_m_family_donate_tos(Record) when is_record(Record, m_family_donate_tos) ->
	#m_family_donate_tos{donate_type=Donate_type,donate_value=Donate_value} = Record,
	case Donate_type =:= undefined of
		true ->
				Donate_typeFinal = 0;
		false ->
			Donate_typeFinal = Donate_type
	end,
	case Donate_value =:= undefined of
		true ->
				Donate_valueFinal = 0;
		false ->
			Donate_valueFinal = Donate_value
	end,

	<<Donate_typeFinal:32/signed,Donate_valueFinal:32/signed>>;
encode_m_family_donate_tos(_) -> 
	<<>>.

decode_m_family_donate_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Donate_type:32/signed,Donate_value:32/signed>> = Bin0,

	{m_family_donate_tos, Donate_type,Donate_value};

decode_m_family_donate_tos(_) ->
	undefined.
encode_m_family_donate_toc(Record) when is_record(Record, m_family_donate_toc) ->
	#m_family_donate_toc{succ=Succ,reason=Reason,reason_code=Reason_code,donate_type=Donate_type,donate_info=Donate_info} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
			case Succ of
				true ->
					SuccFinal = 1;
				false ->
					SuccFinal = 0
			end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Reason_code =:= undefined of
		true ->
				Reason_codeFinal = 0;
		false ->
			Reason_codeFinal = Reason_code
	end,
	case Donate_type =:= undefined of
		true ->
				Donate_typeFinal = 0;
		false ->
			Donate_typeFinal = Donate_type
	end,
	case Donate_info =:= undefined of
		true ->
				Donate_infoFinal = 0;
		false ->
			Donate_infoFinal = Donate_info
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Donate_info_bin = encode_p_role_family_donate_info(Donate_infoFinal),
	BinLen_donate_info = erlang:byte_size(Donate_info_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Reason_codeFinal:32/signed,Donate_typeFinal:32/signed,BinLen_donate_info:32, Donate_info_bin/binary>>;
encode_m_family_donate_toc(_) -> 
	<<>>.

decode_m_family_donate_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Reason_code:32/signed,Donate_type:32/signed,_SubBinSizedonate_info:32, SubBindonate_info/binary>> = Bin1,
	Donate_info = decode_p_role_family_donate_info(SubBindonate_info),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_family_donate_toc, Succ,common_tool:to_list(Reason),Reason_code,Donate_type,Donate_info};

decode_m_family_donate_toc(_) ->
	undefined.
encode_m_broadcast_general_toc(Record) when is_record(Record, m_broadcast_general_toc) ->
	#m_broadcast_general_toc{type=Type,sub_type=Sub_type,content=Content,ext_info_list=Ext_info_list} = Record,
	case Type =:= undefined of
		true ->
			TypeFinal = [];
		false ->
			TypeFinal = Type
	end,
	case Sub_type =:= undefined of
		true ->
				Sub_typeFinal = undefined,
				exit({required_field_not_assigned, m_broadcast_general_toc, sub_type});
		false ->
			Sub_typeFinal = Sub_type
	end,
	case Content =:= undefined of
		true ->
				ContentFinal = undefined,
				exit({required_field_not_assigned, m_broadcast_general_toc, content});
		false ->
			ContentFinal = Content
	end,
	case Ext_info_list =:= undefined of
		true ->
			Ext_info_listFinal = [];
		false ->
			Ext_info_listFinal = Ext_info_list
	end,
	Type_bin = encode_int32s(TypeFinal, <<>>),
	SizeTypeFinal = erlang:length(TypeFinal),
	BinLen_type = erlang:byte_size(Type_bin),
	Content2 = common_tool:to_binary(ContentFinal),
	ContentLen = erlang:byte_size(Content2),
	Ext_info_list_bin = encode_strings(Ext_info_listFinal, <<>>),
	SizeExt_info_listFinal = erlang:length(Ext_info_listFinal),
	BinLen_ext_info_list = erlang:byte_size(Ext_info_list_bin),

	<<SizeTypeFinal:16, BinLen_type:32, Type_bin/binary,Sub_typeFinal:32/signed,ContentLen:16, Content2/binary,SizeExt_info_listFinal:16, BinLen_ext_info_list:32, Ext_info_list_bin/binary>>;
encode_m_broadcast_general_toc(_) -> 
	<<>>.

decode_m_broadcast_general_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizetype:16, BinLentype:32, Bin1/binary>> = Bin0,
	<<SubBintype:BinLentype/binary, Bin2/binary>> = Bin1, 
	Type = lists:reverse(decode_int32s(SubBintype, [])),
	<<Sub_type:32/signed,ContentLen:16, Bin3/binary>> = Bin2,
	<<Content:ContentLen/binary,_Sizeext_info_list:16, _BinLenext_info_list:32, SubBinext_info_list/binary>> = Bin3,
	Ext_info_list = lists:reverse(decode_strings(SubBinext_info_list, [])),

	{m_broadcast_general_toc, Type,Sub_type,common_tool:to_list(Content),Ext_info_list};

decode_m_broadcast_general_toc(_) ->
	undefined.
encode_m_broadcast_countdown_toc(Record) when is_record(Record, m_broadcast_countdown_toc) ->
	#m_broadcast_countdown_toc{type=Type,sub_type=Sub_type,id=Id,content=Content,countdown_time=Countdown_time,current_countdown_time=Current_countdown_time} = Record,
	case Type =:= undefined of
		true ->
				TypeFinal = undefined,
				exit({required_field_not_assigned, m_broadcast_countdown_toc, type});
		false ->
			TypeFinal = Type
	end,
	case Sub_type =:= undefined of
		true ->
				Sub_typeFinal = undefined,
				exit({required_field_not_assigned, m_broadcast_countdown_toc, sub_type});
		false ->
			Sub_typeFinal = Sub_type
	end,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, m_broadcast_countdown_toc, id});
		false ->
			IdFinal = Id
	end,
	case Content =:= undefined of
		true ->
				ContentFinal = undefined,
				exit({required_field_not_assigned, m_broadcast_countdown_toc, content});
		false ->
			ContentFinal = Content
	end,
	case Countdown_time =:= undefined of
		true ->
				Countdown_timeFinal = undefined,
				exit({required_field_not_assigned, m_broadcast_countdown_toc, countdown_time});
		false ->
			Countdown_timeFinal = Countdown_time
	end,
	case Current_countdown_time =:= undefined of
		true ->
				Current_countdown_timeFinal = undefined,
				exit({required_field_not_assigned, m_broadcast_countdown_toc, current_countdown_time});
		false ->
			Current_countdown_timeFinal = Current_countdown_time
	end,
	Content2 = common_tool:to_binary(ContentFinal),
	ContentLen = erlang:byte_size(Content2),

	<<TypeFinal:32/signed,Sub_typeFinal:32/signed,IdFinal:32/signed,ContentLen:16, Content2/binary,Countdown_timeFinal:32/signed,Current_countdown_timeFinal:32/signed>>;
encode_m_broadcast_countdown_toc(_) -> 
	<<>>.

decode_m_broadcast_countdown_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Type:32/signed,Sub_type:32/signed,Id:32/signed,ContentLen:16, Bin1/binary>> = Bin0,
	<<Content:ContentLen/binary,Countdown_time:32/signed,Current_countdown_time:32/signed>> = Bin1,

	{m_broadcast_countdown_toc, Type,Sub_type,Id,common_tool:to_list(Content),Countdown_time,Current_countdown_time};

decode_m_broadcast_countdown_toc(_) ->
	undefined.
encode_m_broadcast_general_tos(Record) when is_record(Record, m_broadcast_general_tos) ->
	#m_broadcast_general_tos{type=Type,sub_type=Sub_type,content=Content,role_list=Role_list,is_world=Is_world,country_id=Country_id,famliy_id=Famliy_id,team_id=Team_id} = Record,
	case Type =:= undefined of
		true ->
				TypeFinal = undefined,
				exit({required_field_not_assigned, m_broadcast_general_tos, type});
		false ->
			TypeFinal = Type
	end,
	case Sub_type =:= undefined of
		true ->
				Sub_typeFinal = undefined,
				exit({required_field_not_assigned, m_broadcast_general_tos, sub_type});
		false ->
			Sub_typeFinal = Sub_type
	end,
	case Content =:= undefined of
		true ->
				ContentFinal = undefined,
				exit({required_field_not_assigned, m_broadcast_general_tos, content});
		false ->
			ContentFinal = Content
	end,
	case Role_list =:= undefined of
		true ->
			Role_listFinal = [];
		false ->
			Role_listFinal = Role_list
	end,
	case Is_world =:= undefined of
		true ->
				Is_worldFinal = 0;
		false ->
			case Is_world of
				true ->
					Is_worldFinal = 1;
				false ->
					Is_worldFinal = 0
			end
	end,
	case Country_id =:= undefined of
		true ->
				Country_idFinal = 0;
		false ->
			Country_idFinal = Country_id
	end,
	case Famliy_id =:= undefined of
		true ->
				Famliy_idFinal = 0;
		false ->
			Famliy_idFinal = Famliy_id
	end,
	case Team_id =:= undefined of
		true ->
				Team_idFinal = 0;
		false ->
			Team_idFinal = Team_id
	end,
	Content2 = common_tool:to_binary(ContentFinal),
	ContentLen = erlang:byte_size(Content2),
	Role_list_bin = encode_int32s(Role_listFinal, <<>>),
	SizeRole_listFinal = erlang:length(Role_listFinal),
	BinLen_role_list = erlang:byte_size(Role_list_bin),

	<<TypeFinal:32/signed,Sub_typeFinal:32/signed,ContentLen:16, Content2/binary,SizeRole_listFinal:16, BinLen_role_list:32, Role_list_bin/binary,Is_worldFinal:8,Country_idFinal:32/signed,Famliy_idFinal:32/signed,Team_idFinal:32/signed>>;
encode_m_broadcast_general_tos(_) -> 
	<<>>.

decode_m_broadcast_general_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Type:32/signed,Sub_type:32/signed,ContentLen:16, Bin1/binary>> = Bin0,
	<<Content:ContentLen/binary,_Sizerole_list:16, BinLenrole_list:32, Bin2/binary>> = Bin1,
	<<SubBinrole_list:BinLenrole_list/binary, Bin3/binary>> = Bin2, 
	Role_list = lists:reverse(decode_int32s(SubBinrole_list, [])),
<<Is_worldTmp:8,Country_id:32/signed,Famliy_id:32/signed,Team_id:32/signed>> = Bin3,
case Is_worldTmp of 
	1 -> 
		Is_world = true;
	_ ->
		Is_world = false
end,

	{m_broadcast_general_tos, Type,Sub_type,common_tool:to_list(Content),Role_list,Is_world,Country_id,Famliy_id,Team_id};

decode_m_broadcast_general_tos(_) ->
	undefined.
encode_m_broadcast_countdown_tos(Record) when is_record(Record, m_broadcast_countdown_tos) ->
	#m_broadcast_countdown_tos{type=Type,sub_type=Sub_type,id=Id,content=Content,countdown_time=Countdown_time,current_countdown_time=Current_countdown_time,role_list=Role_list,is_world=Is_world,country_id=Country_id,famliy_id=Famliy_id,team_id=Team_id} = Record,
	case Type =:= undefined of
		true ->
				TypeFinal = undefined,
				exit({required_field_not_assigned, m_broadcast_countdown_tos, type});
		false ->
			TypeFinal = Type
	end,
	case Sub_type =:= undefined of
		true ->
				Sub_typeFinal = undefined,
				exit({required_field_not_assigned, m_broadcast_countdown_tos, sub_type});
		false ->
			Sub_typeFinal = Sub_type
	end,
	case Id =:= undefined of
		true ->
				IdFinal = 0;
		false ->
			IdFinal = Id
	end,
	case Content =:= undefined of
		true ->
				ContentFinal = undefined,
				exit({required_field_not_assigned, m_broadcast_countdown_tos, content});
		false ->
			ContentFinal = Content
	end,
	case Countdown_time =:= undefined of
		true ->
				Countdown_timeFinal = undefined,
				exit({required_field_not_assigned, m_broadcast_countdown_tos, countdown_time});
		false ->
			Countdown_timeFinal = Countdown_time
	end,
	case Current_countdown_time =:= undefined of
		true ->
				Current_countdown_timeFinal = undefined,
				exit({required_field_not_assigned, m_broadcast_countdown_tos, current_countdown_time});
		false ->
			Current_countdown_timeFinal = Current_countdown_time
	end,
	case Role_list =:= undefined of
		true ->
			Role_listFinal = [];
		false ->
			Role_listFinal = Role_list
	end,
	case Is_world =:= undefined of
		true ->
				Is_worldFinal = 0;
		false ->
			case Is_world of
				true ->
					Is_worldFinal = 1;
				false ->
					Is_worldFinal = 0
			end
	end,
	case Country_id =:= undefined of
		true ->
				Country_idFinal = 0;
		false ->
			Country_idFinal = Country_id
	end,
	case Famliy_id =:= undefined of
		true ->
				Famliy_idFinal = 0;
		false ->
			Famliy_idFinal = Famliy_id
	end,
	case Team_id =:= undefined of
		true ->
				Team_idFinal = 0;
		false ->
			Team_idFinal = Team_id
	end,
	Content2 = common_tool:to_binary(ContentFinal),
	ContentLen = erlang:byte_size(Content2),
	Role_list_bin = encode_int32s(Role_listFinal, <<>>),
	SizeRole_listFinal = erlang:length(Role_listFinal),
	BinLen_role_list = erlang:byte_size(Role_list_bin),

	<<TypeFinal:32/signed,Sub_typeFinal:32/signed,IdFinal:32/signed,ContentLen:16, Content2/binary,Countdown_timeFinal:32/signed,Current_countdown_timeFinal:32/signed,SizeRole_listFinal:16, BinLen_role_list:32, Role_list_bin/binary,Is_worldFinal:8,Country_idFinal:32/signed,Famliy_idFinal:32/signed,Team_idFinal:32/signed>>;
encode_m_broadcast_countdown_tos(_) -> 
	<<>>.

decode_m_broadcast_countdown_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Type:32/signed,Sub_type:32/signed,Id:32/signed,ContentLen:16, Bin1/binary>> = Bin0,
	<<Content:ContentLen/binary,Countdown_time:32/signed,Current_countdown_time:32/signed,_Sizerole_list:16, BinLenrole_list:32, Bin2/binary>> = Bin1,
	<<SubBinrole_list:BinLenrole_list/binary, Bin3/binary>> = Bin2, 
	Role_list = lists:reverse(decode_int32s(SubBinrole_list, [])),
<<Is_worldTmp:8,Country_id:32/signed,Famliy_id:32/signed,Team_id:32/signed>> = Bin3,
case Is_worldTmp of 
	1 -> 
		Is_world = true;
	_ ->
		Is_world = false
end,

	{m_broadcast_countdown_tos, Type,Sub_type,Id,common_tool:to_list(Content),Countdown_time,Current_countdown_time,Role_list,Is_world,Country_id,Famliy_id,Team_id};

decode_m_broadcast_countdown_tos(_) ->
	undefined.
encode_m_broadcast_admin_tos(Record) when is_record(Record, m_broadcast_admin_tos) ->
	#m_broadcast_admin_tos{id=Id,foreign_id=Foreign_id,type=Type,content=Content,send_strategy=Send_strategy,start_date=Start_date,end_date=End_date,start_time=Start_time,end_time=End_time,interval=Interval} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, m_broadcast_admin_tos, id});
		false ->
			IdFinal = Id
	end,
	case Foreign_id =:= undefined of
		true ->
				Foreign_idFinal = undefined,
				exit({required_field_not_assigned, m_broadcast_admin_tos, foreign_id});
		false ->
			Foreign_idFinal = Foreign_id
	end,
	case Type =:= undefined of
		true ->
				TypeFinal = undefined,
				exit({required_field_not_assigned, m_broadcast_admin_tos, type});
		false ->
			TypeFinal = Type
	end,
	case Content =:= undefined of
		true ->
				ContentFinal = undefined,
				exit({required_field_not_assigned, m_broadcast_admin_tos, content});
		false ->
			ContentFinal = Content
	end,
	case Send_strategy =:= undefined of
		true ->
				Send_strategyFinal = undefined,
				exit({required_field_not_assigned, m_broadcast_admin_tos, send_strategy});
		false ->
			Send_strategyFinal = Send_strategy
	end,
	case Start_date =:= undefined of
		true ->
				Start_dateFinal = <<>>;
		false ->
			Start_dateFinal = Start_date
	end,
	case End_date =:= undefined of
		true ->
				End_dateFinal = <<>>;
		false ->
			End_dateFinal = End_date
	end,
	case Start_time =:= undefined of
		true ->
				Start_timeFinal = <<>>;
		false ->
			Start_timeFinal = Start_time
	end,
	case End_time =:= undefined of
		true ->
				End_timeFinal = <<>>;
		false ->
			End_timeFinal = End_time
	end,
	case Interval =:= undefined of
		true ->
				IntervalFinal = 0;
		false ->
			IntervalFinal = Interval
	end,
	Content2 = common_tool:to_binary(ContentFinal),
	ContentLen = erlang:byte_size(Content2),
	Start_date2 = common_tool:to_binary(Start_dateFinal),
	Start_dateLen = erlang:byte_size(Start_date2),
	End_date2 = common_tool:to_binary(End_dateFinal),
	End_dateLen = erlang:byte_size(End_date2),
	Start_time2 = common_tool:to_binary(Start_timeFinal),
	Start_timeLen = erlang:byte_size(Start_time2),
	End_time2 = common_tool:to_binary(End_timeFinal),
	End_timeLen = erlang:byte_size(End_time2),

	<<IdFinal:32/signed,Foreign_idFinal:32/signed,TypeFinal:32/signed,ContentLen:16, Content2/binary,Send_strategyFinal:32/signed,Start_dateLen:16, Start_date2/binary,End_dateLen:16, End_date2/binary,Start_timeLen:16, Start_time2/binary,End_timeLen:16, End_time2/binary,IntervalFinal:32/signed>>;
encode_m_broadcast_admin_tos(_) -> 
	<<>>.

decode_m_broadcast_admin_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed,Foreign_id:32/signed,Type:32/signed,ContentLen:16, Bin1/binary>> = Bin0,
	<<Content:ContentLen/binary,Send_strategy:32/signed,Start_dateLen:16, Bin2/binary>> = Bin1,
	<<Start_date:Start_dateLen/binary,End_dateLen:16, Bin3/binary>> = Bin2,
	<<End_date:End_dateLen/binary,Start_timeLen:16, Bin4/binary>> = Bin3,
	<<Start_time:Start_timeLen/binary,End_timeLen:16, Bin5/binary>> = Bin4,
	<<End_time:End_timeLen/binary,Interval:32/signed>> = Bin5,

	{m_broadcast_admin_tos, Id,Foreign_id,Type,common_tool:to_list(Content),Send_strategy,common_tool:to_list(Start_date),common_tool:to_list(End_date),common_tool:to_list(Start_time),common_tool:to_list(End_time),Interval};

decode_m_broadcast_admin_tos(_) ->
	undefined.
encode_m_broadcast_cycle_tos(Record) when is_record(Record, m_broadcast_cycle_tos) ->
	#m_broadcast_cycle_tos{type=Type,sub_type=Sub_type,content=Content,send_type=Send_type,start_time=Start_time,end_time=End_time,interval=Interval,role_list=Role_list,is_world=Is_world,country_id=Country_id,famliy_id=Famliy_id,team_id=Team_id} = Record,
	case Type =:= undefined of
		true ->
				TypeFinal = undefined,
				exit({required_field_not_assigned, m_broadcast_cycle_tos, type});
		false ->
			TypeFinal = Type
	end,
	case Sub_type =:= undefined of
		true ->
				Sub_typeFinal = undefined,
				exit({required_field_not_assigned, m_broadcast_cycle_tos, sub_type});
		false ->
			Sub_typeFinal = Sub_type
	end,
	case Content =:= undefined of
		true ->
				ContentFinal = undefined,
				exit({required_field_not_assigned, m_broadcast_cycle_tos, content});
		false ->
			ContentFinal = Content
	end,
	case Send_type =:= undefined of
		true ->
				Send_typeFinal = undefined,
				exit({required_field_not_assigned, m_broadcast_cycle_tos, send_type});
		false ->
			Send_typeFinal = Send_type
	end,
	case Start_time =:= undefined of
		true ->
				Start_timeFinal = 0;
		false ->
			Start_timeFinal = Start_time
	end,
	case End_time =:= undefined of
		true ->
				End_timeFinal = 0;
		false ->
			End_timeFinal = End_time
	end,
	case Interval =:= undefined of
		true ->
				IntervalFinal = 0;
		false ->
			IntervalFinal = Interval
	end,
	case Role_list =:= undefined of
		true ->
			Role_listFinal = [];
		false ->
			Role_listFinal = Role_list
	end,
	case Is_world =:= undefined of
		true ->
				Is_worldFinal = 0;
		false ->
			case Is_world of
				true ->
					Is_worldFinal = 1;
				false ->
					Is_worldFinal = 0
			end
	end,
	case Country_id =:= undefined of
		true ->
				Country_idFinal = 0;
		false ->
			Country_idFinal = Country_id
	end,
	case Famliy_id =:= undefined of
		true ->
				Famliy_idFinal = 0;
		false ->
			Famliy_idFinal = Famliy_id
	end,
	case Team_id =:= undefined of
		true ->
				Team_idFinal = 0;
		false ->
			Team_idFinal = Team_id
	end,
	Content2 = common_tool:to_binary(ContentFinal),
	ContentLen = erlang:byte_size(Content2),
	Role_list_bin = encode_int32s(Role_listFinal, <<>>),
	SizeRole_listFinal = erlang:length(Role_listFinal),
	BinLen_role_list = erlang:byte_size(Role_list_bin),

	<<TypeFinal:32/signed,Sub_typeFinal:32/signed,ContentLen:16, Content2/binary,Send_typeFinal:32/signed,Start_timeFinal:32/signed,End_timeFinal:32/signed,IntervalFinal:32/signed,SizeRole_listFinal:16, BinLen_role_list:32, Role_list_bin/binary,Is_worldFinal:8,Country_idFinal:32/signed,Famliy_idFinal:32/signed,Team_idFinal:32/signed>>;
encode_m_broadcast_cycle_tos(_) -> 
	<<>>.

decode_m_broadcast_cycle_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Type:32/signed,Sub_type:32/signed,ContentLen:16, Bin1/binary>> = Bin0,
	<<Content:ContentLen/binary,Send_type:32/signed,Start_time:32/signed,End_time:32/signed,Interval:32/signed,_Sizerole_list:16, BinLenrole_list:32, Bin2/binary>> = Bin1,
	<<SubBinrole_list:BinLenrole_list/binary, Bin3/binary>> = Bin2, 
	Role_list = lists:reverse(decode_int32s(SubBinrole_list, [])),
<<Is_worldTmp:8,Country_id:32/signed,Famliy_id:32/signed,Team_id:32/signed>> = Bin3,
case Is_worldTmp of 
	1 -> 
		Is_world = true;
	_ ->
		Is_world = false
end,

	{m_broadcast_cycle_tos, Type,Sub_type,common_tool:to_list(Content),Send_type,Start_time,End_time,Interval,Role_list,Is_world,Country_id,Famliy_id,Team_id};

decode_m_broadcast_cycle_tos(_) ->
	undefined.
encode_m_broadcast_laba_tos(Record) when is_record(Record, m_broadcast_laba_tos) ->
	#m_broadcast_laba_tos{content=Content,laba_id=Laba_id} = Record,
	case Content =:= undefined of
		true ->
				ContentFinal = undefined,
				exit({required_field_not_assigned, m_broadcast_laba_tos, content});
		false ->
			ContentFinal = Content
	end,
	case Laba_id =:= undefined of
		true ->
				Laba_idFinal = undefined,
				exit({required_field_not_assigned, m_broadcast_laba_tos, laba_id});
		false ->
			Laba_idFinal = Laba_id
	end,
	Content2 = common_tool:to_binary(ContentFinal),
	ContentLen = erlang:byte_size(Content2),

	<<ContentLen:16, Content2/binary,Laba_idFinal:32/signed>>;
encode_m_broadcast_laba_tos(_) -> 
	<<>>.

decode_m_broadcast_laba_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<ContentLen:16, Bin1/binary>> = Bin0,
	<<Content:ContentLen/binary,Laba_id:32/signed>> = Bin1,

	{m_broadcast_laba_tos, common_tool:to_list(Content),Laba_id};

decode_m_broadcast_laba_tos(_) ->
	undefined.
encode_m_broadcast_laba_toc(Record) when is_record(Record, m_broadcast_laba_toc) ->
	#m_broadcast_laba_toc{succ=Succ,return_self=Return_self,reason=Reason,content=Content,role_id=Role_id,role_name=Role_name,sex=Sex,faction_id=Faction_id} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Content =:= undefined of
		true ->
				ContentFinal = undefined,
				exit({required_field_not_assigned, m_broadcast_laba_toc, content});
		false ->
			ContentFinal = Content
	end,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, m_broadcast_laba_toc, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = undefined,
				exit({required_field_not_assigned, m_broadcast_laba_toc, role_name});
		false ->
			Role_nameFinal = Role_name
	end,
	case Sex =:= undefined of
		true ->
				SexFinal = undefined,
				exit({required_field_not_assigned, m_broadcast_laba_toc, sex});
		false ->
			SexFinal = Sex
	end,
	case Faction_id =:= undefined of
		true ->
				Faction_idFinal = undefined,
				exit({required_field_not_assigned, m_broadcast_laba_toc, faction_id});
		false ->
			Faction_idFinal = Faction_id
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Content2 = common_tool:to_binary(ContentFinal),
	ContentLen = erlang:byte_size(Content2),
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),

	<<SuccFinal:8,Return_selfFinal:8,ReasonLen:16, Reason2/binary,ContentLen:16, Content2/binary,Role_idFinal:32/signed,Role_nameLen:16, Role_name2/binary,SexFinal:32/signed,Faction_idFinal:32/signed>>;
encode_m_broadcast_laba_toc(_) -> 
	<<>>.

decode_m_broadcast_laba_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,Return_selfTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,ContentLen:16, Bin2/binary>> = Bin1,
	<<Content:ContentLen/binary,Role_id:32/signed,Role_nameLen:16, Bin3/binary>> = Bin2,
	<<Role_name:Role_nameLen/binary,Sex:32/signed,Faction_id:32/signed>> = Bin3,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_broadcast_laba_toc, Succ,Return_self,common_tool:to_list(Reason),common_tool:to_list(Content),Role_id,common_tool:to_list(Role_name),Sex,Faction_id};

decode_m_broadcast_laba_toc(_) ->
	undefined.
encode_m_equip_build_list_tos(Record) when is_record(Record, m_equip_build_list_tos) ->
	#m_equip_build_list_tos{build_level=Build_level} = Record,
	case Build_level =:= undefined of
		true ->
				Build_levelFinal = 1;
		false ->
			Build_levelFinal = Build_level
	end,

	<<Build_levelFinal:32/signed>>;
encode_m_equip_build_list_tos(_) -> 
	<<>>.

decode_m_equip_build_list_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Build_level:32/signed>> = Bin0,

	{m_equip_build_list_tos, Build_level};

decode_m_equip_build_list_tos(_) ->
	undefined.
encode_m_equip_build_list_toc(Record) when is_record(Record, m_equip_build_list_toc) ->
	#m_equip_build_list_toc{succ=Succ,reason=Reason,build_level=Build_level,build_list=Build_list} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Build_level =:= undefined of
		true ->
				Build_levelFinal = 1;
		false ->
			Build_levelFinal = Build_level
	end,
	case Build_list =:= undefined of
		true ->
			Build_listFinal = [];
		false ->
			Build_listFinal = Build_list
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Build_list_bin = encode_p_equip_build_equips(Build_listFinal, <<>>),
	SizeBuild_listFinal = erlang:length(Build_listFinal),
	BinLen_build_list = erlang:byte_size(Build_list_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Build_levelFinal:32/signed,SizeBuild_listFinal:16, BinLen_build_list:32, Build_list_bin/binary>>;
encode_m_equip_build_list_toc(_) -> 
	<<>>.

decode_m_equip_build_list_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Build_level:32/signed,_Sizebuild_list:16, _BinLenbuild_list:32, SubBinbuild_list/binary>> = Bin1,
	Build_list = lists:reverse(decode_p_equip_build_equips(SubBinbuild_list, [])),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_equip_build_list_toc, Succ,common_tool:to_list(Reason),Build_level,Build_list};

decode_m_equip_build_list_toc(_) ->
	undefined.
encode_m_equip_build_build_tos(Record) when is_record(Record, m_equip_build_build_tos) ->
	#m_equip_build_build_tos{build_level=Build_level,equip_type_id=Equip_type_id,base_type_id=Base_type_id,add_type_id=Add_type_id} = Record,
	case Build_level =:= undefined of
		true ->
				Build_levelFinal = 1;
		false ->
			Build_levelFinal = Build_level
	end,
	case Equip_type_id =:= undefined of
		true ->
				Equip_type_idFinal = undefined,
				exit({required_field_not_assigned, m_equip_build_build_tos, equip_type_id});
		false ->
			Equip_type_idFinal = Equip_type_id
	end,
	case Base_type_id =:= undefined of
		true ->
				Base_type_idFinal = undefined,
				exit({required_field_not_assigned, m_equip_build_build_tos, base_type_id});
		false ->
			Base_type_idFinal = Base_type_id
	end,
	case Add_type_id =:= undefined of
		true ->
				Add_type_idFinal = 0;
		false ->
			Add_type_idFinal = Add_type_id
	end,

	<<Build_levelFinal:32/signed,Equip_type_idFinal:32/signed,Base_type_idFinal:32/signed,Add_type_idFinal:32/signed>>;
encode_m_equip_build_build_tos(_) -> 
	<<>>.

decode_m_equip_build_build_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Build_level:32/signed,Equip_type_id:32/signed,Base_type_id:32/signed,Add_type_id:32/signed>> = Bin0,

	{m_equip_build_build_tos, Build_level,Equip_type_id,Base_type_id,Add_type_id};

decode_m_equip_build_build_tos(_) ->
	undefined.
encode_m_equip_build_build_toc(Record) when is_record(Record, m_equip_build_build_toc) ->
	#m_equip_build_build_toc{succ=Succ,reason=Reason,build_level=Build_level,build_list=Build_list,base_list=Base_list,add_list=Add_list,new_equip=New_equip,base_goods=Base_goods,add_goods=Add_goods} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Build_level =:= undefined of
		true ->
				Build_levelFinal = 1;
		false ->
			Build_levelFinal = Build_level
	end,
	case Build_list =:= undefined of
		true ->
			Build_listFinal = [];
		false ->
			Build_listFinal = Build_list
	end,
	case Base_list =:= undefined of
		true ->
			Base_listFinal = [];
		false ->
			Base_listFinal = Base_list
	end,
	case Add_list =:= undefined of
		true ->
			Add_listFinal = [];
		false ->
			Add_listFinal = Add_list
	end,
	case New_equip =:= undefined of
		true ->
				New_equipFinal = 0;
		false ->
			New_equipFinal = New_equip
	end,
	case Base_goods =:= undefined of
		true ->
				Base_goodsFinal = 0;
		false ->
			Base_goodsFinal = Base_goods
	end,
	case Add_goods =:= undefined of
		true ->
				Add_goodsFinal = 0;
		false ->
			Add_goodsFinal = Add_goods
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Build_list_bin = encode_p_equip_build_equips(Build_listFinal, <<>>),
	SizeBuild_listFinal = erlang:length(Build_listFinal),
	BinLen_build_list = erlang:byte_size(Build_list_bin),
	Base_list_bin = encode_p_equip_build_goodss(Base_listFinal, <<>>),
	SizeBase_listFinal = erlang:length(Base_listFinal),
	BinLen_base_list = erlang:byte_size(Base_list_bin),
	Add_list_bin = encode_p_equip_build_goodss(Add_listFinal, <<>>),
	SizeAdd_listFinal = erlang:length(Add_listFinal),
	BinLen_add_list = erlang:byte_size(Add_list_bin),
	New_equip_bin = encode_p_equip_build_goods(New_equipFinal),
	BinLen_new_equip = erlang:byte_size(New_equip_bin),
	Base_goods_bin = encode_p_equip_build_goods(Base_goodsFinal),
	BinLen_base_goods = erlang:byte_size(Base_goods_bin),
	Add_goods_bin = encode_p_equip_build_goods(Add_goodsFinal),
	BinLen_add_goods = erlang:byte_size(Add_goods_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Build_levelFinal:32/signed,SizeBuild_listFinal:16, BinLen_build_list:32, Build_list_bin/binary,SizeBase_listFinal:16, BinLen_base_list:32, Base_list_bin/binary,SizeAdd_listFinal:16, BinLen_add_list:32, Add_list_bin/binary,BinLen_new_equip:32, New_equip_bin/binary,BinLen_base_goods:32, Base_goods_bin/binary,BinLen_add_goods:32, Add_goods_bin/binary>>;
encode_m_equip_build_build_toc(_) -> 
	<<>>.

decode_m_equip_build_build_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Build_level:32/signed,_Sizebuild_list:16, BinLenbuild_list:32, Bin2/binary>> = Bin1,
	<<SubBinbuild_list:BinLenbuild_list/binary, Bin3/binary>> = Bin2, 
	Build_list = lists:reverse(decode_p_equip_build_equips(SubBinbuild_list, [])),
	<<_Sizebase_list:16, BinLenbase_list:32, Bin4/binary>> = Bin3,
	<<SubBinbase_list:BinLenbase_list/binary, Bin5/binary>> = Bin4, 
	Base_list = lists:reverse(decode_p_equip_build_goodss(SubBinbase_list, [])),
	<<_Sizeadd_list:16, BinLenadd_list:32, Bin6/binary>> = Bin5,
	<<SubBinadd_list:BinLenadd_list/binary, Bin7/binary>> = Bin6, 
	Add_list = lists:reverse(decode_p_equip_build_goodss(SubBinadd_list, [])),
	<<SubBinSizenew_equip:32, Bin8/binary>> = Bin7,
	<<SubBinnew_equip:SubBinSizenew_equip/binary, Bin9/binary>> = Bin8,
	New_equip = decode_p_equip_build_goods(SubBinnew_equip),
	<<SubBinSizebase_goods:32, Bin10/binary>> = Bin9,
	<<SubBinbase_goods:SubBinSizebase_goods/binary, Bin11/binary>> = Bin10,
	Base_goods = decode_p_equip_build_goods(SubBinbase_goods),
	<<_SubBinSizeadd_goods:32, SubBinadd_goods/binary>> = Bin11,
	Add_goods = decode_p_equip_build_goods(SubBinadd_goods),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_equip_build_build_toc, Succ,common_tool:to_list(Reason),Build_level,Build_list,Base_list,Add_list,New_equip,Base_goods,Add_goods};

decode_m_equip_build_build_toc(_) ->
	undefined.
encode_m_equip_build_goods_tos(Record) when is_record(Record, m_equip_build_goods_tos) ->
	#m_equip_build_goods_tos{material=Material} = Record,
	case Material =:= undefined of
		true ->
				MaterialFinal = 0;
		false ->
			MaterialFinal = Material
	end,

	<<MaterialFinal:32/signed>>;
encode_m_equip_build_goods_tos(_) -> 
	<<>>.

decode_m_equip_build_goods_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Material:32/signed>> = Bin0,

	{m_equip_build_goods_tos, Material};

decode_m_equip_build_goods_tos(_) ->
	undefined.
encode_m_equip_build_goods_toc(Record) when is_record(Record, m_equip_build_goods_toc) ->
	#m_equip_build_goods_toc{succ=Succ,reason=Reason,material=Material,base_list=Base_list,add_list=Add_list} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Material =:= undefined of
		true ->
				MaterialFinal = 0;
		false ->
			MaterialFinal = Material
	end,
	case Base_list =:= undefined of
		true ->
			Base_listFinal = [];
		false ->
			Base_listFinal = Base_list
	end,
	case Add_list =:= undefined of
		true ->
			Add_listFinal = [];
		false ->
			Add_listFinal = Add_list
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Base_list_bin = encode_p_equip_build_goodss(Base_listFinal, <<>>),
	SizeBase_listFinal = erlang:length(Base_listFinal),
	BinLen_base_list = erlang:byte_size(Base_list_bin),
	Add_list_bin = encode_p_equip_build_goodss(Add_listFinal, <<>>),
	SizeAdd_listFinal = erlang:length(Add_listFinal),
	BinLen_add_list = erlang:byte_size(Add_list_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,MaterialFinal:32/signed,SizeBase_listFinal:16, BinLen_base_list:32, Base_list_bin/binary,SizeAdd_listFinal:16, BinLen_add_list:32, Add_list_bin/binary>>;
encode_m_equip_build_goods_toc(_) -> 
	<<>>.

decode_m_equip_build_goods_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Material:32/signed,_Sizebase_list:16, BinLenbase_list:32, Bin2/binary>> = Bin1,
	<<SubBinbase_list:BinLenbase_list/binary, Bin3/binary>> = Bin2, 
	Base_list = lists:reverse(decode_p_equip_build_goodss(SubBinbase_list, [])),
	<<_Sizeadd_list:16, _BinLenadd_list:32, SubBinadd_list/binary>> = Bin3,
	Add_list = lists:reverse(decode_p_equip_build_goodss(SubBinadd_list, [])),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_equip_build_goods_toc, Succ,common_tool:to_list(Reason),Material,Base_list,Add_list};

decode_m_equip_build_goods_toc(_) ->
	undefined.
encode_p_equip_build_equip(Record) when is_record(Record, p_equip_build_equip) ->
	#p_equip_build_equip{type_id=Type_id,equip_name=Equip_name,level=Level,slot_num=Slot_num,kind=Kind,material=Material} = Record,
	case Type_id =:= undefined of
		true ->
				Type_idFinal = undefined,
				exit({required_field_not_assigned, p_equip_build_equip, type_id});
		false ->
			Type_idFinal = Type_id
	end,
	case Equip_name =:= undefined of
		true ->
				Equip_nameFinal = undefined,
				exit({required_field_not_assigned, p_equip_build_equip, equip_name});
		false ->
			Equip_nameFinal = Equip_name
	end,
	case Level =:= undefined of
		true ->
				LevelFinal = undefined,
				exit({required_field_not_assigned, p_equip_build_equip, level});
		false ->
			LevelFinal = Level
	end,
	case Slot_num =:= undefined of
		true ->
				Slot_numFinal = undefined,
				exit({required_field_not_assigned, p_equip_build_equip, slot_num});
		false ->
			Slot_numFinal = Slot_num
	end,
	case Kind =:= undefined of
		true ->
				KindFinal = undefined,
				exit({required_field_not_assigned, p_equip_build_equip, kind});
		false ->
			KindFinal = Kind
	end,
	case Material =:= undefined of
		true ->
				MaterialFinal = undefined,
				exit({required_field_not_assigned, p_equip_build_equip, material});
		false ->
			MaterialFinal = Material
	end,
	Equip_name2 = common_tool:to_binary(Equip_nameFinal),
	Equip_nameLen = erlang:byte_size(Equip_name2),

	<<Type_idFinal:32/signed,Equip_nameLen:16, Equip_name2/binary,LevelFinal:32/signed,Slot_numFinal:32/signed,KindFinal:32/signed,MaterialFinal:32/signed>>;
encode_p_equip_build_equip(_) -> 
	<<>>.

decode_p_equip_build_equip(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Type_id:32/signed,Equip_nameLen:16, Bin1/binary>> = Bin0,
	<<Equip_name:Equip_nameLen/binary,Level:32/signed,Slot_num:32/signed,Kind:32/signed,Material:32/signed>> = Bin1,

	{p_equip_build_equip, Type_id,common_tool:to_list(Equip_name),Level,Slot_num,Kind,Material};

decode_p_equip_build_equip(_) ->
	undefined.
encode_p_equip_build_goods(Record) when is_record(Record, p_equip_build_goods) ->
	#p_equip_build_goods{type_id=Type_id,name=Name,current_num=Current_num,needed_num=Needed_num} = Record,
	case Type_id =:= undefined of
		true ->
				Type_idFinal = undefined,
				exit({required_field_not_assigned, p_equip_build_goods, type_id});
		false ->
			Type_idFinal = Type_id
	end,
	case Name =:= undefined of
		true ->
				NameFinal = undefined,
				exit({required_field_not_assigned, p_equip_build_goods, name});
		false ->
			NameFinal = Name
	end,
	case Current_num =:= undefined of
		true ->
				Current_numFinal = undefined,
				exit({required_field_not_assigned, p_equip_build_goods, current_num});
		false ->
			Current_numFinal = Current_num
	end,
	case Needed_num =:= undefined of
		true ->
				Needed_numFinal = 0;
		false ->
			Needed_numFinal = Needed_num
	end,
	Name2 = common_tool:to_binary(NameFinal),
	NameLen = erlang:byte_size(Name2),

	<<Type_idFinal:32/signed,NameLen:16, Name2/binary,Current_numFinal:32/signed,Needed_numFinal:32/signed>>;
encode_p_equip_build_goods(_) -> 
	<<>>.

decode_p_equip_build_goods(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Type_id:32/signed,NameLen:16, Bin1/binary>> = Bin0,
	<<Name:NameLen/binary,Current_num:32/signed,Needed_num:32/signed>> = Bin1,

	{p_equip_build_goods, Type_id,common_tool:to_list(Name),Current_num,Needed_num};

decode_p_equip_build_goods(_) ->
	undefined.
encode_m_equip_build_quality_goods_tos(Record) when is_record(Record, m_equip_build_quality_goods_tos) ->
	#m_equip_build_quality_goods_tos{material=Material} = Record,
	case Material =:= undefined of
		true ->
				MaterialFinal = 0;
		false ->
			MaterialFinal = Material
	end,

	<<MaterialFinal:32/signed>>;
encode_m_equip_build_quality_goods_tos(_) -> 
	<<>>.

decode_m_equip_build_quality_goods_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Material:32/signed>> = Bin0,

	{m_equip_build_quality_goods_tos, Material};

decode_m_equip_build_quality_goods_tos(_) ->
	undefined.
encode_m_equip_build_quality_goods_toc(Record) when is_record(Record, m_equip_build_quality_goods_toc) ->
	#m_equip_build_quality_goods_toc{succ=Succ,reason=Reason,material=Material,add_list=Add_list} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Material =:= undefined of
		true ->
				MaterialFinal = 0;
		false ->
			MaterialFinal = Material
	end,
	case Add_list =:= undefined of
		true ->
			Add_listFinal = [];
		false ->
			Add_listFinal = Add_list
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Add_list_bin = encode_p_equip_build_goodss(Add_listFinal, <<>>),
	SizeAdd_listFinal = erlang:length(Add_listFinal),
	BinLen_add_list = erlang:byte_size(Add_list_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,MaterialFinal:32/signed,SizeAdd_listFinal:16, BinLen_add_list:32, Add_list_bin/binary>>;
encode_m_equip_build_quality_goods_toc(_) -> 
	<<>>.

decode_m_equip_build_quality_goods_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Material:32/signed,_Sizeadd_list:16, _BinLenadd_list:32, SubBinadd_list/binary>> = Bin1,
	Add_list = lists:reverse(decode_p_equip_build_goodss(SubBinadd_list, [])),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_equip_build_quality_goods_toc, Succ,common_tool:to_list(Reason),Material,Add_list};

decode_m_equip_build_quality_goods_toc(_) ->
	undefined.
encode_m_equip_build_quality_tos(Record) when is_record(Record, m_equip_build_quality_tos) ->
	#m_equip_build_quality_tos{equip_id=Equip_id,add_type_id=Add_type_id} = Record,
	case Equip_id =:= undefined of
		true ->
				Equip_idFinal = undefined,
				exit({required_field_not_assigned, m_equip_build_quality_tos, equip_id});
		false ->
			Equip_idFinal = Equip_id
	end,
	case Add_type_id =:= undefined of
		true ->
				Add_type_idFinal = undefined,
				exit({required_field_not_assigned, m_equip_build_quality_tos, add_type_id});
		false ->
			Add_type_idFinal = Add_type_id
	end,

	<<Equip_idFinal:32/signed,Add_type_idFinal:32/signed>>;
encode_m_equip_build_quality_tos(_) -> 
	<<>>.

decode_m_equip_build_quality_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Equip_id:32/signed,Add_type_id:32/signed>> = Bin0,

	{m_equip_build_quality_tos, Equip_id,Add_type_id};

decode_m_equip_build_quality_tos(_) ->
	undefined.
encode_m_equip_build_quality_toc(Record) when is_record(Record, m_equip_build_quality_toc) ->
	#m_equip_build_quality_toc{succ=Succ,reason=Reason,equip=Equip,add_list=Add_list,add_goods=Add_goods} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Equip =:= undefined of
		true ->
				EquipFinal = 0;
		false ->
			EquipFinal = Equip
	end,
	case Add_list =:= undefined of
		true ->
			Add_listFinal = [];
		false ->
			Add_listFinal = Add_list
	end,
	case Add_goods =:= undefined of
		true ->
				Add_goodsFinal = 0;
		false ->
			Add_goodsFinal = Add_goods
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Equip_bin = encode_p_goods(EquipFinal),
	BinLen_equip = erlang:byte_size(Equip_bin),
	Add_list_bin = encode_p_equip_build_goodss(Add_listFinal, <<>>),
	SizeAdd_listFinal = erlang:length(Add_listFinal),
	BinLen_add_list = erlang:byte_size(Add_list_bin),
	Add_goods_bin = encode_p_equip_build_goods(Add_goodsFinal),
	BinLen_add_goods = erlang:byte_size(Add_goods_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_equip:32, Equip_bin/binary,SizeAdd_listFinal:16, BinLen_add_list:32, Add_list_bin/binary,BinLen_add_goods:32, Add_goods_bin/binary>>;
encode_m_equip_build_quality_toc(_) -> 
	<<>>.

decode_m_equip_build_quality_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,SubBinSizeequip:32, Bin2/binary>> = Bin1,
	<<SubBinequip:SubBinSizeequip/binary, Bin3/binary>> = Bin2,
	Equip = decode_p_goods(SubBinequip),
	<<_Sizeadd_list:16, BinLenadd_list:32, Bin4/binary>> = Bin3,
	<<SubBinadd_list:BinLenadd_list/binary, Bin5/binary>> = Bin4, 
	Add_list = lists:reverse(decode_p_equip_build_goodss(SubBinadd_list, [])),
	<<_SubBinSizeadd_goods:32, SubBinadd_goods/binary>> = Bin5,
	Add_goods = decode_p_equip_build_goods(SubBinadd_goods),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_equip_build_quality_toc, Succ,common_tool:to_list(Reason),Equip,Add_list,Add_goods};

decode_m_equip_build_quality_toc(_) ->
	undefined.
encode_m_equip_build_signature_tos(Record) when is_record(Record, m_equip_build_signature_tos) ->
	#m_equip_build_signature_tos{equip_id=Equip_id} = Record,
	case Equip_id =:= undefined of
		true ->
				Equip_idFinal = undefined,
				exit({required_field_not_assigned, m_equip_build_signature_tos, equip_id});
		false ->
			Equip_idFinal = Equip_id
	end,

	<<Equip_idFinal:32/signed>>;
encode_m_equip_build_signature_tos(_) -> 
	<<>>.

decode_m_equip_build_signature_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Equip_id:32/signed>> = Bin0,

	{m_equip_build_signature_tos, Equip_id};

decode_m_equip_build_signature_tos(_) ->
	undefined.
encode_m_equip_build_signature_toc(Record) when is_record(Record, m_equip_build_signature_toc) ->
	#m_equip_build_signature_toc{succ=Succ,reason=Reason,equip=Equip} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Equip =:= undefined of
		true ->
				EquipFinal = 0;
		false ->
			EquipFinal = Equip
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Equip_bin = encode_p_goods(EquipFinal),
	BinLen_equip = erlang:byte_size(Equip_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_equip:32, Equip_bin/binary>>;
encode_m_equip_build_signature_toc(_) -> 
	<<>>.

decode_m_equip_build_signature_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_SubBinSizeequip:32, SubBinequip/binary>> = Bin1,
	Equip = decode_p_goods(SubBinequip),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_equip_build_signature_toc, Succ,common_tool:to_list(Reason),Equip};

decode_m_equip_build_signature_toc(_) ->
	undefined.
encode_m_equip_build_upgrade_link_tos(Record) when is_record(Record, m_equip_build_upgrade_link_tos) ->
	#m_equip_build_upgrade_link_tos{equip_id=Equip_id,is_quality=Is_quality,is_reinforce=Is_reinforce,is_five_ele=Is_five_ele,is_bind_attr=Is_bind_attr} = Record,
	case Equip_id =:= undefined of
		true ->
				Equip_idFinal = undefined,
				exit({required_field_not_assigned, m_equip_build_upgrade_link_tos, equip_id});
		false ->
			Equip_idFinal = Equip_id
	end,
	case Is_quality =:= undefined of
		true ->
				Is_qualityFinal = 0;
		false ->
			case Is_quality of
				true ->
					Is_qualityFinal = 1;
				false ->
					Is_qualityFinal = 0
			end
	end,
	case Is_reinforce =:= undefined of
		true ->
				Is_reinforceFinal = 0;
		false ->
			case Is_reinforce of
				true ->
					Is_reinforceFinal = 1;
				false ->
					Is_reinforceFinal = 0
			end
	end,
	case Is_five_ele =:= undefined of
		true ->
				Is_five_eleFinal = 0;
		false ->
			case Is_five_ele of
				true ->
					Is_five_eleFinal = 1;
				false ->
					Is_five_eleFinal = 0
			end
	end,
	case Is_bind_attr =:= undefined of
		true ->
				Is_bind_attrFinal = 0;
		false ->
			case Is_bind_attr of
				true ->
					Is_bind_attrFinal = 1;
				false ->
					Is_bind_attrFinal = 0
			end
	end,

	<<Equip_idFinal:32/signed,Is_qualityFinal:8,Is_reinforceFinal:8,Is_five_eleFinal:8,Is_bind_attrFinal:8>>;
encode_m_equip_build_upgrade_link_tos(_) -> 
	<<>>.

decode_m_equip_build_upgrade_link_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Equip_id:32/signed,Is_qualityTmp:8,Is_reinforceTmp:8,Is_five_eleTmp:8,Is_bind_attrTmp:8>> = Bin0,
case Is_qualityTmp of 
	1 -> 
		Is_quality = true;
	_ ->
		Is_quality = false
end,
case Is_reinforceTmp of 
	1 -> 
		Is_reinforce = true;
	_ ->
		Is_reinforce = false
end,
case Is_five_eleTmp of 
	1 -> 
		Is_five_ele = true;
	_ ->
		Is_five_ele = false
end,
case Is_bind_attrTmp of 
	1 -> 
		Is_bind_attr = true;
	_ ->
		Is_bind_attr = false
end,

	{m_equip_build_upgrade_link_tos, Equip_id,Is_quality,Is_reinforce,Is_five_ele,Is_bind_attr};

decode_m_equip_build_upgrade_link_tos(_) ->
	undefined.
encode_m_equip_build_upgrade_link_toc(Record) when is_record(Record, m_equip_build_upgrade_link_toc) ->
	#m_equip_build_upgrade_link_toc{succ=Succ,reason=Reason,new_equip=New_equip} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case New_equip =:= undefined of
		true ->
				New_equipFinal = 0;
		false ->
			New_equipFinal = New_equip
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	New_equip_bin = encode_p_goods(New_equipFinal),
	BinLen_new_equip = erlang:byte_size(New_equip_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_new_equip:32, New_equip_bin/binary>>;
encode_m_equip_build_upgrade_link_toc(_) -> 
	<<>>.

decode_m_equip_build_upgrade_link_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_SubBinSizenew_equip:32, SubBinnew_equip/binary>> = Bin1,
	New_equip = decode_p_goods(SubBinnew_equip),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_equip_build_upgrade_link_toc, Succ,common_tool:to_list(Reason),New_equip};

decode_m_equip_build_upgrade_link_toc(_) ->
	undefined.
encode_m_equip_build_upgrade_goods_tos(Record) when is_record(Record, m_equip_build_upgrade_goods_tos) ->
	#m_equip_build_upgrade_goods_tos{material=Material} = Record,
	case Material =:= undefined of
		true ->
				MaterialFinal = 0;
		false ->
			MaterialFinal = Material
	end,

	<<MaterialFinal:32/signed>>;
encode_m_equip_build_upgrade_goods_tos(_) -> 
	<<>>.

decode_m_equip_build_upgrade_goods_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Material:32/signed>> = Bin0,

	{m_equip_build_upgrade_goods_tos, Material};

decode_m_equip_build_upgrade_goods_tos(_) ->
	undefined.
encode_m_equip_build_upgrade_goods_toc(Record) when is_record(Record, m_equip_build_upgrade_goods_toc) ->
	#m_equip_build_upgrade_goods_toc{succ=Succ,reason=Reason,material=Material,base_list=Base_list,add_list=Add_list,quality_list=Quality_list,reinforce=Reinforce} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Material =:= undefined of
		true ->
				MaterialFinal = 0;
		false ->
			MaterialFinal = Material
	end,
	case Base_list =:= undefined of
		true ->
			Base_listFinal = [];
		false ->
			Base_listFinal = Base_list
	end,
	case Add_list =:= undefined of
		true ->
			Add_listFinal = [];
		false ->
			Add_listFinal = Add_list
	end,
	case Quality_list =:= undefined of
		true ->
			Quality_listFinal = [];
		false ->
			Quality_listFinal = Quality_list
	end,
	case Reinforce =:= undefined of
		true ->
			ReinforceFinal = [];
		false ->
			ReinforceFinal = Reinforce
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Base_list_bin = encode_p_equip_build_goodss(Base_listFinal, <<>>),
	SizeBase_listFinal = erlang:length(Base_listFinal),
	BinLen_base_list = erlang:byte_size(Base_list_bin),
	Add_list_bin = encode_p_equip_build_goodss(Add_listFinal, <<>>),
	SizeAdd_listFinal = erlang:length(Add_listFinal),
	BinLen_add_list = erlang:byte_size(Add_list_bin),
	Quality_list_bin = encode_p_equip_build_goodss(Quality_listFinal, <<>>),
	SizeQuality_listFinal = erlang:length(Quality_listFinal),
	BinLen_quality_list = erlang:byte_size(Quality_list_bin),
	Reinforce_bin = encode_p_equip_build_goodss(ReinforceFinal, <<>>),
	SizeReinforceFinal = erlang:length(ReinforceFinal),
	BinLen_reinforce = erlang:byte_size(Reinforce_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,MaterialFinal:32/signed,SizeBase_listFinal:16, BinLen_base_list:32, Base_list_bin/binary,SizeAdd_listFinal:16, BinLen_add_list:32, Add_list_bin/binary,SizeQuality_listFinal:16, BinLen_quality_list:32, Quality_list_bin/binary,SizeReinforceFinal:16, BinLen_reinforce:32, Reinforce_bin/binary>>;
encode_m_equip_build_upgrade_goods_toc(_) -> 
	<<>>.

decode_m_equip_build_upgrade_goods_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Material:32/signed,_Sizebase_list:16, BinLenbase_list:32, Bin2/binary>> = Bin1,
	<<SubBinbase_list:BinLenbase_list/binary, Bin3/binary>> = Bin2, 
	Base_list = lists:reverse(decode_p_equip_build_goodss(SubBinbase_list, [])),
	<<_Sizeadd_list:16, BinLenadd_list:32, Bin4/binary>> = Bin3,
	<<SubBinadd_list:BinLenadd_list/binary, Bin5/binary>> = Bin4, 
	Add_list = lists:reverse(decode_p_equip_build_goodss(SubBinadd_list, [])),
	<<_Sizequality_list:16, BinLenquality_list:32, Bin6/binary>> = Bin5,
	<<SubBinquality_list:BinLenquality_list/binary, Bin7/binary>> = Bin6, 
	Quality_list = lists:reverse(decode_p_equip_build_goodss(SubBinquality_list, [])),
	<<_Sizereinforce:16, _BinLenreinforce:32, SubBinreinforce/binary>> = Bin7,
	Reinforce = lists:reverse(decode_p_equip_build_goodss(SubBinreinforce, [])),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_equip_build_upgrade_goods_toc, Succ,common_tool:to_list(Reason),Material,Base_list,Add_list,Quality_list,Reinforce};

decode_m_equip_build_upgrade_goods_toc(_) ->
	undefined.
encode_m_equip_build_upgrade_tos(Record) when is_record(Record, m_equip_build_upgrade_tos) ->
	#m_equip_build_upgrade_tos{equip_id=Equip_id,new_type_id=New_type_id,base_type_id=Base_type_id,quality_type_id=Quality_type_id,reinforce_type_id=Reinforce_type_id,five_ele_type_id=Five_ele_type_id,bind_attr_type_id=Bind_attr_type_id} = Record,
	case Equip_id =:= undefined of
		true ->
				Equip_idFinal = undefined,
				exit({required_field_not_assigned, m_equip_build_upgrade_tos, equip_id});
		false ->
			Equip_idFinal = Equip_id
	end,
	case New_type_id =:= undefined of
		true ->
				New_type_idFinal = undefined,
				exit({required_field_not_assigned, m_equip_build_upgrade_tos, new_type_id});
		false ->
			New_type_idFinal = New_type_id
	end,
	case Base_type_id =:= undefined of
		true ->
				Base_type_idFinal = undefined,
				exit({required_field_not_assigned, m_equip_build_upgrade_tos, base_type_id});
		false ->
			Base_type_idFinal = Base_type_id
	end,
	case Quality_type_id =:= undefined of
		true ->
				Quality_type_idFinal = 0;
		false ->
			Quality_type_idFinal = Quality_type_id
	end,
	case Reinforce_type_id =:= undefined of
		true ->
				Reinforce_type_idFinal = 0;
		false ->
			Reinforce_type_idFinal = Reinforce_type_id
	end,
	case Five_ele_type_id =:= undefined of
		true ->
				Five_ele_type_idFinal = 0;
		false ->
			Five_ele_type_idFinal = Five_ele_type_id
	end,
	case Bind_attr_type_id =:= undefined of
		true ->
				Bind_attr_type_idFinal = 0;
		false ->
			Bind_attr_type_idFinal = Bind_attr_type_id
	end,

	<<Equip_idFinal:32/signed,New_type_idFinal:32/signed,Base_type_idFinal:32/signed,Quality_type_idFinal:32/signed,Reinforce_type_idFinal:32/signed,Five_ele_type_idFinal:32/signed,Bind_attr_type_idFinal:32/signed>>;
encode_m_equip_build_upgrade_tos(_) -> 
	<<>>.

decode_m_equip_build_upgrade_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Equip_id:32/signed,New_type_id:32/signed,Base_type_id:32/signed,Quality_type_id:32/signed,Reinforce_type_id:32/signed,Five_ele_type_id:32/signed,Bind_attr_type_id:32/signed>> = Bin0,

	{m_equip_build_upgrade_tos, Equip_id,New_type_id,Base_type_id,Quality_type_id,Reinforce_type_id,Five_ele_type_id,Bind_attr_type_id};

decode_m_equip_build_upgrade_tos(_) ->
	undefined.
encode_m_equip_build_upgrade_toc(Record) when is_record(Record, m_equip_build_upgrade_toc) ->
	#m_equip_build_upgrade_toc{succ=Succ,reason=Reason,equip=Equip,base_list=Base_list,add_list=Add_list,reinforce=Reinforce,quality_list=Quality_list,base_goods=Base_goods,quality_goods=Quality_goods,reinforce_goods=Reinforce_goods,five_ele_goods=Five_ele_goods,bind_attr_goods=Bind_attr_goods} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Equip =:= undefined of
		true ->
				EquipFinal = 0;
		false ->
			EquipFinal = Equip
	end,
	case Base_list =:= undefined of
		true ->
			Base_listFinal = [];
		false ->
			Base_listFinal = Base_list
	end,
	case Add_list =:= undefined of
		true ->
			Add_listFinal = [];
		false ->
			Add_listFinal = Add_list
	end,
	case Reinforce =:= undefined of
		true ->
			ReinforceFinal = [];
		false ->
			ReinforceFinal = Reinforce
	end,
	case Quality_list =:= undefined of
		true ->
			Quality_listFinal = [];
		false ->
			Quality_listFinal = Quality_list
	end,
	case Base_goods =:= undefined of
		true ->
				Base_goodsFinal = 0;
		false ->
			Base_goodsFinal = Base_goods
	end,
	case Quality_goods =:= undefined of
		true ->
				Quality_goodsFinal = 0;
		false ->
			Quality_goodsFinal = Quality_goods
	end,
	case Reinforce_goods =:= undefined of
		true ->
				Reinforce_goodsFinal = 0;
		false ->
			Reinforce_goodsFinal = Reinforce_goods
	end,
	case Five_ele_goods =:= undefined of
		true ->
				Five_ele_goodsFinal = 0;
		false ->
			Five_ele_goodsFinal = Five_ele_goods
	end,
	case Bind_attr_goods =:= undefined of
		true ->
				Bind_attr_goodsFinal = 0;
		false ->
			Bind_attr_goodsFinal = Bind_attr_goods
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Equip_bin = encode_p_goods(EquipFinal),
	BinLen_equip = erlang:byte_size(Equip_bin),
	Base_list_bin = encode_p_equip_build_goodss(Base_listFinal, <<>>),
	SizeBase_listFinal = erlang:length(Base_listFinal),
	BinLen_base_list = erlang:byte_size(Base_list_bin),
	Add_list_bin = encode_p_equip_build_goodss(Add_listFinal, <<>>),
	SizeAdd_listFinal = erlang:length(Add_listFinal),
	BinLen_add_list = erlang:byte_size(Add_list_bin),
	Reinforce_bin = encode_p_equip_build_goodss(ReinforceFinal, <<>>),
	SizeReinforceFinal = erlang:length(ReinforceFinal),
	BinLen_reinforce = erlang:byte_size(Reinforce_bin),
	Quality_list_bin = encode_p_equip_build_goodss(Quality_listFinal, <<>>),
	SizeQuality_listFinal = erlang:length(Quality_listFinal),
	BinLen_quality_list = erlang:byte_size(Quality_list_bin),
	Base_goods_bin = encode_p_equip_build_goods(Base_goodsFinal),
	BinLen_base_goods = erlang:byte_size(Base_goods_bin),
	Quality_goods_bin = encode_p_equip_build_goods(Quality_goodsFinal),
	BinLen_quality_goods = erlang:byte_size(Quality_goods_bin),
	Reinforce_goods_bin = encode_p_equip_build_goods(Reinforce_goodsFinal),
	BinLen_reinforce_goods = erlang:byte_size(Reinforce_goods_bin),
	Five_ele_goods_bin = encode_p_equip_build_goods(Five_ele_goodsFinal),
	BinLen_five_ele_goods = erlang:byte_size(Five_ele_goods_bin),
	Bind_attr_goods_bin = encode_p_equip_build_goods(Bind_attr_goodsFinal),
	BinLen_bind_attr_goods = erlang:byte_size(Bind_attr_goods_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_equip:32, Equip_bin/binary,SizeBase_listFinal:16, BinLen_base_list:32, Base_list_bin/binary,SizeAdd_listFinal:16, BinLen_add_list:32, Add_list_bin/binary,SizeReinforceFinal:16, BinLen_reinforce:32, Reinforce_bin/binary,SizeQuality_listFinal:16, BinLen_quality_list:32, Quality_list_bin/binary,BinLen_base_goods:32, Base_goods_bin/binary,BinLen_quality_goods:32, Quality_goods_bin/binary,BinLen_reinforce_goods:32, Reinforce_goods_bin/binary,BinLen_five_ele_goods:32, Five_ele_goods_bin/binary,BinLen_bind_attr_goods:32, Bind_attr_goods_bin/binary>>;
encode_m_equip_build_upgrade_toc(_) -> 
	<<>>.

decode_m_equip_build_upgrade_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,SubBinSizeequip:32, Bin2/binary>> = Bin1,
	<<SubBinequip:SubBinSizeequip/binary, Bin3/binary>> = Bin2,
	Equip = decode_p_goods(SubBinequip),
	<<_Sizebase_list:16, BinLenbase_list:32, Bin4/binary>> = Bin3,
	<<SubBinbase_list:BinLenbase_list/binary, Bin5/binary>> = Bin4, 
	Base_list = lists:reverse(decode_p_equip_build_goodss(SubBinbase_list, [])),
	<<_Sizeadd_list:16, BinLenadd_list:32, Bin6/binary>> = Bin5,
	<<SubBinadd_list:BinLenadd_list/binary, Bin7/binary>> = Bin6, 
	Add_list = lists:reverse(decode_p_equip_build_goodss(SubBinadd_list, [])),
	<<_Sizereinforce:16, BinLenreinforce:32, Bin8/binary>> = Bin7,
	<<SubBinreinforce:BinLenreinforce/binary, Bin9/binary>> = Bin8, 
	Reinforce = lists:reverse(decode_p_equip_build_goodss(SubBinreinforce, [])),
	<<_Sizequality_list:16, BinLenquality_list:32, Bin10/binary>> = Bin9,
	<<SubBinquality_list:BinLenquality_list/binary, Bin11/binary>> = Bin10, 
	Quality_list = lists:reverse(decode_p_equip_build_goodss(SubBinquality_list, [])),
	<<SubBinSizebase_goods:32, Bin12/binary>> = Bin11,
	<<SubBinbase_goods:SubBinSizebase_goods/binary, Bin13/binary>> = Bin12,
	Base_goods = decode_p_equip_build_goods(SubBinbase_goods),
	<<SubBinSizequality_goods:32, Bin14/binary>> = Bin13,
	<<SubBinquality_goods:SubBinSizequality_goods/binary, Bin15/binary>> = Bin14,
	Quality_goods = decode_p_equip_build_goods(SubBinquality_goods),
	<<SubBinSizereinforce_goods:32, Bin16/binary>> = Bin15,
	<<SubBinreinforce_goods:SubBinSizereinforce_goods/binary, Bin17/binary>> = Bin16,
	Reinforce_goods = decode_p_equip_build_goods(SubBinreinforce_goods),
	<<SubBinSizefive_ele_goods:32, Bin18/binary>> = Bin17,
	<<SubBinfive_ele_goods:SubBinSizefive_ele_goods/binary, Bin19/binary>> = Bin18,
	Five_ele_goods = decode_p_equip_build_goods(SubBinfive_ele_goods),
	<<_SubBinSizebind_attr_goods:32, SubBinbind_attr_goods/binary>> = Bin19,
	Bind_attr_goods = decode_p_equip_build_goods(SubBinbind_attr_goods),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_equip_build_upgrade_toc, Succ,common_tool:to_list(Reason),Equip,Base_list,Add_list,Reinforce,Quality_list,Base_goods,Quality_goods,Reinforce_goods,Five_ele_goods,Bind_attr_goods};

decode_m_equip_build_upgrade_toc(_) ->
	undefined.
encode_m_equip_build_decompose_tos(Record) when is_record(Record, m_equip_build_decompose_tos) ->
	#m_equip_build_decompose_tos{equip_id=Equip_id} = Record,
	case Equip_id =:= undefined of
		true ->
				Equip_idFinal = undefined,
				exit({required_field_not_assigned, m_equip_build_decompose_tos, equip_id});
		false ->
			Equip_idFinal = Equip_id
	end,

	<<Equip_idFinal:32/signed>>;
encode_m_equip_build_decompose_tos(_) -> 
	<<>>.

decode_m_equip_build_decompose_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Equip_id:32/signed>> = Bin0,

	{m_equip_build_decompose_tos, Equip_id};

decode_m_equip_build_decompose_tos(_) ->
	undefined.
encode_m_equip_build_decompose_toc(Record) when is_record(Record, m_equip_build_decompose_toc) ->
	#m_equip_build_decompose_toc{succ=Succ,reason=Reason,base_goods=Base_goods,add_goods=Add_goods} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Base_goods =:= undefined of
		true ->
				Base_goodsFinal = 0;
		false ->
			Base_goodsFinal = Base_goods
	end,
	case Add_goods =:= undefined of
		true ->
				Add_goodsFinal = 0;
		false ->
			Add_goodsFinal = Add_goods
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Base_goods_bin = encode_p_equip_build_goods(Base_goodsFinal),
	BinLen_base_goods = erlang:byte_size(Base_goods_bin),
	Add_goods_bin = encode_p_equip_build_goods(Add_goodsFinal),
	BinLen_add_goods = erlang:byte_size(Add_goods_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_base_goods:32, Base_goods_bin/binary,BinLen_add_goods:32, Add_goods_bin/binary>>;
encode_m_equip_build_decompose_toc(_) -> 
	<<>>.

decode_m_equip_build_decompose_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,SubBinSizebase_goods:32, Bin2/binary>> = Bin1,
	<<SubBinbase_goods:SubBinSizebase_goods/binary, Bin3/binary>> = Bin2,
	Base_goods = decode_p_equip_build_goods(SubBinbase_goods),
	<<_SubBinSizeadd_goods:32, SubBinadd_goods/binary>> = Bin3,
	Add_goods = decode_p_equip_build_goods(SubBinadd_goods),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_equip_build_decompose_toc, Succ,common_tool:to_list(Reason),Base_goods,Add_goods};

decode_m_equip_build_decompose_toc(_) ->
	undefined.
encode_m_equip_build_fiveele_goods_tos(Record) when is_record(Record, m_equip_build_fiveele_goods_tos) ->
	#m_equip_build_fiveele_goods_tos{material=Material} = Record,
	case Material =:= undefined of
		true ->
				MaterialFinal = 0;
		false ->
			MaterialFinal = Material
	end,

	<<MaterialFinal:32/signed>>;
encode_m_equip_build_fiveele_goods_tos(_) -> 
	<<>>.

decode_m_equip_build_fiveele_goods_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Material:32/signed>> = Bin0,

	{m_equip_build_fiveele_goods_tos, Material};

decode_m_equip_build_fiveele_goods_tos(_) ->
	undefined.
encode_m_equip_build_fiveele_goods_toc(Record) when is_record(Record, m_equip_build_fiveele_goods_toc) ->
	#m_equip_build_fiveele_goods_toc{succ=Succ,reason=Reason,material=Material,five_good=Five_good,add_list=Add_list} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Material =:= undefined of
		true ->
				MaterialFinal = 0;
		false ->
			MaterialFinal = Material
	end,
	case Five_good =:= undefined of
		true ->
				Five_goodFinal = 0;
		false ->
			Five_goodFinal = Five_good
	end,
	case Add_list =:= undefined of
		true ->
			Add_listFinal = [];
		false ->
			Add_listFinal = Add_list
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Five_good_bin = encode_p_equip_build_goods(Five_goodFinal),
	BinLen_five_good = erlang:byte_size(Five_good_bin),
	Add_list_bin = encode_p_equip_build_goodss(Add_listFinal, <<>>),
	SizeAdd_listFinal = erlang:length(Add_listFinal),
	BinLen_add_list = erlang:byte_size(Add_list_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,MaterialFinal:32/signed,BinLen_five_good:32, Five_good_bin/binary,SizeAdd_listFinal:16, BinLen_add_list:32, Add_list_bin/binary>>;
encode_m_equip_build_fiveele_goods_toc(_) -> 
	<<>>.

decode_m_equip_build_fiveele_goods_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Material:32/signed,SubBinSizefive_good:32, Bin2/binary>> = Bin1,
	<<SubBinfive_good:SubBinSizefive_good/binary, Bin3/binary>> = Bin2,
	Five_good = decode_p_equip_build_goods(SubBinfive_good),
	<<_Sizeadd_list:16, _BinLenadd_list:32, SubBinadd_list/binary>> = Bin3,
	Add_list = lists:reverse(decode_p_equip_build_goodss(SubBinadd_list, [])),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_equip_build_fiveele_goods_toc, Succ,common_tool:to_list(Reason),Material,Five_good,Add_list};

decode_m_equip_build_fiveele_goods_toc(_) ->
	undefined.
encode_m_equip_build_fiveele_tos(Record) when is_record(Record, m_equip_build_fiveele_tos) ->
	#m_equip_build_fiveele_tos{type=Type,equip_id=Equip_id,good_type_id=Good_type_id} = Record,
	case Type =:= undefined of
		true ->
				TypeFinal = 0;
		false ->
			TypeFinal = Type
	end,
	case Equip_id =:= undefined of
		true ->
				Equip_idFinal = undefined,
				exit({required_field_not_assigned, m_equip_build_fiveele_tos, equip_id});
		false ->
			Equip_idFinal = Equip_id
	end,
	case Good_type_id =:= undefined of
		true ->
				Good_type_idFinal = undefined,
				exit({required_field_not_assigned, m_equip_build_fiveele_tos, good_type_id});
		false ->
			Good_type_idFinal = Good_type_id
	end,

	<<TypeFinal:32/signed,Equip_idFinal:32/signed,Good_type_idFinal:32/signed>>;
encode_m_equip_build_fiveele_tos(_) -> 
	<<>>.

decode_m_equip_build_fiveele_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Type:32/signed,Equip_id:32/signed,Good_type_id:32/signed>> = Bin0,

	{m_equip_build_fiveele_tos, Type,Equip_id,Good_type_id};

decode_m_equip_build_fiveele_tos(_) ->
	undefined.
encode_m_equip_build_fiveele_toc(Record) when is_record(Record, m_equip_build_fiveele_toc) ->
	#m_equip_build_fiveele_toc{succ=Succ,reason=Reason,equip=Equip,five_good=Five_good,add_list=Add_list,used_good=Used_good} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Equip =:= undefined of
		true ->
				EquipFinal = 0;
		false ->
			EquipFinal = Equip
	end,
	case Five_good =:= undefined of
		true ->
				Five_goodFinal = 0;
		false ->
			Five_goodFinal = Five_good
	end,
	case Add_list =:= undefined of
		true ->
			Add_listFinal = [];
		false ->
			Add_listFinal = Add_list
	end,
	case Used_good =:= undefined of
		true ->
				Used_goodFinal = 0;
		false ->
			Used_goodFinal = Used_good
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Equip_bin = encode_p_goods(EquipFinal),
	BinLen_equip = erlang:byte_size(Equip_bin),
	Five_good_bin = encode_p_equip_build_goods(Five_goodFinal),
	BinLen_five_good = erlang:byte_size(Five_good_bin),
	Add_list_bin = encode_p_equip_build_goodss(Add_listFinal, <<>>),
	SizeAdd_listFinal = erlang:length(Add_listFinal),
	BinLen_add_list = erlang:byte_size(Add_list_bin),
	Used_good_bin = encode_p_equip_build_goods(Used_goodFinal),
	BinLen_used_good = erlang:byte_size(Used_good_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_equip:32, Equip_bin/binary,BinLen_five_good:32, Five_good_bin/binary,SizeAdd_listFinal:16, BinLen_add_list:32, Add_list_bin/binary,BinLen_used_good:32, Used_good_bin/binary>>;
encode_m_equip_build_fiveele_toc(_) -> 
	<<>>.

decode_m_equip_build_fiveele_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,SubBinSizeequip:32, Bin2/binary>> = Bin1,
	<<SubBinequip:SubBinSizeequip/binary, Bin3/binary>> = Bin2,
	Equip = decode_p_goods(SubBinequip),
	<<SubBinSizefive_good:32, Bin4/binary>> = Bin3,
	<<SubBinfive_good:SubBinSizefive_good/binary, Bin5/binary>> = Bin4,
	Five_good = decode_p_equip_build_goods(SubBinfive_good),
	<<_Sizeadd_list:16, BinLenadd_list:32, Bin6/binary>> = Bin5,
	<<SubBinadd_list:BinLenadd_list/binary, Bin7/binary>> = Bin6, 
	Add_list = lists:reverse(decode_p_equip_build_goodss(SubBinadd_list, [])),
	<<_SubBinSizeused_good:32, SubBinused_good/binary>> = Bin7,
	Used_good = decode_p_equip_build_goods(SubBinused_good),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_equip_build_fiveele_toc, Succ,common_tool:to_list(Reason),Equip,Five_good,Add_list,Used_good};

decode_m_equip_build_fiveele_toc(_) ->
	undefined.
encode_m_driver_go_tos(Record) when is_record(Record, m_driver_go_tos) ->
	#m_driver_go_tos{id=Id,type=Type} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, m_driver_go_tos, id});
		false ->
			IdFinal = Id
	end,
	case Type =:= undefined of
		true ->
				TypeFinal = 1;
		false ->
			TypeFinal = Type
	end,

	<<IdFinal:32/signed,TypeFinal:32/signed>>;
encode_m_driver_go_tos(_) -> 
	<<>>.

decode_m_driver_go_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed,Type:32/signed>> = Bin0,

	{m_driver_go_tos, Id,Type};

decode_m_driver_go_tos(_) ->
	undefined.
encode_m_driver_go_toc(Record) when is_record(Record, m_driver_go_toc) ->
	#m_driver_go_toc{succ=Succ,reason=Reason,type=Type,id=Id} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_driver_go_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Type =:= undefined of
		true ->
				TypeFinal = 0;
		false ->
			TypeFinal = Type
	end,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, m_driver_go_toc, id});
		false ->
			IdFinal = Id
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,TypeFinal:32/signed,IdFinal:32/signed>>;
encode_m_driver_go_toc(_) -> 
	<<>>.

decode_m_driver_go_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Type:32/signed,Id:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_driver_go_toc, Succ,common_tool:to_list(Reason),Type,Id};

decode_m_driver_go_toc(_) ->
	undefined.
encode_m_system_behavior_tos(Record) when is_record(Record, m_system_behavior_tos) ->
	#m_system_behavior_tos{type=Type} = Record,
	case Type =:= undefined of
		true ->
				TypeFinal = undefined,
				exit({required_field_not_assigned, m_system_behavior_tos, type});
		false ->
			TypeFinal = Type
	end,

	<<TypeFinal:32/signed>>;
encode_m_system_behavior_tos(_) -> 
	<<>>.

decode_m_system_behavior_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Type:32/signed>> = Bin0,

	{m_system_behavior_tos, Type};

decode_m_system_behavior_tos(_) ->
	undefined.
encode_m_system_heartbeat_tos(Record) when is_record(Record, m_system_heartbeat_tos) ->
	#m_system_heartbeat_tos{time=Time} = Record,
	case Time =:= undefined of
		true ->
				TimeFinal = undefined,
				exit({required_field_not_assigned, m_system_heartbeat_tos, time});
		false ->
			TimeFinal = Time
	end,

	<<TimeFinal:32/signed>>;
encode_m_system_heartbeat_tos(_) -> 
	<<>>.

decode_m_system_heartbeat_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Time:32/signed>> = Bin0,

	{m_system_heartbeat_tos, Time};

decode_m_system_heartbeat_tos(_) ->
	undefined.
encode_m_system_heartbeat_toc(Record) when is_record(Record, m_system_heartbeat_toc) ->
	#m_system_heartbeat_toc{time=Time,server_time=Server_time} = Record,
	case Time =:= undefined of
		true ->
				TimeFinal = undefined,
				exit({required_field_not_assigned, m_system_heartbeat_toc, time});
		false ->
			TimeFinal = Time
	end,
	case Server_time =:= undefined of
		true ->
				Server_timeFinal = undefined,
				exit({required_field_not_assigned, m_system_heartbeat_toc, server_time});
		false ->
			Server_timeFinal = Server_time
	end,

	<<TimeFinal:32/signed,Server_timeFinal:32/signed>>;
encode_m_system_heartbeat_toc(_) -> 
	<<>>.

decode_m_system_heartbeat_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Time:32/signed,Server_time:32/signed>> = Bin0,

	{m_system_heartbeat_toc, Time,Server_time};

decode_m_system_heartbeat_toc(_) ->
	undefined.
encode_m_system_fcm_toc(Record) when is_record(Record, m_system_fcm_toc) ->
	#m_system_fcm_toc{info=Info,remain_time=Remain_time,total_time=Total_time} = Record,
	case Info =:= undefined of
		true ->
				InfoFinal = undefined,
				exit({required_field_not_assigned, m_system_fcm_toc, info});
		false ->
			InfoFinal = Info
	end,
	case Remain_time =:= undefined of
		true ->
				Remain_timeFinal = undefined,
				exit({required_field_not_assigned, m_system_fcm_toc, remain_time});
		false ->
			Remain_timeFinal = Remain_time
	end,
	case Total_time =:= undefined of
		true ->
				Total_timeFinal = undefined,
				exit({required_field_not_assigned, m_system_fcm_toc, total_time});
		false ->
			Total_timeFinal = Total_time
	end,
	Info2 = common_tool:to_binary(InfoFinal),
	InfoLen = erlang:byte_size(Info2),

	<<InfoLen:16, Info2/binary,Remain_timeFinal:32/signed,Total_timeFinal:32/signed>>;
encode_m_system_fcm_toc(_) -> 
	<<>>.

decode_m_system_fcm_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<InfoLen:16, Bin1/binary>> = Bin0,
	<<Info:InfoLen/binary,Remain_time:32/signed,Total_time:32/signed>> = Bin1,

	{m_system_fcm_toc, common_tool:to_list(Info),Remain_time,Total_time};

decode_m_system_fcm_toc(_) ->
	undefined.
encode_m_system_need_fcm_toc(Record) when is_record(Record, m_system_need_fcm_toc) ->
	#m_system_need_fcm_toc{remain_time=Remain_time} = Record,
	case Remain_time =:= undefined of
		true ->
				Remain_timeFinal = undefined,
				exit({required_field_not_assigned, m_system_need_fcm_toc, remain_time});
		false ->
			Remain_timeFinal = Remain_time
	end,

	<<Remain_timeFinal:32/signed>>;
encode_m_system_need_fcm_toc(_) -> 
	<<>>.

decode_m_system_need_fcm_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Remain_time:32/signed>> = Bin0,

	{m_system_need_fcm_toc, Remain_time};

decode_m_system_need_fcm_toc(_) ->
	undefined.
encode_m_system_set_fcm_tos(Record) when is_record(Record, m_system_set_fcm_tos) ->
	#m_system_set_fcm_tos{name=Name,card=Card} = Record,
	case Name =:= undefined of
		true ->
				NameFinal = undefined,
				exit({required_field_not_assigned, m_system_set_fcm_tos, name});
		false ->
			NameFinal = Name
	end,
	case Card =:= undefined of
		true ->
				CardFinal = undefined,
				exit({required_field_not_assigned, m_system_set_fcm_tos, card});
		false ->
			CardFinal = Card
	end,
	Name2 = common_tool:to_binary(NameFinal),
	NameLen = erlang:byte_size(Name2),
	Card2 = common_tool:to_binary(CardFinal),
	CardLen = erlang:byte_size(Card2),

	<<NameLen:16, Name2/binary,CardLen:16, Card2/binary>>;
encode_m_system_set_fcm_tos(_) -> 
	<<>>.

decode_m_system_set_fcm_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<NameLen:16, Bin1/binary>> = Bin0,
	<<Name:NameLen/binary,CardLen:16, Bin2/binary>> = Bin1,
	<<Card:CardLen/binary>> = Bin2,

	{m_system_set_fcm_tos, common_tool:to_list(Name),common_tool:to_list(Card)};

decode_m_system_set_fcm_tos(_) ->
	undefined.
encode_m_system_set_fcm_toc(Record) when is_record(Record, m_system_set_fcm_toc) ->
	#m_system_set_fcm_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_system_set_fcm_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_system_set_fcm_toc(_) -> 
	<<>>.

decode_m_system_set_fcm_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_system_set_fcm_toc, Succ,common_tool:to_list(Reason)};

decode_m_system_set_fcm_toc(_) ->
	undefined.
encode_m_system_error_toc(Record) when is_record(Record, m_system_error_toc) ->
	#m_system_error_toc{if_close_connect=If_close_connect,type=Type,error_info=Error_info,error_no=Error_no,need_reconnect=Need_reconnect,key=Key,line_info=Line_info} = Record,
	case If_close_connect =:= undefined of
		true ->
				If_close_connectFinal = 1;
		false ->
		case If_close_connect of
			true ->
				If_close_connectFinal = 1;
			false ->
				If_close_connectFinal = 0
		end
	end,
	case Type =:= undefined of
		true ->
				TypeFinal = 'line';
		false ->
			TypeFinal = Type
	end,
	case Error_info =:= undefined of
		true ->
				Error_infoFinal = undefined,
				exit({required_field_not_assigned, m_system_error_toc, error_info});
		false ->
			Error_infoFinal = Error_info
	end,
	case Error_no =:= undefined of
		true ->
				Error_noFinal = undefined,
				exit({required_field_not_assigned, m_system_error_toc, error_no});
		false ->
			Error_noFinal = Error_no
	end,
	case Need_reconnect =:= undefined of
		true ->
				Need_reconnectFinal = 0;
		false ->
		case Need_reconnect of
			true ->
				Need_reconnectFinal = 1;
			false ->
				Need_reconnectFinal = 0
		end
	end,
	case Key =:= undefined of
		true ->
				KeyFinal = <<>>;
		false ->
			KeyFinal = Key
	end,
	case Line_info =:= undefined of
		true ->
				Line_infoFinal = 0;
		false ->
			Line_infoFinal = Line_info
	end,
	Type2 = common_tool:to_binary(TypeFinal),
	TypeLen = erlang:byte_size(Type2),
	Error_info2 = common_tool:to_binary(Error_infoFinal),
	Error_infoLen = erlang:byte_size(Error_info2),
	Key2 = common_tool:to_binary(KeyFinal),
	KeyLen = erlang:byte_size(Key2),
	Line_info_bin = encode_p_line_info(Line_infoFinal),
	BinLen_line_info = erlang:byte_size(Line_info_bin),

	<<If_close_connectFinal:8,TypeLen:16, Type2/binary,Error_infoLen:16, Error_info2/binary,Error_noFinal:32/signed,Need_reconnectFinal:8,KeyLen:16, Key2/binary,BinLen_line_info:32, Line_info_bin/binary>>;
encode_m_system_error_toc(_) -> 
	<<>>.

decode_m_system_error_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<If_close_connectTmp:8,TypeLen:16, Bin1/binary>> = Bin0,
	<<Type:TypeLen/binary,Error_infoLen:16, Bin2/binary>> = Bin1,
	<<Error_info:Error_infoLen/binary,Error_no:32/signed,Need_reconnectTmp:8,KeyLen:16, Bin3/binary>> = Bin2,
	<<Key:KeyLen/binary,_SubBinSizeline_info:32, SubBinline_info/binary>> = Bin3,
	Line_info = decode_p_line_info(SubBinline_info),
case If_close_connectTmp of 
	1 -> 
		If_close_connect = true;
	_ ->
		If_close_connect = false
end,
case Need_reconnectTmp of 
	1 -> 
		Need_reconnect = true;
	_ ->
		Need_reconnect = false
end,

	{m_system_error_toc, If_close_connect,common_tool:to_list(Type),common_tool:to_list(Error_info),Error_no,Need_reconnect,common_tool:to_list(Key),Line_info};

decode_m_system_error_toc(_) ->
	undefined.
encode_m_system_message_toc(Record) when is_record(Record, m_system_message_toc) ->
	#m_system_message_toc{message=Message} = Record,
	case Message =:= undefined of
		true ->
				MessageFinal = undefined,
				exit({required_field_not_assigned, m_system_message_toc, message});
		false ->
			MessageFinal = Message
	end,
	Message2 = common_tool:to_binary(MessageFinal),
	MessageLen = erlang:byte_size(Message2),

	<<MessageLen:16, Message2/binary>>;
encode_m_system_message_toc(_) -> 
	<<>>.

decode_m_system_message_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<MessageLen:16, Bin1/binary>> = Bin0,
	<<Message:MessageLen/binary>> = Bin1,

	{m_system_message_toc, common_tool:to_list(Message)};

decode_m_system_message_toc(_) ->
	undefined.
encode_m_system_config_change_tos(Record) when is_record(Record, m_system_config_change_tos) ->
	#m_system_config_change_tos{sys_config=Sys_config} = Record,
	case Sys_config =:= undefined of
		true ->
				Sys_configFinal = undefined,
				exit({required_field_not_assigned, m_system_config_change_tos, sys_config});
		false ->
			Sys_configFinal = Sys_config
	end,
	Sys_config_bin = encode_p_sys_config(Sys_configFinal),
	BinLen_sys_config = erlang:byte_size(Sys_config_bin),

	<<BinLen_sys_config:32, Sys_config_bin/binary>>;
encode_m_system_config_change_tos(_) -> 
	<<>>.

decode_m_system_config_change_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_SubBinSizesys_config:32, SubBinsys_config/binary>> = Bin0,
	Sys_config = decode_p_sys_config(SubBinsys_config),

	{m_system_config_change_tos, Sys_config};

decode_m_system_config_change_tos(_) ->
	undefined.
encode_m_system_config_change_toc(Record) when is_record(Record, m_system_config_change_toc) ->
	#m_system_config_change_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_system_config_change_toc(_) -> 
	<<>>.

decode_m_system_config_change_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_system_config_change_toc, Succ,common_tool:to_list(Reason)};

decode_m_system_config_change_toc(_) ->
	undefined.
encode_m_system_config_toc(Record) when is_record(Record, m_system_config_toc) ->
	#m_system_config_toc{sys_config=Sys_config} = Record,
	case Sys_config =:= undefined of
		true ->
				Sys_configFinal = undefined,
				exit({required_field_not_assigned, m_system_config_toc, sys_config});
		false ->
			Sys_configFinal = Sys_config
	end,
	Sys_config_bin = encode_p_sys_config(Sys_configFinal),
	BinLen_sys_config = erlang:byte_size(Sys_config_bin),

	<<BinLen_sys_config:32, Sys_config_bin/binary>>;
encode_m_system_config_toc(_) -> 
	<<>>.

decode_m_system_config_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_SubBinSizesys_config:32, SubBinsys_config/binary>> = Bin0,
	Sys_config = decode_p_sys_config(SubBinsys_config),

	{m_system_config_toc, Sys_config};

decode_m_system_config_toc(_) ->
	undefined.
encode_m_system_pk_not_agree_tos(Record) when is_record(Record, m_system_pk_not_agree_tos) ->
	#m_system_pk_not_agree_tos{} = Record,

	<<>>;
encode_m_system_pk_not_agree_tos(_) -> 
	<<>>.

decode_m_system_pk_not_agree_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_system_pk_not_agree_tos};

decode_m_system_pk_not_agree_tos(_) ->
	undefined.
encode_p_sys_config(Record) when is_record(Record, p_sys_config) ->
	#p_sys_config{scence_vol=Scence_vol,game_vol=Game_vol,back_sound=Back_sound,game_sound=Game_sound,image_quality=Image_quality,private_chat=Private_chat,nation_chat=Nation_chat,family_chat=Family_chat,world_chat=World_chat,team_chat=Team_chat,center_broadcast=Center_broadcast,skill_effect=Skill_effect,show_cloth=Show_cloth,by_find=By_find,show_title=Show_title,show_family=Show_family,show_name=Show_name,show_faction=Show_faction,auto_fight=Auto_fight,auto_use_hp=Auto_use_hp,hp_below=Hp_below,auto_use_mp=Auto_use_mp,mp_below=Mp_below,auto_buy=Auto_buy,auto_return_home=Auto_return_home,auto_pick_equip=Auto_pick_equip,auto_pick_stone=Auto_pick_stone,auto_pick_drug=Auto_pick_drug,auto_pick_other=Auto_pick_other,pick_equip_color=Pick_equip_color,pick_other_color=Pick_other_color,auto_use_skill=Auto_use_skill,skill_list=Skill_list,auto_search=Auto_search,auto_team=Auto_team,auto_accept=Auto_accept,hook_time=Hook_time,time_level=Time_level,show_dropgoods_name=Show_dropgoods_name,show_equip_compare=Show_equip_compare,by_hp_typeid=By_hp_typeid,by_mp_typeid=By_mp_typeid,other_faction=Other_faction,accept_friend_request=Accept_friend_request,pet_auto_use_hp=Pet_auto_use_hp,pet_hp_below=Pet_hp_below,pet_by_hp_typeid=Pet_by_hp_typeid,pet_auto_use_skill=Pet_auto_use_skill,use_hp_item_type=Use_hp_item_type,use_mp_item_type=Use_mp_item_type,use_pet_item_type=Use_pet_item_type} = Record,
	case Scence_vol =:= undefined of
		true ->
				Scence_volFinal = 30;
		false ->
			Scence_volFinal = Scence_vol
	end,
	case Game_vol =:= undefined of
		true ->
				Game_volFinal = 30;
		false ->
			Game_volFinal = Game_vol
	end,
	case Back_sound =:= undefined of
		true ->
				Back_soundFinal = 0;
		false ->
		case Back_sound of
			true ->
				Back_soundFinal = 1;
			false ->
				Back_soundFinal = 0
		end
	end,
	case Game_sound =:= undefined of
		true ->
				Game_soundFinal = 0;
		false ->
		case Game_sound of
			true ->
				Game_soundFinal = 1;
			false ->
				Game_soundFinal = 0
		end
	end,
	case Image_quality =:= undefined of
		true ->
				Image_qualityFinal = 2;
		false ->
			Image_qualityFinal = Image_quality
	end,
	case Private_chat =:= undefined of
		true ->
				Private_chatFinal = 1;
		false ->
		case Private_chat of
			true ->
				Private_chatFinal = 1;
			false ->
				Private_chatFinal = 0
		end
	end,
	case Nation_chat =:= undefined of
		true ->
				Nation_chatFinal = 1;
		false ->
		case Nation_chat of
			true ->
				Nation_chatFinal = 1;
			false ->
				Nation_chatFinal = 0
		end
	end,
	case Family_chat =:= undefined of
		true ->
				Family_chatFinal = 1;
		false ->
		case Family_chat of
			true ->
				Family_chatFinal = 1;
			false ->
				Family_chatFinal = 0
		end
	end,
	case World_chat =:= undefined of
		true ->
				World_chatFinal = 1;
		false ->
		case World_chat of
			true ->
				World_chatFinal = 1;
			false ->
				World_chatFinal = 0
		end
	end,
	case Team_chat =:= undefined of
		true ->
				Team_chatFinal = 1;
		false ->
		case Team_chat of
			true ->
				Team_chatFinal = 1;
			false ->
				Team_chatFinal = 0
		end
	end,
	case Center_broadcast =:= undefined of
		true ->
				Center_broadcastFinal = 1;
		false ->
		case Center_broadcast of
			true ->
				Center_broadcastFinal = 1;
			false ->
				Center_broadcastFinal = 0
		end
	end,
	case Skill_effect =:= undefined of
		true ->
				Skill_effectFinal = 1;
		false ->
		case Skill_effect of
			true ->
				Skill_effectFinal = 1;
			false ->
				Skill_effectFinal = 0
		end
	end,
	case Show_cloth =:= undefined of
		true ->
				Show_clothFinal = 1;
		false ->
		case Show_cloth of
			true ->
				Show_clothFinal = 1;
			false ->
				Show_clothFinal = 0
		end
	end,
	case By_find =:= undefined of
		true ->
				By_findFinal = 1;
		false ->
		case By_find of
			true ->
				By_findFinal = 1;
			false ->
				By_findFinal = 0
		end
	end,
	case Show_title =:= undefined of
		true ->
				Show_titleFinal = 1;
		false ->
		case Show_title of
			true ->
				Show_titleFinal = 1;
			false ->
				Show_titleFinal = 0
		end
	end,
	case Show_family =:= undefined of
		true ->
				Show_familyFinal = 1;
		false ->
		case Show_family of
			true ->
				Show_familyFinal = 1;
			false ->
				Show_familyFinal = 0
		end
	end,
	case Show_name =:= undefined of
		true ->
				Show_nameFinal = 1;
		false ->
		case Show_name of
			true ->
				Show_nameFinal = 1;
			false ->
				Show_nameFinal = 0
		end
	end,
	case Show_faction =:= undefined of
		true ->
				Show_factionFinal = 1;
		false ->
		case Show_faction of
			true ->
				Show_factionFinal = 1;
			false ->
				Show_factionFinal = 0
		end
	end,
	case Auto_fight =:= undefined of
		true ->
				Auto_fightFinal = 0;
		false ->
		case Auto_fight of
			true ->
				Auto_fightFinal = 1;
			false ->
				Auto_fightFinal = 0
		end
	end,
	case Auto_use_hp =:= undefined of
		true ->
				Auto_use_hpFinal = 1;
		false ->
		case Auto_use_hp of
			true ->
				Auto_use_hpFinal = 1;
			false ->
				Auto_use_hpFinal = 0
		end
	end,
	case Hp_below =:= undefined of
		true ->
				Hp_belowFinal = 50;
		false ->
			Hp_belowFinal = Hp_below
	end,
	case Auto_use_mp =:= undefined of
		true ->
				Auto_use_mpFinal = 1;
		false ->
		case Auto_use_mp of
			true ->
				Auto_use_mpFinal = 1;
			false ->
				Auto_use_mpFinal = 0
		end
	end,
	case Mp_below =:= undefined of
		true ->
				Mp_belowFinal = 50;
		false ->
			Mp_belowFinal = Mp_below
	end,
	case Auto_buy =:= undefined of
		true ->
				Auto_buyFinal = 0;
		false ->
		case Auto_buy of
			true ->
				Auto_buyFinal = 1;
			false ->
				Auto_buyFinal = 0
		end
	end,
	case Auto_return_home =:= undefined of
		true ->
				Auto_return_homeFinal = 0;
		false ->
		case Auto_return_home of
			true ->
				Auto_return_homeFinal = 1;
			false ->
				Auto_return_homeFinal = 0
		end
	end,
	case Auto_pick_equip =:= undefined of
		true ->
				Auto_pick_equipFinal = 1;
		false ->
		case Auto_pick_equip of
			true ->
				Auto_pick_equipFinal = 1;
			false ->
				Auto_pick_equipFinal = 0
		end
	end,
	case Auto_pick_stone =:= undefined of
		true ->
				Auto_pick_stoneFinal = 1;
		false ->
		case Auto_pick_stone of
			true ->
				Auto_pick_stoneFinal = 1;
			false ->
				Auto_pick_stoneFinal = 0
		end
	end,
	case Auto_pick_drug =:= undefined of
		true ->
				Auto_pick_drugFinal = 1;
		false ->
		case Auto_pick_drug of
			true ->
				Auto_pick_drugFinal = 1;
			false ->
				Auto_pick_drugFinal = 0
		end
	end,
	case Auto_pick_other =:= undefined of
		true ->
				Auto_pick_otherFinal = 1;
		false ->
		case Auto_pick_other of
			true ->
				Auto_pick_otherFinal = 1;
			false ->
				Auto_pick_otherFinal = 0
		end
	end,
	case Pick_equip_color =:= undefined of
		true ->
			Pick_equip_colorFinal = [];
		false ->
			Pick_equip_colorFinal = Pick_equip_color
	end,
	case Pick_other_color =:= undefined of
		true ->
			Pick_other_colorFinal = [];
		false ->
			Pick_other_colorFinal = Pick_other_color
	end,
	case Auto_use_skill =:= undefined of
		true ->
				Auto_use_skillFinal = 1;
		false ->
		case Auto_use_skill of
			true ->
				Auto_use_skillFinal = 1;
			false ->
				Auto_use_skillFinal = 0
		end
	end,
	case Skill_list =:= undefined of
		true ->
			Skill_listFinal = [];
		false ->
			Skill_listFinal = Skill_list
	end,
	case Auto_search =:= undefined of
		true ->
				Auto_searchFinal = 1;
		false ->
		case Auto_search of
			true ->
				Auto_searchFinal = 1;
			false ->
				Auto_searchFinal = 0
		end
	end,
	case Auto_team =:= undefined of
		true ->
				Auto_teamFinal = 1;
		false ->
		case Auto_team of
			true ->
				Auto_teamFinal = 1;
			false ->
				Auto_teamFinal = 0
		end
	end,
	case Auto_accept =:= undefined of
		true ->
				Auto_acceptFinal = 1;
		false ->
		case Auto_accept of
			true ->
				Auto_acceptFinal = 1;
			false ->
				Auto_acceptFinal = 0
		end
	end,
	case Hook_time =:= undefined of
		true ->
				Hook_timeFinal = 60;
		false ->
			Hook_timeFinal = Hook_time
	end,
	case Time_level =:= undefined of
		true ->
				Time_levelFinal = 60;
		false ->
			Time_levelFinal = Time_level
	end,
	case Show_dropgoods_name =:= undefined of
		true ->
				Show_dropgoods_nameFinal = 1;
		false ->
		case Show_dropgoods_name of
			true ->
				Show_dropgoods_nameFinal = 1;
			false ->
				Show_dropgoods_nameFinal = 0
		end
	end,
	case Show_equip_compare =:= undefined of
		true ->
				Show_equip_compareFinal = 1;
		false ->
		case Show_equip_compare of
			true ->
				Show_equip_compareFinal = 1;
			false ->
				Show_equip_compareFinal = 0
		end
	end,
	case By_hp_typeid =:= undefined of
		true ->
				By_hp_typeidFinal = 10200003;
		false ->
			By_hp_typeidFinal = By_hp_typeid
	end,
	case By_mp_typeid =:= undefined of
		true ->
				By_mp_typeidFinal = 10200007;
		false ->
			By_mp_typeidFinal = By_mp_typeid
	end,
	case Other_faction =:= undefined of
		true ->
				Other_factionFinal = 0;
		false ->
		case Other_faction of
			true ->
				Other_factionFinal = 1;
			false ->
				Other_factionFinal = 0
		end
	end,
	case Accept_friend_request =:= undefined of
		true ->
				Accept_friend_requestFinal = 1;
		false ->
		case Accept_friend_request of
			true ->
				Accept_friend_requestFinal = 1;
			false ->
				Accept_friend_requestFinal = 0
		end
	end,
	case Pet_auto_use_hp =:= undefined of
		true ->
				Pet_auto_use_hpFinal = 1;
		false ->
		case Pet_auto_use_hp of
			true ->
				Pet_auto_use_hpFinal = 1;
			false ->
				Pet_auto_use_hpFinal = 0
		end
	end,
	case Pet_hp_below =:= undefined of
		true ->
				Pet_hp_belowFinal = 50;
		false ->
			Pet_hp_belowFinal = Pet_hp_below
	end,
	case Pet_by_hp_typeid =:= undefined of
		true ->
				Pet_by_hp_typeidFinal = 12300101;
		false ->
			Pet_by_hp_typeidFinal = Pet_by_hp_typeid
	end,
	case Pet_auto_use_skill =:= undefined of
		true ->
				Pet_auto_use_skillFinal = 1;
		false ->
		case Pet_auto_use_skill of
			true ->
				Pet_auto_use_skillFinal = 1;
			false ->
				Pet_auto_use_skillFinal = 0
		end
	end,
	case Use_hp_item_type =:= undefined of
		true ->
				Use_hp_item_typeFinal = 1;
		false ->
			Use_hp_item_typeFinal = Use_hp_item_type
	end,
	case Use_mp_item_type =:= undefined of
		true ->
				Use_mp_item_typeFinal = 1;
		false ->
			Use_mp_item_typeFinal = Use_mp_item_type
	end,
	case Use_pet_item_type =:= undefined of
		true ->
				Use_pet_item_typeFinal = 1;
		false ->
			Use_pet_item_typeFinal = Use_pet_item_type
	end,
	Pick_equip_color_bin = encode_bools(Pick_equip_colorFinal, <<>>),
	SizePick_equip_colorFinal = erlang:length(Pick_equip_colorFinal),
	BinLen_pick_equip_color = erlang:byte_size(Pick_equip_color_bin),
	Pick_other_color_bin = encode_bools(Pick_other_colorFinal, <<>>),
	SizePick_other_colorFinal = erlang:length(Pick_other_colorFinal),
	BinLen_pick_other_color = erlang:byte_size(Pick_other_color_bin),
	Skill_list_bin = encode_int32s(Skill_listFinal, <<>>),
	SizeSkill_listFinal = erlang:length(Skill_listFinal),
	BinLen_skill_list = erlang:byte_size(Skill_list_bin),

	<<Scence_volFinal:32/signed,Game_volFinal:32/signed,Back_soundFinal:8,Game_soundFinal:8,Image_qualityFinal:32/signed,Private_chatFinal:8,Nation_chatFinal:8,Family_chatFinal:8,World_chatFinal:8,Team_chatFinal:8,Center_broadcastFinal:8,Skill_effectFinal:8,Show_clothFinal:8,By_findFinal:8,Show_titleFinal:8,Show_familyFinal:8,Show_nameFinal:8,Show_factionFinal:8,Auto_fightFinal:8,Auto_use_hpFinal:8,Hp_belowFinal:32/signed,Auto_use_mpFinal:8,Mp_belowFinal:32/signed,Auto_buyFinal:8,Auto_return_homeFinal:8,Auto_pick_equipFinal:8,Auto_pick_stoneFinal:8,Auto_pick_drugFinal:8,Auto_pick_otherFinal:8,SizePick_equip_colorFinal:16, BinLen_pick_equip_color:32, Pick_equip_color_bin/binary,SizePick_other_colorFinal:16, BinLen_pick_other_color:32, Pick_other_color_bin/binary,Auto_use_skillFinal:8,SizeSkill_listFinal:16, BinLen_skill_list:32, Skill_list_bin/binary,Auto_searchFinal:8,Auto_teamFinal:8,Auto_acceptFinal:8,Hook_timeFinal:32/signed,Time_levelFinal:32/signed,Show_dropgoods_nameFinal:8,Show_equip_compareFinal:8,By_hp_typeidFinal:32/signed,By_mp_typeidFinal:32/signed,Other_factionFinal:8,Accept_friend_requestFinal:8,Pet_auto_use_hpFinal:8,Pet_hp_belowFinal:32/signed,Pet_by_hp_typeidFinal:32/signed,Pet_auto_use_skillFinal:8,Use_hp_item_typeFinal:32/signed,Use_mp_item_typeFinal:32/signed,Use_pet_item_typeFinal:32/signed>>;
encode_p_sys_config(_) -> 
	<<>>.

decode_p_sys_config(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Scence_vol:32/signed,Game_vol:32/signed,Back_soundTmp:8,Game_soundTmp:8,Image_quality:32/signed,Private_chatTmp:8,Nation_chatTmp:8,Family_chatTmp:8,World_chatTmp:8,Team_chatTmp:8,Center_broadcastTmp:8,Skill_effectTmp:8,Show_clothTmp:8,By_findTmp:8,Show_titleTmp:8,Show_familyTmp:8,Show_nameTmp:8,Show_factionTmp:8,Auto_fightTmp:8,Auto_use_hpTmp:8,Hp_below:32/signed,Auto_use_mpTmp:8,Mp_below:32/signed,Auto_buyTmp:8,Auto_return_homeTmp:8,Auto_pick_equipTmp:8,Auto_pick_stoneTmp:8,Auto_pick_drugTmp:8,Auto_pick_otherTmp:8,_Sizepick_equip_color:16, BinLenpick_equip_color:32, Bin1/binary>> = Bin0,
	<<SubBinpick_equip_color:BinLenpick_equip_color/binary, Bin2/binary>> = Bin1, 
	Pick_equip_color = lists:reverse(decode_bools(SubBinpick_equip_color, [])),
	<<_Sizepick_other_color:16, BinLenpick_other_color:32, Bin3/binary>> = Bin2,
	<<SubBinpick_other_color:BinLenpick_other_color/binary, Bin4/binary>> = Bin3, 
	Pick_other_color = lists:reverse(decode_bools(SubBinpick_other_color, [])),
<<Auto_use_skillTmp:8,_Sizeskill_list:16, BinLenskill_list:32, Bin5/binary>> = Bin4,
	<<SubBinskill_list:BinLenskill_list/binary, Bin6/binary>> = Bin5, 
	Skill_list = lists:reverse(decode_int32s(SubBinskill_list, [])),
<<Auto_searchTmp:8,Auto_teamTmp:8,Auto_acceptTmp:8,Hook_time:32/signed,Time_level:32/signed,Show_dropgoods_nameTmp:8,Show_equip_compareTmp:8,By_hp_typeid:32/signed,By_mp_typeid:32/signed,Other_factionTmp:8,Accept_friend_requestTmp:8,Pet_auto_use_hpTmp:8,Pet_hp_below:32/signed,Pet_by_hp_typeid:32/signed,Pet_auto_use_skillTmp:8,Use_hp_item_type:32/signed,Use_mp_item_type:32/signed,Use_pet_item_type:32/signed>> = Bin6,
case Back_soundTmp of 
	1 -> 
		Back_sound = true;
	_ ->
		Back_sound = false
end,
case Game_soundTmp of 
	1 -> 
		Game_sound = true;
	_ ->
		Game_sound = false
end,
case Private_chatTmp of 
	1 -> 
		Private_chat = true;
	_ ->
		Private_chat = false
end,
case Nation_chatTmp of 
	1 -> 
		Nation_chat = true;
	_ ->
		Nation_chat = false
end,
case Family_chatTmp of 
	1 -> 
		Family_chat = true;
	_ ->
		Family_chat = false
end,
case World_chatTmp of 
	1 -> 
		World_chat = true;
	_ ->
		World_chat = false
end,
case Team_chatTmp of 
	1 -> 
		Team_chat = true;
	_ ->
		Team_chat = false
end,
case Center_broadcastTmp of 
	1 -> 
		Center_broadcast = true;
	_ ->
		Center_broadcast = false
end,
case Skill_effectTmp of 
	1 -> 
		Skill_effect = true;
	_ ->
		Skill_effect = false
end,
case Show_clothTmp of 
	1 -> 
		Show_cloth = true;
	_ ->
		Show_cloth = false
end,
case By_findTmp of 
	1 -> 
		By_find = true;
	_ ->
		By_find = false
end,
case Show_titleTmp of 
	1 -> 
		Show_title = true;
	_ ->
		Show_title = false
end,
case Show_familyTmp of 
	1 -> 
		Show_family = true;
	_ ->
		Show_family = false
end,
case Show_nameTmp of 
	1 -> 
		Show_name = true;
	_ ->
		Show_name = false
end,
case Show_factionTmp of 
	1 -> 
		Show_faction = true;
	_ ->
		Show_faction = false
end,
case Auto_fightTmp of 
	1 -> 
		Auto_fight = true;
	_ ->
		Auto_fight = false
end,
case Auto_use_hpTmp of 
	1 -> 
		Auto_use_hp = true;
	_ ->
		Auto_use_hp = false
end,
case Auto_use_mpTmp of 
	1 -> 
		Auto_use_mp = true;
	_ ->
		Auto_use_mp = false
end,
case Auto_buyTmp of 
	1 -> 
		Auto_buy = true;
	_ ->
		Auto_buy = false
end,
case Auto_return_homeTmp of 
	1 -> 
		Auto_return_home = true;
	_ ->
		Auto_return_home = false
end,
case Auto_pick_equipTmp of 
	1 -> 
		Auto_pick_equip = true;
	_ ->
		Auto_pick_equip = false
end,
case Auto_pick_stoneTmp of 
	1 -> 
		Auto_pick_stone = true;
	_ ->
		Auto_pick_stone = false
end,
case Auto_pick_drugTmp of 
	1 -> 
		Auto_pick_drug = true;
	_ ->
		Auto_pick_drug = false
end,
case Auto_pick_otherTmp of 
	1 -> 
		Auto_pick_other = true;
	_ ->
		Auto_pick_other = false
end,
case Auto_use_skillTmp of 
	1 -> 
		Auto_use_skill = true;
	_ ->
		Auto_use_skill = false
end,
case Auto_searchTmp of 
	1 -> 
		Auto_search = true;
	_ ->
		Auto_search = false
end,
case Auto_teamTmp of 
	1 -> 
		Auto_team = true;
	_ ->
		Auto_team = false
end,
case Auto_acceptTmp of 
	1 -> 
		Auto_accept = true;
	_ ->
		Auto_accept = false
end,
case Show_dropgoods_nameTmp of 
	1 -> 
		Show_dropgoods_name = true;
	_ ->
		Show_dropgoods_name = false
end,
case Show_equip_compareTmp of 
	1 -> 
		Show_equip_compare = true;
	_ ->
		Show_equip_compare = false
end,
case Other_factionTmp of 
	1 -> 
		Other_faction = true;
	_ ->
		Other_faction = false
end,
case Accept_friend_requestTmp of 
	1 -> 
		Accept_friend_request = true;
	_ ->
		Accept_friend_request = false
end,
case Pet_auto_use_hpTmp of 
	1 -> 
		Pet_auto_use_hp = true;
	_ ->
		Pet_auto_use_hp = false
end,
case Pet_auto_use_skillTmp of 
	1 -> 
		Pet_auto_use_skill = true;
	_ ->
		Pet_auto_use_skill = false
end,

	{p_sys_config, Scence_vol,Game_vol,Back_sound,Game_sound,Image_quality,Private_chat,Nation_chat,Family_chat,World_chat,Team_chat,Center_broadcast,Skill_effect,Show_cloth,By_find,Show_title,Show_family,Show_name,Show_faction,Auto_fight,Auto_use_hp,Hp_below,Auto_use_mp,Mp_below,Auto_buy,Auto_return_home,Auto_pick_equip,Auto_pick_stone,Auto_pick_drug,Auto_pick_other,Pick_equip_color,Pick_other_color,Auto_use_skill,Skill_list,Auto_search,Auto_team,Auto_accept,Hook_time,Time_level,Show_dropgoods_name,Show_equip_compare,By_hp_typeid,By_mp_typeid,Other_faction,Accept_friend_request,Pet_auto_use_hp,Pet_hp_below,Pet_by_hp_typeid,Pet_auto_use_skill,Use_hp_item_type,Use_mp_item_type,Use_pet_item_type};

decode_p_sys_config(_) ->
	undefined.
encode_m_gm_complaint_tos(Record) when is_record(Record, m_gm_complaint_tos) ->
	#m_gm_complaint_tos{type=Type,title=Title,content=Content} = Record,
	case Type =:= undefined of
		true ->
				TypeFinal = undefined,
				exit({required_field_not_assigned, m_gm_complaint_tos, type});
		false ->
			TypeFinal = Type
	end,
	case Title =:= undefined of
		true ->
				TitleFinal = undefined,
				exit({required_field_not_assigned, m_gm_complaint_tos, title});
		false ->
			TitleFinal = Title
	end,
	case Content =:= undefined of
		true ->
				ContentFinal = undefined,
				exit({required_field_not_assigned, m_gm_complaint_tos, content});
		false ->
			ContentFinal = Content
	end,
	Title2 = common_tool:to_binary(TitleFinal),
	TitleLen = erlang:byte_size(Title2),
	Content2 = common_tool:to_binary(ContentFinal),
	ContentLen = erlang:byte_size(Content2),

	<<TypeFinal:32/signed,TitleLen:16, Title2/binary,ContentLen:16, Content2/binary>>;
encode_m_gm_complaint_tos(_) -> 
	<<>>.

decode_m_gm_complaint_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Type:32/signed,TitleLen:16, Bin1/binary>> = Bin0,
	<<Title:TitleLen/binary,ContentLen:16, Bin2/binary>> = Bin1,
	<<Content:ContentLen/binary>> = Bin2,

	{m_gm_complaint_tos, Type,common_tool:to_list(Title),common_tool:to_list(Content)};

decode_m_gm_complaint_tos(_) ->
	undefined.
encode_m_gm_complaint_toc(Record) when is_record(Record, m_gm_complaint_toc) ->
	#m_gm_complaint_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_gm_complaint_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_gm_complaint_toc(_) -> 
	<<>>.

decode_m_gm_complaint_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_gm_complaint_toc, Succ,common_tool:to_list(Reason)};

decode_m_gm_complaint_toc(_) ->
	undefined.
encode_m_gm_score_tos(Record) when is_record(Record, m_gm_score_tos) ->
	#m_gm_score_tos{id=Id,fraction=Fraction} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, m_gm_score_tos, id});
		false ->
			IdFinal = Id
	end,
	case Fraction =:= undefined of
		true ->
				FractionFinal = undefined,
				exit({required_field_not_assigned, m_gm_score_tos, fraction});
		false ->
			FractionFinal = Fraction
	end,

	<<IdFinal:32/signed,FractionFinal:32/signed>>;
encode_m_gm_score_tos(_) -> 
	<<>>.

decode_m_gm_score_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed,Fraction:32/signed>> = Bin0,

	{m_gm_score_tos, Id,Fraction};

decode_m_gm_score_tos(_) ->
	undefined.
encode_m_gm_score_toc(Record) when is_record(Record, m_gm_score_toc) ->
	#m_gm_score_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_gm_score_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_gm_score_toc(_) -> 
	<<>>.

decode_m_gm_score_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_gm_score_toc, Succ,common_tool:to_list(Reason)};

decode_m_gm_score_toc(_) ->
	undefined.
encode_m_ranking_get_rank_tos(Record) when is_record(Record, m_ranking_get_rank_tos) ->
	#m_ranking_get_rank_tos{rank_id=Rank_id} = Record,
	case Rank_id =:= undefined of
		true ->
				Rank_idFinal = undefined,
				exit({required_field_not_assigned, m_ranking_get_rank_tos, rank_id});
		false ->
			Rank_idFinal = Rank_id
	end,

	<<Rank_idFinal:32/signed>>;
encode_m_ranking_get_rank_tos(_) -> 
	<<>>.

decode_m_ranking_get_rank_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Rank_id:32/signed>> = Bin0,

	{m_ranking_get_rank_tos, Rank_id};

decode_m_ranking_get_rank_tos(_) ->
	undefined.
encode_m_ranking_get_rank_toc(Record) when is_record(Record, m_ranking_get_rank_toc) ->
	#m_ranking_get_rank_toc{rank_id=Rank_id,rows=Rows} = Record,
	case Rank_id =:= undefined of
		true ->
				Rank_idFinal = undefined,
				exit({required_field_not_assigned, m_ranking_get_rank_toc, rank_id});
		false ->
			Rank_idFinal = Rank_id
	end,
	case Rows =:= undefined of
		true ->
			RowsFinal = [];
		false ->
			RowsFinal = Rows
	end,
	Rows_bin = encode_p_rank_rows(RowsFinal, <<>>),
	SizeRowsFinal = erlang:length(RowsFinal),
	BinLen_rows = erlang:byte_size(Rows_bin),

	<<Rank_idFinal:32/signed,SizeRowsFinal:16, BinLen_rows:32, Rows_bin/binary>>;
encode_m_ranking_get_rank_toc(_) -> 
	<<>>.

decode_m_ranking_get_rank_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Rank_id:32/signed,_Sizerows:16, _BinLenrows:32, SubBinrows/binary>> = Bin0,
	Rows = lists:reverse(decode_p_rank_rows(SubBinrows, [])),

	{m_ranking_get_rank_toc, Rank_id,Rows};

decode_m_ranking_get_rank_toc(_) ->
	undefined.
encode_m_ranking_config_toc(Record) when is_record(Record, m_ranking_config_toc) ->
	#m_ranking_config_toc{rankings=Rankings} = Record,
	case Rankings =:= undefined of
		true ->
			RankingsFinal = [];
		false ->
			RankingsFinal = Rankings
	end,
	Rankings_bin = encode_p_rankings(RankingsFinal, <<>>),
	SizeRankingsFinal = erlang:length(RankingsFinal),
	BinLen_rankings = erlang:byte_size(Rankings_bin),

	<<SizeRankingsFinal:16, BinLen_rankings:32, Rankings_bin/binary>>;
encode_m_ranking_config_toc(_) -> 
	<<>>.

decode_m_ranking_config_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizerankings:16, _BinLenrankings:32, SubBinrankings/binary>> = Bin0,
	Rankings = lists:reverse(decode_p_rankings(SubBinrankings, [])),

	{m_ranking_config_toc, Rankings};

decode_m_ranking_config_toc(_) ->
	undefined.
encode_m_ranking_get_rankinfo_tos(Record) when is_record(Record, m_ranking_get_rankinfo_tos) ->
	#m_ranking_get_rankinfo_tos{rank_id=Rank_id} = Record,
	case Rank_id =:= undefined of
		true ->
				Rank_idFinal = undefined,
				exit({required_field_not_assigned, m_ranking_get_rankinfo_tos, rank_id});
		false ->
			Rank_idFinal = Rank_id
	end,

	<<Rank_idFinal:32/signed>>;
encode_m_ranking_get_rankinfo_tos(_) -> 
	<<>>.

decode_m_ranking_get_rankinfo_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Rank_id:32/signed>> = Bin0,

	{m_ranking_get_rankinfo_tos, Rank_id};

decode_m_ranking_get_rankinfo_tos(_) ->
	undefined.
encode_m_ranking_role_level_rank_toc(Record) when is_record(Record, m_ranking_role_level_rank_toc) ->
	#m_ranking_role_level_rank_toc{role_level_ranks=Role_level_ranks} = Record,
	case Role_level_ranks =:= undefined of
		true ->
			Role_level_ranksFinal = [];
		false ->
			Role_level_ranksFinal = Role_level_ranks
	end,
	Role_level_ranks_bin = encode_p_role_level_ranks(Role_level_ranksFinal, <<>>),
	SizeRole_level_ranksFinal = erlang:length(Role_level_ranksFinal),
	BinLen_role_level_ranks = erlang:byte_size(Role_level_ranks_bin),

	<<SizeRole_level_ranksFinal:16, BinLen_role_level_ranks:32, Role_level_ranks_bin/binary>>;
encode_m_ranking_role_level_rank_toc(_) -> 
	<<>>.

decode_m_ranking_role_level_rank_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizerole_level_ranks:16, _BinLenrole_level_ranks:32, SubBinrole_level_ranks/binary>> = Bin0,
	Role_level_ranks = lists:reverse(decode_p_role_level_ranks(SubBinrole_level_ranks, [])),

	{m_ranking_role_level_rank_toc, Role_level_ranks};

decode_m_ranking_role_level_rank_toc(_) ->
	undefined.
encode_m_ranking_equip_join_rank_tos(Record) when is_record(Record, m_ranking_equip_join_rank_tos) ->
	#m_ranking_equip_join_rank_tos{rank_id=Rank_id,goods_id=Goods_id} = Record,
	case Rank_id =:= undefined of
		true ->
				Rank_idFinal = undefined,
				exit({required_field_not_assigned, m_ranking_equip_join_rank_tos, rank_id});
		false ->
			Rank_idFinal = Rank_id
	end,
	case Goods_id =:= undefined of
		true ->
				Goods_idFinal = undefined,
				exit({required_field_not_assigned, m_ranking_equip_join_rank_tos, goods_id});
		false ->
			Goods_idFinal = Goods_id
	end,

	<<Rank_idFinal:32/signed,Goods_idFinal:32/signed>>;
encode_m_ranking_equip_join_rank_tos(_) -> 
	<<>>.

decode_m_ranking_equip_join_rank_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Rank_id:32/signed,Goods_id:32/signed>> = Bin0,

	{m_ranking_equip_join_rank_tos, Rank_id,Goods_id};

decode_m_ranking_equip_join_rank_tos(_) ->
	undefined.
encode_m_ranking_equip_join_rank_toc(Record) when is_record(Record, m_ranking_equip_join_rank_toc) ->
	#m_ranking_equip_join_rank_toc{succ=Succ,rank_id=Rank_id,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 0;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Rank_id =:= undefined of
		true ->
				Rank_idFinal = undefined,
				exit({required_field_not_assigned, m_ranking_equip_join_rank_toc, rank_id});
		false ->
			Rank_idFinal = Rank_id
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,Rank_idFinal:32/signed,ReasonLen:16, Reason2/binary>>;
encode_m_ranking_equip_join_rank_toc(_) -> 
	<<>>.

decode_m_ranking_equip_join_rank_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,Rank_id:32/signed,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_ranking_equip_join_rank_toc, Succ,Rank_id,common_tool:to_list(Reason)};

decode_m_ranking_equip_join_rank_toc(_) ->
	undefined.
encode_m_ranking_role_pkpoint_rank_toc(Record) when is_record(Record, m_ranking_role_pkpoint_rank_toc) ->
	#m_ranking_role_pkpoint_rank_toc{role_pkpoint_ranks=Role_pkpoint_ranks} = Record,
	case Role_pkpoint_ranks =:= undefined of
		true ->
			Role_pkpoint_ranksFinal = [];
		false ->
			Role_pkpoint_ranksFinal = Role_pkpoint_ranks
	end,
	Role_pkpoint_ranks_bin = encode_p_role_pkpoint_ranks(Role_pkpoint_ranksFinal, <<>>),
	SizeRole_pkpoint_ranksFinal = erlang:length(Role_pkpoint_ranksFinal),
	BinLen_role_pkpoint_ranks = erlang:byte_size(Role_pkpoint_ranks_bin),

	<<SizeRole_pkpoint_ranksFinal:16, BinLen_role_pkpoint_ranks:32, Role_pkpoint_ranks_bin/binary>>;
encode_m_ranking_role_pkpoint_rank_toc(_) -> 
	<<>>.

decode_m_ranking_role_pkpoint_rank_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizerole_pkpoint_ranks:16, _BinLenrole_pkpoint_ranks:32, SubBinrole_pkpoint_ranks/binary>> = Bin0,
	Role_pkpoint_ranks = lists:reverse(decode_p_role_pkpoint_ranks(SubBinrole_pkpoint_ranks, [])),

	{m_ranking_role_pkpoint_rank_toc, Role_pkpoint_ranks};

decode_m_ranking_role_pkpoint_rank_toc(_) ->
	undefined.
encode_m_ranking_role_world_pkpoint_rank_toc(Record) when is_record(Record, m_ranking_role_world_pkpoint_rank_toc) ->
	#m_ranking_role_world_pkpoint_rank_toc{role_world_pkpoint_ranks=Role_world_pkpoint_ranks} = Record,
	case Role_world_pkpoint_ranks =:= undefined of
		true ->
			Role_world_pkpoint_ranksFinal = [];
		false ->
			Role_world_pkpoint_ranksFinal = Role_world_pkpoint_ranks
	end,
	Role_world_pkpoint_ranks_bin = encode_p_role_pkpoint_ranks(Role_world_pkpoint_ranksFinal, <<>>),
	SizeRole_world_pkpoint_ranksFinal = erlang:length(Role_world_pkpoint_ranksFinal),
	BinLen_role_world_pkpoint_ranks = erlang:byte_size(Role_world_pkpoint_ranks_bin),

	<<SizeRole_world_pkpoint_ranksFinal:16, BinLen_role_world_pkpoint_ranks:32, Role_world_pkpoint_ranks_bin/binary>>;
encode_m_ranking_role_world_pkpoint_rank_toc(_) -> 
	<<>>.

decode_m_ranking_role_world_pkpoint_rank_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizerole_world_pkpoint_ranks:16, _BinLenrole_world_pkpoint_ranks:32, SubBinrole_world_pkpoint_ranks/binary>> = Bin0,
	Role_world_pkpoint_ranks = lists:reverse(decode_p_role_pkpoint_ranks(SubBinrole_world_pkpoint_ranks, [])),

	{m_ranking_role_world_pkpoint_rank_toc, Role_world_pkpoint_ranks};

decode_m_ranking_role_world_pkpoint_rank_toc(_) ->
	undefined.
encode_m_ranking_family_active_rank_toc(Record) when is_record(Record, m_ranking_family_active_rank_toc) ->
	#m_ranking_family_active_rank_toc{family_active_ranks=Family_active_ranks} = Record,
	case Family_active_ranks =:= undefined of
		true ->
			Family_active_ranksFinal = [];
		false ->
			Family_active_ranksFinal = Family_active_ranks
	end,
	Family_active_ranks_bin = encode_p_family_active_ranks(Family_active_ranksFinal, <<>>),
	SizeFamily_active_ranksFinal = erlang:length(Family_active_ranksFinal),
	BinLen_family_active_ranks = erlang:byte_size(Family_active_ranks_bin),

	<<SizeFamily_active_ranksFinal:16, BinLen_family_active_ranks:32, Family_active_ranks_bin/binary>>;
encode_m_ranking_family_active_rank_toc(_) -> 
	<<>>.

decode_m_ranking_family_active_rank_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizefamily_active_ranks:16, _BinLenfamily_active_ranks:32, SubBinfamily_active_ranks/binary>> = Bin0,
	Family_active_ranks = lists:reverse(decode_p_family_active_ranks(SubBinfamily_active_ranks, [])),

	{m_ranking_family_active_rank_toc, Family_active_ranks};

decode_m_ranking_family_active_rank_toc(_) ->
	undefined.
encode_m_ranking_family_gongxun_rank_toc(Record) when is_record(Record, m_ranking_family_gongxun_rank_toc) ->
	#m_ranking_family_gongxun_rank_toc{family_gongxun_ranks=Family_gongxun_ranks} = Record,
	case Family_gongxun_ranks =:= undefined of
		true ->
			Family_gongxun_ranksFinal = [];
		false ->
			Family_gongxun_ranksFinal = Family_gongxun_ranks
	end,
	Family_gongxun_ranks_bin = encode_p_family_gongxun_ranks(Family_gongxun_ranksFinal, <<>>),
	SizeFamily_gongxun_ranksFinal = erlang:length(Family_gongxun_ranksFinal),
	BinLen_family_gongxun_ranks = erlang:byte_size(Family_gongxun_ranks_bin),

	<<SizeFamily_gongxun_ranksFinal:16, BinLen_family_gongxun_ranks:32, Family_gongxun_ranks_bin/binary>>;
encode_m_ranking_family_gongxun_rank_toc(_) -> 
	<<>>.

decode_m_ranking_family_gongxun_rank_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizefamily_gongxun_ranks:16, _BinLenfamily_gongxun_ranks:32, SubBinfamily_gongxun_ranks/binary>> = Bin0,
	Family_gongxun_ranks = lists:reverse(decode_p_family_gongxun_ranks(SubBinfamily_gongxun_ranks, [])),

	{m_ranking_family_gongxun_rank_toc, Family_gongxun_ranks};

decode_m_ranking_family_gongxun_rank_toc(_) ->
	undefined.
encode_m_ranking_equip_refining_rank_toc(Record) when is_record(Record, m_ranking_equip_refining_rank_toc) ->
	#m_ranking_equip_refining_rank_toc{equip_refining_ranks=Equip_refining_ranks} = Record,
	case Equip_refining_ranks =:= undefined of
		true ->
			Equip_refining_ranksFinal = [];
		false ->
			Equip_refining_ranksFinal = Equip_refining_ranks
	end,
	Equip_refining_ranks_bin = encode_p_equip_ranks(Equip_refining_ranksFinal, <<>>),
	SizeEquip_refining_ranksFinal = erlang:length(Equip_refining_ranksFinal),
	BinLen_equip_refining_ranks = erlang:byte_size(Equip_refining_ranks_bin),

	<<SizeEquip_refining_ranksFinal:16, BinLen_equip_refining_ranks:32, Equip_refining_ranks_bin/binary>>;
encode_m_ranking_equip_refining_rank_toc(_) -> 
	<<>>.

decode_m_ranking_equip_refining_rank_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizeequip_refining_ranks:16, _BinLenequip_refining_ranks:32, SubBinequip_refining_ranks/binary>> = Bin0,
	Equip_refining_ranks = lists:reverse(decode_p_equip_ranks(SubBinequip_refining_ranks, [])),

	{m_ranking_equip_refining_rank_toc, Equip_refining_ranks};

decode_m_ranking_equip_refining_rank_toc(_) ->
	undefined.
encode_m_ranking_equip_reinforce_rank_toc(Record) when is_record(Record, m_ranking_equip_reinforce_rank_toc) ->
	#m_ranking_equip_reinforce_rank_toc{equip_reinforce_ranks=Equip_reinforce_ranks} = Record,
	case Equip_reinforce_ranks =:= undefined of
		true ->
			Equip_reinforce_ranksFinal = [];
		false ->
			Equip_reinforce_ranksFinal = Equip_reinforce_ranks
	end,
	Equip_reinforce_ranks_bin = encode_p_equip_ranks(Equip_reinforce_ranksFinal, <<>>),
	SizeEquip_reinforce_ranksFinal = erlang:length(Equip_reinforce_ranksFinal),
	BinLen_equip_reinforce_ranks = erlang:byte_size(Equip_reinforce_ranks_bin),

	<<SizeEquip_reinforce_ranksFinal:16, BinLen_equip_reinforce_ranks:32, Equip_reinforce_ranks_bin/binary>>;
encode_m_ranking_equip_reinforce_rank_toc(_) -> 
	<<>>.

decode_m_ranking_equip_reinforce_rank_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizeequip_reinforce_ranks:16, _BinLenequip_reinforce_ranks:32, SubBinequip_reinforce_ranks/binary>> = Bin0,
	Equip_reinforce_ranks = lists:reverse(decode_p_equip_ranks(SubBinequip_reinforce_ranks, [])),

	{m_ranking_equip_reinforce_rank_toc, Equip_reinforce_ranks};

decode_m_ranking_equip_reinforce_rank_toc(_) ->
	undefined.
encode_m_ranking_equip_stone_rank_toc(Record) when is_record(Record, m_ranking_equip_stone_rank_toc) ->
	#m_ranking_equip_stone_rank_toc{equip_stone_ranks=Equip_stone_ranks} = Record,
	case Equip_stone_ranks =:= undefined of
		true ->
			Equip_stone_ranksFinal = [];
		false ->
			Equip_stone_ranksFinal = Equip_stone_ranks
	end,
	Equip_stone_ranks_bin = encode_p_equip_ranks(Equip_stone_ranksFinal, <<>>),
	SizeEquip_stone_ranksFinal = erlang:length(Equip_stone_ranksFinal),
	BinLen_equip_stone_ranks = erlang:byte_size(Equip_stone_ranks_bin),

	<<SizeEquip_stone_ranksFinal:16, BinLen_equip_stone_ranks:32, Equip_stone_ranks_bin/binary>>;
encode_m_ranking_equip_stone_rank_toc(_) -> 
	<<>>.

decode_m_ranking_equip_stone_rank_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizeequip_stone_ranks:16, _BinLenequip_stone_ranks:32, SubBinequip_stone_ranks/binary>> = Bin0,
	Equip_stone_ranks = lists:reverse(decode_p_equip_ranks(SubBinequip_stone_ranks, [])),

	{m_ranking_equip_stone_rank_toc, Equip_stone_ranks};

decode_m_ranking_equip_stone_rank_toc(_) ->
	undefined.
encode_m_ranking_role_gongxun_rank_toc(Record) when is_record(Record, m_ranking_role_gongxun_rank_toc) ->
	#m_ranking_role_gongxun_rank_toc{role_gongxun_ranks=Role_gongxun_ranks} = Record,
	case Role_gongxun_ranks =:= undefined of
		true ->
			Role_gongxun_ranksFinal = [];
		false ->
			Role_gongxun_ranksFinal = Role_gongxun_ranks
	end,
	Role_gongxun_ranks_bin = encode_p_role_gongxun_ranks(Role_gongxun_ranksFinal, <<>>),
	SizeRole_gongxun_ranksFinal = erlang:length(Role_gongxun_ranksFinal),
	BinLen_role_gongxun_ranks = erlang:byte_size(Role_gongxun_ranks_bin),

	<<SizeRole_gongxun_ranksFinal:16, BinLen_role_gongxun_ranks:32, Role_gongxun_ranks_bin/binary>>;
encode_m_ranking_role_gongxun_rank_toc(_) -> 
	<<>>.

decode_m_ranking_role_gongxun_rank_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizerole_gongxun_ranks:16, _BinLenrole_gongxun_ranks:32, SubBinrole_gongxun_ranks/binary>> = Bin0,
	Role_gongxun_ranks = lists:reverse(decode_p_role_gongxun_ranks(SubBinrole_gongxun_ranks, [])),

	{m_ranking_role_gongxun_rank_toc, Role_gongxun_ranks};

decode_m_ranking_role_gongxun_rank_toc(_) ->
	undefined.
encode_m_ranking_role_today_gongxun_rank_toc(Record) when is_record(Record, m_ranking_role_today_gongxun_rank_toc) ->
	#m_ranking_role_today_gongxun_rank_toc{role_gongxun_ranks=Role_gongxun_ranks} = Record,
	case Role_gongxun_ranks =:= undefined of
		true ->
			Role_gongxun_ranksFinal = [];
		false ->
			Role_gongxun_ranksFinal = Role_gongxun_ranks
	end,
	Role_gongxun_ranks_bin = encode_p_role_gongxun_ranks(Role_gongxun_ranksFinal, <<>>),
	SizeRole_gongxun_ranksFinal = erlang:length(Role_gongxun_ranksFinal),
	BinLen_role_gongxun_ranks = erlang:byte_size(Role_gongxun_ranks_bin),

	<<SizeRole_gongxun_ranksFinal:16, BinLen_role_gongxun_ranks:32, Role_gongxun_ranks_bin/binary>>;
encode_m_ranking_role_today_gongxun_rank_toc(_) -> 
	<<>>.

decode_m_ranking_role_today_gongxun_rank_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizerole_gongxun_ranks:16, _BinLenrole_gongxun_ranks:32, SubBinrole_gongxun_ranks/binary>> = Bin0,
	Role_gongxun_ranks = lists:reverse(decode_p_role_gongxun_ranks(SubBinrole_gongxun_ranks, [])),

	{m_ranking_role_today_gongxun_rank_toc, Role_gongxun_ranks};

decode_m_ranking_role_today_gongxun_rank_toc(_) ->
	undefined.
encode_m_ranking_role_yesterday_gongxun_rank_toc(Record) when is_record(Record, m_ranking_role_yesterday_gongxun_rank_toc) ->
	#m_ranking_role_yesterday_gongxun_rank_toc{role_gongxun_ranks=Role_gongxun_ranks} = Record,
	case Role_gongxun_ranks =:= undefined of
		true ->
			Role_gongxun_ranksFinal = [];
		false ->
			Role_gongxun_ranksFinal = Role_gongxun_ranks
	end,
	Role_gongxun_ranks_bin = encode_p_role_gongxun_ranks(Role_gongxun_ranksFinal, <<>>),
	SizeRole_gongxun_ranksFinal = erlang:length(Role_gongxun_ranksFinal),
	BinLen_role_gongxun_ranks = erlang:byte_size(Role_gongxun_ranks_bin),

	<<SizeRole_gongxun_ranksFinal:16, BinLen_role_gongxun_ranks:32, Role_gongxun_ranks_bin/binary>>;
encode_m_ranking_role_yesterday_gongxun_rank_toc(_) -> 
	<<>>.

decode_m_ranking_role_yesterday_gongxun_rank_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizerole_gongxun_ranks:16, _BinLenrole_gongxun_ranks:32, SubBinrole_gongxun_ranks/binary>> = Bin0,
	Role_gongxun_ranks = lists:reverse(decode_p_role_gongxun_ranks(SubBinrole_gongxun_ranks, [])),

	{m_ranking_role_yesterday_gongxun_rank_toc, Role_gongxun_ranks};

decode_m_ranking_role_yesterday_gongxun_rank_toc(_) ->
	undefined.
encode_m_ranking_role_give_flowers_rank_toc(Record) when is_record(Record, m_ranking_role_give_flowers_rank_toc) ->
	#m_ranking_role_give_flowers_rank_toc{role_give_flowers=Role_give_flowers} = Record,
	case Role_give_flowers =:= undefined of
		true ->
			Role_give_flowersFinal = [];
		false ->
			Role_give_flowersFinal = Role_give_flowers
	end,
	Role_give_flowers_bin = encode_p_role_give_flowers_ranks(Role_give_flowersFinal, <<>>),
	SizeRole_give_flowersFinal = erlang:length(Role_give_flowersFinal),
	BinLen_role_give_flowers = erlang:byte_size(Role_give_flowers_bin),

	<<SizeRole_give_flowersFinal:16, BinLen_role_give_flowers:32, Role_give_flowers_bin/binary>>;
encode_m_ranking_role_give_flowers_rank_toc(_) -> 
	<<>>.

decode_m_ranking_role_give_flowers_rank_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizerole_give_flowers:16, _BinLenrole_give_flowers:32, SubBinrole_give_flowers/binary>> = Bin0,
	Role_give_flowers = lists:reverse(decode_p_role_give_flowers_ranks(SubBinrole_give_flowers, [])),

	{m_ranking_role_give_flowers_rank_toc, Role_give_flowers};

decode_m_ranking_role_give_flowers_rank_toc(_) ->
	undefined.
encode_m_ranking_role_give_flowers_today_rank_toc(Record) when is_record(Record, m_ranking_role_give_flowers_today_rank_toc) ->
	#m_ranking_role_give_flowers_today_rank_toc{role_give_flowers=Role_give_flowers} = Record,
	case Role_give_flowers =:= undefined of
		true ->
			Role_give_flowersFinal = [];
		false ->
			Role_give_flowersFinal = Role_give_flowers
	end,
	Role_give_flowers_bin = encode_p_role_give_flowers_today_ranks(Role_give_flowersFinal, <<>>),
	SizeRole_give_flowersFinal = erlang:length(Role_give_flowersFinal),
	BinLen_role_give_flowers = erlang:byte_size(Role_give_flowers_bin),

	<<SizeRole_give_flowersFinal:16, BinLen_role_give_flowers:32, Role_give_flowers_bin/binary>>;
encode_m_ranking_role_give_flowers_today_rank_toc(_) -> 
	<<>>.

decode_m_ranking_role_give_flowers_today_rank_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizerole_give_flowers:16, _BinLenrole_give_flowers:32, SubBinrole_give_flowers/binary>> = Bin0,
	Role_give_flowers = lists:reverse(decode_p_role_give_flowers_today_ranks(SubBinrole_give_flowers, [])),

	{m_ranking_role_give_flowers_today_rank_toc, Role_give_flowers};

decode_m_ranking_role_give_flowers_today_rank_toc(_) ->
	undefined.
encode_m_ranking_role_give_flowers_yesterday_rank_toc(Record) when is_record(Record, m_ranking_role_give_flowers_yesterday_rank_toc) ->
	#m_ranking_role_give_flowers_yesterday_rank_toc{role_give_flowers=Role_give_flowers} = Record,
	case Role_give_flowers =:= undefined of
		true ->
			Role_give_flowersFinal = [];
		false ->
			Role_give_flowersFinal = Role_give_flowers
	end,
	Role_give_flowers_bin = encode_p_role_give_flowers_yesterday_ranks(Role_give_flowersFinal, <<>>),
	SizeRole_give_flowersFinal = erlang:length(Role_give_flowersFinal),
	BinLen_role_give_flowers = erlang:byte_size(Role_give_flowers_bin),

	<<SizeRole_give_flowersFinal:16, BinLen_role_give_flowers:32, Role_give_flowers_bin/binary>>;
encode_m_ranking_role_give_flowers_yesterday_rank_toc(_) -> 
	<<>>.

decode_m_ranking_role_give_flowers_yesterday_rank_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizerole_give_flowers:16, _BinLenrole_give_flowers:32, SubBinrole_give_flowers/binary>> = Bin0,
	Role_give_flowers = lists:reverse(decode_p_role_give_flowers_yesterday_ranks(SubBinrole_give_flowers, [])),

	{m_ranking_role_give_flowers_yesterday_rank_toc, Role_give_flowers};

decode_m_ranking_role_give_flowers_yesterday_rank_toc(_) ->
	undefined.
encode_m_ranking_role_give_flowers_last_week_rank_toc(Record) when is_record(Record, m_ranking_role_give_flowers_last_week_rank_toc) ->
	#m_ranking_role_give_flowers_last_week_rank_toc{role_give_flowers=Role_give_flowers} = Record,
	case Role_give_flowers =:= undefined of
		true ->
			Role_give_flowersFinal = [];
		false ->
			Role_give_flowersFinal = Role_give_flowers
	end,
	Role_give_flowers_bin = encode_p_role_give_flowers_last_week_ranks(Role_give_flowersFinal, <<>>),
	SizeRole_give_flowersFinal = erlang:length(Role_give_flowersFinal),
	BinLen_role_give_flowers = erlang:byte_size(Role_give_flowers_bin),

	<<SizeRole_give_flowersFinal:16, BinLen_role_give_flowers:32, Role_give_flowers_bin/binary>>;
encode_m_ranking_role_give_flowers_last_week_rank_toc(_) -> 
	<<>>.

decode_m_ranking_role_give_flowers_last_week_rank_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizerole_give_flowers:16, _BinLenrole_give_flowers:32, SubBinrole_give_flowers/binary>> = Bin0,
	Role_give_flowers = lists:reverse(decode_p_role_give_flowers_last_week_ranks(SubBinrole_give_flowers, [])),

	{m_ranking_role_give_flowers_last_week_rank_toc, Role_give_flowers};

decode_m_ranking_role_give_flowers_last_week_rank_toc(_) ->
	undefined.
encode_m_ranking_role_give_flowers_this_week_rank_toc(Record) when is_record(Record, m_ranking_role_give_flowers_this_week_rank_toc) ->
	#m_ranking_role_give_flowers_this_week_rank_toc{role_give_flowers=Role_give_flowers} = Record,
	case Role_give_flowers =:= undefined of
		true ->
			Role_give_flowersFinal = [];
		false ->
			Role_give_flowersFinal = Role_give_flowers
	end,
	Role_give_flowers_bin = encode_p_role_give_flowers_this_week_ranks(Role_give_flowersFinal, <<>>),
	SizeRole_give_flowersFinal = erlang:length(Role_give_flowersFinal),
	BinLen_role_give_flowers = erlang:byte_size(Role_give_flowers_bin),

	<<SizeRole_give_flowersFinal:16, BinLen_role_give_flowers:32, Role_give_flowers_bin/binary>>;
encode_m_ranking_role_give_flowers_this_week_rank_toc(_) -> 
	<<>>.

decode_m_ranking_role_give_flowers_this_week_rank_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizerole_give_flowers:16, _BinLenrole_give_flowers:32, SubBinrole_give_flowers/binary>> = Bin0,
	Role_give_flowers = lists:reverse(decode_p_role_give_flowers_this_week_ranks(SubBinrole_give_flowers, [])),

	{m_ranking_role_give_flowers_this_week_rank_toc, Role_give_flowers};

decode_m_ranking_role_give_flowers_this_week_rank_toc(_) ->
	undefined.
encode_m_ranking_role_rece_flowers_rank_toc(Record) when is_record(Record, m_ranking_role_rece_flowers_rank_toc) ->
	#m_ranking_role_rece_flowers_rank_toc{role_rece_flowers=Role_rece_flowers} = Record,
	case Role_rece_flowers =:= undefined of
		true ->
			Role_rece_flowersFinal = [];
		false ->
			Role_rece_flowersFinal = Role_rece_flowers
	end,
	Role_rece_flowers_bin = encode_p_role_rece_flowers_ranks(Role_rece_flowersFinal, <<>>),
	SizeRole_rece_flowersFinal = erlang:length(Role_rece_flowersFinal),
	BinLen_role_rece_flowers = erlang:byte_size(Role_rece_flowers_bin),

	<<SizeRole_rece_flowersFinal:16, BinLen_role_rece_flowers:32, Role_rece_flowers_bin/binary>>;
encode_m_ranking_role_rece_flowers_rank_toc(_) -> 
	<<>>.

decode_m_ranking_role_rece_flowers_rank_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizerole_rece_flowers:16, _BinLenrole_rece_flowers:32, SubBinrole_rece_flowers/binary>> = Bin0,
	Role_rece_flowers = lists:reverse(decode_p_role_rece_flowers_ranks(SubBinrole_rece_flowers, [])),

	{m_ranking_role_rece_flowers_rank_toc, Role_rece_flowers};

decode_m_ranking_role_rece_flowers_rank_toc(_) ->
	undefined.
encode_m_ranking_role_rece_flowers_today_rank_toc(Record) when is_record(Record, m_ranking_role_rece_flowers_today_rank_toc) ->
	#m_ranking_role_rece_flowers_today_rank_toc{role_rece_flowers=Role_rece_flowers} = Record,
	case Role_rece_flowers =:= undefined of
		true ->
			Role_rece_flowersFinal = [];
		false ->
			Role_rece_flowersFinal = Role_rece_flowers
	end,
	Role_rece_flowers_bin = encode_p_role_rece_flowers_today_ranks(Role_rece_flowersFinal, <<>>),
	SizeRole_rece_flowersFinal = erlang:length(Role_rece_flowersFinal),
	BinLen_role_rece_flowers = erlang:byte_size(Role_rece_flowers_bin),

	<<SizeRole_rece_flowersFinal:16, BinLen_role_rece_flowers:32, Role_rece_flowers_bin/binary>>;
encode_m_ranking_role_rece_flowers_today_rank_toc(_) -> 
	<<>>.

decode_m_ranking_role_rece_flowers_today_rank_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizerole_rece_flowers:16, _BinLenrole_rece_flowers:32, SubBinrole_rece_flowers/binary>> = Bin0,
	Role_rece_flowers = lists:reverse(decode_p_role_rece_flowers_today_ranks(SubBinrole_rece_flowers, [])),

	{m_ranking_role_rece_flowers_today_rank_toc, Role_rece_flowers};

decode_m_ranking_role_rece_flowers_today_rank_toc(_) ->
	undefined.
encode_m_ranking_role_rece_flowers_yesterday_rank_toc(Record) when is_record(Record, m_ranking_role_rece_flowers_yesterday_rank_toc) ->
	#m_ranking_role_rece_flowers_yesterday_rank_toc{role_rece_flowers=Role_rece_flowers} = Record,
	case Role_rece_flowers =:= undefined of
		true ->
			Role_rece_flowersFinal = [];
		false ->
			Role_rece_flowersFinal = Role_rece_flowers
	end,
	Role_rece_flowers_bin = encode_p_role_rece_flowers_yesterday_ranks(Role_rece_flowersFinal, <<>>),
	SizeRole_rece_flowersFinal = erlang:length(Role_rece_flowersFinal),
	BinLen_role_rece_flowers = erlang:byte_size(Role_rece_flowers_bin),

	<<SizeRole_rece_flowersFinal:16, BinLen_role_rece_flowers:32, Role_rece_flowers_bin/binary>>;
encode_m_ranking_role_rece_flowers_yesterday_rank_toc(_) -> 
	<<>>.

decode_m_ranking_role_rece_flowers_yesterday_rank_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizerole_rece_flowers:16, _BinLenrole_rece_flowers:32, SubBinrole_rece_flowers/binary>> = Bin0,
	Role_rece_flowers = lists:reverse(decode_p_role_rece_flowers_yesterday_ranks(SubBinrole_rece_flowers, [])),

	{m_ranking_role_rece_flowers_yesterday_rank_toc, Role_rece_flowers};

decode_m_ranking_role_rece_flowers_yesterday_rank_toc(_) ->
	undefined.
encode_m_ranking_role_rece_flowers_last_week_rank_toc(Record) when is_record(Record, m_ranking_role_rece_flowers_last_week_rank_toc) ->
	#m_ranking_role_rece_flowers_last_week_rank_toc{role_rece_flowers=Role_rece_flowers} = Record,
	case Role_rece_flowers =:= undefined of
		true ->
			Role_rece_flowersFinal = [];
		false ->
			Role_rece_flowersFinal = Role_rece_flowers
	end,
	Role_rece_flowers_bin = encode_p_role_rece_flowers_last_week_ranks(Role_rece_flowersFinal, <<>>),
	SizeRole_rece_flowersFinal = erlang:length(Role_rece_flowersFinal),
	BinLen_role_rece_flowers = erlang:byte_size(Role_rece_flowers_bin),

	<<SizeRole_rece_flowersFinal:16, BinLen_role_rece_flowers:32, Role_rece_flowers_bin/binary>>;
encode_m_ranking_role_rece_flowers_last_week_rank_toc(_) -> 
	<<>>.

decode_m_ranking_role_rece_flowers_last_week_rank_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizerole_rece_flowers:16, _BinLenrole_rece_flowers:32, SubBinrole_rece_flowers/binary>> = Bin0,
	Role_rece_flowers = lists:reverse(decode_p_role_rece_flowers_last_week_ranks(SubBinrole_rece_flowers, [])),

	{m_ranking_role_rece_flowers_last_week_rank_toc, Role_rece_flowers};

decode_m_ranking_role_rece_flowers_last_week_rank_toc(_) ->
	undefined.
encode_m_ranking_role_rece_flowers_this_week_rank_toc(Record) when is_record(Record, m_ranking_role_rece_flowers_this_week_rank_toc) ->
	#m_ranking_role_rece_flowers_this_week_rank_toc{role_rece_flowers=Role_rece_flowers} = Record,
	case Role_rece_flowers =:= undefined of
		true ->
			Role_rece_flowersFinal = [];
		false ->
			Role_rece_flowersFinal = Role_rece_flowers
	end,
	Role_rece_flowers_bin = encode_p_role_rece_flowers_this_week_ranks(Role_rece_flowersFinal, <<>>),
	SizeRole_rece_flowersFinal = erlang:length(Role_rece_flowersFinal),
	BinLen_role_rece_flowers = erlang:byte_size(Role_rece_flowers_bin),

	<<SizeRole_rece_flowersFinal:16, BinLen_role_rece_flowers:32, Role_rece_flowers_bin/binary>>;
encode_m_ranking_role_rece_flowers_this_week_rank_toc(_) -> 
	<<>>.

decode_m_ranking_role_rece_flowers_this_week_rank_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizerole_rece_flowers:16, _BinLenrole_rece_flowers:32, SubBinrole_rece_flowers/binary>> = Bin0,
	Role_rece_flowers = lists:reverse(decode_p_role_rece_flowers_this_week_ranks(SubBinrole_rece_flowers, [])),

	{m_ranking_role_rece_flowers_this_week_rank_toc, Role_rece_flowers};

decode_m_ranking_role_rece_flowers_this_week_rank_toc(_) ->
	undefined.
encode_m_ranking_role_pet_rank_toc(Record) when is_record(Record, m_ranking_role_pet_rank_toc) ->
	#m_ranking_role_pet_rank_toc{pets=Pets} = Record,
	case Pets =:= undefined of
		true ->
			PetsFinal = [];
		false ->
			PetsFinal = Pets
	end,
	Pets_bin = encode_p_role_pet_ranks(PetsFinal, <<>>),
	SizePetsFinal = erlang:length(PetsFinal),
	BinLen_pets = erlang:byte_size(Pets_bin),

	<<SizePetsFinal:16, BinLen_pets:32, Pets_bin/binary>>;
encode_m_ranking_role_pet_rank_toc(_) -> 
	<<>>.

decode_m_ranking_role_pet_rank_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizepets:16, _BinLenpets:32, SubBinpets/binary>> = Bin0,
	Pets = lists:reverse(decode_p_role_pet_ranks(SubBinpets, [])),

	{m_ranking_role_pet_rank_toc, Pets};

decode_m_ranking_role_pet_rank_toc(_) ->
	undefined.
encode_m_ranking_pet_join_rank_tos(Record) when is_record(Record, m_ranking_pet_join_rank_tos) ->
	#m_ranking_pet_join_rank_tos{rank_id=Rank_id,pet_id=Pet_id} = Record,
	case Rank_id =:= undefined of
		true ->
				Rank_idFinal = undefined,
				exit({required_field_not_assigned, m_ranking_pet_join_rank_tos, rank_id});
		false ->
			Rank_idFinal = Rank_id
	end,
	case Pet_id =:= undefined of
		true ->
				Pet_idFinal = undefined,
				exit({required_field_not_assigned, m_ranking_pet_join_rank_tos, pet_id});
		false ->
			Pet_idFinal = Pet_id
	end,

	<<Rank_idFinal:32/signed,Pet_idFinal:32/signed>>;
encode_m_ranking_pet_join_rank_tos(_) -> 
	<<>>.

decode_m_ranking_pet_join_rank_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Rank_id:32/signed,Pet_id:32/signed>> = Bin0,

	{m_ranking_pet_join_rank_tos, Rank_id,Pet_id};

decode_m_ranking_pet_join_rank_tos(_) ->
	undefined.
encode_m_ranking_pet_join_rank_toc(Record) when is_record(Record, m_ranking_pet_join_rank_toc) ->
	#m_ranking_pet_join_rank_toc{succ=Succ,rank_id=Rank_id,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 0;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Rank_id =:= undefined of
		true ->
				Rank_idFinal = undefined,
				exit({required_field_not_assigned, m_ranking_pet_join_rank_toc, rank_id});
		false ->
			Rank_idFinal = Rank_id
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,Rank_idFinal:32/signed,ReasonLen:16, Reason2/binary>>;
encode_m_ranking_pet_join_rank_toc(_) -> 
	<<>>.

decode_m_ranking_pet_join_rank_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,Rank_id:32/signed,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_ranking_pet_join_rank_toc, Succ,Rank_id,common_tool:to_list(Reason)};

decode_m_ranking_pet_join_rank_toc(_) ->
	undefined.
encode_m_ranking_hero_fb_rank_toc(Record) when is_record(Record, m_ranking_hero_fb_rank_toc) ->
	#m_ranking_hero_fb_rank_toc{succ=Succ,reason=Reason,hero_fb_ranks=Hero_fb_ranks} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Hero_fb_ranks =:= undefined of
		true ->
			Hero_fb_ranksFinal = [];
		false ->
			Hero_fb_ranksFinal = Hero_fb_ranks
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Hero_fb_ranks_bin = encode_p_hero_fb_ranks(Hero_fb_ranksFinal, <<>>),
	SizeHero_fb_ranksFinal = erlang:length(Hero_fb_ranksFinal),
	BinLen_hero_fb_ranks = erlang:byte_size(Hero_fb_ranks_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,SizeHero_fb_ranksFinal:16, BinLen_hero_fb_ranks:32, Hero_fb_ranks_bin/binary>>;
encode_m_ranking_hero_fb_rank_toc(_) -> 
	<<>>.

decode_m_ranking_hero_fb_rank_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_Sizehero_fb_ranks:16, _BinLenhero_fb_ranks:32, SubBinhero_fb_ranks/binary>> = Bin1,
	Hero_fb_ranks = lists:reverse(decode_p_hero_fb_ranks(SubBinhero_fb_ranks, [])),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_ranking_hero_fb_rank_toc, Succ,common_tool:to_list(Reason),Hero_fb_ranks};

decode_m_ranking_hero_fb_rank_toc(_) ->
	undefined.
encode_m_ranking_role_all_rank_tos(Record) when is_record(Record, m_ranking_role_all_rank_tos) ->
	#m_ranking_role_all_rank_tos{role_id=Role_id} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, m_ranking_role_all_rank_tos, role_id});
		false ->
			Role_idFinal = Role_id
	end,

	<<Role_idFinal:32/signed>>;
encode_m_ranking_role_all_rank_tos(_) -> 
	<<>>.

decode_m_ranking_role_all_rank_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed>> = Bin0,

	{m_ranking_role_all_rank_tos, Role_id};

decode_m_ranking_role_all_rank_tos(_) ->
	undefined.
encode_m_ranking_role_all_rank_toc(Record) when is_record(Record, m_ranking_role_all_rank_toc) ->
	#m_ranking_role_all_rank_toc{role_all_ranks=Role_all_ranks,role_id=Role_id,is_self=Is_self,role_name=Role_name,family_name=Family_name,level=Level} = Record,
	case Role_all_ranks =:= undefined of
		true ->
			Role_all_ranksFinal = [];
		false ->
			Role_all_ranksFinal = Role_all_ranks
	end,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, m_ranking_role_all_rank_toc, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Is_self =:= undefined of
		true ->
				Is_selfFinal = undefined,
				exit({required_field_not_assigned, m_ranking_role_all_rank_toc, is_self});
		false ->
		case Is_self of
			true ->
				Is_selfFinal = 1;
			false ->
				Is_selfFinal = 0
		end
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = <<>>;
		false ->
			Role_nameFinal = Role_name
	end,
	case Family_name =:= undefined of
		true ->
				Family_nameFinal = <<>>;
		false ->
			Family_nameFinal = Family_name
	end,
	case Level =:= undefined of
		true ->
				LevelFinal = 0;
		false ->
			LevelFinal = Level
	end,
	Role_all_ranks_bin = encode_p_role_all_ranks(Role_all_ranksFinal, <<>>),
	SizeRole_all_ranksFinal = erlang:length(Role_all_ranksFinal),
	BinLen_role_all_ranks = erlang:byte_size(Role_all_ranks_bin),
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),
	Family_name2 = common_tool:to_binary(Family_nameFinal),
	Family_nameLen = erlang:byte_size(Family_name2),

	<<SizeRole_all_ranksFinal:16, BinLen_role_all_ranks:32, Role_all_ranks_bin/binary,Role_idFinal:32/signed,Is_selfFinal:8,Role_nameLen:16, Role_name2/binary,Family_nameLen:16, Family_name2/binary,LevelFinal:32/signed>>;
encode_m_ranking_role_all_rank_toc(_) -> 
	<<>>.

decode_m_ranking_role_all_rank_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizerole_all_ranks:16, BinLenrole_all_ranks:32, Bin1/binary>> = Bin0,
	<<SubBinrole_all_ranks:BinLenrole_all_ranks/binary, Bin2/binary>> = Bin1, 
	Role_all_ranks = lists:reverse(decode_p_role_all_ranks(SubBinrole_all_ranks, [])),
	<<Role_id:32/signed,Is_selfTmp:8,Role_nameLen:16, Bin3/binary>> = Bin2,
	<<Role_name:Role_nameLen/binary,Family_nameLen:16, Bin4/binary>> = Bin3,
	<<Family_name:Family_nameLen/binary,Level:32/signed>> = Bin4,
case Is_selfTmp of 
	1 -> 
		Is_self = true;
	_ ->
		Is_self = false
end,

	{m_ranking_role_all_rank_toc, Role_all_ranks,Role_id,Is_self,common_tool:to_list(Role_name),common_tool:to_list(Family_name),Level};

decode_m_ranking_role_all_rank_toc(_) ->
	undefined.
encode_m_warofking_hold_tos(Record) when is_record(Record, m_warofking_hold_tos) ->
	#m_warofking_hold_tos{} = Record,

	<<>>;
encode_m_warofking_hold_tos(_) -> 
	<<>>.

decode_m_warofking_hold_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_warofking_hold_tos};

decode_m_warofking_hold_tos(_) ->
	undefined.
encode_m_warofking_hold_toc(Record) when is_record(Record, m_warofking_hold_toc) ->
	#m_warofking_hold_toc{succ=Succ,reason=Reason,return_self=Return_self,role_id=Role_id,family_name=Family_name} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = 0;
		false ->
			Role_idFinal = Role_id
	end,
	case Family_name =:= undefined of
		true ->
				Family_nameFinal = <<>>;
		false ->
			Family_nameFinal = Family_name
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Family_name2 = common_tool:to_binary(Family_nameFinal),
	Family_nameLen = erlang:byte_size(Family_name2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Return_selfFinal:8,Role_idFinal:32/signed,Family_nameLen:16, Family_name2/binary>>;
encode_m_warofking_hold_toc(_) -> 
	<<>>.

decode_m_warofking_hold_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Return_selfTmp:8,Role_id:32/signed,Family_nameLen:16, Bin2/binary>> = Bin1,
	<<Family_name:Family_nameLen/binary>> = Bin2,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_warofking_hold_toc, Succ,common_tool:to_list(Reason),Return_self,Role_id,common_tool:to_list(Family_name)};

decode_m_warofking_hold_toc(_) ->
	undefined.
encode_m_warofking_apply_tos(Record) when is_record(Record, m_warofking_apply_tos) ->
	#m_warofking_apply_tos{} = Record,

	<<>>;
encode_m_warofking_apply_tos(_) -> 
	<<>>.

decode_m_warofking_apply_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_warofking_apply_tos};

decode_m_warofking_apply_tos(_) ->
	undefined.
encode_m_warofking_apply_toc(Record) when is_record(Record, m_warofking_apply_toc) ->
	#m_warofking_apply_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_warofking_apply_toc(_) -> 
	<<>>.

decode_m_warofking_apply_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_warofking_apply_toc, Succ,common_tool:to_list(Reason)};

decode_m_warofking_apply_toc(_) ->
	undefined.
encode_m_warofking_collect_toc(Record) when is_record(Record, m_warofking_collect_toc) ->
	#m_warofking_collect_toc{} = Record,

	<<>>;
encode_m_warofking_collect_toc(_) -> 
	<<>>.

decode_m_warofking_collect_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_warofking_collect_toc};

decode_m_warofking_collect_toc(_) ->
	undefined.
encode_m_warofking_agree_enter_tos(Record) when is_record(Record, m_warofking_agree_enter_tos) ->
	#m_warofking_agree_enter_tos{} = Record,

	<<>>;
encode_m_warofking_agree_enter_tos(_) -> 
	<<>>.

decode_m_warofking_agree_enter_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_warofking_agree_enter_tos};

decode_m_warofking_agree_enter_tos(_) ->
	undefined.
encode_m_warofking_agree_enter_toc(Record) when is_record(Record, m_warofking_agree_enter_toc) ->
	#m_warofking_agree_enter_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_warofking_agree_enter_toc(_) -> 
	<<>>.

decode_m_warofking_agree_enter_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_warofking_agree_enter_toc, Succ,common_tool:to_list(Reason)};

decode_m_warofking_agree_enter_toc(_) ->
	undefined.
encode_m_warofking_enter_tos(Record) when is_record(Record, m_warofking_enter_tos) ->
	#m_warofking_enter_tos{} = Record,

	<<>>;
encode_m_warofking_enter_tos(_) -> 
	<<>>.

decode_m_warofking_enter_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_warofking_enter_tos};

decode_m_warofking_enter_tos(_) ->
	undefined.
encode_m_warofking_enter_toc(Record) when is_record(Record, m_warofking_enter_toc) ->
	#m_warofking_enter_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_warofking_enter_toc(_) -> 
	<<>>.

decode_m_warofking_enter_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_warofking_enter_toc, Succ,common_tool:to_list(Reason)};

decode_m_warofking_enter_toc(_) ->
	undefined.
encode_p_warofking_mark(Record) when is_record(Record, p_warofking_mark) ->
	#p_warofking_mark{family_id=Family_id,family_name=Family_name,mark=Mark,rankno=Rankno} = Record,
	case Family_id =:= undefined of
		true ->
				Family_idFinal = undefined,
				exit({required_field_not_assigned, p_warofking_mark, family_id});
		false ->
			Family_idFinal = Family_id
	end,
	case Family_name =:= undefined of
		true ->
				Family_nameFinal = undefined,
				exit({required_field_not_assigned, p_warofking_mark, family_name});
		false ->
			Family_nameFinal = Family_name
	end,
	case Mark =:= undefined of
		true ->
				MarkFinal = undefined,
				exit({required_field_not_assigned, p_warofking_mark, mark});
		false ->
			MarkFinal = Mark
	end,
	case Rankno =:= undefined of
		true ->
				RanknoFinal = undefined,
				exit({required_field_not_assigned, p_warofking_mark, rankno});
		false ->
			RanknoFinal = Rankno
	end,
	Family_name2 = common_tool:to_binary(Family_nameFinal),
	Family_nameLen = erlang:byte_size(Family_name2),

	<<Family_idFinal:32/signed,Family_nameLen:16, Family_name2/binary,MarkFinal:32/signed,RanknoFinal:32/signed>>;
encode_p_warofking_mark(_) -> 
	<<>>.

decode_p_warofking_mark(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Family_id:32/signed,Family_nameLen:16, Bin1/binary>> = Bin0,
	<<Family_name:Family_nameLen/binary,Mark:32/signed,Rankno:32/signed>> = Bin1,

	{p_warofking_mark, Family_id,common_tool:to_list(Family_name),Mark,Rankno};

decode_p_warofking_mark(_) ->
	undefined.
encode_m_warofking_getmarks_tos(Record) when is_record(Record, m_warofking_getmarks_tos) ->
	#m_warofking_getmarks_tos{} = Record,

	<<>>;
encode_m_warofking_getmarks_tos(_) -> 
	<<>>.

decode_m_warofking_getmarks_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_warofking_getmarks_tos};

decode_m_warofking_getmarks_tos(_) ->
	undefined.
encode_m_warofking_getmarks_toc(Record) when is_record(Record, m_warofking_getmarks_toc) ->
	#m_warofking_getmarks_toc{result=Result} = Record,
	case Result =:= undefined of
		true ->
			ResultFinal = [];
		false ->
			ResultFinal = Result
	end,
	Result_bin = encode_p_warofking_marks(ResultFinal, <<>>),
	SizeResultFinal = erlang:length(ResultFinal),
	BinLen_result = erlang:byte_size(Result_bin),

	<<SizeResultFinal:16, BinLen_result:32, Result_bin/binary>>;
encode_m_warofking_getmarks_toc(_) -> 
	<<>>.

decode_m_warofking_getmarks_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizeresult:16, _BinLenresult:32, SubBinresult/binary>> = Bin0,
	Result = lists:reverse(decode_p_warofking_marks(SubBinresult, [])),

	{m_warofking_getmarks_toc, Result};

decode_m_warofking_getmarks_toc(_) ->
	undefined.
encode_m_warofking_break_toc(Record) when is_record(Record, m_warofking_break_toc) ->
	#m_warofking_break_toc{role_id=Role_id} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, m_warofking_break_toc, role_id});
		false ->
			Role_idFinal = Role_id
	end,

	<<Role_idFinal:32/signed>>;
encode_m_warofking_break_toc(_) -> 
	<<>>.

decode_m_warofking_break_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed>> = Bin0,

	{m_warofking_break_toc, Role_id};

decode_m_warofking_break_toc(_) ->
	undefined.
encode_m_warofking_holding_toc(Record) when is_record(Record, m_warofking_holding_toc) ->
	#m_warofking_holding_toc{role_id=Role_id,time=Time,total_time=Total_time} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, m_warofking_holding_toc, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Time =:= undefined of
		true ->
				TimeFinal = undefined,
				exit({required_field_not_assigned, m_warofking_holding_toc, time});
		false ->
			TimeFinal = Time
	end,
	case Total_time =:= undefined of
		true ->
				Total_timeFinal = undefined,
				exit({required_field_not_assigned, m_warofking_holding_toc, total_time});
		false ->
			Total_timeFinal = Total_time
	end,

	<<Role_idFinal:32/signed,TimeFinal:32/signed,Total_timeFinal:32/signed>>;
encode_m_warofking_holding_toc(_) -> 
	<<>>.

decode_m_warofking_holding_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,Time:32/signed,Total_time:32/signed>> = Bin0,

	{m_warofking_holding_toc, Role_id,Time,Total_time};

decode_m_warofking_holding_toc(_) ->
	undefined.
encode_m_warofking_end_toc(Record) when is_record(Record, m_warofking_end_toc) ->
	#m_warofking_end_toc{family_id=Family_id,role_id=Role_id} = Record,
	case Family_id =:= undefined of
		true ->
				Family_idFinal = undefined,
				exit({required_field_not_assigned, m_warofking_end_toc, family_id});
		false ->
			Family_idFinal = Family_id
	end,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, m_warofking_end_toc, role_id});
		false ->
			Role_idFinal = Role_id
	end,

	<<Family_idFinal:32/signed,Role_idFinal:32/signed>>;
encode_m_warofking_end_toc(_) -> 
	<<>>.

decode_m_warofking_end_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Family_id:32/signed,Role_id:32/signed>> = Bin0,

	{m_warofking_end_toc, Family_id,Role_id};

decode_m_warofking_end_toc(_) ->
	undefined.
encode_m_warofking_safetime_tos(Record) when is_record(Record, m_warofking_safetime_tos) ->
	#m_warofking_safetime_tos{} = Record,

	<<>>;
encode_m_warofking_safetime_tos(_) -> 
	<<>>.

decode_m_warofking_safetime_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_warofking_safetime_tos};

decode_m_warofking_safetime_tos(_) ->
	undefined.
encode_m_warofking_safetime_toc(Record) when is_record(Record, m_warofking_safetime_toc) ->
	#m_warofking_safetime_toc{succ=Succ,reason=Reason,remain_time=Remain_time} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Remain_time =:= undefined of
		true ->
				Remain_timeFinal = 0;
		false ->
			Remain_timeFinal = Remain_time
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Remain_timeFinal:32/signed>>;
encode_m_warofking_safetime_toc(_) -> 
	<<>>.

decode_m_warofking_safetime_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Remain_time:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_warofking_safetime_toc, Succ,common_tool:to_list(Reason),Remain_time};

decode_m_warofking_safetime_toc(_) ->
	undefined.
encode_m_title_get_role_titles_toc(Record) when is_record(Record, m_title_get_role_titles_toc) ->
	#m_title_get_role_titles_toc{titles=Titles} = Record,
	case Titles =:= undefined of
		true ->
			TitlesFinal = [];
		false ->
			TitlesFinal = Titles
	end,
	Titles_bin = encode_p_titles(TitlesFinal, <<>>),
	SizeTitlesFinal = erlang:length(TitlesFinal),
	BinLen_titles = erlang:byte_size(Titles_bin),

	<<SizeTitlesFinal:16, BinLen_titles:32, Titles_bin/binary>>;
encode_m_title_get_role_titles_toc(_) -> 
	<<>>.

decode_m_title_get_role_titles_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizetitles:16, _BinLentitles:32, SubBintitles/binary>> = Bin0,
	Titles = lists:reverse(decode_p_titles(SubBintitles, [])),

	{m_title_get_role_titles_toc, Titles};

decode_m_title_get_role_titles_toc(_) ->
	undefined.
encode_m_title_change_cur_title_tos(Record) when is_record(Record, m_title_change_cur_title_tos) ->
	#m_title_change_cur_title_tos{id=Id} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, m_title_change_cur_title_tos, id});
		false ->
			IdFinal = Id
	end,

	<<IdFinal:32/signed>>;
encode_m_title_change_cur_title_tos(_) -> 
	<<>>.

decode_m_title_change_cur_title_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed>> = Bin0,

	{m_title_change_cur_title_tos, Id};

decode_m_title_change_cur_title_tos(_) ->
	undefined.
encode_m_title_change_cur_title_toc(Record) when is_record(Record, m_title_change_cur_title_toc) ->
	#m_title_change_cur_title_toc{succ=Succ,reason=Reason,color=Color,id=Id} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Color =:= undefined of
		true ->
				ColorFinal = <<>>;
		false ->
			ColorFinal = Color
	end,
	case Id =:= undefined of
		true ->
				IdFinal = 0;
		false ->
			IdFinal = Id
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Color2 = common_tool:to_binary(ColorFinal),
	ColorLen = erlang:byte_size(Color2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,ColorLen:16, Color2/binary,IdFinal:32/signed>>;
encode_m_title_change_cur_title_toc(_) -> 
	<<>>.

decode_m_title_change_cur_title_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,ColorLen:16, Bin2/binary>> = Bin1,
	<<Color:ColorLen/binary,Id:32/signed>> = Bin2,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_title_change_cur_title_toc, Succ,common_tool:to_list(Reason),common_tool:to_list(Color),Id};

decode_m_title_change_cur_title_toc(_) ->
	undefined.
encode_p_faction(Record) when is_record(Record, p_faction) ->
	#p_faction{faction_id=Faction_id,office_info=Office_info,succ_times_waroffaction=Succ_times_waroffaction,silver=Silver,persist_succ_times_waroffaction=Persist_succ_times_waroffaction,fail_times_waroffaction=Fail_times_waroffaction,persist_fail_times_waroffaction=Persist_fail_times_waroffaction,guarder_level=Guarder_level,last_attack_day=Last_attack_day,last_defence_day=Last_defence_day,war_point=War_point,notice_content=Notice_content,last_launch_collection_day=Last_launch_collection_day,king_token_used_log=King_token_used_log} = Record,
	case Faction_id =:= undefined of
		true ->
				Faction_idFinal = undefined,
				exit({required_field_not_assigned, p_faction, faction_id});
		false ->
			Faction_idFinal = Faction_id
	end,
	case Office_info =:= undefined of
		true ->
				Office_infoFinal = undefined,
				exit({required_field_not_assigned, p_faction, office_info});
		false ->
			Office_infoFinal = Office_info
	end,
	case Succ_times_waroffaction =:= undefined of
		true ->
				Succ_times_waroffactionFinal = 0;
		false ->
			Succ_times_waroffactionFinal = Succ_times_waroffaction
	end,
	case Silver =:= undefined of
		true ->
				SilverFinal = undefined,
				exit({required_field_not_assigned, p_faction, silver});
		false ->
			SilverFinal = Silver
	end,
	case Persist_succ_times_waroffaction =:= undefined of
		true ->
				Persist_succ_times_waroffactionFinal = 0;
		false ->
			Persist_succ_times_waroffactionFinal = Persist_succ_times_waroffaction
	end,
	case Fail_times_waroffaction =:= undefined of
		true ->
				Fail_times_waroffactionFinal = 0;
		false ->
			Fail_times_waroffactionFinal = Fail_times_waroffaction
	end,
	case Persist_fail_times_waroffaction =:= undefined of
		true ->
				Persist_fail_times_waroffactionFinal = 0;
		false ->
			Persist_fail_times_waroffactionFinal = Persist_fail_times_waroffaction
	end,
	case Guarder_level =:= undefined of
		true ->
				Guarder_levelFinal = 1;
		false ->
			Guarder_levelFinal = Guarder_level
	end,
	case Last_attack_day =:= undefined of
		true ->
				Last_attack_dayFinal = 0;
		false ->
			Last_attack_dayFinal = Last_attack_day
	end,
	case Last_defence_day =:= undefined of
		true ->
				Last_defence_dayFinal = 0;
		false ->
			Last_defence_dayFinal = Last_defence_day
	end,
	case War_point =:= undefined of
		true ->
				War_pointFinal = 0;
		false ->
			War_pointFinal = War_point
	end,
	case Notice_content =:= undefined of
		true ->
				Notice_contentFinal = <<>>;
		false ->
			Notice_contentFinal = Notice_content
	end,
	case Last_launch_collection_day =:= undefined of
		true ->
				Last_launch_collection_dayFinal = 0;
		false ->
			Last_launch_collection_dayFinal = Last_launch_collection_day
	end,
	case King_token_used_log =:= undefined of
		true ->
				King_token_used_logFinal = 0;
		false ->
			King_token_used_logFinal = King_token_used_log
	end,
	Office_info_bin = encode_p_office(Office_infoFinal),
	BinLen_office_info = erlang:byte_size(Office_info_bin),
	Notice_content2 = common_tool:to_binary(Notice_contentFinal),
	Notice_contentLen = erlang:byte_size(Notice_content2),
	King_token_used_log_bin = encode_p_king_token_used_log(King_token_used_logFinal),
	BinLen_king_token_used_log = erlang:byte_size(King_token_used_log_bin),

	<<Faction_idFinal:32/signed,BinLen_office_info:32, Office_info_bin/binary,Succ_times_waroffactionFinal:32/signed,SilverFinal:32/signed,Persist_succ_times_waroffactionFinal:32/signed,Fail_times_waroffactionFinal:32/signed,Persist_fail_times_waroffactionFinal:32/signed,Guarder_levelFinal:32/signed,Last_attack_dayFinal:32/signed,Last_defence_dayFinal:32/signed,War_pointFinal:32/signed,Notice_contentLen:16, Notice_content2/binary,Last_launch_collection_dayFinal:32/signed,BinLen_king_token_used_log:32, King_token_used_log_bin/binary>>;
encode_p_faction(_) -> 
	<<>>.

decode_p_faction(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Faction_id:32/signed,SubBinSizeoffice_info:32, Bin1/binary>> = Bin0,
	<<SubBinoffice_info:SubBinSizeoffice_info/binary, Bin2/binary>> = Bin1,
	Office_info = decode_p_office(SubBinoffice_info),
	<<Succ_times_waroffaction:32/signed,Silver:32/signed,Persist_succ_times_waroffaction:32/signed,Fail_times_waroffaction:32/signed,Persist_fail_times_waroffaction:32/signed,Guarder_level:32/signed,Last_attack_day:32/signed,Last_defence_day:32/signed,War_point:32/signed,Notice_contentLen:16, Bin3/binary>> = Bin2,
	<<Notice_content:Notice_contentLen/binary,Last_launch_collection_day:32/signed,_SubBinSizeking_token_used_log:32, SubBinking_token_used_log/binary>> = Bin3,
	King_token_used_log = decode_p_king_token_used_log(SubBinking_token_used_log),

	{p_faction, Faction_id,Office_info,Succ_times_waroffaction,Silver,Persist_succ_times_waroffaction,Fail_times_waroffaction,Persist_fail_times_waroffaction,Guarder_level,Last_attack_day,Last_defence_day,War_point,common_tool:to_list(Notice_content),Last_launch_collection_day,King_token_used_log};

decode_p_faction(_) ->
	undefined.
encode_p_king_token_used_log(Record) when is_record(Record, p_king_token_used_log) ->
	#p_king_token_used_log{king_last_used_time=King_last_used_time,king_used_counter=King_used_counter,general_last_used_time=General_last_used_time,general_used_counter=General_used_counter} = Record,
	case King_last_used_time =:= undefined of
		true ->
				King_last_used_timeFinal = 0;
		false ->
			King_last_used_timeFinal = King_last_used_time
	end,
	case King_used_counter =:= undefined of
		true ->
				King_used_counterFinal = 0;
		false ->
			King_used_counterFinal = King_used_counter
	end,
	case General_last_used_time =:= undefined of
		true ->
				General_last_used_timeFinal = 0;
		false ->
			General_last_used_timeFinal = General_last_used_time
	end,
	case General_used_counter =:= undefined of
		true ->
				General_used_counterFinal = 0;
		false ->
			General_used_counterFinal = General_used_counter
	end,

	<<King_last_used_timeFinal:32/signed,King_used_counterFinal:32/signed,General_last_used_timeFinal:32/signed,General_used_counterFinal:32/signed>>;
encode_p_king_token_used_log(_) -> 
	<<>>.

decode_p_king_token_used_log(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<King_last_used_time:32/signed,King_used_counter:32/signed,General_last_used_time:32/signed,General_used_counter:32/signed>> = Bin0,

	{p_king_token_used_log, King_last_used_time,King_used_counter,General_last_used_time,General_used_counter};

decode_p_king_token_used_log(_) ->
	undefined.
encode_p_office(Record) when is_record(Record, p_office) ->
	#p_office{faction_id=Faction_id,king_role_id=King_role_id,king_role_name=King_role_name,king_head=King_head,offices=Offices} = Record,
	case Faction_id =:= undefined of
		true ->
				Faction_idFinal = undefined,
				exit({required_field_not_assigned, p_office, faction_id});
		false ->
			Faction_idFinal = Faction_id
	end,
	case King_role_id =:= undefined of
		true ->
				King_role_idFinal = undefined,
				exit({required_field_not_assigned, p_office, king_role_id});
		false ->
			King_role_idFinal = King_role_id
	end,
	case King_role_name =:= undefined of
		true ->
				King_role_nameFinal = undefined,
				exit({required_field_not_assigned, p_office, king_role_name});
		false ->
			King_role_nameFinal = King_role_name
	end,
	case King_head =:= undefined of
		true ->
				King_headFinal = 0;
		false ->
			King_headFinal = King_head
	end,
	case Offices =:= undefined of
		true ->
			OfficesFinal = [];
		false ->
			OfficesFinal = Offices
	end,
	King_role_name2 = common_tool:to_binary(King_role_nameFinal),
	King_role_nameLen = erlang:byte_size(King_role_name2),
	Offices_bin = encode_p_office_positions(OfficesFinal, <<>>),
	SizeOfficesFinal = erlang:length(OfficesFinal),
	BinLen_offices = erlang:byte_size(Offices_bin),

	<<Faction_idFinal:32/signed,King_role_idFinal:32/signed,King_role_nameLen:16, King_role_name2/binary,King_headFinal:32/signed,SizeOfficesFinal:16, BinLen_offices:32, Offices_bin/binary>>;
encode_p_office(_) -> 
	<<>>.

decode_p_office(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Faction_id:32/signed,King_role_id:32/signed,King_role_nameLen:16, Bin1/binary>> = Bin0,
	<<King_role_name:King_role_nameLen/binary,King_head:32/signed,_Sizeoffices:16, _BinLenoffices:32, SubBinoffices/binary>> = Bin1,
	Offices = lists:reverse(decode_p_office_positions(SubBinoffices, [])),

	{p_office, Faction_id,King_role_id,common_tool:to_list(King_role_name),King_head,Offices};

decode_p_office(_) ->
	undefined.
encode_p_office_equip(Record) when is_record(Record, p_office_equip) ->
	#p_office_equip{office_id=Office_id,office_name=Office_name,type=Type,type_id=Type_id,equip_num=Equip_num} = Record,
	case Office_id =:= undefined of
		true ->
				Office_idFinal = undefined,
				exit({required_field_not_assigned, p_office_equip, office_id});
		false ->
			Office_idFinal = Office_id
	end,
	case Office_name =:= undefined of
		true ->
				Office_nameFinal = undefined,
				exit({required_field_not_assigned, p_office_equip, office_name});
		false ->
			Office_nameFinal = Office_name
	end,
	case Type =:= undefined of
		true ->
				TypeFinal = 3;
		false ->
			TypeFinal = Type
	end,
	case Type_id =:= undefined of
		true ->
				Type_idFinal = undefined,
				exit({required_field_not_assigned, p_office_equip, type_id});
		false ->
			Type_idFinal = Type_id
	end,
	case Equip_num =:= undefined of
		true ->
				Equip_numFinal = undefined,
				exit({required_field_not_assigned, p_office_equip, equip_num});
		false ->
			Equip_numFinal = Equip_num
	end,
	Office_name2 = common_tool:to_binary(Office_nameFinal),
	Office_nameLen = erlang:byte_size(Office_name2),

	<<Office_idFinal:32/signed,Office_nameLen:16, Office_name2/binary,TypeFinal:32/signed,Type_idFinal:32/signed,Equip_numFinal:32/signed>>;
encode_p_office_equip(_) -> 
	<<>>.

decode_p_office_equip(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Office_id:32/signed,Office_nameLen:16, Bin1/binary>> = Bin0,
	<<Office_name:Office_nameLen/binary,Type:32/signed,Type_id:32/signed,Equip_num:32/signed>> = Bin1,

	{p_office_equip, Office_id,common_tool:to_list(Office_name),Type,Type_id,Equip_num};

decode_p_office_equip(_) ->
	undefined.
encode_p_office_position(Record) when is_record(Record, p_office_position) ->
	#p_office_position{office_id=Office_id,office_name=Office_name,role_id=Role_id,role_name=Role_name,head=Head,invite_role_id=Invite_role_id,invite_role_name=Invite_role_name} = Record,
	case Office_id =:= undefined of
		true ->
				Office_idFinal = undefined,
				exit({required_field_not_assigned, p_office_position, office_id});
		false ->
			Office_idFinal = Office_id
	end,
	case Office_name =:= undefined of
		true ->
				Office_nameFinal = undefined,
				exit({required_field_not_assigned, p_office_position, office_name});
		false ->
			Office_nameFinal = Office_name
	end,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = 0;
		false ->
			Role_idFinal = Role_id
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = "";
		false ->
			Role_nameFinal = Role_name
	end,
	case Head =:= undefined of
		true ->
				HeadFinal = 0;
		false ->
			HeadFinal = Head
	end,
	case Invite_role_id =:= undefined of
		true ->
				Invite_role_idFinal = 0;
		false ->
			Invite_role_idFinal = Invite_role_id
	end,
	case Invite_role_name =:= undefined of
		true ->
				Invite_role_nameFinal = "";
		false ->
			Invite_role_nameFinal = Invite_role_name
	end,
	Office_name2 = common_tool:to_binary(Office_nameFinal),
	Office_nameLen = erlang:byte_size(Office_name2),
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),
	Invite_role_name2 = common_tool:to_binary(Invite_role_nameFinal),
	Invite_role_nameLen = erlang:byte_size(Invite_role_name2),

	<<Office_idFinal:32/signed,Office_nameLen:16, Office_name2/binary,Role_idFinal:32/signed,Role_nameLen:16, Role_name2/binary,HeadFinal:32/signed,Invite_role_idFinal:32/signed,Invite_role_nameLen:16, Invite_role_name2/binary>>;
encode_p_office_position(_) -> 
	<<>>.

decode_p_office_position(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Office_id:32/signed,Office_nameLen:16, Bin1/binary>> = Bin0,
	<<Office_name:Office_nameLen/binary,Role_id:32/signed,Role_nameLen:16, Bin2/binary>> = Bin1,
	<<Role_name:Role_nameLen/binary,Head:32/signed,Invite_role_id:32/signed,Invite_role_nameLen:16, Bin3/binary>> = Bin2,
	<<Invite_role_name:Invite_role_nameLen/binary>> = Bin3,

	{p_office_position, Office_id,common_tool:to_list(Office_name),Role_id,common_tool:to_list(Role_name),Head,Invite_role_id,common_tool:to_list(Invite_role_name)};

decode_p_office_position(_) ->
	undefined.
encode_m_office_appoint_tos(Record) when is_record(Record, m_office_appoint_tos) ->
	#m_office_appoint_tos{role_name=Role_name,office_id=Office_id} = Record,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = undefined,
				exit({required_field_not_assigned, m_office_appoint_tos, role_name});
		false ->
			Role_nameFinal = Role_name
	end,
	case Office_id =:= undefined of
		true ->
				Office_idFinal = undefined,
				exit({required_field_not_assigned, m_office_appoint_tos, office_id});
		false ->
			Office_idFinal = Office_id
	end,
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),

	<<Role_nameLen:16, Role_name2/binary,Office_idFinal:32/signed>>;
encode_m_office_appoint_tos(_) -> 
	<<>>.

decode_m_office_appoint_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_nameLen:16, Bin1/binary>> = Bin0,
	<<Role_name:Role_nameLen/binary,Office_id:32/signed>> = Bin1,

	{m_office_appoint_tos, common_tool:to_list(Role_name),Office_id};

decode_m_office_appoint_tos(_) ->
	undefined.
encode_m_office_appoint_toc(Record) when is_record(Record, m_office_appoint_toc) ->
	#m_office_appoint_toc{succ=Succ,reason=Reason,return_self=Return_self,role_name=Role_name,office_name=Office_name,office_id=Office_id} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = <<>>;
		false ->
			Role_nameFinal = Role_name
	end,
	case Office_name =:= undefined of
		true ->
				Office_nameFinal = <<>>;
		false ->
			Office_nameFinal = Office_name
	end,
	case Office_id =:= undefined of
		true ->
				Office_idFinal = 0;
		false ->
			Office_idFinal = Office_id
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),
	Office_name2 = common_tool:to_binary(Office_nameFinal),
	Office_nameLen = erlang:byte_size(Office_name2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Return_selfFinal:8,Role_nameLen:16, Role_name2/binary,Office_nameLen:16, Office_name2/binary,Office_idFinal:32/signed>>;
encode_m_office_appoint_toc(_) -> 
	<<>>.

decode_m_office_appoint_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Return_selfTmp:8,Role_nameLen:16, Bin2/binary>> = Bin1,
	<<Role_name:Role_nameLen/binary,Office_nameLen:16, Bin3/binary>> = Bin2,
	<<Office_name:Office_nameLen/binary,Office_id:32/signed>> = Bin3,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_office_appoint_toc, Succ,common_tool:to_list(Reason),Return_self,common_tool:to_list(Role_name),common_tool:to_list(Office_name),Office_id};

decode_m_office_appoint_toc(_) ->
	undefined.
encode_m_office_disappoint_tos(Record) when is_record(Record, m_office_disappoint_tos) ->
	#m_office_disappoint_tos{office_id=Office_id} = Record,
	case Office_id =:= undefined of
		true ->
				Office_idFinal = undefined,
				exit({required_field_not_assigned, m_office_disappoint_tos, office_id});
		false ->
			Office_idFinal = Office_id
	end,

	<<Office_idFinal:32/signed>>;
encode_m_office_disappoint_tos(_) -> 
	<<>>.

decode_m_office_disappoint_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Office_id:32/signed>> = Bin0,

	{m_office_disappoint_tos, Office_id};

decode_m_office_disappoint_tos(_) ->
	undefined.
encode_m_office_disappoint_toc(Record) when is_record(Record, m_office_disappoint_toc) ->
	#m_office_disappoint_toc{succ=Succ,reason=Reason,return_self=Return_self,office_id=Office_id,office_name=Office_name} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Office_id =:= undefined of
		true ->
				Office_idFinal = 0;
		false ->
			Office_idFinal = Office_id
	end,
	case Office_name =:= undefined of
		true ->
				Office_nameFinal = <<>>;
		false ->
			Office_nameFinal = Office_name
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Office_name2 = common_tool:to_binary(Office_nameFinal),
	Office_nameLen = erlang:byte_size(Office_name2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Return_selfFinal:8,Office_idFinal:32/signed,Office_nameLen:16, Office_name2/binary>>;
encode_m_office_disappoint_toc(_) -> 
	<<>>.

decode_m_office_disappoint_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Return_selfTmp:8,Office_id:32/signed,Office_nameLen:16, Bin2/binary>> = Bin1,
	<<Office_name:Office_nameLen/binary>> = Bin2,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_office_disappoint_toc, Succ,common_tool:to_list(Reason),Return_self,Office_id,common_tool:to_list(Office_name)};

decode_m_office_disappoint_toc(_) ->
	undefined.
encode_m_office_agree_appoint_tos(Record) when is_record(Record, m_office_agree_appoint_tos) ->
	#m_office_agree_appoint_tos{} = Record,

	<<>>;
encode_m_office_agree_appoint_tos(_) -> 
	<<>>.

decode_m_office_agree_appoint_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_office_agree_appoint_tos};

decode_m_office_agree_appoint_tos(_) ->
	undefined.
encode_m_office_agree_appoint_toc(Record) when is_record(Record, m_office_agree_appoint_toc) ->
	#m_office_agree_appoint_toc{succ=Succ,reason=Reason,return_self=Return_self,role_name=Role_name,office_name=Office_name} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = <<>>;
		false ->
			Role_nameFinal = Role_name
	end,
	case Office_name =:= undefined of
		true ->
				Office_nameFinal = <<>>;
		false ->
			Office_nameFinal = Office_name
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),
	Office_name2 = common_tool:to_binary(Office_nameFinal),
	Office_nameLen = erlang:byte_size(Office_name2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Return_selfFinal:8,Role_nameLen:16, Role_name2/binary,Office_nameLen:16, Office_name2/binary>>;
encode_m_office_agree_appoint_toc(_) -> 
	<<>>.

decode_m_office_agree_appoint_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Return_selfTmp:8,Role_nameLen:16, Bin2/binary>> = Bin1,
	<<Role_name:Role_nameLen/binary,Office_nameLen:16, Bin3/binary>> = Bin2,
	<<Office_name:Office_nameLen/binary>> = Bin3,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_office_agree_appoint_toc, Succ,common_tool:to_list(Reason),Return_self,common_tool:to_list(Role_name),common_tool:to_list(Office_name)};

decode_m_office_agree_appoint_toc(_) ->
	undefined.
encode_m_office_refuse_appoint_tos(Record) when is_record(Record, m_office_refuse_appoint_tos) ->
	#m_office_refuse_appoint_tos{} = Record,

	<<>>;
encode_m_office_refuse_appoint_tos(_) -> 
	<<>>.

decode_m_office_refuse_appoint_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_office_refuse_appoint_tos};

decode_m_office_refuse_appoint_tos(_) ->
	undefined.
encode_m_office_refuse_appoint_toc(Record) when is_record(Record, m_office_refuse_appoint_toc) ->
	#m_office_refuse_appoint_toc{succ=Succ,reason=Reason,return_self=Return_self,role_name=Role_name,office_name=Office_name} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = <<>>;
		false ->
			Role_nameFinal = Role_name
	end,
	case Office_name =:= undefined of
		true ->
				Office_nameFinal = <<>>;
		false ->
			Office_nameFinal = Office_name
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),
	Office_name2 = common_tool:to_binary(Office_nameFinal),
	Office_nameLen = erlang:byte_size(Office_name2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Return_selfFinal:8,Role_nameLen:16, Role_name2/binary,Office_nameLen:16, Office_name2/binary>>;
encode_m_office_refuse_appoint_toc(_) -> 
	<<>>.

decode_m_office_refuse_appoint_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Return_selfTmp:8,Role_nameLen:16, Bin2/binary>> = Bin1,
	<<Role_name:Role_nameLen/binary,Office_nameLen:16, Bin3/binary>> = Bin2,
	<<Office_name:Office_nameLen/binary>> = Bin3,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_office_refuse_appoint_toc, Succ,common_tool:to_list(Reason),Return_self,common_tool:to_list(Role_name),common_tool:to_list(Office_name)};

decode_m_office_refuse_appoint_toc(_) ->
	undefined.
encode_m_office_cancel_appoint_tos(Record) when is_record(Record, m_office_cancel_appoint_tos) ->
	#m_office_cancel_appoint_tos{office_id=Office_id} = Record,
	case Office_id =:= undefined of
		true ->
				Office_idFinal = undefined,
				exit({required_field_not_assigned, m_office_cancel_appoint_tos, office_id});
		false ->
			Office_idFinal = Office_id
	end,

	<<Office_idFinal:32/signed>>;
encode_m_office_cancel_appoint_tos(_) -> 
	<<>>.

decode_m_office_cancel_appoint_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Office_id:32/signed>> = Bin0,

	{m_office_cancel_appoint_tos, Office_id};

decode_m_office_cancel_appoint_tos(_) ->
	undefined.
encode_m_office_cancel_appoint_toc(Record) when is_record(Record, m_office_cancel_appoint_toc) ->
	#m_office_cancel_appoint_toc{succ=Succ,reason=Reason,office_id=Office_id} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Office_id =:= undefined of
		true ->
				Office_idFinal = 0;
		false ->
			Office_idFinal = Office_id
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Office_idFinal:32/signed>>;
encode_m_office_cancel_appoint_toc(_) -> 
	<<>>.

decode_m_office_cancel_appoint_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Office_id:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_office_cancel_appoint_toc, Succ,common_tool:to_list(Reason),Office_id};

decode_m_office_cancel_appoint_toc(_) ->
	undefined.
encode_m_office_launch_collection_tos(Record) when is_record(Record, m_office_launch_collection_tos) ->
	#m_office_launch_collection_tos{} = Record,

	<<>>;
encode_m_office_launch_collection_tos(_) -> 
	<<>>.

decode_m_office_launch_collection_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_office_launch_collection_tos};

decode_m_office_launch_collection_tos(_) ->
	undefined.
encode_m_office_launch_collection_toc(Record) when is_record(Record, m_office_launch_collection_toc) ->
	#m_office_launch_collection_toc{succ=Succ,reason=Reason,role_name=Role_name,office_name=Office_name} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = <<>>;
		false ->
			Role_nameFinal = Role_name
	end,
	case Office_name =:= undefined of
		true ->
				Office_nameFinal = <<>>;
		false ->
			Office_nameFinal = Office_name
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),
	Office_name2 = common_tool:to_binary(Office_nameFinal),
	Office_nameLen = erlang:byte_size(Office_name2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Role_nameLen:16, Role_name2/binary,Office_nameLen:16, Office_name2/binary>>;
encode_m_office_launch_collection_toc(_) -> 
	<<>>.

decode_m_office_launch_collection_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Role_nameLen:16, Bin2/binary>> = Bin1,
	<<Role_name:Role_nameLen/binary,Office_nameLen:16, Bin3/binary>> = Bin2,
	<<Office_name:Office_nameLen/binary>> = Bin3,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_office_launch_collection_toc, Succ,common_tool:to_list(Reason),common_tool:to_list(Role_name),common_tool:to_list(Office_name)};

decode_m_office_launch_collection_toc(_) ->
	undefined.
encode_m_office_donate_tos(Record) when is_record(Record, m_office_donate_tos) ->
	#m_office_donate_tos{money=Money,donate_type=Donate_type} = Record,
	case Money =:= undefined of
		true ->
				MoneyFinal = undefined,
				exit({required_field_not_assigned, m_office_donate_tos, money});
		false ->
			MoneyFinal = Money
	end,
	case Donate_type =:= undefined of
		true ->
				Donate_typeFinal = undefined,
				exit({required_field_not_assigned, m_office_donate_tos, donate_type});
		false ->
			Donate_typeFinal = Donate_type
	end,

	<<MoneyFinal:32/signed,Donate_typeFinal:32/signed>>;
encode_m_office_donate_tos(_) -> 
	<<>>.

decode_m_office_donate_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Money:32/signed,Donate_type:32/signed>> = Bin0,

	{m_office_donate_tos, Money,Donate_type};

decode_m_office_donate_tos(_) ->
	undefined.
encode_m_office_donate_toc(Record) when is_record(Record, m_office_donate_toc) ->
	#m_office_donate_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_office_donate_toc(_) -> 
	<<>>.

decode_m_office_donate_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_office_donate_toc, Succ,common_tool:to_list(Reason)};

decode_m_office_donate_toc(_) ->
	undefined.
encode_m_office_panel_tos(Record) when is_record(Record, m_office_panel_tos) ->
	#m_office_panel_tos{} = Record,

	<<>>;
encode_m_office_panel_tos(_) -> 
	<<>>.

decode_m_office_panel_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_office_panel_tos};

decode_m_office_panel_tos(_) ->
	undefined.
encode_m_office_panel_toc(Record) when is_record(Record, m_office_panel_toc) ->
	#m_office_panel_toc{faction_info=Faction_info} = Record,
	case Faction_info =:= undefined of
		true ->
				Faction_infoFinal = undefined,
				exit({required_field_not_assigned, m_office_panel_toc, faction_info});
		false ->
			Faction_infoFinal = Faction_info
	end,
	Faction_info_bin = encode_p_faction(Faction_infoFinal),
	BinLen_faction_info = erlang:byte_size(Faction_info_bin),

	<<BinLen_faction_info:32, Faction_info_bin/binary>>;
encode_m_office_panel_toc(_) -> 
	<<>>.

decode_m_office_panel_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_SubBinSizefaction_info:32, SubBinfaction_info/binary>> = Bin0,
	Faction_info = decode_p_faction(SubBinfaction_info),

	{m_office_panel_toc, Faction_info};

decode_m_office_panel_toc(_) ->
	undefined.
encode_m_office_set_notice_tos(Record) when is_record(Record, m_office_set_notice_tos) ->
	#m_office_set_notice_tos{notice_content=Notice_content} = Record,
	case Notice_content =:= undefined of
		true ->
				Notice_contentFinal = undefined,
				exit({required_field_not_assigned, m_office_set_notice_tos, notice_content});
		false ->
			Notice_contentFinal = Notice_content
	end,
	Notice_content2 = common_tool:to_binary(Notice_contentFinal),
	Notice_contentLen = erlang:byte_size(Notice_content2),

	<<Notice_contentLen:16, Notice_content2/binary>>;
encode_m_office_set_notice_tos(_) -> 
	<<>>.

decode_m_office_set_notice_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Notice_contentLen:16, Bin1/binary>> = Bin0,
	<<Notice_content:Notice_contentLen/binary>> = Bin1,

	{m_office_set_notice_tos, common_tool:to_list(Notice_content)};

decode_m_office_set_notice_tos(_) ->
	undefined.
encode_m_office_set_notice_toc(Record) when is_record(Record, m_office_set_notice_toc) ->
	#m_office_set_notice_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_office_set_notice_toc(_) -> 
	<<>>.

decode_m_office_set_notice_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_office_set_notice_toc, Succ,common_tool:to_list(Reason)};

decode_m_office_set_notice_toc(_) ->
	undefined.
encode_m_office_equip_panel_tos(Record) when is_record(Record, m_office_equip_panel_tos) ->
	#m_office_equip_panel_tos{} = Record,

	<<>>;
encode_m_office_equip_panel_tos(_) -> 
	<<>>.

decode_m_office_equip_panel_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_office_equip_panel_tos};

decode_m_office_equip_panel_tos(_) ->
	undefined.
encode_m_office_equip_panel_toc(Record) when is_record(Record, m_office_equip_panel_toc) ->
	#m_office_equip_panel_toc{office_equip=Office_equip} = Record,
	case Office_equip =:= undefined of
		true ->
			Office_equipFinal = [];
		false ->
			Office_equipFinal = Office_equip
	end,
	Office_equip_bin = encode_p_office_equips(Office_equipFinal, <<>>),
	SizeOffice_equipFinal = erlang:length(Office_equipFinal),
	BinLen_office_equip = erlang:byte_size(Office_equip_bin),

	<<SizeOffice_equipFinal:16, BinLen_office_equip:32, Office_equip_bin/binary>>;
encode_m_office_equip_panel_toc(_) -> 
	<<>>.

decode_m_office_equip_panel_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizeoffice_equip:16, _BinLenoffice_equip:32, SubBinoffice_equip/binary>> = Bin0,
	Office_equip = lists:reverse(decode_p_office_equips(SubBinoffice_equip, [])),

	{m_office_equip_panel_toc, Office_equip};

decode_m_office_equip_panel_toc(_) ->
	undefined.
encode_m_office_take_equip_tos(Record) when is_record(Record, m_office_take_equip_tos) ->
	#m_office_take_equip_tos{take_office_id=Take_office_id,take_num=Take_num} = Record,
	case Take_office_id =:= undefined of
		true ->
				Take_office_idFinal = undefined,
				exit({required_field_not_assigned, m_office_take_equip_tos, take_office_id});
		false ->
			Take_office_idFinal = Take_office_id
	end,
	case Take_num =:= undefined of
		true ->
				Take_numFinal = undefined,
				exit({required_field_not_assigned, m_office_take_equip_tos, take_num});
		false ->
			Take_numFinal = Take_num
	end,

	<<Take_office_idFinal:32/signed,Take_numFinal:32/signed>>;
encode_m_office_take_equip_tos(_) -> 
	<<>>.

decode_m_office_take_equip_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Take_office_id:32/signed,Take_num:32/signed>> = Bin0,

	{m_office_take_equip_tos, Take_office_id,Take_num};

decode_m_office_take_equip_tos(_) ->
	undefined.
encode_m_office_take_equip_toc(Record) when is_record(Record, m_office_take_equip_toc) ->
	#m_office_take_equip_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_office_take_equip_toc(_) -> 
	<<>>.

decode_m_office_take_equip_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_office_take_equip_toc, Succ,common_tool:to_list(Reason)};

decode_m_office_take_equip_toc(_) ->
	undefined.
encode_m_waroffaction_gather_factionist_toc(Record) when is_record(Record, m_waroffaction_gather_factionist_toc) ->
	#m_waroffaction_gather_factionist_toc{message=Message,mapid=Mapid,tx=Tx,ty=Ty} = Record,
	case Message =:= undefined of
		true ->
				MessageFinal = undefined,
				exit({required_field_not_assigned, m_waroffaction_gather_factionist_toc, message});
		false ->
			MessageFinal = Message
	end,
	case Mapid =:= undefined of
		true ->
				MapidFinal = undefined,
				exit({required_field_not_assigned, m_waroffaction_gather_factionist_toc, mapid});
		false ->
			MapidFinal = Mapid
	end,
	case Tx =:= undefined of
		true ->
				TxFinal = undefined,
				exit({required_field_not_assigned, m_waroffaction_gather_factionist_toc, tx});
		false ->
			TxFinal = Tx
	end,
	case Ty =:= undefined of
		true ->
				TyFinal = undefined,
				exit({required_field_not_assigned, m_waroffaction_gather_factionist_toc, ty});
		false ->
			TyFinal = Ty
	end,
	Message2 = common_tool:to_binary(MessageFinal),
	MessageLen = erlang:byte_size(Message2),

	<<MessageLen:16, Message2/binary,MapidFinal:32/signed,TxFinal:32/signed,TyFinal:32/signed>>;
encode_m_waroffaction_gather_factionist_toc(_) -> 
	<<>>.

decode_m_waroffaction_gather_factionist_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<MessageLen:16, Bin1/binary>> = Bin0,
	<<Message:MessageLen/binary,Mapid:32/signed,Tx:32/signed,Ty:32/signed>> = Bin1,

	{m_waroffaction_gather_factionist_toc, common_tool:to_list(Message),Mapid,Tx,Ty};

decode_m_waroffaction_gather_factionist_toc(_) ->
	undefined.
encode_m_waroffaction_gather_confirm_tos(Record) when is_record(Record, m_waroffaction_gather_confirm_tos) ->
	#m_waroffaction_gather_confirm_tos{mapid=Mapid,tx=Tx,ty=Ty} = Record,
	case Mapid =:= undefined of
		true ->
				MapidFinal = undefined,
				exit({required_field_not_assigned, m_waroffaction_gather_confirm_tos, mapid});
		false ->
			MapidFinal = Mapid
	end,
	case Tx =:= undefined of
		true ->
				TxFinal = undefined,
				exit({required_field_not_assigned, m_waroffaction_gather_confirm_tos, tx});
		false ->
			TxFinal = Tx
	end,
	case Ty =:= undefined of
		true ->
				TyFinal = undefined,
				exit({required_field_not_assigned, m_waroffaction_gather_confirm_tos, ty});
		false ->
			TyFinal = Ty
	end,

	<<MapidFinal:32/signed,TxFinal:32/signed,TyFinal:32/signed>>;
encode_m_waroffaction_gather_confirm_tos(_) -> 
	<<>>.

decode_m_waroffaction_gather_confirm_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Mapid:32/signed,Tx:32/signed,Ty:32/signed>> = Bin0,

	{m_waroffaction_gather_confirm_tos, Mapid,Tx,Ty};

decode_m_waroffaction_gather_confirm_tos(_) ->
	undefined.
encode_m_waroffaction_gather_confirm_toc(Record) when is_record(Record, m_waroffaction_gather_confirm_toc) ->
	#m_waroffaction_gather_confirm_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_waroffaction_gather_confirm_toc(_) -> 
	<<>>.

decode_m_waroffaction_gather_confirm_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_waroffaction_gather_confirm_toc, Succ,common_tool:to_list(Reason)};

decode_m_waroffaction_gather_confirm_toc(_) ->
	undefined.
encode_m_waroffaction_declare_tos(Record) when is_record(Record, m_waroffaction_declare_tos) ->
	#m_waroffaction_declare_tos{defence_faction_id=Defence_faction_id} = Record,
	case Defence_faction_id =:= undefined of
		true ->
				Defence_faction_idFinal = undefined,
				exit({required_field_not_assigned, m_waroffaction_declare_tos, defence_faction_id});
		false ->
			Defence_faction_idFinal = Defence_faction_id
	end,

	<<Defence_faction_idFinal:32/signed>>;
encode_m_waroffaction_declare_tos(_) -> 
	<<>>.

decode_m_waroffaction_declare_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Defence_faction_id:32/signed>> = Bin0,

	{m_waroffaction_declare_tos, Defence_faction_id};

decode_m_waroffaction_declare_tos(_) ->
	undefined.
encode_m_waroffaction_declare_toc(Record) when is_record(Record, m_waroffaction_declare_toc) ->
	#m_waroffaction_declare_toc{succ=Succ,reason=Reason,return_self=Return_self,attack_faction_id=Attack_faction_id,defence_faction_id=Defence_faction_id,role_name=Role_name,silver=Silver} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Attack_faction_id =:= undefined of
		true ->
				Attack_faction_idFinal = 0;
		false ->
			Attack_faction_idFinal = Attack_faction_id
	end,
	case Defence_faction_id =:= undefined of
		true ->
				Defence_faction_idFinal = 0;
		false ->
			Defence_faction_idFinal = Defence_faction_id
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = <<>>;
		false ->
			Role_nameFinal = Role_name
	end,
	case Silver =:= undefined of
		true ->
				SilverFinal = 0;
		false ->
			SilverFinal = Silver
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Return_selfFinal:8,Attack_faction_idFinal:32/signed,Defence_faction_idFinal:32/signed,Role_nameLen:16, Role_name2/binary,SilverFinal:32/signed>>;
encode_m_waroffaction_declare_toc(_) -> 
	<<>>.

decode_m_waroffaction_declare_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Return_selfTmp:8,Attack_faction_id:32/signed,Defence_faction_id:32/signed,Role_nameLen:16, Bin2/binary>> = Bin1,
	<<Role_name:Role_nameLen/binary,Silver:32/signed>> = Bin2,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_waroffaction_declare_toc, Succ,common_tool:to_list(Reason),Return_self,Attack_faction_id,Defence_faction_id,common_tool:to_list(Role_name),Silver};

decode_m_waroffaction_declare_toc(_) ->
	undefined.
encode_m_waroffaction_tower_destroyed_toc(Record) when is_record(Record, m_waroffaction_tower_destroyed_toc) ->
	#m_waroffaction_tower_destroyed_toc{attack_faction_id=Attack_faction_id,defence_faction_id=Defence_faction_id,attack_role_name=Attack_role_name} = Record,
	case Attack_faction_id =:= undefined of
		true ->
				Attack_faction_idFinal = undefined,
				exit({required_field_not_assigned, m_waroffaction_tower_destroyed_toc, attack_faction_id});
		false ->
			Attack_faction_idFinal = Attack_faction_id
	end,
	case Defence_faction_id =:= undefined of
		true ->
				Defence_faction_idFinal = undefined,
				exit({required_field_not_assigned, m_waroffaction_tower_destroyed_toc, defence_faction_id});
		false ->
			Defence_faction_idFinal = Defence_faction_id
	end,
	case Attack_role_name =:= undefined of
		true ->
				Attack_role_nameFinal = undefined,
				exit({required_field_not_assigned, m_waroffaction_tower_destroyed_toc, attack_role_name});
		false ->
			Attack_role_nameFinal = Attack_role_name
	end,
	Attack_role_name2 = common_tool:to_binary(Attack_role_nameFinal),
	Attack_role_nameLen = erlang:byte_size(Attack_role_name2),

	<<Attack_faction_idFinal:32/signed,Defence_faction_idFinal:32/signed,Attack_role_nameLen:16, Attack_role_name2/binary>>;
encode_m_waroffaction_tower_destroyed_toc(_) -> 
	<<>>.

decode_m_waroffaction_tower_destroyed_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Attack_faction_id:32/signed,Defence_faction_id:32/signed,Attack_role_nameLen:16, Bin1/binary>> = Bin0,
	<<Attack_role_name:Attack_role_nameLen/binary>> = Bin1,

	{m_waroffaction_tower_destroyed_toc, Attack_faction_id,Defence_faction_id,common_tool:to_list(Attack_role_name)};

decode_m_waroffaction_tower_destroyed_toc(_) ->
	undefined.
encode_m_waroffaction_general_killed_toc(Record) when is_record(Record, m_waroffaction_general_killed_toc) ->
	#m_waroffaction_general_killed_toc{attack_faction_id=Attack_faction_id,defence_faction_id=Defence_faction_id,attack_role_name=Attack_role_name} = Record,
	case Attack_faction_id =:= undefined of
		true ->
				Attack_faction_idFinal = undefined,
				exit({required_field_not_assigned, m_waroffaction_general_killed_toc, attack_faction_id});
		false ->
			Attack_faction_idFinal = Attack_faction_id
	end,
	case Defence_faction_id =:= undefined of
		true ->
				Defence_faction_idFinal = undefined,
				exit({required_field_not_assigned, m_waroffaction_general_killed_toc, defence_faction_id});
		false ->
			Defence_faction_idFinal = Defence_faction_id
	end,
	case Attack_role_name =:= undefined of
		true ->
				Attack_role_nameFinal = undefined,
				exit({required_field_not_assigned, m_waroffaction_general_killed_toc, attack_role_name});
		false ->
			Attack_role_nameFinal = Attack_role_name
	end,
	Attack_role_name2 = common_tool:to_binary(Attack_role_nameFinal),
	Attack_role_nameLen = erlang:byte_size(Attack_role_name2),

	<<Attack_faction_idFinal:32/signed,Defence_faction_idFinal:32/signed,Attack_role_nameLen:16, Attack_role_name2/binary>>;
encode_m_waroffaction_general_killed_toc(_) -> 
	<<>>.

decode_m_waroffaction_general_killed_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Attack_faction_id:32/signed,Defence_faction_id:32/signed,Attack_role_nameLen:16, Bin1/binary>> = Bin0,
	<<Attack_role_name:Attack_role_nameLen/binary>> = Bin1,

	{m_waroffaction_general_killed_toc, Attack_faction_id,Defence_faction_id,common_tool:to_list(Attack_role_name)};

decode_m_waroffaction_general_killed_toc(_) ->
	undefined.
encode_m_waroffaction_flag_destroyed_toc(Record) when is_record(Record, m_waroffaction_flag_destroyed_toc) ->
	#m_waroffaction_flag_destroyed_toc{attack_faction_id=Attack_faction_id,defence_faction_id=Defence_faction_id,attack_role_name=Attack_role_name} = Record,
	case Attack_faction_id =:= undefined of
		true ->
				Attack_faction_idFinal = undefined,
				exit({required_field_not_assigned, m_waroffaction_flag_destroyed_toc, attack_faction_id});
		false ->
			Attack_faction_idFinal = Attack_faction_id
	end,
	case Defence_faction_id =:= undefined of
		true ->
				Defence_faction_idFinal = undefined,
				exit({required_field_not_assigned, m_waroffaction_flag_destroyed_toc, defence_faction_id});
		false ->
			Defence_faction_idFinal = Defence_faction_id
	end,
	case Attack_role_name =:= undefined of
		true ->
				Attack_role_nameFinal = undefined,
				exit({required_field_not_assigned, m_waroffaction_flag_destroyed_toc, attack_role_name});
		false ->
			Attack_role_nameFinal = Attack_role_name
	end,
	Attack_role_name2 = common_tool:to_binary(Attack_role_nameFinal),
	Attack_role_nameLen = erlang:byte_size(Attack_role_name2),

	<<Attack_faction_idFinal:32/signed,Defence_faction_idFinal:32/signed,Attack_role_nameLen:16, Attack_role_name2/binary>>;
encode_m_waroffaction_flag_destroyed_toc(_) -> 
	<<>>.

decode_m_waroffaction_flag_destroyed_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Attack_faction_id:32/signed,Defence_faction_id:32/signed,Attack_role_nameLen:16, Bin1/binary>> = Bin0,
	<<Attack_role_name:Attack_role_nameLen/binary>> = Bin1,

	{m_waroffaction_flag_destroyed_toc, Attack_faction_id,Defence_faction_id,common_tool:to_list(Attack_role_name)};

decode_m_waroffaction_flag_destroyed_toc(_) ->
	undefined.
encode_m_waroffaction_collect_toc(Record) when is_record(Record, m_waroffaction_collect_toc) ->
	#m_waroffaction_collect_toc{} = Record,

	<<>>;
encode_m_waroffaction_collect_toc(_) -> 
	<<>>.

decode_m_waroffaction_collect_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_waroffaction_collect_toc};

decode_m_waroffaction_collect_toc(_) ->
	undefined.
encode_m_waroffaction_agree_collect_tos(Record) when is_record(Record, m_waroffaction_agree_collect_tos) ->
	#m_waroffaction_agree_collect_tos{} = Record,

	<<>>;
encode_m_waroffaction_agree_collect_tos(_) -> 
	<<>>.

decode_m_waroffaction_agree_collect_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_waroffaction_agree_collect_tos};

decode_m_waroffaction_agree_collect_tos(_) ->
	undefined.
encode_m_waroffaction_status_tos(Record) when is_record(Record, m_waroffaction_status_tos) ->
	#m_waroffaction_status_tos{} = Record,

	<<>>;
encode_m_waroffaction_status_tos(_) -> 
	<<>>.

decode_m_waroffaction_status_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_waroffaction_status_tos};

decode_m_waroffaction_status_tos(_) ->
	undefined.
encode_m_waroffaction_status_toc(Record) when is_record(Record, m_waroffaction_status_toc) ->
	#m_waroffaction_status_toc{succ=Succ,reason=Reason,type=Type,towner_destroyed=Towner_destroyed,general_killed=General_killed,flag_destroyed=Flag_destroyed} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Type =:= undefined of
		true ->
				TypeFinal = 0;
		false ->
			TypeFinal = Type
	end,
	case Towner_destroyed =:= undefined of
		true ->
				Towner_destroyedFinal = 1;
		false ->
			case Towner_destroyed of
				true ->
					Towner_destroyedFinal = 1;
				false ->
					Towner_destroyedFinal = 0
			end
	end,
	case General_killed =:= undefined of
		true ->
				General_killedFinal = 1;
		false ->
			case General_killed of
				true ->
					General_killedFinal = 1;
				false ->
					General_killedFinal = 0
			end
	end,
	case Flag_destroyed =:= undefined of
		true ->
				Flag_destroyedFinal = 1;
		false ->
			case Flag_destroyed of
				true ->
					Flag_destroyedFinal = 1;
				false ->
					Flag_destroyedFinal = 0
			end
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,TypeFinal:32/signed,Towner_destroyedFinal:8,General_killedFinal:8,Flag_destroyedFinal:8>>;
encode_m_waroffaction_status_toc(_) -> 
	<<>>.

decode_m_waroffaction_status_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Type:32/signed,Towner_destroyedTmp:8,General_killedTmp:8,Flag_destroyedTmp:8>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Towner_destroyedTmp of 
	1 -> 
		Towner_destroyed = true;
	_ ->
		Towner_destroyed = false
end,
case General_killedTmp of 
	1 -> 
		General_killed = true;
	_ ->
		General_killed = false
end,
case Flag_destroyedTmp of 
	1 -> 
		Flag_destroyed = true;
	_ ->
		Flag_destroyed = false
end,

	{m_waroffaction_status_toc, Succ,common_tool:to_list(Reason),Type,Towner_destroyed,General_killed,Flag_destroyed};

decode_m_waroffaction_status_toc(_) ->
	undefined.
encode_m_waroffaction_warinfo_tos(Record) when is_record(Record, m_waroffaction_warinfo_tos) ->
	#m_waroffaction_warinfo_tos{faction_id=Faction_id} = Record,
	case Faction_id =:= undefined of
		true ->
				Faction_idFinal = undefined,
				exit({required_field_not_assigned, m_waroffaction_warinfo_tos, faction_id});
		false ->
			Faction_idFinal = Faction_id
	end,

	<<Faction_idFinal:32/signed>>;
encode_m_waroffaction_warinfo_tos(_) -> 
	<<>>.

decode_m_waroffaction_warinfo_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Faction_id:32/signed>> = Bin0,

	{m_waroffaction_warinfo_tos, Faction_id};

decode_m_waroffaction_warinfo_tos(_) ->
	undefined.
encode_m_waroffaction_warinfo_toc(Record) when is_record(Record, m_waroffaction_warinfo_toc) ->
	#m_waroffaction_warinfo_toc{faction_id=Faction_id,dest_faction_id=Dest_faction_id,next_war_tick=Next_war_tick,is_attack_faction=Is_attack_faction,declare_war1=Declare_war1,declare_war2=Declare_war2,silver=Silver,max_guarder_level=Max_guarder_level,left_guarder_level=Left_guarder_level,right_guarder_level=Right_guarder_level,road_block=Road_block} = Record,
	case Faction_id =:= undefined of
		true ->
				Faction_idFinal = undefined,
				exit({required_field_not_assigned, m_waroffaction_warinfo_toc, faction_id});
		false ->
			Faction_idFinal = Faction_id
	end,
	case Dest_faction_id =:= undefined of
		true ->
				Dest_faction_idFinal = 0;
		false ->
			Dest_faction_idFinal = Dest_faction_id
	end,
	case Next_war_tick =:= undefined of
		true ->
				Next_war_tickFinal = 0;
		false ->
			Next_war_tickFinal = Next_war_tick
	end,
	case Is_attack_faction =:= undefined of
		true ->
				Is_attack_factionFinal = 1;
		false ->
			case Is_attack_faction of
				true ->
					Is_attack_factionFinal = 1;
				false ->
					Is_attack_factionFinal = 0
			end
	end,
	case Declare_war1 =:= undefined of
		true ->
				Declare_war1Final = undefined,
				exit({required_field_not_assigned, m_waroffaction_warinfo_toc, declare_war1});
		false ->
		case Declare_war1 of
			true ->
				Declare_war1Final = 1;
			false ->
				Declare_war1Final = 0
		end
	end,
	case Declare_war2 =:= undefined of
		true ->
				Declare_war2Final = undefined,
				exit({required_field_not_assigned, m_waroffaction_warinfo_toc, declare_war2});
		false ->
		case Declare_war2 of
			true ->
				Declare_war2Final = 1;
			false ->
				Declare_war2Final = 0
		end
	end,
	case Silver =:= undefined of
		true ->
				SilverFinal = undefined,
				exit({required_field_not_assigned, m_waroffaction_warinfo_toc, silver});
		false ->
			SilverFinal = Silver
	end,
	case Max_guarder_level =:= undefined of
		true ->
				Max_guarder_levelFinal = undefined,
				exit({required_field_not_assigned, m_waroffaction_warinfo_toc, max_guarder_level});
		false ->
			Max_guarder_levelFinal = Max_guarder_level
	end,
	case Left_guarder_level =:= undefined of
		true ->
				Left_guarder_levelFinal = 0;
		false ->
			Left_guarder_levelFinal = Left_guarder_level
	end,
	case Right_guarder_level =:= undefined of
		true ->
				Right_guarder_levelFinal = 0;
		false ->
			Right_guarder_levelFinal = Right_guarder_level
	end,
	case Road_block =:= undefined of
		true ->
				Road_blockFinal = 0;
		false ->
			Road_blockFinal = Road_block
	end,

	<<Faction_idFinal:32/signed,Dest_faction_idFinal:32/signed,Next_war_tickFinal:32/signed,Is_attack_factionFinal:8,Declare_war1Final:8,Declare_war2Final:8,SilverFinal:32/signed,Max_guarder_levelFinal:32/signed,Left_guarder_levelFinal:32/signed,Right_guarder_levelFinal:32/signed,Road_blockFinal:32/signed>>;
encode_m_waroffaction_warinfo_toc(_) -> 
	<<>>.

decode_m_waroffaction_warinfo_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Faction_id:32/signed,Dest_faction_id:32/signed,Next_war_tick:32/signed,Is_attack_factionTmp:8,Declare_war1Tmp:8,Declare_war2Tmp:8,Silver:32/signed,Max_guarder_level:32/signed,Left_guarder_level:32/signed,Right_guarder_level:32/signed,Road_block:32/signed>> = Bin0,
case Is_attack_factionTmp of 
	1 -> 
		Is_attack_faction = true;
	_ ->
		Is_attack_faction = false
end,
case Declare_war1Tmp of 
	1 -> 
		Declare_war1 = true;
	_ ->
		Declare_war1 = false
end,
case Declare_war2Tmp of 
	1 -> 
		Declare_war2 = true;
	_ ->
		Declare_war2 = false
end,

	{m_waroffaction_warinfo_toc, Faction_id,Dest_faction_id,Next_war_tick,Is_attack_faction,Declare_war1,Declare_war2,Silver,Max_guarder_level,Left_guarder_level,Right_guarder_level,Road_block};

decode_m_waroffaction_warinfo_toc(_) ->
	undefined.
encode_m_waroffaction_record_tos(Record) when is_record(Record, m_waroffaction_record_tos) ->
	#m_waroffaction_record_tos{} = Record,

	<<>>;
encode_m_waroffaction_record_tos(_) -> 
	<<>>.

decode_m_waroffaction_record_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_waroffaction_record_tos};

decode_m_waroffaction_record_tos(_) ->
	undefined.
encode_m_waroffaction_record_toc(Record) when is_record(Record, m_waroffaction_record_toc) ->
	#m_waroffaction_record_toc{records=Records} = Record,
	case Records =:= undefined of
		true ->
			RecordsFinal = [];
		false ->
			RecordsFinal = Records
	end,
	Records_bin = encode_p_waroffaction_records(RecordsFinal, <<>>),
	SizeRecordsFinal = erlang:length(RecordsFinal),
	BinLen_records = erlang:byte_size(Records_bin),

	<<SizeRecordsFinal:16, BinLen_records:32, Records_bin/binary>>;
encode_m_waroffaction_record_toc(_) -> 
	<<>>.

decode_m_waroffaction_record_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizerecords:16, _BinLenrecords:32, SubBinrecords/binary>> = Bin0,
	Records = lists:reverse(decode_p_waroffaction_records(SubBinrecords, [])),

	{m_waroffaction_record_toc, Records};

decode_m_waroffaction_record_toc(_) ->
	undefined.
encode_m_waroffaction_buy_guarder_tos(Record) when is_record(Record, m_waroffaction_buy_guarder_tos) ->
	#m_waroffaction_buy_guarder_tos{guarder_type=Guarder_type} = Record,
	case Guarder_type =:= undefined of
		true ->
				Guarder_typeFinal = 0;
		false ->
			Guarder_typeFinal = Guarder_type
	end,

	<<Guarder_typeFinal:32/signed>>;
encode_m_waroffaction_buy_guarder_tos(_) -> 
	<<>>.

decode_m_waroffaction_buy_guarder_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Guarder_type:32/signed>> = Bin0,

	{m_waroffaction_buy_guarder_tos, Guarder_type};

decode_m_waroffaction_buy_guarder_tos(_) ->
	undefined.
encode_m_waroffaction_buy_guarder_toc(Record) when is_record(Record, m_waroffaction_buy_guarder_toc) ->
	#m_waroffaction_buy_guarder_toc{succ=Succ,guarder_type=Guarder_type,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_waroffaction_buy_guarder_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Guarder_type =:= undefined of
		true ->
				Guarder_typeFinal = undefined,
				exit({required_field_not_assigned, m_waroffaction_buy_guarder_toc, guarder_type});
		false ->
			Guarder_typeFinal = Guarder_type
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,Guarder_typeFinal:32/signed,ReasonLen:16, Reason2/binary>>;
encode_m_waroffaction_buy_guarder_toc(_) -> 
	<<>>.

decode_m_waroffaction_buy_guarder_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,Guarder_type:32/signed,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_waroffaction_buy_guarder_toc, Succ,Guarder_type,common_tool:to_list(Reason)};

decode_m_waroffaction_buy_guarder_toc(_) ->
	undefined.
encode_m_waroffaction_convene_tos(Record) when is_record(Record, m_waroffaction_convene_tos) ->
	#m_waroffaction_convene_tos{convene_type=Convene_type} = Record,
	case Convene_type =:= undefined of
		true ->
				Convene_typeFinal = 0;
		false ->
			Convene_typeFinal = Convene_type
	end,

	<<Convene_typeFinal:32/signed>>;
encode_m_waroffaction_convene_tos(_) -> 
	<<>>.

decode_m_waroffaction_convene_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Convene_type:32/signed>> = Bin0,

	{m_waroffaction_convene_tos, Convene_type};

decode_m_waroffaction_convene_tos(_) ->
	undefined.
encode_m_waroffaction_convene_toc(Record) when is_record(Record, m_waroffaction_convene_toc) ->
	#m_waroffaction_convene_toc{is_self=Is_self,succ=Succ,reason=Reason,convene_id=Convene_id,convene_role_name=Convene_role_name,convene_title=Convene_title,faction_id=Faction_id,convene_type=Convene_type} = Record,
	case Is_self =:= undefined of
		true ->
				Is_selfFinal = undefined,
				exit({required_field_not_assigned, m_waroffaction_convene_toc, is_self});
		false ->
		case Is_self of
			true ->
				Is_selfFinal = 1;
			false ->
				Is_selfFinal = 0
		end
	end,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
			case Succ of
				true ->
					SuccFinal = 1;
				false ->
					SuccFinal = 0
			end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Convene_id =:= undefined of
		true ->
				Convene_idFinal = 0;
		false ->
			Convene_idFinal = Convene_id
	end,
	case Convene_role_name =:= undefined of
		true ->
				Convene_role_nameFinal = <<>>;
		false ->
			Convene_role_nameFinal = Convene_role_name
	end,
	case Convene_title =:= undefined of
		true ->
				Convene_titleFinal = <<>>;
		false ->
			Convene_titleFinal = Convene_title
	end,
	case Faction_id =:= undefined of
		true ->
				Faction_idFinal = 0;
		false ->
			Faction_idFinal = Faction_id
	end,
	case Convene_type =:= undefined of
		true ->
				Convene_typeFinal = 0;
		false ->
			Convene_typeFinal = Convene_type
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Convene_role_name2 = common_tool:to_binary(Convene_role_nameFinal),
	Convene_role_nameLen = erlang:byte_size(Convene_role_name2),
	Convene_title2 = common_tool:to_binary(Convene_titleFinal),
	Convene_titleLen = erlang:byte_size(Convene_title2),

	<<Is_selfFinal:8,SuccFinal:8,ReasonLen:16, Reason2/binary,Convene_idFinal:32/signed,Convene_role_nameLen:16, Convene_role_name2/binary,Convene_titleLen:16, Convene_title2/binary,Faction_idFinal:32/signed,Convene_typeFinal:32/signed>>;
encode_m_waroffaction_convene_toc(_) -> 
	<<>>.

decode_m_waroffaction_convene_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Is_selfTmp:8,SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Convene_id:32/signed,Convene_role_nameLen:16, Bin2/binary>> = Bin1,
	<<Convene_role_name:Convene_role_nameLen/binary,Convene_titleLen:16, Bin3/binary>> = Bin2,
	<<Convene_title:Convene_titleLen/binary,Faction_id:32/signed,Convene_type:32/signed>> = Bin3,
case Is_selfTmp of 
	1 -> 
		Is_self = true;
	_ ->
		Is_self = false
end,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_waroffaction_convene_toc, Is_self,Succ,common_tool:to_list(Reason),Convene_id,common_tool:to_list(Convene_role_name),common_tool:to_list(Convene_title),Faction_id,Convene_type};

decode_m_waroffaction_convene_toc(_) ->
	undefined.
encode_m_waroffaction_transfer_tos(Record) when is_record(Record, m_waroffaction_transfer_tos) ->
	#m_waroffaction_transfer_tos{convene_id=Convene_id,faction_id=Faction_id,type=Type} = Record,
	case Convene_id =:= undefined of
		true ->
				Convene_idFinal = undefined,
				exit({required_field_not_assigned, m_waroffaction_transfer_tos, convene_id});
		false ->
			Convene_idFinal = Convene_id
	end,
	case Faction_id =:= undefined of
		true ->
				Faction_idFinal = 0;
		false ->
			Faction_idFinal = Faction_id
	end,
	case Type =:= undefined of
		true ->
				TypeFinal = 0;
		false ->
			TypeFinal = Type
	end,

	<<Convene_idFinal:32/signed,Faction_idFinal:32/signed,TypeFinal:32/signed>>;
encode_m_waroffaction_transfer_tos(_) -> 
	<<>>.

decode_m_waroffaction_transfer_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Convene_id:32/signed,Faction_id:32/signed,Type:32/signed>> = Bin0,

	{m_waroffaction_transfer_tos, Convene_id,Faction_id,Type};

decode_m_waroffaction_transfer_tos(_) ->
	undefined.
encode_m_waroffaction_transfer_toc(Record) when is_record(Record, m_waroffaction_transfer_toc) ->
	#m_waroffaction_transfer_toc{succ=Succ,map_id=Map_id,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_waroffaction_transfer_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Map_id =:= undefined of
		true ->
				Map_idFinal = 0;
		false ->
			Map_idFinal = Map_id
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,Map_idFinal:32/signed,ReasonLen:16, Reason2/binary>>;
encode_m_waroffaction_transfer_toc(_) -> 
	<<>>.

decode_m_waroffaction_transfer_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,Map_id:32/signed,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_waroffaction_transfer_toc, Succ,Map_id,common_tool:to_list(Reason)};

decode_m_waroffaction_transfer_toc(_) ->
	undefined.
encode_m_waroffaction_count_down_toc(Record) when is_record(Record, m_waroffaction_count_down_toc) ->
	#m_waroffaction_count_down_toc{attack_faction_id=Attack_faction_id,defence_faction_id=Defence_faction_id,type=Type,tick=Tick,current_target=Current_target} = Record,
	case Attack_faction_id =:= undefined of
		true ->
				Attack_faction_idFinal = 0;
		false ->
			Attack_faction_idFinal = Attack_faction_id
	end,
	case Defence_faction_id =:= undefined of
		true ->
				Defence_faction_idFinal = 0;
		false ->
			Defence_faction_idFinal = Defence_faction_id
	end,
	case Type =:= undefined of
		true ->
				TypeFinal = undefined,
				exit({required_field_not_assigned, m_waroffaction_count_down_toc, type});
		false ->
			TypeFinal = Type
	end,
	case Tick =:= undefined of
		true ->
				TickFinal = 0;
		false ->
			TickFinal = Tick
	end,
	case Current_target =:= undefined of
		true ->
				Current_targetFinal = <<>>;
		false ->
			Current_targetFinal = Current_target
	end,
	Current_target2 = common_tool:to_binary(Current_targetFinal),
	Current_targetLen = erlang:byte_size(Current_target2),

	<<Attack_faction_idFinal:32/signed,Defence_faction_idFinal:32/signed,TypeFinal:32/signed,TickFinal:32/signed,Current_targetLen:16, Current_target2/binary>>;
encode_m_waroffaction_count_down_toc(_) -> 
	<<>>.

decode_m_waroffaction_count_down_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Attack_faction_id:32/signed,Defence_faction_id:32/signed,Type:32/signed,Tick:32/signed,Current_targetLen:16, Bin1/binary>> = Bin0,
	<<Current_target:Current_targetLen/binary>> = Bin1,

	{m_waroffaction_count_down_toc, Attack_faction_id,Defence_faction_id,Type,Tick,common_tool:to_list(Current_target)};

decode_m_waroffaction_count_down_toc(_) ->
	undefined.
encode_m_waroffaction_rank_tos(Record) when is_record(Record, m_waroffaction_rank_tos) ->
	#m_waroffaction_rank_tos{} = Record,

	<<>>;
encode_m_waroffaction_rank_tos(_) -> 
	<<>>.

decode_m_waroffaction_rank_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_waroffaction_rank_tos};

decode_m_waroffaction_rank_tos(_) ->
	undefined.
encode_m_waroffaction_rank_toc(Record) when is_record(Record, m_waroffaction_rank_toc) ->
	#m_waroffaction_rank_toc{succ=Succ,reason=Reason,self_score=Self_score,attack_faction_ranks=Attack_faction_ranks,attack_faction_id=Attack_faction_id,defence_faction_ranks=Defence_faction_ranks,defence_faction_id=Defence_faction_id} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_waroffaction_rank_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Self_score =:= undefined of
		true ->
				Self_scoreFinal = 0;
		false ->
			Self_scoreFinal = Self_score
	end,
	case Attack_faction_ranks =:= undefined of
		true ->
			Attack_faction_ranksFinal = [];
		false ->
			Attack_faction_ranksFinal = Attack_faction_ranks
	end,
	case Attack_faction_id =:= undefined of
		true ->
				Attack_faction_idFinal = 0;
		false ->
			Attack_faction_idFinal = Attack_faction_id
	end,
	case Defence_faction_ranks =:= undefined of
		true ->
			Defence_faction_ranksFinal = [];
		false ->
			Defence_faction_ranksFinal = Defence_faction_ranks
	end,
	case Defence_faction_id =:= undefined of
		true ->
				Defence_faction_idFinal = 0;
		false ->
			Defence_faction_idFinal = Defence_faction_id
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Attack_faction_ranks_bin = encode_p_waroffaction_ranks(Attack_faction_ranksFinal, <<>>),
	SizeAttack_faction_ranksFinal = erlang:length(Attack_faction_ranksFinal),
	BinLen_attack_faction_ranks = erlang:byte_size(Attack_faction_ranks_bin),
	Defence_faction_ranks_bin = encode_p_waroffaction_ranks(Defence_faction_ranksFinal, <<>>),
	SizeDefence_faction_ranksFinal = erlang:length(Defence_faction_ranksFinal),
	BinLen_defence_faction_ranks = erlang:byte_size(Defence_faction_ranks_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Self_scoreFinal:32/signed,SizeAttack_faction_ranksFinal:16, BinLen_attack_faction_ranks:32, Attack_faction_ranks_bin/binary,Attack_faction_idFinal:32/signed,SizeDefence_faction_ranksFinal:16, BinLen_defence_faction_ranks:32, Defence_faction_ranks_bin/binary,Defence_faction_idFinal:32/signed>>;
encode_m_waroffaction_rank_toc(_) -> 
	<<>>.

decode_m_waroffaction_rank_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Self_score:32/signed,_Sizeattack_faction_ranks:16, BinLenattack_faction_ranks:32, Bin2/binary>> = Bin1,
	<<SubBinattack_faction_ranks:BinLenattack_faction_ranks/binary, Bin3/binary>> = Bin2, 
	Attack_faction_ranks = lists:reverse(decode_p_waroffaction_ranks(SubBinattack_faction_ranks, [])),
	<<Attack_faction_id:32/signed,_Sizedefence_faction_ranks:16, BinLendefence_faction_ranks:32, Bin4/binary>> = Bin3,
	<<SubBindefence_faction_ranks:BinLendefence_faction_ranks/binary, Bin5/binary>> = Bin4, 
	Defence_faction_ranks = lists:reverse(decode_p_waroffaction_ranks(SubBindefence_faction_ranks, [])),
	<<Defence_faction_id:32/signed>> = Bin5,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_waroffaction_rank_toc, Succ,common_tool:to_list(Reason),Self_score,Attack_faction_ranks,Attack_faction_id,Defence_faction_ranks,Defence_faction_id};

decode_m_waroffaction_rank_toc(_) ->
	undefined.
encode_m_trainingcamp_exchange_tos(Record) when is_record(Record, m_trainingcamp_exchange_tos) ->
	#m_trainingcamp_exchange_tos{training_point=Training_point} = Record,
	case Training_point =:= undefined of
		true ->
				Training_pointFinal = undefined,
				exit({required_field_not_assigned, m_trainingcamp_exchange_tos, training_point});
		false ->
			Training_pointFinal = Training_point
	end,

	<<Training_pointFinal:32/signed>>;
encode_m_trainingcamp_exchange_tos(_) -> 
	<<>>.

decode_m_trainingcamp_exchange_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Training_point:32/signed>> = Bin0,

	{m_trainingcamp_exchange_tos, Training_point};

decode_m_trainingcamp_exchange_tos(_) ->
	undefined.
encode_m_trainingcamp_exchange_toc(Record) when is_record(Record, m_trainingcamp_exchange_toc) ->
	#m_trainingcamp_exchange_toc{succ=Succ,gold=Gold,gold_bind=Gold_bind,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Gold =:= undefined of
		true ->
				GoldFinal = 0;
		false ->
			GoldFinal = Gold
	end,
	case Gold_bind =:= undefined of
		true ->
				Gold_bindFinal = 0;
		false ->
			Gold_bindFinal = Gold_bind
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,GoldFinal:32/signed,Gold_bindFinal:32/signed,ReasonLen:16, Reason2/binary>>;
encode_m_trainingcamp_exchange_toc(_) -> 
	<<>>.

decode_m_trainingcamp_exchange_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,Gold:32/signed,Gold_bind:32/signed,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_trainingcamp_exchange_toc, Succ,Gold,Gold_bind,common_tool:to_list(Reason)};

decode_m_trainingcamp_exchange_toc(_) ->
	undefined.
encode_m_trainingcamp_start_tos(Record) when is_record(Record, m_trainingcamp_start_tos) ->
	#m_trainingcamp_start_tos{time=Time} = Record,
	case Time =:= undefined of
		true ->
				TimeFinal = undefined,
				exit({required_field_not_assigned, m_trainingcamp_start_tos, time});
		false ->
			TimeFinal = Time
	end,

	<<TimeFinal:32/signed>>;
encode_m_trainingcamp_start_tos(_) -> 
	<<>>.

decode_m_trainingcamp_start_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Time:32/signed>> = Bin0,

	{m_trainingcamp_start_tos, Time};

decode_m_trainingcamp_start_tos(_) ->
	undefined.
encode_m_trainingcamp_start_toc(Record) when is_record(Record, m_trainingcamp_start_toc) ->
	#m_trainingcamp_start_toc{succ=Succ,reason=Reason,last_time=Last_time} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Last_time =:= undefined of
		true ->
				Last_timeFinal = 0;
		false ->
			Last_timeFinal = Last_time
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Last_timeFinal:32/signed>>;
encode_m_trainingcamp_start_toc(_) -> 
	<<>>.

decode_m_trainingcamp_start_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Last_time:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_trainingcamp_start_toc, Succ,common_tool:to_list(Reason),Last_time};

decode_m_trainingcamp_start_toc(_) ->
	undefined.
encode_m_trainingcamp_stop_tos(Record) when is_record(Record, m_trainingcamp_stop_tos) ->
	#m_trainingcamp_stop_tos{} = Record,

	<<>>;
encode_m_trainingcamp_stop_tos(_) -> 
	<<>>.

decode_m_trainingcamp_stop_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_trainingcamp_stop_tos};

decode_m_trainingcamp_stop_tos(_) ->
	undefined.
encode_m_trainingcamp_stop_toc(Record) when is_record(Record, m_trainingcamp_stop_toc) ->
	#m_trainingcamp_stop_toc{succ=Succ,training_point=Training_point,exp_get=Exp_get,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Training_point =:= undefined of
		true ->
				Training_pointFinal = 0;
		false ->
			Training_pointFinal = Training_point
	end,
	case Exp_get =:= undefined of
		true ->
				Exp_getFinal = 0;
		false ->
			Exp_getFinal = Exp_get
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,Training_pointFinal:32/signed,Exp_getFinal:32/signed,ReasonLen:16, Reason2/binary>>;
encode_m_trainingcamp_stop_toc(_) -> 
	<<>>.

decode_m_trainingcamp_stop_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,Training_point:32/signed,Exp_get:32/signed,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_trainingcamp_stop_toc, Succ,Training_point,Exp_get,common_tool:to_list(Reason)};

decode_m_trainingcamp_stop_toc(_) ->
	undefined.
encode_m_trainingcamp_state_tos(Record) when is_record(Record, m_trainingcamp_state_tos) ->
	#m_trainingcamp_state_tos{} = Record,

	<<>>;
encode_m_trainingcamp_state_tos(_) -> 
	<<>>.

decode_m_trainingcamp_state_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_trainingcamp_state_tos};

decode_m_trainingcamp_state_tos(_) ->
	undefined.
encode_m_trainingcamp_state_toc(Record) when is_record(Record, m_trainingcamp_state_toc) ->
	#m_trainingcamp_state_toc{succ=Succ,time_total=Time_total,time_expire=Time_expire,level_up=Level_up,training_point=Training_point,exp_get=Exp_get,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Time_total =:= undefined of
		true ->
				Time_totalFinal = 0;
		false ->
			Time_totalFinal = Time_total
	end,
	case Time_expire =:= undefined of
		true ->
				Time_expireFinal = 0;
		false ->
			Time_expireFinal = Time_expire
	end,
	case Level_up =:= undefined of
		true ->
				Level_upFinal = 0;
		false ->
			Level_upFinal = Level_up
	end,
	case Training_point =:= undefined of
		true ->
				Training_pointFinal = 0;
		false ->
			Training_pointFinal = Training_point
	end,
	case Exp_get =:= undefined of
		true ->
				Exp_getFinal = 0;
		false ->
			Exp_getFinal = Exp_get
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,Time_totalFinal:32/signed,Time_expireFinal:32/signed,Level_upFinal:32/signed,Training_pointFinal:32/signed,Exp_getFinal:32/signed,ReasonLen:16, Reason2/binary>>;
encode_m_trainingcamp_state_toc(_) -> 
	<<>>.

decode_m_trainingcamp_state_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,Time_total:32/signed,Time_expire:32/signed,Level_up:32/signed,Training_point:32/signed,Exp_get:32/signed,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_trainingcamp_state_toc, Succ,Time_total,Time_expire,Level_up,Training_point,Exp_get,common_tool:to_list(Reason)};

decode_m_trainingcamp_state_toc(_) ->
	undefined.
encode_m_trainingcamp_remain_point_tos(Record) when is_record(Record, m_trainingcamp_remain_point_tos) ->
	#m_trainingcamp_remain_point_tos{} = Record,

	<<>>;
encode_m_trainingcamp_remain_point_tos(_) -> 
	<<>>.

decode_m_trainingcamp_remain_point_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_trainingcamp_remain_point_tos};

decode_m_trainingcamp_remain_point_tos(_) ->
	undefined.
encode_m_trainingcamp_remain_point_toc(Record) when is_record(Record, m_trainingcamp_remain_point_toc) ->
	#m_trainingcamp_remain_point_toc{succ=Succ,training_point=Training_point,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Training_point =:= undefined of
		true ->
				Training_pointFinal = 0;
		false ->
			Training_pointFinal = Training_point
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,Training_pointFinal:32/signed,ReasonLen:16, Reason2/binary>>;
encode_m_trainingcamp_remain_point_toc(_) -> 
	<<>>.

decode_m_trainingcamp_remain_point_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,Training_point:32/signed,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_trainingcamp_remain_point_toc, Succ,Training_point,common_tool:to_list(Reason)};

decode_m_trainingcamp_remain_point_toc(_) ->
	undefined.
encode_m_warofcity_apply_tos(Record) when is_record(Record, m_warofcity_apply_tos) ->
	#m_warofcity_apply_tos{} = Record,

	<<>>;
encode_m_warofcity_apply_tos(_) -> 
	<<>>.

decode_m_warofcity_apply_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_warofcity_apply_tos};

decode_m_warofcity_apply_tos(_) ->
	undefined.
encode_m_warofcity_apply_toc(Record) when is_record(Record, m_warofcity_apply_toc) ->
	#m_warofcity_apply_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_warofcity_apply_toc(_) -> 
	<<>>.

decode_m_warofcity_apply_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_warofcity_apply_toc, Succ,common_tool:to_list(Reason)};

decode_m_warofcity_apply_toc(_) ->
	undefined.
encode_m_warofcity_collect_toc(Record) when is_record(Record, m_warofcity_collect_toc) ->
	#m_warofcity_collect_toc{map_id=Map_id} = Record,
	case Map_id =:= undefined of
		true ->
				Map_idFinal = undefined,
				exit({required_field_not_assigned, m_warofcity_collect_toc, map_id});
		false ->
			Map_idFinal = Map_id
	end,

	<<Map_idFinal:32/signed>>;
encode_m_warofcity_collect_toc(_) -> 
	<<>>.

decode_m_warofcity_collect_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Map_id:32/signed>> = Bin0,

	{m_warofcity_collect_toc, Map_id};

decode_m_warofcity_collect_toc(_) ->
	undefined.
encode_m_warofcity_agree_enter_tos(Record) when is_record(Record, m_warofcity_agree_enter_tos) ->
	#m_warofcity_agree_enter_tos{} = Record,

	<<>>;
encode_m_warofcity_agree_enter_tos(_) -> 
	<<>>.

decode_m_warofcity_agree_enter_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_warofcity_agree_enter_tos};

decode_m_warofcity_agree_enter_tos(_) ->
	undefined.
encode_m_warofcity_agree_enter_toc(Record) when is_record(Record, m_warofcity_agree_enter_toc) ->
	#m_warofcity_agree_enter_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_warofcity_agree_enter_toc(_) -> 
	<<>>.

decode_m_warofcity_agree_enter_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_warofcity_agree_enter_toc, Succ,common_tool:to_list(Reason)};

decode_m_warofcity_agree_enter_toc(_) ->
	undefined.
encode_p_warofcity_family_mark(Record) when is_record(Record, p_warofcity_family_mark) ->
	#p_warofcity_family_mark{family_id=Family_id,family_name=Family_name,marks=Marks} = Record,
	case Family_id =:= undefined of
		true ->
				Family_idFinal = undefined,
				exit({required_field_not_assigned, p_warofcity_family_mark, family_id});
		false ->
			Family_idFinal = Family_id
	end,
	case Family_name =:= undefined of
		true ->
				Family_nameFinal = undefined,
				exit({required_field_not_assigned, p_warofcity_family_mark, family_name});
		false ->
			Family_nameFinal = Family_name
	end,
	case Marks =:= undefined of
		true ->
				MarksFinal = undefined,
				exit({required_field_not_assigned, p_warofcity_family_mark, marks});
		false ->
			MarksFinal = Marks
	end,
	Family_name2 = common_tool:to_binary(Family_nameFinal),
	Family_nameLen = erlang:byte_size(Family_name2),

	<<Family_idFinal:32/signed,Family_nameLen:16, Family_name2/binary,MarksFinal:32/signed>>;
encode_p_warofcity_family_mark(_) -> 
	<<>>.

decode_p_warofcity_family_mark(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Family_id:32/signed,Family_nameLen:16, Bin1/binary>> = Bin0,
	<<Family_name:Family_nameLen/binary,Marks:32/signed>> = Bin1,

	{p_warofcity_family_mark, Family_id,common_tool:to_list(Family_name),Marks};

decode_p_warofcity_family_mark(_) ->
	undefined.
encode_p_warofcity_role_mark(Record) when is_record(Record, p_warofcity_role_mark) ->
	#p_warofcity_role_mark{role_id=Role_id,role_name=Role_name,family_id=Family_id,family_name=Family_name,marks=Marks} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, p_warofcity_role_mark, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = undefined,
				exit({required_field_not_assigned, p_warofcity_role_mark, role_name});
		false ->
			Role_nameFinal = Role_name
	end,
	case Family_id =:= undefined of
		true ->
				Family_idFinal = undefined,
				exit({required_field_not_assigned, p_warofcity_role_mark, family_id});
		false ->
			Family_idFinal = Family_id
	end,
	case Family_name =:= undefined of
		true ->
				Family_nameFinal = undefined,
				exit({required_field_not_assigned, p_warofcity_role_mark, family_name});
		false ->
			Family_nameFinal = Family_name
	end,
	case Marks =:= undefined of
		true ->
				MarksFinal = undefined,
				exit({required_field_not_assigned, p_warofcity_role_mark, marks});
		false ->
			MarksFinal = Marks
	end,
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),
	Family_name2 = common_tool:to_binary(Family_nameFinal),
	Family_nameLen = erlang:byte_size(Family_name2),

	<<Role_idFinal:32/signed,Role_nameLen:16, Role_name2/binary,Family_idFinal:32/signed,Family_nameLen:16, Family_name2/binary,MarksFinal:32/signed>>;
encode_p_warofcity_role_mark(_) -> 
	<<>>.

decode_p_warofcity_role_mark(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,Role_nameLen:16, Bin1/binary>> = Bin0,
	<<Role_name:Role_nameLen/binary,Family_id:32/signed,Family_nameLen:16, Bin2/binary>> = Bin1,
	<<Family_name:Family_nameLen/binary,Marks:32/signed>> = Bin2,

	{p_warofcity_role_mark, Role_id,common_tool:to_list(Role_name),Family_id,common_tool:to_list(Family_name),Marks};

decode_p_warofcity_role_mark(_) ->
	undefined.
encode_m_warofcity_get_mark_tos(Record) when is_record(Record, m_warofcity_get_mark_tos) ->
	#m_warofcity_get_mark_tos{} = Record,

	<<>>;
encode_m_warofcity_get_mark_tos(_) -> 
	<<>>.

decode_m_warofcity_get_mark_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_warofcity_get_mark_tos};

decode_m_warofcity_get_mark_tos(_) ->
	undefined.
encode_m_warofcity_get_mark_toc(Record) when is_record(Record, m_warofcity_get_mark_toc) ->
	#m_warofcity_get_mark_toc{succ=Succ,reason=Reason,families=Families,roles=Roles} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Families =:= undefined of
		true ->
			FamiliesFinal = [];
		false ->
			FamiliesFinal = Families
	end,
	case Roles =:= undefined of
		true ->
			RolesFinal = [];
		false ->
			RolesFinal = Roles
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Families_bin = encode_p_warofcity_family_marks(FamiliesFinal, <<>>),
	SizeFamiliesFinal = erlang:length(FamiliesFinal),
	BinLen_families = erlang:byte_size(Families_bin),
	Roles_bin = encode_p_warofcity_role_marks(RolesFinal, <<>>),
	SizeRolesFinal = erlang:length(RolesFinal),
	BinLen_roles = erlang:byte_size(Roles_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,SizeFamiliesFinal:16, BinLen_families:32, Families_bin/binary,SizeRolesFinal:16, BinLen_roles:32, Roles_bin/binary>>;
encode_m_warofcity_get_mark_toc(_) -> 
	<<>>.

decode_m_warofcity_get_mark_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_Sizefamilies:16, BinLenfamilies:32, Bin2/binary>> = Bin1,
	<<SubBinfamilies:BinLenfamilies/binary, Bin3/binary>> = Bin2, 
	Families = lists:reverse(decode_p_warofcity_family_marks(SubBinfamilies, [])),
	<<_Sizeroles:16, _BinLenroles:32, SubBinroles/binary>> = Bin3,
	Roles = lists:reverse(decode_p_warofcity_role_marks(SubBinroles, [])),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_warofcity_get_mark_toc, Succ,common_tool:to_list(Reason),Families,Roles};

decode_m_warofcity_get_mark_toc(_) ->
	undefined.
encode_m_warofcity_info_toc(Record) when is_record(Record, m_warofcity_info_toc) ->
	#m_warofcity_info_toc{is_begin=Is_begin,remain_begin_time=Remain_begin_time,remain_time=Remain_time,map_id=Map_id} = Record,
	case Is_begin =:= undefined of
		true ->
				Is_beginFinal = 1;
		false ->
		case Is_begin of
			true ->
				Is_beginFinal = 1;
			false ->
				Is_beginFinal = 0
		end
	end,
	case Remain_begin_time =:= undefined of
		true ->
				Remain_begin_timeFinal = undefined,
				exit({required_field_not_assigned, m_warofcity_info_toc, remain_begin_time});
		false ->
			Remain_begin_timeFinal = Remain_begin_time
	end,
	case Remain_time =:= undefined of
		true ->
				Remain_timeFinal = undefined,
				exit({required_field_not_assigned, m_warofcity_info_toc, remain_time});
		false ->
			Remain_timeFinal = Remain_time
	end,
	case Map_id =:= undefined of
		true ->
				Map_idFinal = undefined,
				exit({required_field_not_assigned, m_warofcity_info_toc, map_id});
		false ->
			Map_idFinal = Map_id
	end,

	<<Is_beginFinal:8,Remain_begin_timeFinal:32/signed,Remain_timeFinal:32/signed,Map_idFinal:32/signed>>;
encode_m_warofcity_info_toc(_) -> 
	<<>>.

decode_m_warofcity_info_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Is_beginTmp:8,Remain_begin_time:32/signed,Remain_time:32/signed,Map_id:32/signed>> = Bin0,
case Is_beginTmp of 
	1 -> 
		Is_begin = true;
	_ ->
		Is_begin = false
end,

	{m_warofcity_info_toc, Is_begin,Remain_begin_time,Remain_time,Map_id};

decode_m_warofcity_info_toc(_) ->
	undefined.
encode_m_warofcity_hold_tos(Record) when is_record(Record, m_warofcity_hold_tos) ->
	#m_warofcity_hold_tos{} = Record,

	<<>>;
encode_m_warofcity_hold_tos(_) -> 
	<<>>.

decode_m_warofcity_hold_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_warofcity_hold_tos};

decode_m_warofcity_hold_tos(_) ->
	undefined.
encode_m_warofcity_hold_toc(Record) when is_record(Record, m_warofcity_hold_toc) ->
	#m_warofcity_hold_toc{succ=Succ,reason=Reason,return_self=Return_self,role_id=Role_id,family_name=Family_name} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = 0;
		false ->
			Role_idFinal = Role_id
	end,
	case Family_name =:= undefined of
		true ->
				Family_nameFinal = <<>>;
		false ->
			Family_nameFinal = Family_name
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Family_name2 = common_tool:to_binary(Family_nameFinal),
	Family_nameLen = erlang:byte_size(Family_name2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Return_selfFinal:8,Role_idFinal:32/signed,Family_nameLen:16, Family_name2/binary>>;
encode_m_warofcity_hold_toc(_) -> 
	<<>>.

decode_m_warofcity_hold_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Return_selfTmp:8,Role_id:32/signed,Family_nameLen:16, Bin2/binary>> = Bin1,
	<<Family_name:Family_nameLen/binary>> = Bin2,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_warofcity_hold_toc, Succ,common_tool:to_list(Reason),Return_self,Role_id,common_tool:to_list(Family_name)};

decode_m_warofcity_hold_toc(_) ->
	undefined.
encode_m_warofcity_holding_toc(Record) when is_record(Record, m_warofcity_holding_toc) ->
	#m_warofcity_holding_toc{role_id=Role_id,time=Time,total_time=Total_time} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, m_warofcity_holding_toc, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Time =:= undefined of
		true ->
				TimeFinal = undefined,
				exit({required_field_not_assigned, m_warofcity_holding_toc, time});
		false ->
			TimeFinal = Time
	end,
	case Total_time =:= undefined of
		true ->
				Total_timeFinal = undefined,
				exit({required_field_not_assigned, m_warofcity_holding_toc, total_time});
		false ->
			Total_timeFinal = Total_time
	end,

	<<Role_idFinal:32/signed,TimeFinal:32/signed,Total_timeFinal:32/signed>>;
encode_m_warofcity_holding_toc(_) -> 
	<<>>.

decode_m_warofcity_holding_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,Time:32/signed,Total_time:32/signed>> = Bin0,

	{m_warofcity_holding_toc, Role_id,Time,Total_time};

decode_m_warofcity_holding_toc(_) ->
	undefined.
encode_p_warofcity_apply_family(Record) when is_record(Record, p_warofcity_apply_family) ->
	#p_warofcity_apply_family{family_id=Family_id,family_name=Family_name} = Record,
	case Family_id =:= undefined of
		true ->
				Family_idFinal = undefined,
				exit({required_field_not_assigned, p_warofcity_apply_family, family_id});
		false ->
			Family_idFinal = Family_id
	end,
	case Family_name =:= undefined of
		true ->
				Family_nameFinal = undefined,
				exit({required_field_not_assigned, p_warofcity_apply_family, family_name});
		false ->
			Family_nameFinal = Family_name
	end,
	Family_name2 = common_tool:to_binary(Family_nameFinal),
	Family_nameLen = erlang:byte_size(Family_name2),

	<<Family_idFinal:32/signed,Family_nameLen:16, Family_name2/binary>>;
encode_p_warofcity_apply_family(_) -> 
	<<>>.

decode_p_warofcity_apply_family(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Family_id:32/signed,Family_nameLen:16, Bin1/binary>> = Bin0,
	<<Family_name:Family_nameLen/binary>> = Bin1,

	{p_warofcity_apply_family, Family_id,common_tool:to_list(Family_name)};

decode_p_warofcity_apply_family(_) ->
	undefined.
encode_p_warofcity(Record) when is_record(Record, p_warofcity) ->
	#p_warofcity{map_id=Map_id,family_id=Family_id,family_name=Family_name,last_day=Last_day,rewards=Rewards,apply_family_list=Apply_family_list,sum_apply_cost=Sum_apply_cost,gained_rewards=Gained_rewards} = Record,
	case Map_id =:= undefined of
		true ->
				Map_idFinal = undefined,
				exit({required_field_not_assigned, p_warofcity, map_id});
		false ->
			Map_idFinal = Map_id
	end,
	case Family_id =:= undefined of
		true ->
				Family_idFinal = undefined,
				exit({required_field_not_assigned, p_warofcity, family_id});
		false ->
			Family_idFinal = Family_id
	end,
	case Family_name =:= undefined of
		true ->
				Family_nameFinal = undefined,
				exit({required_field_not_assigned, p_warofcity, family_name});
		false ->
			Family_nameFinal = Family_name
	end,
	case Last_day =:= undefined of
		true ->
				Last_dayFinal = undefined,
				exit({required_field_not_assigned, p_warofcity, last_day});
		false ->
			Last_dayFinal = Last_day
	end,
	case Rewards =:= undefined of
		true ->
			RewardsFinal = [];
		false ->
			RewardsFinal = Rewards
	end,
	case Apply_family_list =:= undefined of
		true ->
			Apply_family_listFinal = [];
		false ->
			Apply_family_listFinal = Apply_family_list
	end,
	case Sum_apply_cost =:= undefined of
		true ->
				Sum_apply_costFinal = undefined,
				exit({required_field_not_assigned, p_warofcity, sum_apply_cost});
		false ->
			Sum_apply_costFinal = Sum_apply_cost
	end,
	case Gained_rewards =:= undefined of
		true ->
			Gained_rewardsFinal = [];
		false ->
			Gained_rewardsFinal = Gained_rewards
	end,
	Family_name2 = common_tool:to_binary(Family_nameFinal),
	Family_nameLen = erlang:byte_size(Family_name2),
	Rewards_bin = encode_p_warofcity_rewards(RewardsFinal, <<>>),
	SizeRewardsFinal = erlang:length(RewardsFinal),
	BinLen_rewards = erlang:byte_size(Rewards_bin),
	Apply_family_list_bin = encode_p_warofcity_apply_familys(Apply_family_listFinal, <<>>),
	SizeApply_family_listFinal = erlang:length(Apply_family_listFinal),
	BinLen_apply_family_list = erlang:byte_size(Apply_family_list_bin),
	Gained_rewards_bin = encode_int32s(Gained_rewardsFinal, <<>>),
	SizeGained_rewardsFinal = erlang:length(Gained_rewardsFinal),
	BinLen_gained_rewards = erlang:byte_size(Gained_rewards_bin),

	<<Map_idFinal:32/signed,Family_idFinal:32/signed,Family_nameLen:16, Family_name2/binary,Last_dayFinal:32/signed,SizeRewardsFinal:16, BinLen_rewards:32, Rewards_bin/binary,SizeApply_family_listFinal:16, BinLen_apply_family_list:32, Apply_family_list_bin/binary,Sum_apply_costFinal:32/signed,SizeGained_rewardsFinal:16, BinLen_gained_rewards:32, Gained_rewards_bin/binary>>;
encode_p_warofcity(_) -> 
	<<>>.

decode_p_warofcity(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Map_id:32/signed,Family_id:32/signed,Family_nameLen:16, Bin1/binary>> = Bin0,
	<<Family_name:Family_nameLen/binary,Last_day:32/signed,_Sizerewards:16, BinLenrewards:32, Bin2/binary>> = Bin1,
	<<SubBinrewards:BinLenrewards/binary, Bin3/binary>> = Bin2, 
	Rewards = lists:reverse(decode_p_warofcity_rewards(SubBinrewards, [])),
	<<_Sizeapply_family_list:16, BinLenapply_family_list:32, Bin4/binary>> = Bin3,
	<<SubBinapply_family_list:BinLenapply_family_list/binary, Bin5/binary>> = Bin4, 
	Apply_family_list = lists:reverse(decode_p_warofcity_apply_familys(SubBinapply_family_list, [])),
	<<Sum_apply_cost:32/signed,_Sizegained_rewards:16, _BinLengained_rewards:32, SubBingained_rewards/binary>> = Bin5,
	Gained_rewards = lists:reverse(decode_int32s(SubBingained_rewards, [])),

	{p_warofcity, Map_id,Family_id,common_tool:to_list(Family_name),Last_day,Rewards,Apply_family_list,Sum_apply_cost,Gained_rewards};

decode_p_warofcity(_) ->
	undefined.
encode_p_warofcity_reward(Record) when is_record(Record, p_warofcity_reward) ->
	#p_warofcity_reward{type=Type,gain=Gain} = Record,
	case Type =:= undefined of
		true ->
				TypeFinal = undefined,
				exit({required_field_not_assigned, p_warofcity_reward, type});
		false ->
			TypeFinal = Type
	end,
	case Gain =:= undefined of
		true ->
				GainFinal = undefined,
				exit({required_field_not_assigned, p_warofcity_reward, gain});
		false ->
		case Gain of
			true ->
				GainFinal = 1;
			false ->
				GainFinal = 0
		end
	end,

	<<TypeFinal:32/signed,GainFinal:8>>;
encode_p_warofcity_reward(_) -> 
	<<>>.

decode_p_warofcity_reward(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Type:32/signed,GainTmp:8>> = Bin0,
case GainTmp of 
	1 -> 
		Gain = true;
	_ ->
		Gain = false
end,

	{p_warofcity_reward, Type,Gain};

decode_p_warofcity_reward(_) ->
	undefined.
encode_m_warofcity_panel_tos(Record) when is_record(Record, m_warofcity_panel_tos) ->
	#m_warofcity_panel_tos{} = Record,

	<<>>;
encode_m_warofcity_panel_tos(_) -> 
	<<>>.

decode_m_warofcity_panel_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_warofcity_panel_tos};

decode_m_warofcity_panel_tos(_) ->
	undefined.
encode_m_warofcity_panel_toc(Record) when is_record(Record, m_warofcity_panel_toc) ->
	#m_warofcity_panel_toc{cities=Cities} = Record,
	case Cities =:= undefined of
		true ->
			CitiesFinal = [];
		false ->
			CitiesFinal = Cities
	end,
	Cities_bin = encode_p_warofcitys(CitiesFinal, <<>>),
	SizeCitiesFinal = erlang:length(CitiesFinal),
	BinLen_cities = erlang:byte_size(Cities_bin),

	<<SizeCitiesFinal:16, BinLen_cities:32, Cities_bin/binary>>;
encode_m_warofcity_panel_toc(_) -> 
	<<>>.

decode_m_warofcity_panel_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizecities:16, _BinLencities:32, SubBincities/binary>> = Bin0,
	Cities = lists:reverse(decode_p_warofcitys(SubBincities, [])),

	{m_warofcity_panel_toc, Cities};

decode_m_warofcity_panel_toc(_) ->
	undefined.
encode_m_warofcity_get_reward_tos(Record) when is_record(Record, m_warofcity_get_reward_tos) ->
	#m_warofcity_get_reward_tos{type=Type} = Record,
	case Type =:= undefined of
		true ->
				TypeFinal = undefined,
				exit({required_field_not_assigned, m_warofcity_get_reward_tos, type});
		false ->
			TypeFinal = Type
	end,

	<<TypeFinal:32/signed>>;
encode_m_warofcity_get_reward_tos(_) -> 
	<<>>.

decode_m_warofcity_get_reward_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Type:32/signed>> = Bin0,

	{m_warofcity_get_reward_tos, Type};

decode_m_warofcity_get_reward_tos(_) ->
	undefined.
encode_m_warofcity_get_reward_toc(Record) when is_record(Record, m_warofcity_get_reward_toc) ->
	#m_warofcity_get_reward_toc{succ=Succ,reason=Reason,type=Type} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Type =:= undefined of
		true ->
				TypeFinal = 0;
		false ->
			TypeFinal = Type
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,TypeFinal:32/signed>>;
encode_m_warofcity_get_reward_toc(_) -> 
	<<>>.

decode_m_warofcity_get_reward_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Type:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_warofcity_get_reward_toc, Succ,common_tool:to_list(Reason),Type};

decode_m_warofcity_get_reward_toc(_) ->
	undefined.
encode_p_warofcity_family_winner(Record) when is_record(Record, p_warofcity_family_winner) ->
	#p_warofcity_family_winner{family_id=Family_id,family_name=Family_name} = Record,
	case Family_id =:= undefined of
		true ->
				Family_idFinal = undefined,
				exit({required_field_not_assigned, p_warofcity_family_winner, family_id});
		false ->
			Family_idFinal = Family_id
	end,
	case Family_name =:= undefined of
		true ->
				Family_nameFinal = undefined,
				exit({required_field_not_assigned, p_warofcity_family_winner, family_name});
		false ->
			Family_nameFinal = Family_name
	end,
	Family_name2 = common_tool:to_binary(Family_nameFinal),
	Family_nameLen = erlang:byte_size(Family_name2),

	<<Family_idFinal:32/signed,Family_nameLen:16, Family_name2/binary>>;
encode_p_warofcity_family_winner(_) -> 
	<<>>.

decode_p_warofcity_family_winner(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Family_id:32/signed,Family_nameLen:16, Bin1/binary>> = Bin0,
	<<Family_name:Family_nameLen/binary>> = Bin1,

	{p_warofcity_family_winner, Family_id,common_tool:to_list(Family_name)};

decode_p_warofcity_family_winner(_) ->
	undefined.
encode_p_warofcity_role_winner(Record) when is_record(Record, p_warofcity_role_winner) ->
	#p_warofcity_role_winner{role_id=Role_id,role_name=Role_name} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, p_warofcity_role_winner, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = undefined,
				exit({required_field_not_assigned, p_warofcity_role_winner, role_name});
		false ->
			Role_nameFinal = Role_name
	end,
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),

	<<Role_idFinal:32/signed,Role_nameLen:16, Role_name2/binary>>;
encode_p_warofcity_role_winner(_) -> 
	<<>>.

decode_p_warofcity_role_winner(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,Role_nameLen:16, Bin1/binary>> = Bin0,
	<<Role_name:Role_nameLen/binary>> = Bin1,

	{p_warofcity_role_winner, Role_id,common_tool:to_list(Role_name)};

decode_p_warofcity_role_winner(_) ->
	undefined.
encode_m_warofcity_end_toc(Record) when is_record(Record, m_warofcity_end_toc) ->
	#m_warofcity_end_toc{first=First,second=Second,third=Third,first_role=First_role,second_role=Second_role,third_role=Third_role} = Record,
	case First =:= undefined of
		true ->
				FirstFinal = undefined,
				exit({required_field_not_assigned, m_warofcity_end_toc, first});
		false ->
			FirstFinal = First
	end,
	case Second =:= undefined of
		true ->
				SecondFinal = undefined,
				exit({required_field_not_assigned, m_warofcity_end_toc, second});
		false ->
			SecondFinal = Second
	end,
	case Third =:= undefined of
		true ->
				ThirdFinal = 0;
		false ->
			ThirdFinal = Third
	end,
	case First_role =:= undefined of
		true ->
				First_roleFinal = undefined,
				exit({required_field_not_assigned, m_warofcity_end_toc, first_role});
		false ->
			First_roleFinal = First_role
	end,
	case Second_role =:= undefined of
		true ->
				Second_roleFinal = undefined,
				exit({required_field_not_assigned, m_warofcity_end_toc, second_role});
		false ->
			Second_roleFinal = Second_role
	end,
	case Third_role =:= undefined of
		true ->
				Third_roleFinal = 0;
		false ->
			Third_roleFinal = Third_role
	end,
	First_bin = encode_p_warofcity_family_winner(FirstFinal),
	BinLen_first = erlang:byte_size(First_bin),
	Second_bin = encode_p_warofcity_family_winner(SecondFinal),
	BinLen_second = erlang:byte_size(Second_bin),
	Third_bin = encode_p_warofcity_family_winner(ThirdFinal),
	BinLen_third = erlang:byte_size(Third_bin),
	First_role_bin = encode_p_warofcity_role_winner(First_roleFinal),
	BinLen_first_role = erlang:byte_size(First_role_bin),
	Second_role_bin = encode_p_warofcity_role_winner(Second_roleFinal),
	BinLen_second_role = erlang:byte_size(Second_role_bin),
	Third_role_bin = encode_p_warofcity_role_winner(Third_roleFinal),
	BinLen_third_role = erlang:byte_size(Third_role_bin),

	<<BinLen_first:32, First_bin/binary,BinLen_second:32, Second_bin/binary,BinLen_third:32, Third_bin/binary,BinLen_first_role:32, First_role_bin/binary,BinLen_second_role:32, Second_role_bin/binary,BinLen_third_role:32, Third_role_bin/binary>>;
encode_m_warofcity_end_toc(_) -> 
	<<>>.

decode_m_warofcity_end_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SubBinSizefirst:32, Bin1/binary>> = Bin0,
	<<SubBinfirst:SubBinSizefirst/binary, Bin2/binary>> = Bin1,
	First = decode_p_warofcity_family_winner(SubBinfirst),
	<<SubBinSizesecond:32, Bin3/binary>> = Bin2,
	<<SubBinsecond:SubBinSizesecond/binary, Bin4/binary>> = Bin3,
	Second = decode_p_warofcity_family_winner(SubBinsecond),
	<<SubBinSizethird:32, Bin5/binary>> = Bin4,
	<<SubBinthird:SubBinSizethird/binary, Bin6/binary>> = Bin5,
	Third = decode_p_warofcity_family_winner(SubBinthird),
	<<SubBinSizefirst_role:32, Bin7/binary>> = Bin6,
	<<SubBinfirst_role:SubBinSizefirst_role/binary, Bin8/binary>> = Bin7,
	First_role = decode_p_warofcity_role_winner(SubBinfirst_role),
	<<SubBinSizesecond_role:32, Bin9/binary>> = Bin8,
	<<SubBinsecond_role:SubBinSizesecond_role/binary, Bin10/binary>> = Bin9,
	Second_role = decode_p_warofcity_role_winner(SubBinsecond_role),
	<<_SubBinSizethird_role:32, SubBinthird_role/binary>> = Bin10,
	Third_role = decode_p_warofcity_role_winner(SubBinthird_role),

	{m_warofcity_end_toc, First,Second,Third,First_role,Second_role,Third_role};

decode_m_warofcity_end_toc(_) ->
	undefined.
encode_m_warofcity_break_toc(Record) when is_record(Record, m_warofcity_break_toc) ->
	#m_warofcity_break_toc{} = Record,

	<<>>;
encode_m_warofcity_break_toc(_) -> 
	<<>>.

decode_m_warofcity_break_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_warofcity_break_toc};

decode_m_warofcity_break_toc(_) ->
	undefined.
encode_m_warofcity_hold_succ_toc(Record) when is_record(Record, m_warofcity_hold_succ_toc) ->
	#m_warofcity_hold_succ_toc{family_id=Family_id,family_name=Family_name,role_name=Role_name} = Record,
	case Family_id =:= undefined of
		true ->
				Family_idFinal = undefined,
				exit({required_field_not_assigned, m_warofcity_hold_succ_toc, family_id});
		false ->
			Family_idFinal = Family_id
	end,
	case Family_name =:= undefined of
		true ->
				Family_nameFinal = undefined,
				exit({required_field_not_assigned, m_warofcity_hold_succ_toc, family_name});
		false ->
			Family_nameFinal = Family_name
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = undefined,
				exit({required_field_not_assigned, m_warofcity_hold_succ_toc, role_name});
		false ->
			Role_nameFinal = Role_name
	end,
	Family_name2 = common_tool:to_binary(Family_nameFinal),
	Family_nameLen = erlang:byte_size(Family_name2),
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),

	<<Family_idFinal:32/signed,Family_nameLen:16, Family_name2/binary,Role_nameLen:16, Role_name2/binary>>;
encode_m_warofcity_hold_succ_toc(_) -> 
	<<>>.

decode_m_warofcity_hold_succ_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Family_id:32/signed,Family_nameLen:16, Bin1/binary>> = Bin0,
	<<Family_name:Family_nameLen/binary,Role_nameLen:16, Bin2/binary>> = Bin1,
	<<Role_name:Role_nameLen/binary>> = Bin2,

	{m_warofcity_hold_succ_toc, Family_id,common_tool:to_list(Family_name),common_tool:to_list(Role_name)};

decode_m_warofcity_hold_succ_toc(_) ->
	undefined.
encode_m_family_memberuplevel_toc(Record) when is_record(Record, m_family_memberuplevel_toc) ->
	#m_family_memberuplevel_toc{role_id=Role_id,new_level=New_level} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, m_family_memberuplevel_toc, role_id});
		false ->
			Role_idFinal = Role_id
	end,
	case New_level =:= undefined of
		true ->
				New_levelFinal = undefined,
				exit({required_field_not_assigned, m_family_memberuplevel_toc, new_level});
		false ->
			New_levelFinal = New_level
	end,

	<<Role_idFinal:32/signed,New_levelFinal:32/signed>>;
encode_m_family_memberuplevel_toc(_) -> 
	<<>>.

decode_m_family_memberuplevel_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed,New_level:32/signed>> = Bin0,

	{m_family_memberuplevel_toc, Role_id,New_level};

decode_m_family_memberuplevel_toc(_) ->
	undefined.
encode_m_achievement_query_tos(Record) when is_record(Record, m_achievement_query_tos) ->
	#m_achievement_query_tos{op_type=Op_type,group_id=Group_id,achieve_ids=Achieve_ids} = Record,
	case Op_type =:= undefined of
		true ->
				Op_typeFinal = 0;
		false ->
			Op_typeFinal = Op_type
	end,
	case Group_id =:= undefined of
		true ->
				Group_idFinal = 0;
		false ->
			Group_idFinal = Group_id
	end,
	case Achieve_ids =:= undefined of
		true ->
			Achieve_idsFinal = 0;
		false ->
			Achieve_idsFinal = Achieve_ids
	end,
	Achieve_ids_bin = encode_int32s(Achieve_idsFinal, <<>>),
	SizeAchieve_idsFinal = erlang:length(Achieve_idsFinal),
	BinLen_achieve_ids = erlang:byte_size(Achieve_ids_bin),

	<<Op_typeFinal:32/signed,Group_idFinal:32/signed,SizeAchieve_idsFinal:16, BinLen_achieve_ids:32, Achieve_ids_bin/binary>>;
encode_m_achievement_query_tos(_) -> 
	<<>>.

decode_m_achievement_query_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Op_type:32/signed,Group_id:32/signed,_Sizeachieve_ids:16, _BinLenachieve_ids:32, SubBinachieve_ids/binary>> = Bin0,
	Achieve_ids = lists:reverse(decode_int32s(SubBinachieve_ids, [])),

	{m_achievement_query_tos, Op_type,Group_id,Achieve_ids};

decode_m_achievement_query_tos(_) ->
	undefined.
encode_m_achievement_query_toc(Record) when is_record(Record, m_achievement_query_toc) ->
	#m_achievement_query_toc{succ=Succ,reason=Reason,op_type=Op_type,group_id=Group_id,achieve_ids=Achieve_ids,achievements=Achievements,total_points=Total_points,lately_achievements=Lately_achievements,stat_info=Stat_info,group_achievement=Group_achievement,rank_achievements=Rank_achievements} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Op_type =:= undefined of
		true ->
				Op_typeFinal = 0;
		false ->
			Op_typeFinal = Op_type
	end,
	case Group_id =:= undefined of
		true ->
				Group_idFinal = 0;
		false ->
			Group_idFinal = Group_id
	end,
	case Achieve_ids =:= undefined of
		true ->
			Achieve_idsFinal = 0;
		false ->
			Achieve_idsFinal = Achieve_ids
	end,
	case Achievements =:= undefined of
		true ->
			AchievementsFinal = [];
		false ->
			AchievementsFinal = Achievements
	end,
	case Total_points =:= undefined of
		true ->
				Total_pointsFinal = 0;
		false ->
			Total_pointsFinal = Total_points
	end,
	case Lately_achievements =:= undefined of
		true ->
			Lately_achievementsFinal = [];
		false ->
			Lately_achievementsFinal = Lately_achievements
	end,
	case Stat_info =:= undefined of
		true ->
			Stat_infoFinal = [];
		false ->
			Stat_infoFinal = Stat_info
	end,
	case Group_achievement =:= undefined of
		true ->
				Group_achievementFinal = 0;
		false ->
			Group_achievementFinal = Group_achievement
	end,
	case Rank_achievements =:= undefined of
		true ->
			Rank_achievementsFinal = [];
		false ->
			Rank_achievementsFinal = Rank_achievements
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Achieve_ids_bin = encode_int32s(Achieve_idsFinal, <<>>),
	SizeAchieve_idsFinal = erlang:length(Achieve_idsFinal),
	BinLen_achieve_ids = erlang:byte_size(Achieve_ids_bin),
	Achievements_bin = encode_p_achievement_infos(AchievementsFinal, <<>>),
	SizeAchievementsFinal = erlang:length(AchievementsFinal),
	BinLen_achievements = erlang:byte_size(Achievements_bin),
	Lately_achievements_bin = encode_p_achievement_infos(Lately_achievementsFinal, <<>>),
	SizeLately_achievementsFinal = erlang:length(Lately_achievementsFinal),
	BinLen_lately_achievements = erlang:byte_size(Lately_achievements_bin),
	Stat_info_bin = encode_p_achievement_stat_infos(Stat_infoFinal, <<>>),
	SizeStat_infoFinal = erlang:length(Stat_infoFinal),
	BinLen_stat_info = erlang:byte_size(Stat_info_bin),
	Group_achievement_bin = encode_p_achievement_info(Group_achievementFinal),
	BinLen_group_achievement = erlang:byte_size(Group_achievement_bin),
	Rank_achievements_bin = encode_p_achievement_infos(Rank_achievementsFinal, <<>>),
	SizeRank_achievementsFinal = erlang:length(Rank_achievementsFinal),
	BinLen_rank_achievements = erlang:byte_size(Rank_achievements_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Op_typeFinal:32/signed,Group_idFinal:32/signed,SizeAchieve_idsFinal:16, BinLen_achieve_ids:32, Achieve_ids_bin/binary,SizeAchievementsFinal:16, BinLen_achievements:32, Achievements_bin/binary,Total_pointsFinal:32/signed,SizeLately_achievementsFinal:16, BinLen_lately_achievements:32, Lately_achievements_bin/binary,SizeStat_infoFinal:16, BinLen_stat_info:32, Stat_info_bin/binary,BinLen_group_achievement:32, Group_achievement_bin/binary,SizeRank_achievementsFinal:16, BinLen_rank_achievements:32, Rank_achievements_bin/binary>>;
encode_m_achievement_query_toc(_) -> 
	<<>>.

decode_m_achievement_query_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Op_type:32/signed,Group_id:32/signed,_Sizeachieve_ids:16, BinLenachieve_ids:32, Bin2/binary>> = Bin1,
	<<SubBinachieve_ids:BinLenachieve_ids/binary, Bin3/binary>> = Bin2, 
	Achieve_ids = lists:reverse(decode_int32s(SubBinachieve_ids, [])),
	<<_Sizeachievements:16, BinLenachievements:32, Bin4/binary>> = Bin3,
	<<SubBinachievements:BinLenachievements/binary, Bin5/binary>> = Bin4, 
	Achievements = lists:reverse(decode_p_achievement_infos(SubBinachievements, [])),
	<<Total_points:32/signed,_Sizelately_achievements:16, BinLenlately_achievements:32, Bin6/binary>> = Bin5,
	<<SubBinlately_achievements:BinLenlately_achievements/binary, Bin7/binary>> = Bin6, 
	Lately_achievements = lists:reverse(decode_p_achievement_infos(SubBinlately_achievements, [])),
	<<_Sizestat_info:16, BinLenstat_info:32, Bin8/binary>> = Bin7,
	<<SubBinstat_info:BinLenstat_info/binary, Bin9/binary>> = Bin8, 
	Stat_info = lists:reverse(decode_p_achievement_stat_infos(SubBinstat_info, [])),
	<<SubBinSizegroup_achievement:32, Bin10/binary>> = Bin9,
	<<SubBingroup_achievement:SubBinSizegroup_achievement/binary, Bin11/binary>> = Bin10,
	Group_achievement = decode_p_achievement_info(SubBingroup_achievement),
	<<_Sizerank_achievements:16, _BinLenrank_achievements:32, SubBinrank_achievements/binary>> = Bin11,
	Rank_achievements = lists:reverse(decode_p_achievement_infos(SubBinrank_achievements, [])),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_achievement_query_toc, Succ,common_tool:to_list(Reason),Op_type,Group_id,Achieve_ids,Achievements,Total_points,Lately_achievements,Stat_info,Group_achievement,Rank_achievements};

decode_m_achievement_query_toc(_) ->
	undefined.
encode_m_achievement_notice_tos(Record) when is_record(Record, m_achievement_notice_tos) ->
	#m_achievement_notice_tos{event_ids=Event_ids,add_progress=Add_progress} = Record,
	case Event_ids =:= undefined of
		true ->
			Event_idsFinal = [];
		false ->
			Event_idsFinal = Event_ids
	end,
	case Add_progress =:= undefined of
		true ->
				Add_progressFinal = 1;
		false ->
			Add_progressFinal = Add_progress
	end,
	Event_ids_bin = encode_int32s(Event_idsFinal, <<>>),
	SizeEvent_idsFinal = erlang:length(Event_idsFinal),
	BinLen_event_ids = erlang:byte_size(Event_ids_bin),

	<<SizeEvent_idsFinal:16, BinLen_event_ids:32, Event_ids_bin/binary,Add_progressFinal:32/signed>>;
encode_m_achievement_notice_tos(_) -> 
	<<>>.

decode_m_achievement_notice_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizeevent_ids:16, BinLenevent_ids:32, Bin1/binary>> = Bin0,
	<<SubBinevent_ids:BinLenevent_ids/binary, Bin2/binary>> = Bin1, 
	Event_ids = lists:reverse(decode_int32s(SubBinevent_ids, [])),
	<<Add_progress:32/signed>> = Bin2,

	{m_achievement_notice_tos, Event_ids,Add_progress};

decode_m_achievement_notice_tos(_) ->
	undefined.
encode_m_achievement_notice_toc(Record) when is_record(Record, m_achievement_notice_toc) ->
	#m_achievement_notice_toc{type=Type,achievements=Achievements,total_points=Total_points} = Record,
	case Type =:= undefined of
		true ->
				TypeFinal = 0;
		false ->
			TypeFinal = Type
	end,
	case Achievements =:= undefined of
		true ->
			AchievementsFinal = [];
		false ->
			AchievementsFinal = Achievements
	end,
	case Total_points =:= undefined of
		true ->
				Total_pointsFinal = 0;
		false ->
			Total_pointsFinal = Total_points
	end,
	Achievements_bin = encode_p_achievement_infos(AchievementsFinal, <<>>),
	SizeAchievementsFinal = erlang:length(AchievementsFinal),
	BinLen_achievements = erlang:byte_size(Achievements_bin),

	<<TypeFinal:32/signed,SizeAchievementsFinal:16, BinLen_achievements:32, Achievements_bin/binary,Total_pointsFinal:32/signed>>;
encode_m_achievement_notice_toc(_) -> 
	<<>>.

decode_m_achievement_notice_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Type:32/signed,_Sizeachievements:16, BinLenachievements:32, Bin1/binary>> = Bin0,
	<<SubBinachievements:BinLenachievements/binary, Bin2/binary>> = Bin1, 
	Achievements = lists:reverse(decode_p_achievement_infos(SubBinachievements, [])),
	<<Total_points:32/signed>> = Bin2,

	{m_achievement_notice_toc, Type,Achievements,Total_points};

decode_m_achievement_notice_toc(_) ->
	undefined.
encode_m_achievement_award_tos(Record) when is_record(Record, m_achievement_award_tos) ->
	#m_achievement_award_tos{achieve_id=Achieve_id} = Record,
	case Achieve_id =:= undefined of
		true ->
				Achieve_idFinal = 0;
		false ->
			Achieve_idFinal = Achieve_id
	end,

	<<Achieve_idFinal:32/signed>>;
encode_m_achievement_award_tos(_) -> 
	<<>>.

decode_m_achievement_award_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Achieve_id:32/signed>> = Bin0,

	{m_achievement_award_tos, Achieve_id};

decode_m_achievement_award_tos(_) ->
	undefined.
encode_m_achievement_award_toc(Record) when is_record(Record, m_achievement_award_toc) ->
	#m_achievement_award_toc{succ=Succ,reason=Reason,achieve_id=Achieve_id,group_id=Group_id,class_id=Class_id} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Achieve_id =:= undefined of
		true ->
				Achieve_idFinal = 0;
		false ->
			Achieve_idFinal = Achieve_id
	end,
	case Group_id =:= undefined of
		true ->
				Group_idFinal = 0;
		false ->
			Group_idFinal = Group_id
	end,
	case Class_id =:= undefined of
		true ->
				Class_idFinal = 0;
		false ->
			Class_idFinal = Class_id
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Achieve_idFinal:32/signed,Group_idFinal:32/signed,Class_idFinal:32/signed>>;
encode_m_achievement_award_toc(_) -> 
	<<>>.

decode_m_achievement_award_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Achieve_id:32/signed,Group_id:32/signed,Class_id:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_achievement_award_toc, Succ,common_tool:to_list(Reason),Achieve_id,Group_id,Class_id};

decode_m_achievement_award_toc(_) ->
	undefined.
encode_m_collect_get_grafts_info_tos(Record) when is_record(Record, m_collect_get_grafts_info_tos) ->
	#m_collect_get_grafts_info_tos{id=Id} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, m_collect_get_grafts_info_tos, id});
		false ->
			IdFinal = Id
	end,

	<<IdFinal:32/signed>>;
encode_m_collect_get_grafts_info_tos(_) -> 
	<<>>.

decode_m_collect_get_grafts_info_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed>> = Bin0,

	{m_collect_get_grafts_info_tos, Id};

decode_m_collect_get_grafts_info_tos(_) ->
	undefined.
encode_m_collect_get_grafts_info_toc(Record) when is_record(Record, m_collect_get_grafts_info_toc) ->
	#m_collect_get_grafts_info_toc{succ=Succ,info=Info,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_collect_get_grafts_info_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Info =:= undefined of
		true ->
				InfoFinal = 0;
		false ->
			InfoFinal = Info
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Info_bin = encode_p_map_collect(InfoFinal),
	BinLen_info = erlang:byte_size(Info_bin),
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,BinLen_info:32, Info_bin/binary,ReasonLen:16, Reason2/binary>>;
encode_m_collect_get_grafts_info_toc(_) -> 
	<<>>.

decode_m_collect_get_grafts_info_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,SubBinSizeinfo:32, Bin1/binary>> = Bin0,
	<<SubBininfo:SubBinSizeinfo/binary, Bin2/binary>> = Bin1,
	Info = decode_p_map_collect(SubBininfo),
	<<ReasonLen:16, Bin3/binary>> = Bin2,
	<<Reason:ReasonLen/binary>> = Bin3,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_collect_get_grafts_info_toc, Succ,Info,common_tool:to_list(Reason)};

decode_m_collect_get_grafts_info_toc(_) ->
	undefined.
encode_m_collect_stop_tos(Record) when is_record(Record, m_collect_stop_tos) ->
	#m_collect_stop_tos{id=Id} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, m_collect_stop_tos, id});
		false ->
			IdFinal = Id
	end,

	<<IdFinal:32/signed>>;
encode_m_collect_stop_tos(_) -> 
	<<>>.

decode_m_collect_stop_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed>> = Bin0,

	{m_collect_stop_tos, Id};

decode_m_collect_stop_tos(_) ->
	undefined.
encode_m_collect_remove_grafts_toc(Record) when is_record(Record, m_collect_remove_grafts_toc) ->
	#m_collect_remove_grafts_toc{grafts=Grafts} = Record,
	case Grafts =:= undefined of
		true ->
			GraftsFinal = [];
		false ->
			GraftsFinal = Grafts
	end,
	Grafts_bin = encode_p_map_collects(GraftsFinal, <<>>),
	SizeGraftsFinal = erlang:length(GraftsFinal),
	BinLen_grafts = erlang:byte_size(Grafts_bin),

	<<SizeGraftsFinal:16, BinLen_grafts:32, Grafts_bin/binary>>;
encode_m_collect_remove_grafts_toc(_) -> 
	<<>>.

decode_m_collect_remove_grafts_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizegrafts:16, _BinLengrafts:32, SubBingrafts/binary>> = Bin0,
	Grafts = lists:reverse(decode_p_map_collects(SubBingrafts, [])),

	{m_collect_remove_grafts_toc, Grafts};

decode_m_collect_remove_grafts_toc(_) ->
	undefined.
encode_m_collect_updata_grafts_toc(Record) when is_record(Record, m_collect_updata_grafts_toc) ->
	#m_collect_updata_grafts_toc{grafts=Grafts} = Record,
	case Grafts =:= undefined of
		true ->
			GraftsFinal = [];
		false ->
			GraftsFinal = Grafts
	end,
	Grafts_bin = encode_p_map_collects(GraftsFinal, <<>>),
	SizeGraftsFinal = erlang:length(GraftsFinal),
	BinLen_grafts = erlang:byte_size(Grafts_bin),

	<<SizeGraftsFinal:16, BinLen_grafts:32, Grafts_bin/binary>>;
encode_m_collect_updata_grafts_toc(_) -> 
	<<>>.

decode_m_collect_updata_grafts_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizegrafts:16, _BinLengrafts:32, SubBingrafts/binary>> = Bin0,
	Grafts = lists:reverse(decode_p_map_collects(SubBingrafts, [])),

	{m_collect_updata_grafts_toc, Grafts};

decode_m_collect_updata_grafts_toc(_) ->
	undefined.
encode_m_collect_grafts_toc(Record) when is_record(Record, m_collect_grafts_toc) ->
	#m_collect_grafts_toc{succ=Succ,goods_list=Goods_list,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_collect_grafts_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Goods_list =:= undefined of
		true ->
			Goods_listFinal = [];
		false ->
			Goods_listFinal = Goods_list
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Goods_list_bin = encode_p_goodss(Goods_listFinal, <<>>),
	SizeGoods_listFinal = erlang:length(Goods_listFinal),
	BinLen_goods_list = erlang:byte_size(Goods_list_bin),
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,SizeGoods_listFinal:16, BinLen_goods_list:32, Goods_list_bin/binary,ReasonLen:16, Reason2/binary>>;
encode_m_collect_grafts_toc(_) -> 
	<<>>.

decode_m_collect_grafts_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,_Sizegoods_list:16, BinLengoods_list:32, Bin1/binary>> = Bin0,
	<<SubBingoods_list:BinLengoods_list/binary, Bin2/binary>> = Bin1, 
	Goods_list = lists:reverse(decode_p_goodss(SubBingoods_list, [])),
	<<ReasonLen:16, Bin3/binary>> = Bin2,
	<<Reason:ReasonLen/binary>> = Bin3,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_collect_grafts_toc, Succ,Goods_list,common_tool:to_list(Reason)};

decode_m_collect_grafts_toc(_) ->
	undefined.
encode_p_personybc_info(Record) when is_record(Record, p_personybc_info) ->
	#p_personybc_info{color=Color,start_time=Start_time,time_limit=Time_limit,status=Status,do_times=Do_times,public_npc_id=Public_npc_id,commit_npc_id=Commit_npc_id,desc=Desc,attr_award=Attr_award,prop_award=Prop_award,type=Type,faction_new_start_time=Faction_new_start_time,faction_start_time=Faction_start_time,faction_time_limit=Faction_time_limit,cost_type=Cost_type,cost_silver=Cost_silver,cost_silver_bind=Cost_silver_bind,need_notice_when_auto=Need_notice_when_auto,auto_pay_gold=Auto_pay_gold,auto=Auto} = Record,
	case Color =:= undefined of
		true ->
				ColorFinal = undefined,
				exit({required_field_not_assigned, p_personybc_info, color});
		false ->
			ColorFinal = Color
	end,
	case Start_time =:= undefined of
		true ->
				Start_timeFinal = undefined,
				exit({required_field_not_assigned, p_personybc_info, start_time});
		false ->
			Start_timeFinal = Start_time
	end,
	case Time_limit =:= undefined of
		true ->
				Time_limitFinal = undefined,
				exit({required_field_not_assigned, p_personybc_info, time_limit});
		false ->
			Time_limitFinal = Time_limit
	end,
	case Status =:= undefined of
		true ->
				StatusFinal = undefined,
				exit({required_field_not_assigned, p_personybc_info, status});
		false ->
			StatusFinal = Status
	end,
	case Do_times =:= undefined of
		true ->
				Do_timesFinal = undefined,
				exit({required_field_not_assigned, p_personybc_info, do_times});
		false ->
			Do_timesFinal = Do_times
	end,
	case Public_npc_id =:= undefined of
		true ->
				Public_npc_idFinal = undefined,
				exit({required_field_not_assigned, p_personybc_info, public_npc_id});
		false ->
			Public_npc_idFinal = Public_npc_id
	end,
	case Commit_npc_id =:= undefined of
		true ->
				Commit_npc_idFinal = undefined,
				exit({required_field_not_assigned, p_personybc_info, commit_npc_id});
		false ->
			Commit_npc_idFinal = Commit_npc_id
	end,
	case Desc =:= undefined of
		true ->
				DescFinal = undefined,
				exit({required_field_not_assigned, p_personybc_info, desc});
		false ->
			DescFinal = Desc
	end,
	case Attr_award =:= undefined of
		true ->
			Attr_awardFinal = [];
		false ->
			Attr_awardFinal = Attr_award
	end,
	case Prop_award =:= undefined of
		true ->
			Prop_awardFinal = [];
		false ->
			Prop_awardFinal = Prop_award
	end,
	case Type =:= undefined of
		true ->
				TypeFinal = 0;
		false ->
			TypeFinal = Type
	end,
	case Faction_new_start_time =:= undefined of
		true ->
				Faction_new_start_timeFinal = undefined,
				exit({required_field_not_assigned, p_personybc_info, faction_new_start_time});
		false ->
			Faction_new_start_timeFinal = Faction_new_start_time
	end,
	case Faction_start_time =:= undefined of
		true ->
				Faction_start_timeFinal = 0;
		false ->
			Faction_start_timeFinal = Faction_start_time
	end,
	case Faction_time_limit =:= undefined of
		true ->
				Faction_time_limitFinal = 0;
		false ->
			Faction_time_limitFinal = Faction_time_limit
	end,
	case Cost_type =:= undefined of
		true ->
				Cost_typeFinal = 1;
		false ->
			Cost_typeFinal = Cost_type
	end,
	case Cost_silver =:= undefined of
		true ->
				Cost_silverFinal = 0;
		false ->
			Cost_silverFinal = Cost_silver
	end,
	case Cost_silver_bind =:= undefined of
		true ->
				Cost_silver_bindFinal = 0;
		false ->
			Cost_silver_bindFinal = Cost_silver_bind
	end,
	case Need_notice_when_auto =:= undefined of
		true ->
				Need_notice_when_autoFinal = 0;
		false ->
		case Need_notice_when_auto of
			true ->
				Need_notice_when_autoFinal = 1;
			false ->
				Need_notice_when_autoFinal = 0
		end
	end,
	case Auto_pay_gold =:= undefined of
		true ->
				Auto_pay_goldFinal = undefined,
				exit({required_field_not_assigned, p_personybc_info, auto_pay_gold});
		false ->
			Auto_pay_goldFinal = Auto_pay_gold
	end,
	case Auto =:= undefined of
		true ->
				AutoFinal = 1;
		false ->
		case Auto of
			true ->
				AutoFinal = 1;
			false ->
				AutoFinal = 0
		end
	end,
	Desc2 = common_tool:to_binary(DescFinal),
	DescLen = erlang:byte_size(Desc2),
	Attr_award_bin = encode_p_personybc_award_attrs(Attr_awardFinal, <<>>),
	SizeAttr_awardFinal = erlang:length(Attr_awardFinal),
	BinLen_attr_award = erlang:byte_size(Attr_award_bin),
	Prop_award_bin = encode_p_personybc_award_props(Prop_awardFinal, <<>>),
	SizeProp_awardFinal = erlang:length(Prop_awardFinal),
	BinLen_prop_award = erlang:byte_size(Prop_award_bin),

	<<ColorFinal:32/signed,Start_timeFinal:32/signed,Time_limitFinal:32/signed,StatusFinal:32/signed,Do_timesFinal:32/signed,Public_npc_idFinal:32/signed,Commit_npc_idFinal:32/signed,DescLen:16, Desc2/binary,SizeAttr_awardFinal:16, BinLen_attr_award:32, Attr_award_bin/binary,SizeProp_awardFinal:16, BinLen_prop_award:32, Prop_award_bin/binary,TypeFinal:32/signed,Faction_new_start_timeFinal:32/signed,Faction_start_timeFinal:32/signed,Faction_time_limitFinal:32/signed,Cost_typeFinal:32/signed,Cost_silverFinal:32/signed,Cost_silver_bindFinal:32/signed,Need_notice_when_autoFinal:8,Auto_pay_goldFinal:32/signed,AutoFinal:8>>;
encode_p_personybc_info(_) -> 
	<<>>.

decode_p_personybc_info(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Color:32/signed,Start_time:32/signed,Time_limit:32/signed,Status:32/signed,Do_times:32/signed,Public_npc_id:32/signed,Commit_npc_id:32/signed,DescLen:16, Bin1/binary>> = Bin0,
	<<Desc:DescLen/binary,_Sizeattr_award:16, BinLenattr_award:32, Bin2/binary>> = Bin1,
	<<SubBinattr_award:BinLenattr_award/binary, Bin3/binary>> = Bin2, 
	Attr_award = lists:reverse(decode_p_personybc_award_attrs(SubBinattr_award, [])),
	<<_Sizeprop_award:16, BinLenprop_award:32, Bin4/binary>> = Bin3,
	<<SubBinprop_award:BinLenprop_award/binary, Bin5/binary>> = Bin4, 
	Prop_award = lists:reverse(decode_p_personybc_award_props(SubBinprop_award, [])),
	<<Type:32/signed,Faction_new_start_time:32/signed,Faction_start_time:32/signed,Faction_time_limit:32/signed,Cost_type:32/signed,Cost_silver:32/signed,Cost_silver_bind:32/signed,Need_notice_when_autoTmp:8,Auto_pay_gold:32/signed,AutoTmp:8>> = Bin5,
case Need_notice_when_autoTmp of 
	1 -> 
		Need_notice_when_auto = true;
	_ ->
		Need_notice_when_auto = false
end,
case AutoTmp of 
	1 -> 
		Auto = true;
	_ ->
		Auto = false
end,

	{p_personybc_info, Color,Start_time,Time_limit,Status,Do_times,Public_npc_id,Commit_npc_id,common_tool:to_list(Desc),Attr_award,Prop_award,Type,Faction_new_start_time,Faction_start_time,Faction_time_limit,Cost_type,Cost_silver,Cost_silver_bind,Need_notice_when_auto,Auto_pay_gold,Auto};

decode_p_personybc_info(_) ->
	undefined.
encode_p_personybc_award_prop(Record) when is_record(Record, p_personybc_award_prop) ->
	#p_personybc_award_prop{color=Color,prop_type=Prop_type,prop_num=Prop_num} = Record,
	case Color =:= undefined of
		true ->
				ColorFinal = undefined,
				exit({required_field_not_assigned, p_personybc_award_prop, color});
		false ->
			ColorFinal = Color
	end,
	case Prop_type =:= undefined of
		true ->
				Prop_typeFinal = undefined,
				exit({required_field_not_assigned, p_personybc_award_prop, prop_type});
		false ->
			Prop_typeFinal = Prop_type
	end,
	case Prop_num =:= undefined of
		true ->
				Prop_numFinal = undefined,
				exit({required_field_not_assigned, p_personybc_award_prop, prop_num});
		false ->
			Prop_numFinal = Prop_num
	end,

	<<ColorFinal:32/signed,Prop_typeFinal:32/signed,Prop_numFinal:32/signed>>;
encode_p_personybc_award_prop(_) -> 
	<<>>.

decode_p_personybc_award_prop(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Color:32/signed,Prop_type:32/signed,Prop_num:32/signed>> = Bin0,

	{p_personybc_award_prop, Color,Prop_type,Prop_num};

decode_p_personybc_award_prop(_) ->
	undefined.
encode_p_personybc_award_attr(Record) when is_record(Record, p_personybc_award_attr) ->
	#p_personybc_award_attr{color=Color,attr_type=Attr_type,attr_num=Attr_num} = Record,
	case Color =:= undefined of
		true ->
				ColorFinal = undefined,
				exit({required_field_not_assigned, p_personybc_award_attr, color});
		false ->
			ColorFinal = Color
	end,
	case Attr_type =:= undefined of
		true ->
				Attr_typeFinal = undefined,
				exit({required_field_not_assigned, p_personybc_award_attr, attr_type});
		false ->
			Attr_typeFinal = Attr_type
	end,
	case Attr_num =:= undefined of
		true ->
				Attr_numFinal = undefined,
				exit({required_field_not_assigned, p_personybc_award_attr, attr_num});
		false ->
			Attr_numFinal = Attr_num
	end,

	<<ColorFinal:32/signed,Attr_typeFinal:32/signed,Attr_numFinal:32/signed>>;
encode_p_personybc_award_attr(_) -> 
	<<>>.

decode_p_personybc_award_attr(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Color:32/signed,Attr_type:32/signed,Attr_num:32/signed>> = Bin0,

	{p_personybc_award_attr, Color,Attr_type,Attr_num};

decode_p_personybc_award_attr(_) ->
	undefined.
encode_m_personybc_public_tos(Record) when is_record(Record, m_personybc_public_tos) ->
	#m_personybc_public_tos{type=Type} = Record,
	case Type =:= undefined of
		true ->
				TypeFinal = 0;
		false ->
			TypeFinal = Type
	end,

	<<TypeFinal:32/signed>>;
encode_m_personybc_public_tos(_) -> 
	<<>>.

decode_m_personybc_public_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Type:32/signed>> = Bin0,

	{m_personybc_public_tos, Type};

decode_m_personybc_public_tos(_) ->
	undefined.
encode_m_personybc_public_toc(Record) when is_record(Record, m_personybc_public_toc) ->
	#m_personybc_public_toc{succ=Succ,reason=Reason,info=Info} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_personybc_public_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Info =:= undefined of
		true ->
				InfoFinal = 0;
		false ->
			InfoFinal = Info
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Info_bin = encode_p_personybc_info(InfoFinal),
	BinLen_info = erlang:byte_size(Info_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_info:32, Info_bin/binary>>;
encode_m_personybc_public_toc(_) -> 
	<<>>.

decode_m_personybc_public_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_SubBinSizeinfo:32, SubBininfo/binary>> = Bin1,
	Info = decode_p_personybc_info(SubBininfo),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_personybc_public_toc, Succ,common_tool:to_list(Reason),Info};

decode_m_personybc_public_toc(_) ->
	undefined.
encode_m_personybc_auto_tos(Record) when is_record(Record, m_personybc_auto_tos) ->
	#m_personybc_auto_tos{type=Type} = Record,
	case Type =:= undefined of
		true ->
				TypeFinal = 1;
		false ->
		case Type of
			true ->
				TypeFinal = 1;
			false ->
				TypeFinal = 0
		end
	end,

	<<TypeFinal:8>>;
encode_m_personybc_auto_tos(_) -> 
	<<>>.

decode_m_personybc_auto_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<TypeTmp:8>> = Bin0,
case TypeTmp of 
	1 -> 
		Type = true;
	_ ->
		Type = false
end,

	{m_personybc_auto_tos, Type};

decode_m_personybc_auto_tos(_) ->
	undefined.
encode_m_personybc_auto_toc(Record) when is_record(Record, m_personybc_auto_toc) ->
	#m_personybc_auto_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_personybc_auto_toc(_) -> 
	<<>>.

decode_m_personybc_auto_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_personybc_auto_toc, Succ,common_tool:to_list(Reason)};

decode_m_personybc_auto_toc(_) ->
	undefined.
encode_m_personybc_set_auto_tos(Record) when is_record(Record, m_personybc_set_auto_tos) ->
	#m_personybc_set_auto_tos{flag=Flag} = Record,
	case Flag =:= undefined of
		true ->
				FlagFinal = 1;
		false ->
		case Flag of
			true ->
				FlagFinal = 1;
			false ->
				FlagFinal = 0
		end
	end,

	<<FlagFinal:8>>;
encode_m_personybc_set_auto_tos(_) -> 
	<<>>.

decode_m_personybc_set_auto_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<FlagTmp:8>> = Bin0,
case FlagTmp of 
	1 -> 
		Flag = true;
	_ ->
		Flag = false
end,

	{m_personybc_set_auto_tos, Flag};

decode_m_personybc_set_auto_tos(_) ->
	undefined.
encode_m_personybc_set_auto_toc(Record) when is_record(Record, m_personybc_set_auto_toc) ->
	#m_personybc_set_auto_toc{succ=Succ,reason=Reason,flag=Flag} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Flag =:= undefined of
		true ->
				FlagFinal = 1;
		false ->
			case Flag of
				true ->
					FlagFinal = 1;
				false ->
					FlagFinal = 0
			end
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,FlagFinal:8>>;
encode_m_personybc_set_auto_toc(_) -> 
	<<>>.

decode_m_personybc_set_auto_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,FlagTmp:8>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case FlagTmp of 
	1 -> 
		Flag = true;
	_ ->
		Flag = false
end,

	{m_personybc_set_auto_toc, Succ,common_tool:to_list(Reason),Flag};

decode_m_personybc_set_auto_toc(_) ->
	undefined.
encode_m_personybc_cancel_tos(Record) when is_record(Record, m_personybc_cancel_tos) ->
	#m_personybc_cancel_tos{} = Record,

	<<>>;
encode_m_personybc_cancel_tos(_) -> 
	<<>>.

decode_m_personybc_cancel_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_personybc_cancel_tos};

decode_m_personybc_cancel_tos(_) ->
	undefined.
encode_m_personybc_cancel_toc(Record) when is_record(Record, m_personybc_cancel_toc) ->
	#m_personybc_cancel_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_personybc_cancel_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_personybc_cancel_toc(_) -> 
	<<>>.

decode_m_personybc_cancel_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_personybc_cancel_toc, Succ,common_tool:to_list(Reason)};

decode_m_personybc_cancel_toc(_) ->
	undefined.
encode_m_personybc_commit_tos(Record) when is_record(Record, m_personybc_commit_tos) ->
	#m_personybc_commit_tos{} = Record,

	<<>>;
encode_m_personybc_commit_tos(_) -> 
	<<>>.

decode_m_personybc_commit_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_personybc_commit_tos};

decode_m_personybc_commit_tos(_) ->
	undefined.
encode_m_personybc_commit_toc(Record) when is_record(Record, m_personybc_commit_toc) ->
	#m_personybc_commit_toc{succ=Succ,reason=Reason,status=Status,attr_award_list=Attr_award_list,prop_award_list=Prop_award_list} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_personybc_commit_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Status =:= undefined of
		true ->
				StatusFinal = 0;
		false ->
			StatusFinal = Status
	end,
	case Attr_award_list =:= undefined of
		true ->
			Attr_award_listFinal = [];
		false ->
			Attr_award_listFinal = Attr_award_list
	end,
	case Prop_award_list =:= undefined of
		true ->
			Prop_award_listFinal = [];
		false ->
			Prop_award_listFinal = Prop_award_list
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Attr_award_list_bin = encode_p_personybc_award_attrs(Attr_award_listFinal, <<>>),
	SizeAttr_award_listFinal = erlang:length(Attr_award_listFinal),
	BinLen_attr_award_list = erlang:byte_size(Attr_award_list_bin),
	Prop_award_list_bin = encode_p_personybc_award_props(Prop_award_listFinal, <<>>),
	SizeProp_award_listFinal = erlang:length(Prop_award_listFinal),
	BinLen_prop_award_list = erlang:byte_size(Prop_award_list_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,StatusFinal:32/signed,SizeAttr_award_listFinal:16, BinLen_attr_award_list:32, Attr_award_list_bin/binary,SizeProp_award_listFinal:16, BinLen_prop_award_list:32, Prop_award_list_bin/binary>>;
encode_m_personybc_commit_toc(_) -> 
	<<>>.

decode_m_personybc_commit_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Status:32/signed,_Sizeattr_award_list:16, BinLenattr_award_list:32, Bin2/binary>> = Bin1,
	<<SubBinattr_award_list:BinLenattr_award_list/binary, Bin3/binary>> = Bin2, 
	Attr_award_list = lists:reverse(decode_p_personybc_award_attrs(SubBinattr_award_list, [])),
	<<_Sizeprop_award_list:16, _BinLenprop_award_list:32, SubBinprop_award_list/binary>> = Bin3,
	Prop_award_list = lists:reverse(decode_p_personybc_award_props(SubBinprop_award_list, [])),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_personybc_commit_toc, Succ,common_tool:to_list(Reason),Status,Attr_award_list,Prop_award_list};

decode_m_personybc_commit_toc(_) ->
	undefined.
encode_m_personybc_info_tos(Record) when is_record(Record, m_personybc_info_tos) ->
	#m_personybc_info_tos{type=Type} = Record,
	case Type =:= undefined of
		true ->
				TypeFinal = 0;
		false ->
			TypeFinal = Type
	end,

	<<TypeFinal:32/signed>>;
encode_m_personybc_info_tos(_) -> 
	<<>>.

decode_m_personybc_info_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Type:32/signed>> = Bin0,

	{m_personybc_info_tos, Type};

decode_m_personybc_info_tos(_) ->
	undefined.
encode_m_personybc_info_toc(Record) when is_record(Record, m_personybc_info_toc) ->
	#m_personybc_info_toc{succ=Succ,reason=Reason,info=Info} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_personybc_info_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Info =:= undefined of
		true ->
				InfoFinal = 0;
		false ->
			InfoFinal = Info
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Info_bin = encode_p_personybc_info(InfoFinal),
	BinLen_info = erlang:byte_size(Info_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_info:32, Info_bin/binary>>;
encode_m_personybc_info_toc(_) -> 
	<<>>.

decode_m_personybc_info_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_SubBinSizeinfo:32, SubBininfo/binary>> = Bin1,
	Info = decode_p_personybc_info(SubBininfo),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_personybc_info_toc, Succ,common_tool:to_list(Reason),Info};

decode_m_personybc_info_toc(_) ->
	undefined.
encode_m_personybc_color_change_toc(Record) when is_record(Record, m_personybc_color_change_toc) ->
	#m_personybc_color_change_toc{color=Color} = Record,
	case Color =:= undefined of
		true ->
				ColorFinal = undefined,
				exit({required_field_not_assigned, m_personybc_color_change_toc, color});
		false ->
			ColorFinal = Color
	end,

	<<ColorFinal:32/signed>>;
encode_m_personybc_color_change_toc(_) -> 
	<<>>.

decode_m_personybc_color_change_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Color:32/signed>> = Bin0,

	{m_personybc_color_change_toc, Color};

decode_m_personybc_color_change_toc(_) ->
	undefined.
encode_m_personybc_timer_toc(Record) when is_record(Record, m_personybc_timer_toc) ->
	#m_personybc_timer_toc{remain_time=Remain_time} = Record,
	case Remain_time =:= undefined of
		true ->
				Remain_timeFinal = 0;
		false ->
			Remain_timeFinal = Remain_time
	end,

	<<Remain_timeFinal:32/signed>>;
encode_m_personybc_timer_toc(_) -> 
	<<>>.

decode_m_personybc_timer_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Remain_time:32/signed>> = Bin0,

	{m_personybc_timer_toc, Remain_time};

decode_m_personybc_timer_toc(_) ->
	undefined.
encode_m_personybc_faction_notice_toc(Record) when is_record(Record, m_personybc_faction_notice_toc) ->
	#m_personybc_faction_notice_toc{type=Type,last_time=Last_time} = Record,
	case Type =:= undefined of
		true ->
				TypeFinal = undefined,
				exit({required_field_not_assigned, m_personybc_faction_notice_toc, type});
		false ->
			TypeFinal = Type
	end,
	case Last_time =:= undefined of
		true ->
				Last_timeFinal = undefined,
				exit({required_field_not_assigned, m_personybc_faction_notice_toc, last_time});
		false ->
			Last_timeFinal = Last_time
	end,

	<<TypeFinal:32/signed,Last_timeFinal:32/signed>>;
encode_m_personybc_faction_notice_toc(_) -> 
	<<>>.

decode_m_personybc_faction_notice_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Type:32/signed,Last_time:32/signed>> = Bin0,

	{m_personybc_faction_notice_toc, Type,Last_time};

decode_m_personybc_faction_notice_toc(_) ->
	undefined.
encode_m_personybc_faction_tos(Record) when is_record(Record, m_personybc_faction_tos) ->
	#m_personybc_faction_tos{type=Type,start_h=Start_h,start_m=Start_m} = Record,
	case Type =:= undefined of
		true ->
				TypeFinal = 0;
		false ->
			TypeFinal = Type
	end,
	case Start_h =:= undefined of
		true ->
				Start_hFinal = undefined,
				exit({required_field_not_assigned, m_personybc_faction_tos, start_h});
		false ->
			Start_hFinal = Start_h
	end,
	case Start_m =:= undefined of
		true ->
				Start_mFinal = undefined,
				exit({required_field_not_assigned, m_personybc_faction_tos, start_m});
		false ->
			Start_mFinal = Start_m
	end,

	<<TypeFinal:32/signed,Start_hFinal:32/signed,Start_mFinal:32/signed>>;
encode_m_personybc_faction_tos(_) -> 
	<<>>.

decode_m_personybc_faction_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Type:32/signed,Start_h:32/signed,Start_m:32/signed>> = Bin0,

	{m_personybc_faction_tos, Type,Start_h,Start_m};

decode_m_personybc_faction_tos(_) ->
	undefined.
encode_m_personybc_faction_toc(Record) when is_record(Record, m_personybc_faction_toc) ->
	#m_personybc_faction_toc{succ=Succ,reason=Reason,public_role_id=Public_role_id,public_role_name=Public_role_name,public_office=Public_office,new_start_h=New_start_h,new_start_m=New_start_m,new_start_time=New_start_time,today_start_time=Today_start_time,time_limit=Time_limit,npc_id=Npc_id,map_id=Map_id} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_personybc_faction_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Public_role_id =:= undefined of
		true ->
				Public_role_idFinal = 0;
		false ->
			Public_role_idFinal = Public_role_id
	end,
	case Public_role_name =:= undefined of
		true ->
				Public_role_nameFinal = <<>>;
		false ->
			Public_role_nameFinal = Public_role_name
	end,
	case Public_office =:= undefined of
		true ->
				Public_officeFinal = 0;
		false ->
			Public_officeFinal = Public_office
	end,
	case New_start_h =:= undefined of
		true ->
				New_start_hFinal = 0;
		false ->
			New_start_hFinal = New_start_h
	end,
	case New_start_m =:= undefined of
		true ->
				New_start_mFinal = 0;
		false ->
			New_start_mFinal = New_start_m
	end,
	case New_start_time =:= undefined of
		true ->
				New_start_timeFinal = 0;
		false ->
			New_start_timeFinal = New_start_time
	end,
	case Today_start_time =:= undefined of
		true ->
				Today_start_timeFinal = 0;
		false ->
			Today_start_timeFinal = Today_start_time
	end,
	case Time_limit =:= undefined of
		true ->
				Time_limitFinal = 0;
		false ->
			Time_limitFinal = Time_limit
	end,
	case Npc_id =:= undefined of
		true ->
				Npc_idFinal = 0;
		false ->
			Npc_idFinal = Npc_id
	end,
	case Map_id =:= undefined of
		true ->
				Map_idFinal = 0;
		false ->
			Map_idFinal = Map_id
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Public_role_name2 = common_tool:to_binary(Public_role_nameFinal),
	Public_role_nameLen = erlang:byte_size(Public_role_name2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Public_role_idFinal:32/signed,Public_role_nameLen:16, Public_role_name2/binary,Public_officeFinal:32/signed,New_start_hFinal:32/signed,New_start_mFinal:32/signed,New_start_timeFinal:32/signed,Today_start_timeFinal:32/signed,Time_limitFinal:32/signed,Npc_idFinal:32/signed,Map_idFinal:32/signed>>;
encode_m_personybc_faction_toc(_) -> 
	<<>>.

decode_m_personybc_faction_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Public_role_id:32/signed,Public_role_nameLen:16, Bin2/binary>> = Bin1,
	<<Public_role_name:Public_role_nameLen/binary,Public_office:32/signed,New_start_h:32/signed,New_start_m:32/signed,New_start_time:32/signed,Today_start_time:32/signed,Time_limit:32/signed,Npc_id:32/signed,Map_id:32/signed>> = Bin2,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_personybc_faction_toc, Succ,common_tool:to_list(Reason),Public_role_id,common_tool:to_list(Public_role_name),Public_office,New_start_h,New_start_m,New_start_time,Today_start_time,Time_limit,Npc_id,Map_id};

decode_m_personybc_faction_toc(_) ->
	undefined.
encode_m_personybc_sos_toc(Record) when is_record(Record, m_personybc_sos_toc) ->
	#m_personybc_sos_toc{pos=Pos,map_id=Map_id,role_name=Role_name} = Record,
	case Pos =:= undefined of
		true ->
				PosFinal = undefined,
				exit({required_field_not_assigned, m_personybc_sos_toc, pos});
		false ->
			PosFinal = Pos
	end,
	case Map_id =:= undefined of
		true ->
				Map_idFinal = undefined,
				exit({required_field_not_assigned, m_personybc_sos_toc, map_id});
		false ->
			Map_idFinal = Map_id
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = undefined,
				exit({required_field_not_assigned, m_personybc_sos_toc, role_name});
		false ->
			Role_nameFinal = Role_name
	end,
	Pos_bin = encode_p_pos(PosFinal),
	BinLen_pos = erlang:byte_size(Pos_bin),
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),

	<<BinLen_pos:32, Pos_bin/binary,Map_idFinal:32/signed,Role_nameLen:16, Role_name2/binary>>;
encode_m_personybc_sos_toc(_) -> 
	<<>>.

decode_m_personybc_sos_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SubBinSizepos:32, Bin1/binary>> = Bin0,
	<<SubBinpos:SubBinSizepos/binary, Bin2/binary>> = Bin1,
	Pos = decode_p_pos(SubBinpos),
	<<Map_id:32/signed,Role_nameLen:16, Bin3/binary>> = Bin2,
	<<Role_name:Role_nameLen/binary>> = Bin3,

	{m_personybc_sos_toc, Pos,Map_id,common_tool:to_list(Role_name)};

decode_m_personybc_sos_toc(_) ->
	undefined.
encode_m_personybc_auto_refresh_color_tos(Record) when is_record(Record, m_personybc_auto_refresh_color_tos) ->
	#m_personybc_auto_refresh_color_tos{color=Color,is_auto_buy=Is_auto_buy} = Record,
	case Color =:= undefined of
		true ->
				ColorFinal = 5;
		false ->
			ColorFinal = Color
	end,
	case Is_auto_buy =:= undefined of
		true ->
				Is_auto_buyFinal = 1;
		false ->
		case Is_auto_buy of
			true ->
				Is_auto_buyFinal = 1;
			false ->
				Is_auto_buyFinal = 0
		end
	end,

	<<ColorFinal:32/signed,Is_auto_buyFinal:8>>;
encode_m_personybc_auto_refresh_color_tos(_) -> 
	<<>>.

decode_m_personybc_auto_refresh_color_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Color:32/signed,Is_auto_buyTmp:8>> = Bin0,
case Is_auto_buyTmp of 
	1 -> 
		Is_auto_buy = true;
	_ ->
		Is_auto_buy = false
end,

	{m_personybc_auto_refresh_color_tos, Color,Is_auto_buy};

decode_m_personybc_auto_refresh_color_tos(_) ->
	undefined.
encode_m_personybc_auto_refresh_color_toc(Record) when is_record(Record, m_personybc_auto_refresh_color_toc) ->
	#m_personybc_auto_refresh_color_toc{err_code=Err_code,reason=Reason,item_num=Item_num,color=Color} = Record,
	case Err_code =:= undefined of
		true ->
				Err_codeFinal = 0;
		false ->
			Err_codeFinal = Err_code
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Item_num =:= undefined of
		true ->
				Item_numFinal = 0;
		false ->
			Item_numFinal = Item_num
	end,
	case Color =:= undefined of
		true ->
				ColorFinal = 1;
		false ->
			ColorFinal = Color
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<Err_codeFinal:32/signed,ReasonLen:16, Reason2/binary,Item_numFinal:32/signed,ColorFinal:32/signed>>;
encode_m_personybc_auto_refresh_color_toc(_) -> 
	<<>>.

decode_m_personybc_auto_refresh_color_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Err_code:32/signed,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Item_num:32/signed,Color:32/signed>> = Bin1,

	{m_personybc_auto_refresh_color_toc, Err_code,common_tool:to_list(Reason),Item_num,Color};

decode_m_personybc_auto_refresh_color_toc(_) ->
	undefined.
encode_m_vie_world_fb_enter_tos(Record) when is_record(Record, m_vie_world_fb_enter_tos) ->
	#m_vie_world_fb_enter_tos{npc_id=Npc_id,type_id=Type_id} = Record,
	case Npc_id =:= undefined of
		true ->
				Npc_idFinal = undefined,
				exit({required_field_not_assigned, m_vie_world_fb_enter_tos, npc_id});
		false ->
			Npc_idFinal = Npc_id
	end,
	case Type_id =:= undefined of
		true ->
				Type_idFinal = undefined,
				exit({required_field_not_assigned, m_vie_world_fb_enter_tos, type_id});
		false ->
			Type_idFinal = Type_id
	end,

	<<Npc_idFinal:32/signed,Type_idFinal:32/signed>>;
encode_m_vie_world_fb_enter_tos(_) -> 
	<<>>.

decode_m_vie_world_fb_enter_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Npc_id:32/signed,Type_id:32/signed>> = Bin0,

	{m_vie_world_fb_enter_tos, Npc_id,Type_id};

decode_m_vie_world_fb_enter_tos(_) ->
	undefined.
encode_m_vie_world_fb_enter_toc(Record) when is_record(Record, m_vie_world_fb_enter_toc) ->
	#m_vie_world_fb_enter_toc{succ=Succ,reason=Reason,monster_type_ids=Monster_type_ids} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Monster_type_ids =:= undefined of
		true ->
			Monster_type_idsFinal = [];
		false ->
			Monster_type_idsFinal = Monster_type_ids
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Monster_type_ids_bin = encode_int32s(Monster_type_idsFinal, <<>>),
	SizeMonster_type_idsFinal = erlang:length(Monster_type_idsFinal),
	BinLen_monster_type_ids = erlang:byte_size(Monster_type_ids_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,SizeMonster_type_idsFinal:16, BinLen_monster_type_ids:32, Monster_type_ids_bin/binary>>;
encode_m_vie_world_fb_enter_toc(_) -> 
	<<>>.

decode_m_vie_world_fb_enter_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_Sizemonster_type_ids:16, _BinLenmonster_type_ids:32, SubBinmonster_type_ids/binary>> = Bin1,
	Monster_type_ids = lists:reverse(decode_int32s(SubBinmonster_type_ids, [])),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_vie_world_fb_enter_toc, Succ,common_tool:to_list(Reason),Monster_type_ids};

decode_m_vie_world_fb_enter_toc(_) ->
	undefined.
encode_m_vie_world_fb_quit_tos(Record) when is_record(Record, m_vie_world_fb_quit_tos) ->
	#m_vie_world_fb_quit_tos{} = Record,

	<<>>;
encode_m_vie_world_fb_quit_tos(_) -> 
	<<>>.

decode_m_vie_world_fb_quit_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_vie_world_fb_quit_tos};

decode_m_vie_world_fb_quit_tos(_) ->
	undefined.
encode_m_vie_world_fb_quit_toc(Record) when is_record(Record, m_vie_world_fb_quit_toc) ->
	#m_vie_world_fb_quit_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_vie_world_fb_quit_toc(_) -> 
	<<>>.

decode_m_vie_world_fb_quit_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_vie_world_fb_quit_toc, Succ,common_tool:to_list(Reason)};

decode_m_vie_world_fb_quit_toc(_) ->
	undefined.
encode_m_server_npc_enter_toc(Record) when is_record(Record, m_server_npc_enter_toc) ->
	#m_server_npc_enter_toc{server_npcs=Server_npcs} = Record,
	case Server_npcs =:= undefined of
		true ->
			Server_npcsFinal = [];
		false ->
			Server_npcsFinal = Server_npcs
	end,
	Server_npcs_bin = encode_p_map_server_npcs(Server_npcsFinal, <<>>),
	SizeServer_npcsFinal = erlang:length(Server_npcsFinal),
	BinLen_server_npcs = erlang:byte_size(Server_npcs_bin),

	<<SizeServer_npcsFinal:16, BinLen_server_npcs:32, Server_npcs_bin/binary>>;
encode_m_server_npc_enter_toc(_) -> 
	<<>>.

decode_m_server_npc_enter_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizeserver_npcs:16, _BinLenserver_npcs:32, SubBinserver_npcs/binary>> = Bin0,
	Server_npcs = lists:reverse(decode_p_map_server_npcs(SubBinserver_npcs, [])),

	{m_server_npc_enter_toc, Server_npcs};

decode_m_server_npc_enter_toc(_) ->
	undefined.
encode_m_server_npc_quit_toc(Record) when is_record(Record, m_server_npc_quit_toc) ->
	#m_server_npc_quit_toc{npc_ids=Npc_ids} = Record,
	case Npc_ids =:= undefined of
		true ->
			Npc_idsFinal = [];
		false ->
			Npc_idsFinal = Npc_ids
	end,
	Npc_ids_bin = encode_int32s(Npc_idsFinal, <<>>),
	SizeNpc_idsFinal = erlang:length(Npc_idsFinal),
	BinLen_npc_ids = erlang:byte_size(Npc_ids_bin),

	<<SizeNpc_idsFinal:16, BinLen_npc_ids:32, Npc_ids_bin/binary>>;
encode_m_server_npc_quit_toc(_) -> 
	<<>>.

decode_m_server_npc_quit_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizenpc_ids:16, _BinLennpc_ids:32, SubBinnpc_ids/binary>> = Bin0,
	Npc_ids = lists:reverse(decode_int32s(SubBinnpc_ids, [])),

	{m_server_npc_quit_toc, Npc_ids};

decode_m_server_npc_quit_toc(_) ->
	undefined.
encode_m_server_npc_dead_toc(Record) when is_record(Record, m_server_npc_dead_toc) ->
	#m_server_npc_dead_toc{npc_id=Npc_id} = Record,
	case Npc_id =:= undefined of
		true ->
				Npc_idFinal = undefined,
				exit({required_field_not_assigned, m_server_npc_dead_toc, npc_id});
		false ->
			Npc_idFinal = Npc_id
	end,

	<<Npc_idFinal:32/signed>>;
encode_m_server_npc_dead_toc(_) -> 
	<<>>.

decode_m_server_npc_dead_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Npc_id:32/signed>> = Bin0,

	{m_server_npc_dead_toc, Npc_id};

decode_m_server_npc_dead_toc(_) ->
	undefined.
encode_m_server_npc_attr_change_toc(Record) when is_record(Record, m_server_npc_attr_change_toc) ->
	#m_server_npc_attr_change_toc{npc_id=Npc_id,change_type=Change_type,value=Value} = Record,
	case Npc_id =:= undefined of
		true ->
				Npc_idFinal = undefined,
				exit({required_field_not_assigned, m_server_npc_attr_change_toc, npc_id});
		false ->
			Npc_idFinal = Npc_id
	end,
	case Change_type =:= undefined of
		true ->
				Change_typeFinal = undefined,
				exit({required_field_not_assigned, m_server_npc_attr_change_toc, change_type});
		false ->
			Change_typeFinal = Change_type
	end,
	case Value =:= undefined of
		true ->
				ValueFinal = undefined,
				exit({required_field_not_assigned, m_server_npc_attr_change_toc, value});
		false ->
			ValueFinal = Value
	end,

	<<Npc_idFinal:32/signed,Change_typeFinal:32/signed,ValueFinal:32/signed>>;
encode_m_server_npc_attr_change_toc(_) -> 
	<<>>.

decode_m_server_npc_attr_change_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Npc_id:32/signed,Change_type:32/signed,Value:32/signed>> = Bin0,

	{m_server_npc_attr_change_toc, Npc_id,Change_type,Value};

decode_m_server_npc_attr_change_toc(_) ->
	undefined.
encode_m_server_npc_walk_toc(Record) when is_record(Record, m_server_npc_walk_toc) ->
	#m_server_npc_walk_toc{server_npc_info=Server_npc_info,pos=Pos} = Record,
	case Server_npc_info =:= undefined of
		true ->
				Server_npc_infoFinal = undefined,
				exit({required_field_not_assigned, m_server_npc_walk_toc, server_npc_info});
		false ->
			Server_npc_infoFinal = Server_npc_info
	end,
	case Pos =:= undefined of
		true ->
				PosFinal = undefined,
				exit({required_field_not_assigned, m_server_npc_walk_toc, pos});
		false ->
			PosFinal = Pos
	end,
	Server_npc_info_bin = encode_p_map_server_npc(Server_npc_infoFinal),
	BinLen_server_npc_info = erlang:byte_size(Server_npc_info_bin),
	Pos_bin = encode_p_pos(PosFinal),
	BinLen_pos = erlang:byte_size(Pos_bin),

	<<BinLen_server_npc_info:32, Server_npc_info_bin/binary,BinLen_pos:32, Pos_bin/binary>>;
encode_m_server_npc_walk_toc(_) -> 
	<<>>.

decode_m_server_npc_walk_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SubBinSizeserver_npc_info:32, Bin1/binary>> = Bin0,
	<<SubBinserver_npc_info:SubBinSizeserver_npc_info/binary, Bin2/binary>> = Bin1,
	Server_npc_info = decode_p_map_server_npc(SubBinserver_npc_info),
	<<_SubBinSizepos:32, SubBinpos/binary>> = Bin2,
	Pos = decode_p_pos(SubBinpos),

	{m_server_npc_walk_toc, Server_npc_info,Pos};

decode_m_server_npc_walk_toc(_) ->
	undefined.
encode_m_equiponekey_list_tos(Record) when is_record(Record, m_equiponekey_list_tos) ->
	#m_equiponekey_list_tos{} = Record,

	<<>>;
encode_m_equiponekey_list_tos(_) -> 
	<<>>.

decode_m_equiponekey_list_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_equiponekey_list_tos};

decode_m_equiponekey_list_tos(_) ->
	undefined.
encode_m_equiponekey_list_toc(Record) when is_record(Record, m_equiponekey_list_toc) ->
	#m_equiponekey_list_toc{succ=Succ,equips_list=Equips_list,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Equips_list =:= undefined of
		true ->
			Equips_listFinal = [];
		false ->
			Equips_listFinal = Equips_list
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Equips_list_bin = encode_p_equip_onekey_infos(Equips_listFinal, <<>>),
	SizeEquips_listFinal = erlang:length(Equips_listFinal),
	BinLen_equips_list = erlang:byte_size(Equips_list_bin),
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,SizeEquips_listFinal:16, BinLen_equips_list:32, Equips_list_bin/binary,ReasonLen:16, Reason2/binary>>;
encode_m_equiponekey_list_toc(_) -> 
	<<>>.

decode_m_equiponekey_list_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,_Sizeequips_list:16, BinLenequips_list:32, Bin1/binary>> = Bin0,
	<<SubBinequips_list:BinLenequips_list/binary, Bin2/binary>> = Bin1, 
	Equips_list = lists:reverse(decode_p_equip_onekey_infos(SubBinequips_list, [])),
	<<ReasonLen:16, Bin3/binary>> = Bin2,
	<<Reason:ReasonLen/binary>> = Bin3,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_equiponekey_list_toc, Succ,Equips_list,common_tool:to_list(Reason)};

decode_m_equiponekey_list_toc(_) ->
	undefined.
encode_m_equiponekey_info_tos(Record) when is_record(Record, m_equiponekey_info_tos) ->
	#m_equiponekey_info_tos{equips_id=Equips_id} = Record,
	case Equips_id =:= undefined of
		true ->
				Equips_idFinal = undefined,
				exit({required_field_not_assigned, m_equiponekey_info_tos, equips_id});
		false ->
			Equips_idFinal = Equips_id
	end,

	<<Equips_idFinal:32/signed>>;
encode_m_equiponekey_info_tos(_) -> 
	<<>>.

decode_m_equiponekey_info_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Equips_id:32/signed>> = Bin0,

	{m_equiponekey_info_tos, Equips_id};

decode_m_equiponekey_info_tos(_) ->
	undefined.
encode_m_equiponekey_info_toc(Record) when is_record(Record, m_equiponekey_info_toc) ->
	#m_equiponekey_info_toc{succ=Succ,equips_list=Equips_list,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Equips_list =:= undefined of
		true ->
				Equips_listFinal = 0;
		false ->
			Equips_listFinal = Equips_list
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Equips_list_bin = encode_p_equip_onekey_info(Equips_listFinal),
	BinLen_equips_list = erlang:byte_size(Equips_list_bin),
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,BinLen_equips_list:32, Equips_list_bin/binary,ReasonLen:16, Reason2/binary>>;
encode_m_equiponekey_info_toc(_) -> 
	<<>>.

decode_m_equiponekey_info_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,SubBinSizeequips_list:32, Bin1/binary>> = Bin0,
	<<SubBinequips_list:SubBinSizeequips_list/binary, Bin2/binary>> = Bin1,
	Equips_list = decode_p_equip_onekey_info(SubBinequips_list),
	<<ReasonLen:16, Bin3/binary>> = Bin2,
	<<Reason:ReasonLen/binary>> = Bin3,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_equiponekey_info_toc, Succ,Equips_list,common_tool:to_list(Reason)};

decode_m_equiponekey_info_toc(_) ->
	undefined.
encode_m_equiponekey_save_tos(Record) when is_record(Record, m_equiponekey_save_tos) ->
	#m_equiponekey_save_tos{equips_list=Equips_list} = Record,
	case Equips_list =:= undefined of
		true ->
				Equips_listFinal = undefined,
				exit({required_field_not_assigned, m_equiponekey_save_tos, equips_list});
		false ->
			Equips_listFinal = Equips_list
	end,
	Equips_list_bin = encode_p_equip_onekey_info(Equips_listFinal),
	BinLen_equips_list = erlang:byte_size(Equips_list_bin),

	<<BinLen_equips_list:32, Equips_list_bin/binary>>;
encode_m_equiponekey_save_tos(_) -> 
	<<>>.

decode_m_equiponekey_save_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_SubBinSizeequips_list:32, SubBinequips_list/binary>> = Bin0,
	Equips_list = decode_p_equip_onekey_info(SubBinequips_list),

	{m_equiponekey_save_tos, Equips_list};

decode_m_equiponekey_save_tos(_) ->
	undefined.
encode_m_equiponekey_save_toc(Record) when is_record(Record, m_equiponekey_save_toc) ->
	#m_equiponekey_save_toc{succ=Succ,equips_id=Equips_id,equips_name=Equips_name,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Equips_id =:= undefined of
		true ->
				Equips_idFinal = 0;
		false ->
			Equips_idFinal = Equips_id
	end,
	case Equips_name =:= undefined of
		true ->
				Equips_nameFinal = <<>>;
		false ->
			Equips_nameFinal = Equips_name
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Equips_name2 = common_tool:to_binary(Equips_nameFinal),
	Equips_nameLen = erlang:byte_size(Equips_name2),
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,Equips_idFinal:32/signed,Equips_nameLen:16, Equips_name2/binary,ReasonLen:16, Reason2/binary>>;
encode_m_equiponekey_save_toc(_) -> 
	<<>>.

decode_m_equiponekey_save_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,Equips_id:32/signed,Equips_nameLen:16, Bin1/binary>> = Bin0,
	<<Equips_name:Equips_nameLen/binary,ReasonLen:16, Bin2/binary>> = Bin1,
	<<Reason:ReasonLen/binary>> = Bin2,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_equiponekey_save_toc, Succ,Equips_id,common_tool:to_list(Equips_name),common_tool:to_list(Reason)};

decode_m_equiponekey_save_toc(_) ->
	undefined.
encode_m_equiponekey_load_tos(Record) when is_record(Record, m_equiponekey_load_tos) ->
	#m_equiponekey_load_tos{equips_id=Equips_id} = Record,
	case Equips_id =:= undefined of
		true ->
				Equips_idFinal = undefined,
				exit({required_field_not_assigned, m_equiponekey_load_tos, equips_id});
		false ->
			Equips_idFinal = Equips_id
	end,

	<<Equips_idFinal:32/signed>>;
encode_m_equiponekey_load_tos(_) -> 
	<<>>.

decode_m_equiponekey_load_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Equips_id:32/signed>> = Bin0,

	{m_equiponekey_load_tos, Equips_id};

decode_m_equiponekey_load_tos(_) ->
	undefined.
encode_m_equiponekey_load_toc(Record) when is_record(Record, m_equiponekey_load_toc) ->
	#m_equiponekey_load_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_equiponekey_load_toc(_) -> 
	<<>>.

decode_m_equiponekey_load_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_equiponekey_load_toc, Succ,common_tool:to_list(Reason)};

decode_m_equiponekey_load_toc(_) ->
	undefined.
encode_m_activity_today_tos(Record) when is_record(Record, m_activity_today_tos) ->
	#m_activity_today_tos{type=Type} = Record,
	case Type =:= undefined of
		true ->
				TypeFinal = 1;
		false ->
			TypeFinal = Type
	end,

	<<TypeFinal:32/signed>>;
encode_m_activity_today_tos(_) -> 
	<<>>.

decode_m_activity_today_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Type:32/signed>> = Bin0,

	{m_activity_today_tos, Type};

decode_m_activity_today_tos(_) ->
	undefined.
encode_m_activity_today_toc(Record) when is_record(Record, m_activity_today_toc) ->
	#m_activity_today_toc{succ=Succ,reason=Reason,activity_list=Activity_list} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Activity_list =:= undefined of
		true ->
			Activity_listFinal = [];
		false ->
			Activity_listFinal = Activity_list
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Activity_list_bin = encode_p_activity_infos(Activity_listFinal, <<>>),
	SizeActivity_listFinal = erlang:length(Activity_listFinal),
	BinLen_activity_list = erlang:byte_size(Activity_list_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,SizeActivity_listFinal:16, BinLen_activity_list:32, Activity_list_bin/binary>>;
encode_m_activity_today_toc(_) -> 
	<<>>.

decode_m_activity_today_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_Sizeactivity_list:16, _BinLenactivity_list:32, SubBinactivity_list/binary>> = Bin1,
	Activity_list = lists:reverse(decode_p_activity_infos(SubBinactivity_list, [])),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_activity_today_toc, Succ,common_tool:to_list(Reason),Activity_list};

decode_m_activity_today_toc(_) ->
	undefined.
encode_m_activity_pay_gift_info_tos(Record) when is_record(Record, m_activity_pay_gift_info_tos) ->
	#m_activity_pay_gift_info_tos{} = Record,

	<<>>;
encode_m_activity_pay_gift_info_tos(_) -> 
	<<>>.

decode_m_activity_pay_gift_info_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_activity_pay_gift_info_tos};

decode_m_activity_pay_gift_info_tos(_) ->
	undefined.
encode_m_activity_pay_gift_info_toc(Record) when is_record(Record, m_activity_pay_gift_info_toc) ->
	#m_activity_pay_gift_info_toc{succ=Succ,reason=Reason,pay_first_type_id=Pay_first_type_id,pay_first_goods_list=Pay_first_goods_list,has_get_pay_first_gift=Has_get_pay_first_gift,accumulate_pay_goods_info=Accumulate_pay_goods_info,has_get_accumulate_pay_gift=Has_get_accumulate_pay_gift,happy_gift_goods_list=Happy_gift_goods_list,has_get_happy_gift=Has_get_happy_gift} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Pay_first_type_id =:= undefined of
		true ->
				Pay_first_type_idFinal = 0;
		false ->
			Pay_first_type_idFinal = Pay_first_type_id
	end,
	case Pay_first_goods_list =:= undefined of
		true ->
			Pay_first_goods_listFinal = [];
		false ->
			Pay_first_goods_listFinal = Pay_first_goods_list
	end,
	case Has_get_pay_first_gift =:= undefined of
		true ->
				Has_get_pay_first_giftFinal = 1;
		false ->
			case Has_get_pay_first_gift of
				true ->
					Has_get_pay_first_giftFinal = 1;
				false ->
					Has_get_pay_first_giftFinal = 0
			end
	end,
	case Accumulate_pay_goods_info =:= undefined of
		true ->
				Accumulate_pay_goods_infoFinal = 0;
		false ->
			Accumulate_pay_goods_infoFinal = Accumulate_pay_goods_info
	end,
	case Has_get_accumulate_pay_gift =:= undefined of
		true ->
				Has_get_accumulate_pay_giftFinal = 1;
		false ->
			case Has_get_accumulate_pay_gift of
				true ->
					Has_get_accumulate_pay_giftFinal = 1;
				false ->
					Has_get_accumulate_pay_giftFinal = 0
			end
	end,
	case Happy_gift_goods_list =:= undefined of
		true ->
			Happy_gift_goods_listFinal = [];
		false ->
			Happy_gift_goods_listFinal = Happy_gift_goods_list
	end,
	case Has_get_happy_gift =:= undefined of
		true ->
				Has_get_happy_giftFinal = 1;
		false ->
			case Has_get_happy_gift of
				true ->
					Has_get_happy_giftFinal = 1;
				false ->
					Has_get_happy_giftFinal = 0
			end
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Pay_first_goods_list_bin = encode_p_gift_goodss(Pay_first_goods_listFinal, <<>>),
	SizePay_first_goods_listFinal = erlang:length(Pay_first_goods_listFinal),
	BinLen_pay_first_goods_list = erlang:byte_size(Pay_first_goods_list_bin),
	Accumulate_pay_goods_info_bin = encode_p_goods(Accumulate_pay_goods_infoFinal),
	BinLen_accumulate_pay_goods_info = erlang:byte_size(Accumulate_pay_goods_info_bin),
	Happy_gift_goods_list_bin = encode_p_gift_goodss(Happy_gift_goods_listFinal, <<>>),
	SizeHappy_gift_goods_listFinal = erlang:length(Happy_gift_goods_listFinal),
	BinLen_happy_gift_goods_list = erlang:byte_size(Happy_gift_goods_list_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Pay_first_type_idFinal:32/signed,SizePay_first_goods_listFinal:16, BinLen_pay_first_goods_list:32, Pay_first_goods_list_bin/binary,Has_get_pay_first_giftFinal:8,BinLen_accumulate_pay_goods_info:32, Accumulate_pay_goods_info_bin/binary,Has_get_accumulate_pay_giftFinal:8,SizeHappy_gift_goods_listFinal:16, BinLen_happy_gift_goods_list:32, Happy_gift_goods_list_bin/binary,Has_get_happy_giftFinal:8>>;
encode_m_activity_pay_gift_info_toc(_) -> 
	<<>>.

decode_m_activity_pay_gift_info_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Pay_first_type_id:32/signed,_Sizepay_first_goods_list:16, BinLenpay_first_goods_list:32, Bin2/binary>> = Bin1,
	<<SubBinpay_first_goods_list:BinLenpay_first_goods_list/binary, Bin3/binary>> = Bin2, 
	Pay_first_goods_list = lists:reverse(decode_p_gift_goodss(SubBinpay_first_goods_list, [])),
<<Has_get_pay_first_giftTmp:8,SubBinSizeaccumulate_pay_goods_info:32, Bin4/binary>> = Bin3,
	<<SubBinaccumulate_pay_goods_info:SubBinSizeaccumulate_pay_goods_info/binary, Bin5/binary>> = Bin4,
	Accumulate_pay_goods_info = decode_p_goods(SubBinaccumulate_pay_goods_info),
<<Has_get_accumulate_pay_giftTmp:8,_Sizehappy_gift_goods_list:16, BinLenhappy_gift_goods_list:32, Bin6/binary>> = Bin5,
	<<SubBinhappy_gift_goods_list:BinLenhappy_gift_goods_list/binary, Bin7/binary>> = Bin6, 
	Happy_gift_goods_list = lists:reverse(decode_p_gift_goodss(SubBinhappy_gift_goods_list, [])),
<<Has_get_happy_giftTmp:8>> = Bin7,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Has_get_pay_first_giftTmp of 
	1 -> 
		Has_get_pay_first_gift = true;
	_ ->
		Has_get_pay_first_gift = false
end,
case Has_get_accumulate_pay_giftTmp of 
	1 -> 
		Has_get_accumulate_pay_gift = true;
	_ ->
		Has_get_accumulate_pay_gift = false
end,
case Has_get_happy_giftTmp of 
	1 -> 
		Has_get_happy_gift = true;
	_ ->
		Has_get_happy_gift = false
end,

	{m_activity_pay_gift_info_toc, Succ,common_tool:to_list(Reason),Pay_first_type_id,Pay_first_goods_list,Has_get_pay_first_gift,Accumulate_pay_goods_info,Has_get_accumulate_pay_gift,Happy_gift_goods_list,Has_get_happy_gift};

decode_m_activity_pay_gift_info_toc(_) ->
	undefined.
encode_m_activity_getgift_tos(Record) when is_record(Record, m_activity_getgift_tos) ->
	#m_activity_getgift_tos{type=Type,id=Id} = Record,
	case Type =:= undefined of
		true ->
				TypeFinal = undefined,
				exit({required_field_not_assigned, m_activity_getgift_tos, type});
		false ->
			TypeFinal = Type
	end,
	case Id =:= undefined of
		true ->
				IdFinal = 0;
		false ->
			IdFinal = Id
	end,

	<<TypeFinal:32/signed,IdFinal:32/signed>>;
encode_m_activity_getgift_tos(_) -> 
	<<>>.

decode_m_activity_getgift_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Type:32/signed,Id:32/signed>> = Bin0,

	{m_activity_getgift_tos, Type,Id};

decode_m_activity_getgift_tos(_) ->
	undefined.
encode_m_activity_getgift_toc(Record) when is_record(Record, m_activity_getgift_toc) ->
	#m_activity_getgift_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_activity_getgift_toc(_) -> 
	<<>>.

decode_m_activity_getgift_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_activity_getgift_toc, Succ,common_tool:to_list(Reason)};

decode_m_activity_getgift_toc(_) ->
	undefined.
encode_m_activity_benefit_list_tos(Record) when is_record(Record, m_activity_benefit_list_tos) ->
	#m_activity_benefit_list_tos{} = Record,

	<<>>;
encode_m_activity_benefit_list_tos(_) -> 
	<<>>.

decode_m_activity_benefit_list_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_activity_benefit_list_tos};

decode_m_activity_benefit_list_tos(_) ->
	undefined.
encode_m_activity_benefit_list_toc(Record) when is_record(Record, m_activity_benefit_list_toc) ->
	#m_activity_benefit_list_toc{succ=Succ,reason=Reason,is_rewarded=Is_rewarded,act_task_list=Act_task_list,base_exp=Base_exp,extra_exp=Extra_exp} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Is_rewarded =:= undefined of
		true ->
				Is_rewardedFinal = 1;
		false ->
			case Is_rewarded of
				true ->
					Is_rewardedFinal = 1;
				false ->
					Is_rewardedFinal = 0
			end
	end,
	case Act_task_list =:= undefined of
		true ->
			Act_task_listFinal = [];
		false ->
			Act_task_listFinal = Act_task_list
	end,
	case Base_exp =:= undefined of
		true ->
				Base_expFinal = 0;
		false ->
			Base_expFinal = Base_exp
	end,
	case Extra_exp =:= undefined of
		true ->
				Extra_expFinal = 0;
		false ->
			Extra_expFinal = Extra_exp
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Act_task_list_bin = encode_int32s(Act_task_listFinal, <<>>),
	SizeAct_task_listFinal = erlang:length(Act_task_listFinal),
	BinLen_act_task_list = erlang:byte_size(Act_task_list_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Is_rewardedFinal:8,SizeAct_task_listFinal:16, BinLen_act_task_list:32, Act_task_list_bin/binary,Base_expFinal:32/signed,Extra_expFinal:32/signed>>;
encode_m_activity_benefit_list_toc(_) -> 
	<<>>.

decode_m_activity_benefit_list_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Is_rewardedTmp:8,_Sizeact_task_list:16, BinLenact_task_list:32, Bin2/binary>> = Bin1,
	<<SubBinact_task_list:BinLenact_task_list/binary, Bin3/binary>> = Bin2, 
	Act_task_list = lists:reverse(decode_int32s(SubBinact_task_list, [])),
	<<Base_exp:32/signed,Extra_exp:32/signed>> = Bin3,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Is_rewardedTmp of 
	1 -> 
		Is_rewarded = true;
	_ ->
		Is_rewarded = false
end,

	{m_activity_benefit_list_toc, Succ,common_tool:to_list(Reason),Is_rewarded,Act_task_list,Base_exp,Extra_exp};

decode_m_activity_benefit_list_toc(_) ->
	undefined.
encode_m_activity_benefit_reward_tos(Record) when is_record(Record, m_activity_benefit_reward_tos) ->
	#m_activity_benefit_reward_tos{} = Record,

	<<>>;
encode_m_activity_benefit_reward_tos(_) -> 
	<<>>.

decode_m_activity_benefit_reward_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_activity_benefit_reward_tos};

decode_m_activity_benefit_reward_tos(_) ->
	undefined.
encode_m_activity_benefit_reward_toc(Record) when is_record(Record, m_activity_benefit_reward_toc) ->
	#m_activity_benefit_reward_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_activity_benefit_reward_toc(_) -> 
	<<>>.

decode_m_activity_benefit_reward_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_activity_benefit_reward_toc, Succ,common_tool:to_list(Reason)};

decode_m_activity_benefit_reward_toc(_) ->
	undefined.
encode_m_activity_benefit_buy_tos(Record) when is_record(Record, m_activity_benefit_buy_tos) ->
	#m_activity_benefit_buy_tos{act_task_id=Act_task_id} = Record,
	case Act_task_id =:= undefined of
		true ->
				Act_task_idFinal = undefined,
				exit({required_field_not_assigned, m_activity_benefit_buy_tos, act_task_id});
		false ->
			Act_task_idFinal = Act_task_id
	end,

	<<Act_task_idFinal:32/signed>>;
encode_m_activity_benefit_buy_tos(_) -> 
	<<>>.

decode_m_activity_benefit_buy_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Act_task_id:32/signed>> = Bin0,

	{m_activity_benefit_buy_tos, Act_task_id};

decode_m_activity_benefit_buy_tos(_) ->
	undefined.
encode_m_activity_benefit_buy_toc(Record) when is_record(Record, m_activity_benefit_buy_toc) ->
	#m_activity_benefit_buy_toc{succ=Succ,reason=Reason,act_task_id=Act_task_id} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Act_task_id =:= undefined of
		true ->
				Act_task_idFinal = 0;
		false ->
			Act_task_idFinal = Act_task_id
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Act_task_idFinal:32/signed>>;
encode_m_activity_benefit_buy_toc(_) -> 
	<<>>.

decode_m_activity_benefit_buy_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Act_task_id:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_activity_benefit_buy_toc, Succ,common_tool:to_list(Reason),Act_task_id};

decode_m_activity_benefit_buy_toc(_) ->
	undefined.
encode_m_newcomer_activate_code_tos(Record) when is_record(Record, m_newcomer_activate_code_tos) ->
	#m_newcomer_activate_code_tos{code=Code} = Record,
	case Code =:= undefined of
		true ->
				CodeFinal = undefined,
				exit({required_field_not_assigned, m_newcomer_activate_code_tos, code});
		false ->
			CodeFinal = Code
	end,
	Code2 = common_tool:to_binary(CodeFinal),
	CodeLen = erlang:byte_size(Code2),

	<<CodeLen:16, Code2/binary>>;
encode_m_newcomer_activate_code_tos(_) -> 
	<<>>.

decode_m_newcomer_activate_code_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<CodeLen:16, Bin1/binary>> = Bin0,
	<<Code:CodeLen/binary>> = Bin1,

	{m_newcomer_activate_code_tos, common_tool:to_list(Code)};

decode_m_newcomer_activate_code_tos(_) ->
	undefined.
encode_m_newcomer_activate_code_toc(Record) when is_record(Record, m_newcomer_activate_code_toc) ->
	#m_newcomer_activate_code_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_newcomer_activate_code_toc(_) -> 
	<<>>.

decode_m_newcomer_activate_code_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_newcomer_activate_code_toc, Succ,common_tool:to_list(Reason)};

decode_m_newcomer_activate_code_toc(_) ->
	undefined.
encode_m_trading_shop_tos(Record) when is_record(Record, m_trading_shop_tos) ->
	#m_trading_shop_tos{npc_id=Npc_id,map_id=Map_id} = Record,
	case Npc_id =:= undefined of
		true ->
				Npc_idFinal = 0;
		false ->
			Npc_idFinal = Npc_id
	end,
	case Map_id =:= undefined of
		true ->
				Map_idFinal = 0;
		false ->
			Map_idFinal = Map_id
	end,

	<<Npc_idFinal:32/signed,Map_idFinal:32/signed>>;
encode_m_trading_shop_tos(_) -> 
	<<>>.

decode_m_trading_shop_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Npc_id:32/signed,Map_id:32/signed>> = Bin0,

	{m_trading_shop_tos, Npc_id,Map_id};

decode_m_trading_shop_tos(_) ->
	undefined.
encode_m_trading_shop_toc(Record) when is_record(Record, m_trading_shop_toc) ->
	#m_trading_shop_toc{succ=Succ,reason=Reason,shop_goods=Shop_goods,max_buy_time=Max_buy_time,max_sale_time=Max_sale_time,role_goods=Role_goods,bill=Bill,max_bill=Max_bill,update_time=Update_time} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Shop_goods =:= undefined of
		true ->
			Shop_goodsFinal = [];
		false ->
			Shop_goodsFinal = Shop_goods
	end,
	case Max_buy_time =:= undefined of
		true ->
				Max_buy_timeFinal = 0;
		false ->
			Max_buy_timeFinal = Max_buy_time
	end,
	case Max_sale_time =:= undefined of
		true ->
				Max_sale_timeFinal = 0;
		false ->
			Max_sale_timeFinal = Max_sale_time
	end,
	case Role_goods =:= undefined of
		true ->
			Role_goodsFinal = [];
		false ->
			Role_goodsFinal = Role_goods
	end,
	case Bill =:= undefined of
		true ->
				BillFinal = 0;
		false ->
			BillFinal = Bill
	end,
	case Max_bill =:= undefined of
		true ->
				Max_billFinal = 0;
		false ->
			Max_billFinal = Max_bill
	end,
	case Update_time =:= undefined of
		true ->
				Update_timeFinal = 0;
		false ->
			Update_timeFinal = Update_time
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Shop_goods_bin = encode_p_trading_goodss(Shop_goodsFinal, <<>>),
	SizeShop_goodsFinal = erlang:length(Shop_goodsFinal),
	BinLen_shop_goods = erlang:byte_size(Shop_goods_bin),
	Role_goods_bin = encode_p_trading_goodss(Role_goodsFinal, <<>>),
	SizeRole_goodsFinal = erlang:length(Role_goodsFinal),
	BinLen_role_goods = erlang:byte_size(Role_goods_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,SizeShop_goodsFinal:16, BinLen_shop_goods:32, Shop_goods_bin/binary,Max_buy_timeFinal:32/signed,Max_sale_timeFinal:32/signed,SizeRole_goodsFinal:16, BinLen_role_goods:32, Role_goods_bin/binary,BillFinal:32/signed,Max_billFinal:32/signed,Update_timeFinal:32/signed>>;
encode_m_trading_shop_toc(_) -> 
	<<>>.

decode_m_trading_shop_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_Sizeshop_goods:16, BinLenshop_goods:32, Bin2/binary>> = Bin1,
	<<SubBinshop_goods:BinLenshop_goods/binary, Bin3/binary>> = Bin2, 
	Shop_goods = lists:reverse(decode_p_trading_goodss(SubBinshop_goods, [])),
	<<Max_buy_time:32/signed,Max_sale_time:32/signed,_Sizerole_goods:16, BinLenrole_goods:32, Bin4/binary>> = Bin3,
	<<SubBinrole_goods:BinLenrole_goods/binary, Bin5/binary>> = Bin4, 
	Role_goods = lists:reverse(decode_p_trading_goodss(SubBinrole_goods, [])),
	<<Bill:32/signed,Max_bill:32/signed,Update_time:32/signed>> = Bin5,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_trading_shop_toc, Succ,common_tool:to_list(Reason),Shop_goods,Max_buy_time,Max_sale_time,Role_goods,Bill,Max_bill,Update_time};

decode_m_trading_shop_toc(_) ->
	undefined.
encode_m_trading_buy_tos(Record) when is_record(Record, m_trading_buy_tos) ->
	#m_trading_buy_tos{npc_id=Npc_id,map_id=Map_id,type_id=Type_id,number=Number} = Record,
	case Npc_id =:= undefined of
		true ->
				Npc_idFinal = 0;
		false ->
			Npc_idFinal = Npc_id
	end,
	case Map_id =:= undefined of
		true ->
				Map_idFinal = 0;
		false ->
			Map_idFinal = Map_id
	end,
	case Type_id =:= undefined of
		true ->
				Type_idFinal = 0;
		false ->
			Type_idFinal = Type_id
	end,
	case Number =:= undefined of
		true ->
				NumberFinal = 0;
		false ->
			NumberFinal = Number
	end,

	<<Npc_idFinal:32/signed,Map_idFinal:32/signed,Type_idFinal:32/signed,NumberFinal:32/signed>>;
encode_m_trading_buy_tos(_) -> 
	<<>>.

decode_m_trading_buy_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Npc_id:32/signed,Map_id:32/signed,Type_id:32/signed,Number:32/signed>> = Bin0,

	{m_trading_buy_tos, Npc_id,Map_id,Type_id,Number};

decode_m_trading_buy_tos(_) ->
	undefined.
encode_m_trading_buy_toc(Record) when is_record(Record, m_trading_buy_toc) ->
	#m_trading_buy_toc{succ=Succ,reason=Reason,shop_goods=Shop_goods,role_goods=Role_goods,bill=Bill} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Shop_goods =:= undefined of
		true ->
			Shop_goodsFinal = [];
		false ->
			Shop_goodsFinal = Shop_goods
	end,
	case Role_goods =:= undefined of
		true ->
			Role_goodsFinal = [];
		false ->
			Role_goodsFinal = Role_goods
	end,
	case Bill =:= undefined of
		true ->
				BillFinal = 0;
		false ->
			BillFinal = Bill
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Shop_goods_bin = encode_p_trading_goodss(Shop_goodsFinal, <<>>),
	SizeShop_goodsFinal = erlang:length(Shop_goodsFinal),
	BinLen_shop_goods = erlang:byte_size(Shop_goods_bin),
	Role_goods_bin = encode_p_trading_goodss(Role_goodsFinal, <<>>),
	SizeRole_goodsFinal = erlang:length(Role_goodsFinal),
	BinLen_role_goods = erlang:byte_size(Role_goods_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,SizeShop_goodsFinal:16, BinLen_shop_goods:32, Shop_goods_bin/binary,SizeRole_goodsFinal:16, BinLen_role_goods:32, Role_goods_bin/binary,BillFinal:32/signed>>;
encode_m_trading_buy_toc(_) -> 
	<<>>.

decode_m_trading_buy_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_Sizeshop_goods:16, BinLenshop_goods:32, Bin2/binary>> = Bin1,
	<<SubBinshop_goods:BinLenshop_goods/binary, Bin3/binary>> = Bin2, 
	Shop_goods = lists:reverse(decode_p_trading_goodss(SubBinshop_goods, [])),
	<<_Sizerole_goods:16, BinLenrole_goods:32, Bin4/binary>> = Bin3,
	<<SubBinrole_goods:BinLenrole_goods/binary, Bin5/binary>> = Bin4, 
	Role_goods = lists:reverse(decode_p_trading_goodss(SubBinrole_goods, [])),
	<<Bill:32/signed>> = Bin5,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_trading_buy_toc, Succ,common_tool:to_list(Reason),Shop_goods,Role_goods,Bill};

decode_m_trading_buy_toc(_) ->
	undefined.
encode_m_trading_sale_tos(Record) when is_record(Record, m_trading_sale_tos) ->
	#m_trading_sale_tos{npc_id=Npc_id,map_id=Map_id} = Record,
	case Npc_id =:= undefined of
		true ->
				Npc_idFinal = 0;
		false ->
			Npc_idFinal = Npc_id
	end,
	case Map_id =:= undefined of
		true ->
				Map_idFinal = 0;
		false ->
			Map_idFinal = Map_id
	end,

	<<Npc_idFinal:32/signed,Map_idFinal:32/signed>>;
encode_m_trading_sale_tos(_) -> 
	<<>>.

decode_m_trading_sale_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Npc_id:32/signed,Map_id:32/signed>> = Bin0,

	{m_trading_sale_tos, Npc_id,Map_id};

decode_m_trading_sale_tos(_) ->
	undefined.
encode_m_trading_sale_toc(Record) when is_record(Record, m_trading_sale_toc) ->
	#m_trading_sale_toc{succ=Succ,reason=Reason,role_goods=Role_goods,bill=Bill} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Role_goods =:= undefined of
		true ->
			Role_goodsFinal = [];
		false ->
			Role_goodsFinal = Role_goods
	end,
	case Bill =:= undefined of
		true ->
				BillFinal = 0;
		false ->
			BillFinal = Bill
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Role_goods_bin = encode_p_trading_goodss(Role_goodsFinal, <<>>),
	SizeRole_goodsFinal = erlang:length(Role_goodsFinal),
	BinLen_role_goods = erlang:byte_size(Role_goods_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,SizeRole_goodsFinal:16, BinLen_role_goods:32, Role_goods_bin/binary,BillFinal:32/signed>>;
encode_m_trading_sale_toc(_) -> 
	<<>>.

decode_m_trading_sale_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_Sizerole_goods:16, BinLenrole_goods:32, Bin2/binary>> = Bin1,
	<<SubBinrole_goods:BinLenrole_goods/binary, Bin3/binary>> = Bin2, 
	Role_goods = lists:reverse(decode_p_trading_goodss(SubBinrole_goods, [])),
	<<Bill:32/signed>> = Bin3,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_trading_sale_toc, Succ,common_tool:to_list(Reason),Role_goods,Bill};

decode_m_trading_sale_toc(_) ->
	undefined.
encode_m_trading_get_tos(Record) when is_record(Record, m_trading_get_tos) ->
	#m_trading_get_tos{npc_id=Npc_id,map_id=Map_id} = Record,
	case Npc_id =:= undefined of
		true ->
				Npc_idFinal = 0;
		false ->
			Npc_idFinal = Npc_id
	end,
	case Map_id =:= undefined of
		true ->
				Map_idFinal = 0;
		false ->
			Map_idFinal = Map_id
	end,

	<<Npc_idFinal:32/signed,Map_idFinal:32/signed>>;
encode_m_trading_get_tos(_) -> 
	<<>>.

decode_m_trading_get_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Npc_id:32/signed,Map_id:32/signed>> = Bin0,

	{m_trading_get_tos, Npc_id,Map_id};

decode_m_trading_get_tos(_) ->
	undefined.
encode_m_trading_get_toc(Record) when is_record(Record, m_trading_get_toc) ->
	#m_trading_get_toc{succ=Succ,reason=Reason,goods=Goods,bill=Bill,max_bill=Max_bill,trading_times=Trading_times,award_type=Award_type} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Goods =:= undefined of
		true ->
			GoodsFinal = [];
		false ->
			GoodsFinal = Goods
	end,
	case Bill =:= undefined of
		true ->
				BillFinal = 0;
		false ->
			BillFinal = Bill
	end,
	case Max_bill =:= undefined of
		true ->
				Max_billFinal = 0;
		false ->
			Max_billFinal = Max_bill
	end,
	case Trading_times =:= undefined of
		true ->
				Trading_timesFinal = 0;
		false ->
			Trading_timesFinal = Trading_times
	end,
	case Award_type =:= undefined of
		true ->
				Award_typeFinal = 0;
		false ->
			Award_typeFinal = Award_type
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Goods_bin = encode_p_goodss(GoodsFinal, <<>>),
	SizeGoodsFinal = erlang:length(GoodsFinal),
	BinLen_goods = erlang:byte_size(Goods_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,SizeGoodsFinal:16, BinLen_goods:32, Goods_bin/binary,BillFinal:32/signed,Max_billFinal:32/signed,Trading_timesFinal:32/signed,Award_typeFinal:32/signed>>;
encode_m_trading_get_toc(_) -> 
	<<>>.

decode_m_trading_get_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_Sizegoods:16, BinLengoods:32, Bin2/binary>> = Bin1,
	<<SubBingoods:BinLengoods/binary, Bin3/binary>> = Bin2, 
	Goods = lists:reverse(decode_p_goodss(SubBingoods, [])),
	<<Bill:32/signed,Max_bill:32/signed,Trading_times:32/signed,Award_type:32/signed>> = Bin3,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_trading_get_toc, Succ,common_tool:to_list(Reason),Goods,Bill,Max_bill,Trading_times,Award_type};

decode_m_trading_get_toc(_) ->
	undefined.
encode_m_trading_return_tos(Record) when is_record(Record, m_trading_return_tos) ->
	#m_trading_return_tos{npc_id=Npc_id,map_id=Map_id,type=Type,type_id=Type_id} = Record,
	case Npc_id =:= undefined of
		true ->
				Npc_idFinal = 0;
		false ->
			Npc_idFinal = Npc_id
	end,
	case Map_id =:= undefined of
		true ->
				Map_idFinal = 0;
		false ->
			Map_idFinal = Map_id
	end,
	case Type =:= undefined of
		true ->
				TypeFinal = 0;
		false ->
			TypeFinal = Type
	end,
	case Type_id =:= undefined of
		true ->
				Type_idFinal = 0;
		false ->
			Type_idFinal = Type_id
	end,

	<<Npc_idFinal:32/signed,Map_idFinal:32/signed,TypeFinal:32/signed,Type_idFinal:32/signed>>;
encode_m_trading_return_tos(_) -> 
	<<>>.

decode_m_trading_return_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Npc_id:32/signed,Map_id:32/signed,Type:32/signed,Type_id:32/signed>> = Bin0,

	{m_trading_return_tos, Npc_id,Map_id,Type,Type_id};

decode_m_trading_return_tos(_) ->
	undefined.
encode_m_trading_return_toc(Record) when is_record(Record, m_trading_return_toc) ->
	#m_trading_return_toc{succ=Succ,reason=Reason,type=Type,silver=Silver,family_money=Family_money,family_contribution=Family_contribution,trading_times=Trading_times,award_type=Award_type} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Type =:= undefined of
		true ->
				TypeFinal = 0;
		false ->
			TypeFinal = Type
	end,
	case Silver =:= undefined of
		true ->
				SilverFinal = 0;
		false ->
			SilverFinal = Silver
	end,
	case Family_money =:= undefined of
		true ->
				Family_moneyFinal = 0;
		false ->
			Family_moneyFinal = Family_money
	end,
	case Family_contribution =:= undefined of
		true ->
				Family_contributionFinal = 0;
		false ->
			Family_contributionFinal = Family_contribution
	end,
	case Trading_times =:= undefined of
		true ->
				Trading_timesFinal = 0;
		false ->
			Trading_timesFinal = Trading_times
	end,
	case Award_type =:= undefined of
		true ->
				Award_typeFinal = 0;
		false ->
			Award_typeFinal = Award_type
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,TypeFinal:32/signed,SilverFinal:32/signed,Family_moneyFinal:32/signed,Family_contributionFinal:32/signed,Trading_timesFinal:32/signed,Award_typeFinal:32/signed>>;
encode_m_trading_return_toc(_) -> 
	<<>>.

decode_m_trading_return_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Type:32/signed,Silver:32/signed,Family_money:32/signed,Family_contribution:32/signed,Trading_times:32/signed,Award_type:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_trading_return_toc, Succ,common_tool:to_list(Reason),Type,Silver,Family_money,Family_contribution,Trading_times,Award_type};

decode_m_trading_return_toc(_) ->
	undefined.
encode_m_trading_exchange_tos(Record) when is_record(Record, m_trading_exchange_tos) ->
	#m_trading_exchange_tos{npc_id=Npc_id,map_id=Map_id,family_contribution=Family_contribution} = Record,
	case Npc_id =:= undefined of
		true ->
				Npc_idFinal = 0;
		false ->
			Npc_idFinal = Npc_id
	end,
	case Map_id =:= undefined of
		true ->
				Map_idFinal = 0;
		false ->
			Map_idFinal = Map_id
	end,
	case Family_contribution =:= undefined of
		true ->
				Family_contributionFinal = 0;
		false ->
			Family_contributionFinal = Family_contribution
	end,

	<<Npc_idFinal:32/signed,Map_idFinal:32/signed,Family_contributionFinal:32/signed>>;
encode_m_trading_exchange_tos(_) -> 
	<<>>.

decode_m_trading_exchange_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Npc_id:32/signed,Map_id:32/signed,Family_contribution:32/signed>> = Bin0,

	{m_trading_exchange_tos, Npc_id,Map_id,Family_contribution};

decode_m_trading_exchange_tos(_) ->
	undefined.
encode_m_trading_exchange_toc(Record) when is_record(Record, m_trading_exchange_toc) ->
	#m_trading_exchange_toc{succ=Succ,reason=Reason,goods=Goods,family_contribution=Family_contribution} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Goods =:= undefined of
		true ->
			GoodsFinal = [];
		false ->
			GoodsFinal = Goods
	end,
	case Family_contribution =:= undefined of
		true ->
				Family_contributionFinal = 0;
		false ->
			Family_contributionFinal = Family_contribution
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Goods_bin = encode_p_goodss(GoodsFinal, <<>>),
	SizeGoodsFinal = erlang:length(GoodsFinal),
	BinLen_goods = erlang:byte_size(Goods_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,SizeGoodsFinal:16, BinLen_goods:32, Goods_bin/binary,Family_contributionFinal:32/signed>>;
encode_m_trading_exchange_toc(_) -> 
	<<>>.

decode_m_trading_exchange_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_Sizegoods:16, BinLengoods:32, Bin2/binary>> = Bin1,
	<<SubBingoods:BinLengoods/binary, Bin3/binary>> = Bin2, 
	Goods = lists:reverse(decode_p_goodss(SubBingoods, [])),
	<<Family_contribution:32/signed>> = Bin3,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_trading_exchange_toc, Succ,common_tool:to_list(Reason),Goods,Family_contribution};

decode_m_trading_exchange_toc(_) ->
	undefined.
encode_m_trading_status_tos(Record) when is_record(Record, m_trading_status_tos) ->
	#m_trading_status_tos{} = Record,

	<<>>;
encode_m_trading_status_tos(_) -> 
	<<>>.

decode_m_trading_status_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_trading_status_tos};

decode_m_trading_status_tos(_) ->
	undefined.
encode_m_trading_status_toc(Record) when is_record(Record, m_trading_status_toc) ->
	#m_trading_status_toc{succ=Succ,reason=Reason,type=Type,trading_status=Trading_status,trading_times=Trading_times,base_bill=Base_bill,bill=Bill,start_time=Start_time,role_goods=Role_goods,npc_id=Npc_id,award_type=Award_type} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Type =:= undefined of
		true ->
				TypeFinal = 0;
		false ->
			TypeFinal = Type
	end,
	case Trading_status =:= undefined of
		true ->
				Trading_statusFinal = 0;
		false ->
			Trading_statusFinal = Trading_status
	end,
	case Trading_times =:= undefined of
		true ->
				Trading_timesFinal = 0;
		false ->
			Trading_timesFinal = Trading_times
	end,
	case Base_bill =:= undefined of
		true ->
				Base_billFinal = 0;
		false ->
			Base_billFinal = Base_bill
	end,
	case Bill =:= undefined of
		true ->
				BillFinal = 0;
		false ->
			BillFinal = Bill
	end,
	case Start_time =:= undefined of
		true ->
				Start_timeFinal = 0;
		false ->
			Start_timeFinal = Start_time
	end,
	case Role_goods =:= undefined of
		true ->
			Role_goodsFinal = [];
		false ->
			Role_goodsFinal = Role_goods
	end,
	case Npc_id =:= undefined of
		true ->
				Npc_idFinal = 0;
		false ->
			Npc_idFinal = Npc_id
	end,
	case Award_type =:= undefined of
		true ->
				Award_typeFinal = 0;
		false ->
			Award_typeFinal = Award_type
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Role_goods_bin = encode_p_trading_goodss(Role_goodsFinal, <<>>),
	SizeRole_goodsFinal = erlang:length(Role_goodsFinal),
	BinLen_role_goods = erlang:byte_size(Role_goods_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,TypeFinal:32/signed,Trading_statusFinal:32/signed,Trading_timesFinal:32/signed,Base_billFinal:32/signed,BillFinal:32/signed,Start_timeFinal:32/signed,SizeRole_goodsFinal:16, BinLen_role_goods:32, Role_goods_bin/binary,Npc_idFinal:32/signed,Award_typeFinal:32/signed>>;
encode_m_trading_status_toc(_) -> 
	<<>>.

decode_m_trading_status_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Type:32/signed,Trading_status:32/signed,Trading_times:32/signed,Base_bill:32/signed,Bill:32/signed,Start_time:32/signed,_Sizerole_goods:16, BinLenrole_goods:32, Bin2/binary>> = Bin1,
	<<SubBinrole_goods:BinLenrole_goods/binary, Bin3/binary>> = Bin2, 
	Role_goods = lists:reverse(decode_p_trading_goodss(SubBinrole_goods, [])),
	<<Npc_id:32/signed,Award_type:32/signed>> = Bin3,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_trading_status_toc, Succ,common_tool:to_list(Reason),Type,Trading_status,Trading_times,Base_bill,Bill,Start_time,Role_goods,Npc_id,Award_type};

decode_m_trading_status_toc(_) ->
	undefined.
encode_m_flowers_get_accept_list_toc(Record) when is_record(Record, m_flowers_get_accept_list_toc) ->
	#m_flowers_get_accept_list_toc{list=List} = Record,
	case List =:= undefined of
		true ->
			ListFinal = [];
		false ->
			ListFinal = List
	end,
	List_bin = encode_p_flowers_give_infos(ListFinal, <<>>),
	SizeListFinal = erlang:length(ListFinal),
	BinLen_list = erlang:byte_size(List_bin),

	<<SizeListFinal:16, BinLen_list:32, List_bin/binary>>;
encode_m_flowers_get_accept_list_toc(_) -> 
	<<>>.

decode_m_flowers_get_accept_list_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizelist:16, _BinLenlist:32, SubBinlist/binary>> = Bin0,
	List = lists:reverse(decode_p_flowers_give_infos(SubBinlist, [])),

	{m_flowers_get_accept_list_toc, List};

decode_m_flowers_get_accept_list_toc(_) ->
	undefined.
encode_m_flowers_update_accept_toc(Record) when is_record(Record, m_flowers_update_accept_toc) ->
	#m_flowers_update_accept_toc{info=Info} = Record,
	case Info =:= undefined of
		true ->
				InfoFinal = undefined,
				exit({required_field_not_assigned, m_flowers_update_accept_toc, info});
		false ->
			InfoFinal = Info
	end,
	Info_bin = encode_p_flowers_give_info(InfoFinal),
	BinLen_info = erlang:byte_size(Info_bin),

	<<BinLen_info:32, Info_bin/binary>>;
encode_m_flowers_update_accept_toc(_) -> 
	<<>>.

decode_m_flowers_update_accept_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_SubBinSizeinfo:32, SubBininfo/binary>> = Bin0,
	Info = decode_p_flowers_give_info(SubBininfo),

	{m_flowers_update_accept_toc, Info};

decode_m_flowers_update_accept_toc(_) ->
	undefined.
encode_p_flowers_give_info(Record) when is_record(Record, p_flowers_give_info) ->
	#p_flowers_give_info{id=Id,give_role_id=Give_role_id,giver=Giver,giver_sex=Giver_sex,giver_faction=Giver_faction,flowers_type=Flowers_type} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, p_flowers_give_info, id});
		false ->
			IdFinal = Id
	end,
	case Give_role_id =:= undefined of
		true ->
				Give_role_idFinal = undefined,
				exit({required_field_not_assigned, p_flowers_give_info, give_role_id});
		false ->
			Give_role_idFinal = Give_role_id
	end,
	case Giver =:= undefined of
		true ->
				GiverFinal = undefined,
				exit({required_field_not_assigned, p_flowers_give_info, giver});
		false ->
			GiverFinal = Giver
	end,
	case Giver_sex =:= undefined of
		true ->
				Giver_sexFinal = undefined,
				exit({required_field_not_assigned, p_flowers_give_info, giver_sex});
		false ->
			Giver_sexFinal = Giver_sex
	end,
	case Giver_faction =:= undefined of
		true ->
				Giver_factionFinal = undefined,
				exit({required_field_not_assigned, p_flowers_give_info, giver_faction});
		false ->
			Giver_factionFinal = Giver_faction
	end,
	case Flowers_type =:= undefined of
		true ->
				Flowers_typeFinal = undefined,
				exit({required_field_not_assigned, p_flowers_give_info, flowers_type});
		false ->
			Flowers_typeFinal = Flowers_type
	end,
	Giver2 = common_tool:to_binary(GiverFinal),
	GiverLen = erlang:byte_size(Giver2),

	<<IdFinal:32/signed,Give_role_idFinal:32/signed,GiverLen:16, Giver2/binary,Giver_sexFinal:32/signed,Giver_factionFinal:32/signed,Flowers_typeFinal:32/signed>>;
encode_p_flowers_give_info(_) -> 
	<<>>.

decode_p_flowers_give_info(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed,Give_role_id:32/signed,GiverLen:16, Bin1/binary>> = Bin0,
	<<Giver:GiverLen/binary,Giver_sex:32/signed,Giver_faction:32/signed,Flowers_type:32/signed>> = Bin1,

	{p_flowers_give_info, Id,Give_role_id,common_tool:to_list(Giver),Giver_sex,Giver_faction,Flowers_type};

decode_p_flowers_give_info(_) ->
	undefined.
encode_m_flowers_accept_tos(Record) when is_record(Record, m_flowers_accept_tos) ->
	#m_flowers_accept_tos{id=Id,reply_id=Reply_id} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, m_flowers_accept_tos, id});
		false ->
			IdFinal = Id
	end,
	case Reply_id =:= undefined of
		true ->
				Reply_idFinal = undefined,
				exit({required_field_not_assigned, m_flowers_accept_tos, reply_id});
		false ->
			Reply_idFinal = Reply_id
	end,

	<<IdFinal:32/signed,Reply_idFinal:32/signed>>;
encode_m_flowers_accept_tos(_) -> 
	<<>>.

decode_m_flowers_accept_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed,Reply_id:32/signed>> = Bin0,

	{m_flowers_accept_tos, Id,Reply_id};

decode_m_flowers_accept_tos(_) ->
	undefined.
encode_m_flowers_accept_toc(Record) when is_record(Record, m_flowers_accept_toc) ->
	#m_flowers_accept_toc{succ=Succ,id=Id,give_role_id=Give_role_id} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_flowers_accept_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, m_flowers_accept_toc, id});
		false ->
			IdFinal = Id
	end,
	case Give_role_id =:= undefined of
		true ->
				Give_role_idFinal = 0;
		false ->
			Give_role_idFinal = Give_role_id
	end,

	<<SuccFinal:8,IdFinal:32/signed,Give_role_idFinal:32/signed>>;
encode_m_flowers_accept_toc(_) -> 
	<<>>.

decode_m_flowers_accept_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,Id:32/signed,Give_role_id:32/signed>> = Bin0,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_flowers_accept_toc, Succ,Id,Give_role_id};

decode_m_flowers_accept_toc(_) ->
	undefined.
encode_m_flowers_give_tos(Record) when is_record(Record, m_flowers_give_tos) ->
	#m_flowers_give_tos{rece_role_id=Rece_role_id,goods_id=Goods_id,flowers_type=Flowers_type,is_anonymous=Is_anonymous} = Record,
	case Rece_role_id =:= undefined of
		true ->
				Rece_role_idFinal = undefined,
				exit({required_field_not_assigned, m_flowers_give_tos, rece_role_id});
		false ->
			Rece_role_idFinal = Rece_role_id
	end,
	case Goods_id =:= undefined of
		true ->
				Goods_idFinal = 0;
		false ->
			Goods_idFinal = Goods_id
	end,
	case Flowers_type =:= undefined of
		true ->
				Flowers_typeFinal = 0;
		false ->
			Flowers_typeFinal = Flowers_type
	end,
	case Is_anonymous =:= undefined of
		true ->
				Is_anonymousFinal = undefined,
				exit({required_field_not_assigned, m_flowers_give_tos, is_anonymous});
		false ->
		case Is_anonymous of
			true ->
				Is_anonymousFinal = 1;
			false ->
				Is_anonymousFinal = 0
		end
	end,

	<<Rece_role_idFinal:32/signed,Goods_idFinal:32/signed,Flowers_typeFinal:32/signed,Is_anonymousFinal:8>>;
encode_m_flowers_give_tos(_) -> 
	<<>>.

decode_m_flowers_give_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Rece_role_id:32/signed,Goods_id:32/signed,Flowers_type:32/signed,Is_anonymousTmp:8>> = Bin0,
case Is_anonymousTmp of 
	1 -> 
		Is_anonymous = true;
	_ ->
		Is_anonymous = false
end,

	{m_flowers_give_tos, Rece_role_id,Goods_id,Flowers_type,Is_anonymous};

decode_m_flowers_give_tos(_) ->
	undefined.
encode_m_flowers_give_toc(Record) when is_record(Record, m_flowers_give_toc) ->
	#m_flowers_give_toc{succ=Succ,tips=Tips,is_buy=Is_buy} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_flowers_give_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Tips =:= undefined of
		true ->
				TipsFinal = undefined,
				exit({required_field_not_assigned, m_flowers_give_toc, tips});
		false ->
			TipsFinal = Tips
	end,
	case Is_buy =:= undefined of
		true ->
				Is_buyFinal = 0;
		false ->
		case Is_buy of
			true ->
				Is_buyFinal = 1;
			false ->
				Is_buyFinal = 0
		end
	end,
	Tips2 = common_tool:to_binary(TipsFinal),
	TipsLen = erlang:byte_size(Tips2),

	<<SuccFinal:8,TipsLen:16, Tips2/binary,Is_buyFinal:8>>;
encode_m_flowers_give_toc(_) -> 
	<<>>.

decode_m_flowers_give_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,TipsLen:16, Bin1/binary>> = Bin0,
	<<Tips:TipsLen/binary,Is_buyTmp:8>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Is_buyTmp of 
	1 -> 
		Is_buy = true;
	_ ->
		Is_buy = false
end,

	{m_flowers_give_toc, Succ,common_tool:to_list(Tips),Is_buy};

decode_m_flowers_give_toc(_) ->
	undefined.
encode_m_flowers_get_recever_info_tos(Record) when is_record(Record, m_flowers_get_recever_info_tos) ->
	#m_flowers_get_recever_info_tos{role_name=Role_name} = Record,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = undefined,
				exit({required_field_not_assigned, m_flowers_get_recever_info_tos, role_name});
		false ->
			Role_nameFinal = Role_name
	end,
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),

	<<Role_nameLen:16, Role_name2/binary>>;
encode_m_flowers_get_recever_info_tos(_) -> 
	<<>>.

decode_m_flowers_get_recever_info_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_nameLen:16, Bin1/binary>> = Bin0,
	<<Role_name:Role_nameLen/binary>> = Bin1,

	{m_flowers_get_recever_info_tos, common_tool:to_list(Role_name)};

decode_m_flowers_get_recever_info_tos(_) ->
	undefined.
encode_m_flowers_get_recever_info_toc(Record) when is_record(Record, m_flowers_get_recever_info_toc) ->
	#m_flowers_get_recever_info_toc{succ=Succ,reason=Reason,rolebase=Rolebase,roleattr=Roleattr} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_flowers_get_recever_info_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Rolebase =:= undefined of
		true ->
				RolebaseFinal = 0;
		false ->
			RolebaseFinal = Rolebase
	end,
	case Roleattr =:= undefined of
		true ->
				RoleattrFinal = 0;
		false ->
			RoleattrFinal = Roleattr
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Rolebase_bin = encode_p_role_base(RolebaseFinal),
	BinLen_rolebase = erlang:byte_size(Rolebase_bin),
	Roleattr_bin = encode_p_role_attr(RoleattrFinal),
	BinLen_roleattr = erlang:byte_size(Roleattr_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_rolebase:32, Rolebase_bin/binary,BinLen_roleattr:32, Roleattr_bin/binary>>;
encode_m_flowers_get_recever_info_toc(_) -> 
	<<>>.

decode_m_flowers_get_recever_info_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,SubBinSizerolebase:32, Bin2/binary>> = Bin1,
	<<SubBinrolebase:SubBinSizerolebase/binary, Bin3/binary>> = Bin2,
	Rolebase = decode_p_role_base(SubBinrolebase),
	<<_SubBinSizeroleattr:32, SubBinroleattr/binary>> = Bin3,
	Roleattr = decode_p_role_attr(SubBinroleattr),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_flowers_get_recever_info_toc, Succ,common_tool:to_list(Reason),Rolebase,Roleattr};

decode_m_flowers_get_recever_info_toc(_) ->
	undefined.
encode_m_flowers_give_world_broadcast_toc(Record) when is_record(Record, m_flowers_give_world_broadcast_toc) ->
	#m_flowers_give_world_broadcast_toc{broadcast=Broadcast} = Record,
	case Broadcast =:= undefined of
		true ->
				BroadcastFinal = undefined,
				exit({required_field_not_assigned, m_flowers_give_world_broadcast_toc, broadcast});
		false ->
			BroadcastFinal = Broadcast
	end,
	Broadcast_bin = encode_p_flowers_give_broadcast_info(BroadcastFinal),
	BinLen_broadcast = erlang:byte_size(Broadcast_bin),

	<<BinLen_broadcast:32, Broadcast_bin/binary>>;
encode_m_flowers_give_world_broadcast_toc(_) -> 
	<<>>.

decode_m_flowers_give_world_broadcast_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_SubBinSizebroadcast:32, SubBinbroadcast/binary>> = Bin0,
	Broadcast = decode_p_flowers_give_broadcast_info(SubBinbroadcast),

	{m_flowers_give_world_broadcast_toc, Broadcast};

decode_m_flowers_give_world_broadcast_toc(_) ->
	undefined.
encode_m_flowers_give_faction_broadcast_toc(Record) when is_record(Record, m_flowers_give_faction_broadcast_toc) ->
	#m_flowers_give_faction_broadcast_toc{broadcast=Broadcast} = Record,
	case Broadcast =:= undefined of
		true ->
				BroadcastFinal = undefined,
				exit({required_field_not_assigned, m_flowers_give_faction_broadcast_toc, broadcast});
		false ->
			BroadcastFinal = Broadcast
	end,
	Broadcast_bin = encode_p_flowers_give_broadcast_info(BroadcastFinal),
	BinLen_broadcast = erlang:byte_size(Broadcast_bin),

	<<BinLen_broadcast:32, Broadcast_bin/binary>>;
encode_m_flowers_give_faction_broadcast_toc(_) -> 
	<<>>.

decode_m_flowers_give_faction_broadcast_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_SubBinSizebroadcast:32, SubBinbroadcast/binary>> = Bin0,
	Broadcast = decode_p_flowers_give_broadcast_info(SubBinbroadcast),

	{m_flowers_give_faction_broadcast_toc, Broadcast};

decode_m_flowers_give_faction_broadcast_toc(_) ->
	undefined.
encode_m_flowers_give_map_broadcast_toc(Record) when is_record(Record, m_flowers_give_map_broadcast_toc) ->
	#m_flowers_give_map_broadcast_toc{broadcast=Broadcast} = Record,
	case Broadcast =:= undefined of
		true ->
				BroadcastFinal = undefined,
				exit({required_field_not_assigned, m_flowers_give_map_broadcast_toc, broadcast});
		false ->
			BroadcastFinal = Broadcast
	end,
	Broadcast_bin = encode_p_flowers_give_broadcast_info(BroadcastFinal),
	BinLen_broadcast = erlang:byte_size(Broadcast_bin),

	<<BinLen_broadcast:32, Broadcast_bin/binary>>;
encode_m_flowers_give_map_broadcast_toc(_) -> 
	<<>>.

decode_m_flowers_give_map_broadcast_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_SubBinSizebroadcast:32, SubBinbroadcast/binary>> = Bin0,
	Broadcast = decode_p_flowers_give_broadcast_info(SubBinbroadcast),

	{m_flowers_give_map_broadcast_toc, Broadcast};

decode_m_flowers_give_map_broadcast_toc(_) ->
	undefined.
encode_p_flowers_give_broadcast_info(Record) when is_record(Record, p_flowers_give_broadcast_info) ->
	#p_flowers_give_broadcast_info{giver=Giver,receiver=Receiver,flowers_type=Flowers_type,broadcasting=Broadcasting} = Record,
	case Giver =:= undefined of
		true ->
				GiverFinal = undefined,
				exit({required_field_not_assigned, p_flowers_give_broadcast_info, giver});
		false ->
			GiverFinal = Giver
	end,
	case Receiver =:= undefined of
		true ->
				ReceiverFinal = undefined,
				exit({required_field_not_assigned, p_flowers_give_broadcast_info, receiver});
		false ->
			ReceiverFinal = Receiver
	end,
	case Flowers_type =:= undefined of
		true ->
				Flowers_typeFinal = undefined,
				exit({required_field_not_assigned, p_flowers_give_broadcast_info, flowers_type});
		false ->
			Flowers_typeFinal = Flowers_type
	end,
	case Broadcasting =:= undefined of
		true ->
				BroadcastingFinal = undefined,
				exit({required_field_not_assigned, p_flowers_give_broadcast_info, broadcasting});
		false ->
			BroadcastingFinal = Broadcasting
	end,
	Giver2 = common_tool:to_binary(GiverFinal),
	GiverLen = erlang:byte_size(Giver2),
	Receiver2 = common_tool:to_binary(ReceiverFinal),
	ReceiverLen = erlang:byte_size(Receiver2),
	Broadcasting2 = common_tool:to_binary(BroadcastingFinal),
	BroadcastingLen = erlang:byte_size(Broadcasting2),

	<<GiverLen:16, Giver2/binary,ReceiverLen:16, Receiver2/binary,Flowers_typeFinal:32/signed,BroadcastingLen:16, Broadcasting2/binary>>;
encode_p_flowers_give_broadcast_info(_) -> 
	<<>>.

decode_p_flowers_give_broadcast_info(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<GiverLen:16, Bin1/binary>> = Bin0,
	<<Giver:GiverLen/binary,ReceiverLen:16, Bin2/binary>> = Bin1,
	<<Receiver:ReceiverLen/binary,Flowers_type:32/signed,BroadcastingLen:16, Bin3/binary>> = Bin2,
	<<Broadcasting:BroadcastingLen/binary>> = Bin3,

	{p_flowers_give_broadcast_info, common_tool:to_list(Giver),common_tool:to_list(Receiver),Flowers_type,common_tool:to_list(Broadcasting)};

decode_p_flowers_give_broadcast_info(_) ->
	undefined.
encode_m_plant_family_farm_toc(Record) when is_record(Record, m_plant_family_farm_toc) ->
	#m_plant_family_farm_toc{farm_size=Farm_size,farm_list=Farm_list} = Record,
	case Farm_size =:= undefined of
		true ->
				Farm_sizeFinal = undefined,
				exit({required_field_not_assigned, m_plant_family_farm_toc, farm_size});
		false ->
			Farm_sizeFinal = Farm_size
	end,
	case Farm_list =:= undefined of
		true ->
			Farm_listFinal = [];
		false ->
			Farm_listFinal = Farm_list
	end,
	Farm_list_bin = encode_p_map_farms(Farm_listFinal, <<>>),
	SizeFarm_listFinal = erlang:length(Farm_listFinal),
	BinLen_farm_list = erlang:byte_size(Farm_list_bin),

	<<Farm_sizeFinal:32/signed,SizeFarm_listFinal:16, BinLen_farm_list:32, Farm_list_bin/binary>>;
encode_m_plant_family_farm_toc(_) -> 
	<<>>.

decode_m_plant_family_farm_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Farm_size:32/signed,_Sizefarm_list:16, _BinLenfarm_list:32, SubBinfarm_list/binary>> = Bin0,
	Farm_list = lists:reverse(decode_p_map_farms(SubBinfarm_list, [])),

	{m_plant_family_farm_toc, Farm_size,Farm_list};

decode_m_plant_family_farm_toc(_) ->
	undefined.
encode_m_plant_update_farm_toc(Record) when is_record(Record, m_plant_update_farm_toc) ->
	#m_plant_update_farm_toc{farm_info=Farm_info} = Record,
	case Farm_info =:= undefined of
		true ->
				Farm_infoFinal = undefined,
				exit({required_field_not_assigned, m_plant_update_farm_toc, farm_info});
		false ->
			Farm_infoFinal = Farm_info
	end,
	Farm_info_bin = encode_p_map_farm(Farm_infoFinal),
	BinLen_farm_info = erlang:byte_size(Farm_info_bin),

	<<BinLen_farm_info:32, Farm_info_bin/binary>>;
encode_m_plant_update_farm_toc(_) -> 
	<<>>.

decode_m_plant_update_farm_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_SubBinSizefarm_info:32, SubBinfarm_info/binary>> = Bin0,
	Farm_info = decode_p_map_farm(SubBinfarm_info),

	{m_plant_update_farm_toc, Farm_info};

decode_m_plant_update_farm_toc(_) ->
	undefined.
encode_m_plant_assart_tos(Record) when is_record(Record, m_plant_assart_tos) ->
	#m_plant_assart_tos{} = Record,

	<<>>;
encode_m_plant_assart_tos(_) -> 
	<<>>.

decode_m_plant_assart_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_plant_assart_tos};

decode_m_plant_assart_tos(_) ->
	undefined.
encode_m_plant_assart_toc(Record) when is_record(Record, m_plant_assart_toc) ->
	#m_plant_assart_toc{succ=Succ,reason=Reason,farm_id=Farm_id} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Farm_id =:= undefined of
		true ->
				Farm_idFinal = 0;
		false ->
			Farm_idFinal = Farm_id
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Farm_idFinal:32/signed>>;
encode_m_plant_assart_toc(_) -> 
	<<>>.

decode_m_plant_assart_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Farm_id:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_plant_assart_toc, Succ,common_tool:to_list(Reason),Farm_id};

decode_m_plant_assart_toc(_) ->
	undefined.
encode_m_plant_sow_tos(Record) when is_record(Record, m_plant_sow_tos) ->
	#m_plant_sow_tos{farm_id=Farm_id,seed_id=Seed_id} = Record,
	case Farm_id =:= undefined of
		true ->
				Farm_idFinal = undefined,
				exit({required_field_not_assigned, m_plant_sow_tos, farm_id});
		false ->
			Farm_idFinal = Farm_id
	end,
	case Seed_id =:= undefined of
		true ->
				Seed_idFinal = undefined,
				exit({required_field_not_assigned, m_plant_sow_tos, seed_id});
		false ->
			Seed_idFinal = Seed_id
	end,

	<<Farm_idFinal:32/signed,Seed_idFinal:32/signed>>;
encode_m_plant_sow_tos(_) -> 
	<<>>.

decode_m_plant_sow_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Farm_id:32/signed,Seed_id:32/signed>> = Bin0,

	{m_plant_sow_tos, Farm_id,Seed_id};

decode_m_plant_sow_tos(_) ->
	undefined.
encode_m_plant_sow_toc(Record) when is_record(Record, m_plant_sow_toc) ->
	#m_plant_sow_toc{succ=Succ,reason=Reason,farm_info=Farm_info,remain_fertilize_times=Remain_fertilize_times} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Farm_info =:= undefined of
		true ->
				Farm_infoFinal = 0;
		false ->
			Farm_infoFinal = Farm_info
	end,
	case Remain_fertilize_times =:= undefined of
		true ->
				Remain_fertilize_timesFinal = 0;
		false ->
			Remain_fertilize_timesFinal = Remain_fertilize_times
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Farm_info_bin = encode_p_map_farm(Farm_infoFinal),
	BinLen_farm_info = erlang:byte_size(Farm_info_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_farm_info:32, Farm_info_bin/binary,Remain_fertilize_timesFinal:32/signed>>;
encode_m_plant_sow_toc(_) -> 
	<<>>.

decode_m_plant_sow_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,SubBinSizefarm_info:32, Bin2/binary>> = Bin1,
	<<SubBinfarm_info:SubBinSizefarm_info/binary, Bin3/binary>> = Bin2,
	Farm_info = decode_p_map_farm(SubBinfarm_info),
	<<Remain_fertilize_times:32/signed>> = Bin3,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_plant_sow_toc, Succ,common_tool:to_list(Reason),Farm_info,Remain_fertilize_times};

decode_m_plant_sow_toc(_) ->
	undefined.
encode_m_plant_fertilize_tos(Record) when is_record(Record, m_plant_fertilize_tos) ->
	#m_plant_fertilize_tos{farm_id=Farm_id} = Record,
	case Farm_id =:= undefined of
		true ->
				Farm_idFinal = undefined,
				exit({required_field_not_assigned, m_plant_fertilize_tos, farm_id});
		false ->
			Farm_idFinal = Farm_id
	end,

	<<Farm_idFinal:32/signed>>;
encode_m_plant_fertilize_tos(_) -> 
	<<>>.

decode_m_plant_fertilize_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Farm_id:32/signed>> = Bin0,

	{m_plant_fertilize_tos, Farm_id};

decode_m_plant_fertilize_tos(_) ->
	undefined.
encode_m_plant_fertilize_toc(Record) when is_record(Record, m_plant_fertilize_toc) ->
	#m_plant_fertilize_toc{succ=Succ,reason=Reason,farm_info=Farm_info,remain_fertilize_times=Remain_fertilize_times} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Farm_info =:= undefined of
		true ->
				Farm_infoFinal = 0;
		false ->
			Farm_infoFinal = Farm_info
	end,
	case Remain_fertilize_times =:= undefined of
		true ->
				Remain_fertilize_timesFinal = 0;
		false ->
			Remain_fertilize_timesFinal = Remain_fertilize_times
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Farm_info_bin = encode_p_map_farm(Farm_infoFinal),
	BinLen_farm_info = erlang:byte_size(Farm_info_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_farm_info:32, Farm_info_bin/binary,Remain_fertilize_timesFinal:32/signed>>;
encode_m_plant_fertilize_toc(_) -> 
	<<>>.

decode_m_plant_fertilize_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,SubBinSizefarm_info:32, Bin2/binary>> = Bin1,
	<<SubBinfarm_info:SubBinSizefarm_info/binary, Bin3/binary>> = Bin2,
	Farm_info = decode_p_map_farm(SubBinfarm_info),
	<<Remain_fertilize_times:32/signed>> = Bin3,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_plant_fertilize_toc, Succ,common_tool:to_list(Reason),Farm_info,Remain_fertilize_times};

decode_m_plant_fertilize_toc(_) ->
	undefined.
encode_m_plant_list_log_tos(Record) when is_record(Record, m_plant_list_log_tos) ->
	#m_plant_list_log_tos{} = Record,

	<<>>;
encode_m_plant_list_log_tos(_) -> 
	<<>>.

decode_m_plant_list_log_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_plant_list_log_tos};

decode_m_plant_list_log_tos(_) ->
	undefined.
encode_m_plant_list_log_toc(Record) when is_record(Record, m_plant_list_log_toc) ->
	#m_plant_list_log_toc{succ=Succ,reason=Reason,logs=Logs} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Logs =:= undefined of
		true ->
			LogsFinal = [];
		false ->
			LogsFinal = Logs
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Logs_bin = encode_strings(LogsFinal, <<>>),
	SizeLogsFinal = erlang:length(LogsFinal),
	BinLen_logs = erlang:byte_size(Logs_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,SizeLogsFinal:16, BinLen_logs:32, Logs_bin/binary>>;
encode_m_plant_list_log_toc(_) -> 
	<<>>.

decode_m_plant_list_log_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_Sizelogs:16, _BinLenlogs:32, SubBinlogs/binary>> = Bin1,
	Logs = lists:reverse(decode_strings(SubBinlogs, [])),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_plant_list_log_toc, Succ,common_tool:to_list(Reason),Logs};

decode_m_plant_list_log_toc(_) ->
	undefined.
encode_m_plant_clear_log_tos(Record) when is_record(Record, m_plant_clear_log_tos) ->
	#m_plant_clear_log_tos{} = Record,

	<<>>;
encode_m_plant_clear_log_tos(_) -> 
	<<>>.

decode_m_plant_clear_log_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_plant_clear_log_tos};

decode_m_plant_clear_log_tos(_) ->
	undefined.
encode_m_plant_clear_log_toc(Record) when is_record(Record, m_plant_clear_log_toc) ->
	#m_plant_clear_log_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_plant_clear_log_toc(_) -> 
	<<>>.

decode_m_plant_clear_log_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_plant_clear_log_toc, Succ,common_tool:to_list(Reason)};

decode_m_plant_clear_log_toc(_) ->
	undefined.
encode_m_plant_harvest_tos(Record) when is_record(Record, m_plant_harvest_tos) ->
	#m_plant_harvest_tos{farm_id=Farm_id} = Record,
	case Farm_id =:= undefined of
		true ->
				Farm_idFinal = undefined,
				exit({required_field_not_assigned, m_plant_harvest_tos, farm_id});
		false ->
			Farm_idFinal = Farm_id
	end,

	<<Farm_idFinal:32/signed>>;
encode_m_plant_harvest_tos(_) -> 
	<<>>.

decode_m_plant_harvest_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Farm_id:32/signed>> = Bin0,

	{m_plant_harvest_tos, Farm_id};

decode_m_plant_harvest_tos(_) ->
	undefined.
encode_m_plant_harvest_toc(Record) when is_record(Record, m_plant_harvest_toc) ->
	#m_plant_harvest_toc{succ=Succ,reason=Reason,farm_id=Farm_id} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Farm_id =:= undefined of
		true ->
				Farm_idFinal = undefined,
				exit({required_field_not_assigned, m_plant_harvest_toc, farm_id});
		false ->
			Farm_idFinal = Farm_id
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Farm_idFinal:32/signed>>;
encode_m_plant_harvest_toc(_) -> 
	<<>>.

decode_m_plant_harvest_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Farm_id:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_plant_harvest_toc, Succ,common_tool:to_list(Reason),Farm_id};

decode_m_plant_harvest_toc(_) ->
	undefined.
encode_m_plant_show_skill_tos(Record) when is_record(Record, m_plant_show_skill_tos) ->
	#m_plant_show_skill_tos{} = Record,

	<<>>;
encode_m_plant_show_skill_tos(_) -> 
	<<>>.

decode_m_plant_show_skill_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_plant_show_skill_tos};

decode_m_plant_show_skill_tos(_) ->
	undefined.
encode_m_plant_show_skill_toc(Record) when is_record(Record, m_plant_show_skill_toc) ->
	#m_plant_show_skill_toc{succ=Succ,reason=Reason,cur_skill_level=Cur_skill_level,cur_proficiency=Cur_proficiency,need_role_level=Need_role_level,need_proficiency=Need_proficiency,need_expr=Need_expr,need_silver=Need_silver} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Cur_skill_level =:= undefined of
		true ->
				Cur_skill_levelFinal = 0;
		false ->
			Cur_skill_levelFinal = Cur_skill_level
	end,
	case Cur_proficiency =:= undefined of
		true ->
				Cur_proficiencyFinal = 0;
		false ->
			Cur_proficiencyFinal = Cur_proficiency
	end,
	case Need_role_level =:= undefined of
		true ->
				Need_role_levelFinal = 0;
		false ->
			Need_role_levelFinal = Need_role_level
	end,
	case Need_proficiency =:= undefined of
		true ->
				Need_proficiencyFinal = 0;
		false ->
			Need_proficiencyFinal = Need_proficiency
	end,
	case Need_expr =:= undefined of
		true ->
				Need_exprFinal = 0;
		false ->
			Need_exprFinal = Need_expr
	end,
	case Need_silver =:= undefined of
		true ->
				Need_silverFinal = 0;
		false ->
			Need_silverFinal = Need_silver
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Cur_skill_levelFinal:32/signed,Cur_proficiencyFinal:32/signed,Need_role_levelFinal:32/signed,Need_proficiencyFinal:32/signed,Need_exprFinal:32/signed,Need_silverFinal:32/signed>>;
encode_m_plant_show_skill_toc(_) -> 
	<<>>.

decode_m_plant_show_skill_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Cur_skill_level:32/signed,Cur_proficiency:32/signed,Need_role_level:32/signed,Need_proficiency:32/signed,Need_expr:32/signed,Need_silver:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_plant_show_skill_toc, Succ,common_tool:to_list(Reason),Cur_skill_level,Cur_proficiency,Need_role_level,Need_proficiency,Need_expr,Need_silver};

decode_m_plant_show_skill_toc(_) ->
	undefined.
encode_m_plant_upgrade_skill_tos(Record) when is_record(Record, m_plant_upgrade_skill_tos) ->
	#m_plant_upgrade_skill_tos{} = Record,

	<<>>;
encode_m_plant_upgrade_skill_tos(_) -> 
	<<>>.

decode_m_plant_upgrade_skill_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_plant_upgrade_skill_tos};

decode_m_plant_upgrade_skill_tos(_) ->
	undefined.
encode_m_plant_upgrade_skill_toc(Record) when is_record(Record, m_plant_upgrade_skill_toc) ->
	#m_plant_upgrade_skill_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_plant_upgrade_skill_toc(_) -> 
	<<>>.

decode_m_plant_upgrade_skill_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_plant_upgrade_skill_toc, Succ,common_tool:to_list(Reason)};

decode_m_plant_upgrade_skill_toc(_) ->
	undefined.
encode_m_plant_list_seeds_tos(Record) when is_record(Record, m_plant_list_seeds_tos) ->
	#m_plant_list_seeds_tos{} = Record,

	<<>>;
encode_m_plant_list_seeds_tos(_) -> 
	<<>>.

decode_m_plant_list_seeds_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_plant_list_seeds_tos};

decode_m_plant_list_seeds_tos(_) ->
	undefined.
encode_m_plant_list_seeds_toc(Record) when is_record(Record, m_plant_list_seeds_toc) ->
	#m_plant_list_seeds_toc{succ=Succ,reason=Reason,seeds=Seeds} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Seeds =:= undefined of
		true ->
			SeedsFinal = [];
		false ->
			SeedsFinal = Seeds
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Seeds_bin = encode_p_seed_infos(SeedsFinal, <<>>),
	SizeSeedsFinal = erlang:length(SeedsFinal),
	BinLen_seeds = erlang:byte_size(Seeds_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,SizeSeedsFinal:16, BinLen_seeds:32, Seeds_bin/binary>>;
encode_m_plant_list_seeds_toc(_) -> 
	<<>>.

decode_m_plant_list_seeds_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_Sizeseeds:16, _BinLenseeds:32, SubBinseeds/binary>> = Bin1,
	Seeds = lists:reverse(decode_p_seed_infos(SubBinseeds, [])),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_plant_list_seeds_toc, Succ,common_tool:to_list(Reason),Seeds};

decode_m_plant_list_seeds_toc(_) ->
	undefined.
encode_m_family_combine_panel_tos(Record) when is_record(Record, m_family_combine_panel_tos) ->
	#m_family_combine_panel_tos{} = Record,

	<<>>;
encode_m_family_combine_panel_tos(_) -> 
	<<>>.

decode_m_family_combine_panel_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_family_combine_panel_tos};

decode_m_family_combine_panel_tos(_) ->
	undefined.
encode_m_family_combine_panel_toc(Record) when is_record(Record, m_family_combine_panel_toc) ->
	#m_family_combine_panel_toc{succ=Succ,reason=Reason,family_id_1=Family_id_1,family_name_1=Family_name_1,family_id_2=Family_id_2,family_name_2=Family_name_2} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Family_id_1 =:= undefined of
		true ->
				Family_id_1Final = 0;
		false ->
			Family_id_1Final = Family_id_1
	end,
	case Family_name_1 =:= undefined of
		true ->
				Family_name_1Final = <<>>;
		false ->
			Family_name_1Final = Family_name_1
	end,
	case Family_id_2 =:= undefined of
		true ->
				Family_id_2Final = 0;
		false ->
			Family_id_2Final = Family_id_2
	end,
	case Family_name_2 =:= undefined of
		true ->
				Family_name_2Final = <<>>;
		false ->
			Family_name_2Final = Family_name_2
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Family_name_12 = common_tool:to_binary(Family_name_1Final),
	Family_name_1Len = erlang:byte_size(Family_name_12),
	Family_name_22 = common_tool:to_binary(Family_name_2Final),
	Family_name_2Len = erlang:byte_size(Family_name_22),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Family_id_1Final:32/signed,Family_name_1Len:16, Family_name_12/binary,Family_id_2Final:32/signed,Family_name_2Len:16, Family_name_22/binary>>;
encode_m_family_combine_panel_toc(_) -> 
	<<>>.

decode_m_family_combine_panel_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Family_id_1:32/signed,Family_name_1Len:16, Bin2/binary>> = Bin1,
	<<Family_name_1:Family_name_1Len/binary,Family_id_2:32/signed,Family_name_2Len:16, Bin3/binary>> = Bin2,
	<<Family_name_2:Family_name_2Len/binary>> = Bin3,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_family_combine_panel_toc, Succ,common_tool:to_list(Reason),Family_id_1,common_tool:to_list(Family_name_1),Family_id_2,common_tool:to_list(Family_name_2)};

decode_m_family_combine_panel_toc(_) ->
	undefined.
encode_m_family_combine_request_tos(Record) when is_record(Record, m_family_combine_request_tos) ->
	#m_family_combine_request_tos{target_family_id=Target_family_id} = Record,
	case Target_family_id =:= undefined of
		true ->
				Target_family_idFinal = undefined,
				exit({required_field_not_assigned, m_family_combine_request_tos, target_family_id});
		false ->
			Target_family_idFinal = Target_family_id
	end,

	<<Target_family_idFinal:32/signed>>;
encode_m_family_combine_request_tos(_) -> 
	<<>>.

decode_m_family_combine_request_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Target_family_id:32/signed>> = Bin0,

	{m_family_combine_request_tos, Target_family_id};

decode_m_family_combine_request_tos(_) ->
	undefined.
encode_m_family_combine_request_toc(Record) when is_record(Record, m_family_combine_request_toc) ->
	#m_family_combine_request_toc{succ=Succ,return_self=Return_self,reason=Reason,request_role_id=Request_role_id} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
			case Return_self of
				true ->
					Return_selfFinal = 1;
				false ->
					Return_selfFinal = 0
			end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Request_role_id =:= undefined of
		true ->
				Request_role_idFinal = 0;
		false ->
			Request_role_idFinal = Request_role_id
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,Return_selfFinal:8,ReasonLen:16, Reason2/binary,Request_role_idFinal:32/signed>>;
encode_m_family_combine_request_toc(_) -> 
	<<>>.

decode_m_family_combine_request_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,Return_selfTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Request_role_id:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_family_combine_request_toc, Succ,Return_self,common_tool:to_list(Reason),Request_role_id};

decode_m_family_combine_request_toc(_) ->
	undefined.
encode_m_family_combine_tos(Record) when is_record(Record, m_family_combine_tos) ->
	#m_family_combine_tos{confirm=Confirm,request_role_id=Request_role_id} = Record,
	case Confirm =:= undefined of
		true ->
				ConfirmFinal = 1;
		false ->
		case Confirm of
			true ->
				ConfirmFinal = 1;
			false ->
				ConfirmFinal = 0
		end
	end,
	case Request_role_id =:= undefined of
		true ->
				Request_role_idFinal = undefined,
				exit({required_field_not_assigned, m_family_combine_tos, request_role_id});
		false ->
			Request_role_idFinal = Request_role_id
	end,

	<<ConfirmFinal:8,Request_role_idFinal:32/signed>>;
encode_m_family_combine_tos(_) -> 
	<<>>.

decode_m_family_combine_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<ConfirmTmp:8,Request_role_id:32/signed>> = Bin0,
case ConfirmTmp of 
	1 -> 
		Confirm = true;
	_ ->
		Confirm = false
end,

	{m_family_combine_tos, Confirm,Request_role_id};

decode_m_family_combine_tos(_) ->
	undefined.
encode_m_family_combine_toc(Record) when is_record(Record, m_family_combine_toc) ->
	#m_family_combine_toc{succ=Succ,return_self=Return_self,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
			case Return_self of
				true ->
					Return_selfFinal = 1;
				false ->
					Return_selfFinal = 0
			end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,Return_selfFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_family_combine_toc(_) -> 
	<<>>.

decode_m_family_combine_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,Return_selfTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_family_combine_toc, Succ,Return_self,common_tool:to_list(Reason)};

decode_m_family_combine_toc(_) ->
	undefined.
encode_m_role2_on_hook_begin_tos(Record) when is_record(Record, m_role2_on_hook_begin_tos) ->
	#m_role2_on_hook_begin_tos{} = Record,

	<<>>;
encode_m_role2_on_hook_begin_tos(_) -> 
	<<>>.

decode_m_role2_on_hook_begin_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_role2_on_hook_begin_tos};

decode_m_role2_on_hook_begin_tos(_) ->
	undefined.
encode_m_role2_on_hook_begin_toc(Record) when is_record(Record, m_role2_on_hook_begin_toc) ->
	#m_role2_on_hook_begin_toc{succ=Succ,return_self=Return_self,reason=Reason,role_id=Role_id,status=Status} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = 0;
		false ->
			Role_idFinal = Role_id
	end,
	case Status =:= undefined of
		true ->
				StatusFinal = 0;
		false ->
			case Status of
				true ->
					StatusFinal = 1;
				false ->
					StatusFinal = 0
			end
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,Return_selfFinal:8,ReasonLen:16, Reason2/binary,Role_idFinal:32/signed,StatusFinal:8>>;
encode_m_role2_on_hook_begin_toc(_) -> 
	<<>>.

decode_m_role2_on_hook_begin_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,Return_selfTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Role_id:32/signed,StatusTmp:8>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,
case StatusTmp of 
	1 -> 
		Status = true;
	_ ->
		Status = false
end,

	{m_role2_on_hook_begin_toc, Succ,Return_self,common_tool:to_list(Reason),Role_id,Status};

decode_m_role2_on_hook_begin_toc(_) ->
	undefined.
encode_m_role2_on_hook_end_tos(Record) when is_record(Record, m_role2_on_hook_end_tos) ->
	#m_role2_on_hook_end_tos{} = Record,

	<<>>;
encode_m_role2_on_hook_end_tos(_) -> 
	<<>>.

decode_m_role2_on_hook_end_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_role2_on_hook_end_tos};

decode_m_role2_on_hook_end_tos(_) ->
	undefined.
encode_m_role2_on_hook_end_toc(Record) when is_record(Record, m_role2_on_hook_end_toc) ->
	#m_role2_on_hook_end_toc{succ=Succ,return_self=Return_self,reason=Reason,start_time=Start_time,sum_exp=Sum_exp,end_time=End_time,role_id=Role_id,status=Status} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Start_time =:= undefined of
		true ->
				Start_timeFinal = 0;
		false ->
			Start_timeFinal = Start_time
	end,
	case Sum_exp =:= undefined of
		true ->
				Sum_expFinal = 0;
		false ->
			Sum_expFinal = Sum_exp
	end,
	case End_time =:= undefined of
		true ->
				End_timeFinal = 0;
		false ->
			End_timeFinal = End_time
	end,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = 0;
		false ->
			Role_idFinal = Role_id
	end,
	case Status =:= undefined of
		true ->
				StatusFinal = 0;
		false ->
			case Status of
				true ->
					StatusFinal = 1;
				false ->
					StatusFinal = 0
			end
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,Return_selfFinal:8,ReasonLen:16, Reason2/binary,Start_timeFinal:32/signed,Sum_expFinal:32/signed,End_timeFinal:32/signed,Role_idFinal:32/signed,StatusFinal:8>>;
encode_m_role2_on_hook_end_toc(_) -> 
	<<>>.

decode_m_role2_on_hook_end_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,Return_selfTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Start_time:32/signed,Sum_exp:32/signed,End_time:32/signed,Role_id:32/signed,StatusTmp:8>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,
case StatusTmp of 
	1 -> 
		Status = true;
	_ ->
		Status = false
end,

	{m_role2_on_hook_end_toc, Succ,Return_self,common_tool:to_list(Reason),Start_time,Sum_exp,End_time,Role_id,Status};

decode_m_role2_on_hook_end_toc(_) ->
	undefined.
encode_m_role2_on_hook_status_tos(Record) when is_record(Record, m_role2_on_hook_status_tos) ->
	#m_role2_on_hook_status_tos{} = Record,

	<<>>;
encode_m_role2_on_hook_status_tos(_) -> 
	<<>>.

decode_m_role2_on_hook_status_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_role2_on_hook_status_tos};

decode_m_role2_on_hook_status_tos(_) ->
	undefined.
encode_m_role2_on_hook_status_toc(Record) when is_record(Record, m_role2_on_hook_status_toc) ->
	#m_role2_on_hook_status_toc{succ=Succ,reason=Reason,start_time=Start_time,sun_exp=Sun_exp,add_exp=Add_exp,next_time=Next_time} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Start_time =:= undefined of
		true ->
				Start_timeFinal = 0;
		false ->
			Start_timeFinal = Start_time
	end,
	case Sun_exp =:= undefined of
		true ->
				Sun_expFinal = 0;
		false ->
			Sun_expFinal = Sun_exp
	end,
	case Add_exp =:= undefined of
		true ->
				Add_expFinal = 0;
		false ->
			Add_expFinal = Add_exp
	end,
	case Next_time =:= undefined of
		true ->
				Next_timeFinal = 0;
		false ->
			Next_timeFinal = Next_time
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Start_timeFinal:32/signed,Sun_expFinal:32/signed,Add_expFinal:32/signed,Next_timeFinal:32/signed>>;
encode_m_role2_on_hook_status_toc(_) -> 
	<<>>.

decode_m_role2_on_hook_status_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Start_time:32/signed,Sun_exp:32/signed,Add_exp:32/signed,Next_time:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_role2_on_hook_status_toc, Succ,common_tool:to_list(Reason),Start_time,Sun_exp,Add_exp,Next_time};

decode_m_role2_on_hook_status_toc(_) ->
	undefined.
encode_m_time_gift_list_toc(Record) when is_record(Record, m_time_gift_list_toc) ->
	#m_time_gift_list_toc{gift=Gift} = Record,
	case Gift =:= undefined of
		true ->
				GiftFinal = undefined,
				exit({required_field_not_assigned, m_time_gift_list_toc, gift});
		false ->
			GiftFinal = Gift
	end,
	Gift_bin = encode_p_time_gift_info(GiftFinal),
	BinLen_gift = erlang:byte_size(Gift_bin),

	<<BinLen_gift:32, Gift_bin/binary>>;
encode_m_time_gift_list_toc(_) -> 
	<<>>.

decode_m_time_gift_list_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_SubBinSizegift:32, SubBingift/binary>> = Bin0,
	Gift = decode_p_time_gift_info(SubBingift),

	{m_time_gift_list_toc, Gift};

decode_m_time_gift_list_toc(_) ->
	undefined.
encode_p_time_gift_info(Record) when is_record(Record, p_time_gift_info) ->
	#p_time_gift_info{id=Id,goods_list=Goods_list,time=Time} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, p_time_gift_info, id});
		false ->
			IdFinal = Id
	end,
	case Goods_list =:= undefined of
		true ->
			Goods_listFinal = [];
		false ->
			Goods_listFinal = Goods_list
	end,
	case Time =:= undefined of
		true ->
				TimeFinal = undefined,
				exit({required_field_not_assigned, p_time_gift_info, time});
		false ->
			TimeFinal = Time
	end,
	Goods_list_bin = encode_p_goodss(Goods_listFinal, <<>>),
	SizeGoods_listFinal = erlang:length(Goods_listFinal),
	BinLen_goods_list = erlang:byte_size(Goods_list_bin),

	<<IdFinal:32/signed,SizeGoods_listFinal:16, BinLen_goods_list:32, Goods_list_bin/binary,TimeFinal:32/signed>>;
encode_p_time_gift_info(_) -> 
	<<>>.

decode_p_time_gift_info(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed,_Sizegoods_list:16, BinLengoods_list:32, Bin1/binary>> = Bin0,
	<<SubBingoods_list:BinLengoods_list/binary, Bin2/binary>> = Bin1, 
	Goods_list = lists:reverse(decode_p_goodss(SubBingoods_list, [])),
	<<Time:32/signed>> = Bin2,

	{p_time_gift_info, Id,Goods_list,Time};

decode_p_time_gift_info(_) ->
	undefined.
encode_m_time_gift_accept_tos(Record) when is_record(Record, m_time_gift_accept_tos) ->
	#m_time_gift_accept_tos{id=Id} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, m_time_gift_accept_tos, id});
		false ->
			IdFinal = Id
	end,

	<<IdFinal:32/signed>>;
encode_m_time_gift_accept_tos(_) -> 
	<<>>.

decode_m_time_gift_accept_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed>> = Bin0,

	{m_time_gift_accept_tos, Id};

decode_m_time_gift_accept_tos(_) ->
	undefined.
encode_m_time_gift_accept_toc(Record) when is_record(Record, m_time_gift_accept_toc) ->
	#m_time_gift_accept_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_time_gift_accept_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_time_gift_accept_toc(_) -> 
	<<>>.

decode_m_time_gift_accept_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_time_gift_accept_toc, Succ,common_tool:to_list(Reason)};

decode_m_time_gift_accept_toc(_) ->
	undefined.
encode_m_level_gift_list_toc(Record) when is_record(Record, m_level_gift_list_toc) ->
	#m_level_gift_list_toc{gift=Gift} = Record,
	case Gift =:= undefined of
		true ->
				GiftFinal = undefined,
				exit({required_field_not_assigned, m_level_gift_list_toc, gift});
		false ->
			GiftFinal = Gift
	end,
	Gift_bin = encode_p_level_gift_info(GiftFinal),
	BinLen_gift = erlang:byte_size(Gift_bin),

	<<BinLen_gift:32, Gift_bin/binary>>;
encode_m_level_gift_list_toc(_) -> 
	<<>>.

decode_m_level_gift_list_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_SubBinSizegift:32, SubBingift/binary>> = Bin0,
	Gift = decode_p_level_gift_info(SubBingift),

	{m_level_gift_list_toc, Gift};

decode_m_level_gift_list_toc(_) ->
	undefined.
encode_p_level_gift_info(Record) when is_record(Record, p_level_gift_info) ->
	#p_level_gift_info{id=Id,goods_list=Goods_list,next_level=Next_level} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, p_level_gift_info, id});
		false ->
			IdFinal = Id
	end,
	case Goods_list =:= undefined of
		true ->
			Goods_listFinal = [];
		false ->
			Goods_listFinal = Goods_list
	end,
	case Next_level =:= undefined of
		true ->
				Next_levelFinal = undefined,
				exit({required_field_not_assigned, p_level_gift_info, next_level});
		false ->
			Next_levelFinal = Next_level
	end,
	Goods_list_bin = encode_p_goodss(Goods_listFinal, <<>>),
	SizeGoods_listFinal = erlang:length(Goods_listFinal),
	BinLen_goods_list = erlang:byte_size(Goods_list_bin),

	<<IdFinal:32/signed,SizeGoods_listFinal:16, BinLen_goods_list:32, Goods_list_bin/binary,Next_levelFinal:32/signed>>;
encode_p_level_gift_info(_) -> 
	<<>>.

decode_p_level_gift_info(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed,_Sizegoods_list:16, BinLengoods_list:32, Bin1/binary>> = Bin0,
	<<SubBingoods_list:BinLengoods_list/binary, Bin2/binary>> = Bin1, 
	Goods_list = lists:reverse(decode_p_goodss(SubBingoods_list, [])),
	<<Next_level:32/signed>> = Bin2,

	{p_level_gift_info, Id,Goods_list,Next_level};

decode_p_level_gift_info(_) ->
	undefined.
encode_m_level_gift_accept_tos(Record) when is_record(Record, m_level_gift_accept_tos) ->
	#m_level_gift_accept_tos{id=Id} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, m_level_gift_accept_tos, id});
		false ->
			IdFinal = Id
	end,

	<<IdFinal:32/signed>>;
encode_m_level_gift_accept_tos(_) -> 
	<<>>.

decode_m_level_gift_accept_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed>> = Bin0,

	{m_level_gift_accept_tos, Id};

decode_m_level_gift_accept_tos(_) ->
	undefined.
encode_m_level_gift_accept_toc(Record) when is_record(Record, m_level_gift_accept_toc) ->
	#m_level_gift_accept_toc{succ=Succ,reason=Reason,goods_list=Goods_list} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_level_gift_accept_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Goods_list =:= undefined of
		true ->
			Goods_listFinal = [];
		false ->
			Goods_listFinal = Goods_list
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Goods_list_bin = encode_p_goodss(Goods_listFinal, <<>>),
	SizeGoods_listFinal = erlang:length(Goods_listFinal),
	BinLen_goods_list = erlang:byte_size(Goods_list_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,SizeGoods_listFinal:16, BinLen_goods_list:32, Goods_list_bin/binary>>;
encode_m_level_gift_accept_toc(_) -> 
	<<>>.

decode_m_level_gift_accept_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_Sizegoods_list:16, _BinLengoods_list:32, SubBingoods_list/binary>> = Bin1,
	Goods_list = lists:reverse(decode_p_goodss(SubBingoods_list, [])),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_level_gift_accept_toc, Succ,common_tool:to_list(Reason),Goods_list};

decode_m_level_gift_accept_toc(_) ->
	undefined.
encode_m_country_treasure_enter_tos(Record) when is_record(Record, m_country_treasure_enter_tos) ->
	#m_country_treasure_enter_tos{npc_id=Npc_id,map_id=Map_id} = Record,
	case Npc_id =:= undefined of
		true ->
				Npc_idFinal = 0;
		false ->
			Npc_idFinal = Npc_id
	end,
	case Map_id =:= undefined of
		true ->
				Map_idFinal = 0;
		false ->
			Map_idFinal = Map_id
	end,

	<<Npc_idFinal:32/signed,Map_idFinal:32/signed>>;
encode_m_country_treasure_enter_tos(_) -> 
	<<>>.

decode_m_country_treasure_enter_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Npc_id:32/signed,Map_id:32/signed>> = Bin0,

	{m_country_treasure_enter_tos, Npc_id,Map_id};

decode_m_country_treasure_enter_tos(_) ->
	undefined.
encode_m_country_treasure_enter_toc(Record) when is_record(Record, m_country_treasure_enter_toc) ->
	#m_country_treasure_enter_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_country_treasure_enter_toc(_) -> 
	<<>>.

decode_m_country_treasure_enter_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_country_treasure_enter_toc, Succ,common_tool:to_list(Reason)};

decode_m_country_treasure_enter_toc(_) ->
	undefined.
encode_m_country_treasure_quit_tos(Record) when is_record(Record, m_country_treasure_quit_tos) ->
	#m_country_treasure_quit_tos{npc_id=Npc_id,map_id=Map_id} = Record,
	case Npc_id =:= undefined of
		true ->
				Npc_idFinal = 0;
		false ->
			Npc_idFinal = Npc_id
	end,
	case Map_id =:= undefined of
		true ->
				Map_idFinal = 0;
		false ->
			Map_idFinal = Map_id
	end,

	<<Npc_idFinal:32/signed,Map_idFinal:32/signed>>;
encode_m_country_treasure_quit_tos(_) -> 
	<<>>.

decode_m_country_treasure_quit_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Npc_id:32/signed,Map_id:32/signed>> = Bin0,

	{m_country_treasure_quit_tos, Npc_id,Map_id};

decode_m_country_treasure_quit_tos(_) ->
	undefined.
encode_m_country_treasure_quit_toc(Record) when is_record(Record, m_country_treasure_quit_toc) ->
	#m_country_treasure_quit_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_country_treasure_quit_toc(_) -> 
	<<>>.

decode_m_country_treasure_quit_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_country_treasure_quit_toc, Succ,common_tool:to_list(Reason)};

decode_m_country_treasure_quit_toc(_) ->
	undefined.
encode_m_country_treasure_query_tos(Record) when is_record(Record, m_country_treasure_query_tos) ->
	#m_country_treasure_query_tos{op_type=Op_type} = Record,
	case Op_type =:= undefined of
		true ->
				Op_typeFinal = 0;
		false ->
			Op_typeFinal = Op_type
	end,

	<<Op_typeFinal:32/signed>>;
encode_m_country_treasure_query_tos(_) -> 
	<<>>.

decode_m_country_treasure_query_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Op_type:32/signed>> = Bin0,

	{m_country_treasure_query_tos, Op_type};

decode_m_country_treasure_query_tos(_) ->
	undefined.
encode_m_country_treasure_query_toc(Record) when is_record(Record, m_country_treasure_query_toc) ->
	#m_country_treasure_query_toc{succ=Succ,reason=Reason,reason_code=Reason_code,op_type=Op_type,fb_start_time=Fb_start_time,fb_end_time=Fb_end_time,npc_id=Npc_id,fee=Fee} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Reason_code =:= undefined of
		true ->
				Reason_codeFinal = 0;
		false ->
			Reason_codeFinal = Reason_code
	end,
	case Op_type =:= undefined of
		true ->
				Op_typeFinal = 0;
		false ->
			Op_typeFinal = Op_type
	end,
	case Fb_start_time =:= undefined of
		true ->
				Fb_start_timeFinal = 0;
		false ->
			Fb_start_timeFinal = Fb_start_time
	end,
	case Fb_end_time =:= undefined of
		true ->
				Fb_end_timeFinal = 0;
		false ->
			Fb_end_timeFinal = Fb_end_time
	end,
	case Npc_id =:= undefined of
		true ->
				Npc_idFinal = 0;
		false ->
			Npc_idFinal = Npc_id
	end,
	case Fee =:= undefined of
		true ->
				FeeFinal = 0;
		false ->
			FeeFinal = Fee
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Reason_codeFinal:32/signed,Op_typeFinal:32/signed,Fb_start_timeFinal:32/signed,Fb_end_timeFinal:32/signed,Npc_idFinal:32/signed,FeeFinal:32/signed>>;
encode_m_country_treasure_query_toc(_) -> 
	<<>>.

decode_m_country_treasure_query_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Reason_code:32/signed,Op_type:32/signed,Fb_start_time:32/signed,Fb_end_time:32/signed,Npc_id:32/signed,Fee:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_country_treasure_query_toc, Succ,common_tool:to_list(Reason),Reason_code,Op_type,Fb_start_time,Fb_end_time,Npc_id,Fee};

decode_m_country_treasure_query_toc(_) ->
	undefined.
encode_m_country_treasure_points_toc(Record) when is_record(Record, m_country_treasure_points_toc) ->
	#m_country_treasure_points_toc{points=Points} = Record,
	case Points =:= undefined of
		true ->
			PointsFinal = [];
		false ->
			PointsFinal = Points
	end,
	Points_bin = encode_p_country_pointss(PointsFinal, <<>>),
	SizePointsFinal = erlang:length(PointsFinal),
	BinLen_points = erlang:byte_size(Points_bin),

	<<SizePointsFinal:16, BinLen_points:32, Points_bin/binary>>;
encode_m_country_treasure_points_toc(_) -> 
	<<>>.

decode_m_country_treasure_points_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizepoints:16, _BinLenpoints:32, SubBinpoints/binary>> = Bin0,
	Points = lists:reverse(decode_p_country_pointss(SubBinpoints, [])),

	{m_country_treasure_points_toc, Points};

decode_m_country_treasure_points_toc(_) ->
	undefined.
encode_p_country_points(Record) when is_record(Record, p_country_points) ->
	#p_country_points{faction_id=Faction_id,points=Points} = Record,
	case Faction_id =:= undefined of
		true ->
				Faction_idFinal = undefined,
				exit({required_field_not_assigned, p_country_points, faction_id});
		false ->
			Faction_idFinal = Faction_id
	end,
	case Points =:= undefined of
		true ->
				PointsFinal = undefined,
				exit({required_field_not_assigned, p_country_points, points});
		false ->
			PointsFinal = Points
	end,

	<<Faction_idFinal:32/signed,PointsFinal:32/signed>>;
encode_p_country_points(_) -> 
	<<>>.

decode_p_country_points(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Faction_id:32/signed,Points:32/signed>> = Bin0,

	{p_country_points, Faction_id,Points};

decode_p_country_points(_) ->
	undefined.
encode_m_pet_enter_toc(Record) when is_record(Record, m_pet_enter_toc) ->
	#m_pet_enter_toc{pets=Pets} = Record,
	case Pets =:= undefined of
		true ->
			PetsFinal = [];
		false ->
			PetsFinal = Pets
	end,
	Pets_bin = encode_p_map_pets(PetsFinal, <<>>),
	SizePetsFinal = erlang:length(PetsFinal),
	BinLen_pets = erlang:byte_size(Pets_bin),

	<<SizePetsFinal:16, BinLen_pets:32, Pets_bin/binary>>;
encode_m_pet_enter_toc(_) -> 
	<<>>.

decode_m_pet_enter_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizepets:16, _BinLenpets:32, SubBinpets/binary>> = Bin0,
	Pets = lists:reverse(decode_p_map_pets(SubBinpets, [])),

	{m_pet_enter_toc, Pets};

decode_m_pet_enter_toc(_) ->
	undefined.
encode_m_pet_quit_toc(Record) when is_record(Record, m_pet_quit_toc) ->
	#m_pet_quit_toc{pet_id=Pet_id} = Record,
	case Pet_id =:= undefined of
		true ->
				Pet_idFinal = undefined,
				exit({required_field_not_assigned, m_pet_quit_toc, pet_id});
		false ->
			Pet_idFinal = Pet_id
	end,

	<<Pet_idFinal:32/signed>>;
encode_m_pet_quit_toc(_) -> 
	<<>>.

decode_m_pet_quit_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Pet_id:32/signed>> = Bin0,

	{m_pet_quit_toc, Pet_id};

decode_m_pet_quit_toc(_) ->
	undefined.
encode_m_pet_dead_toc(Record) when is_record(Record, m_pet_dead_toc) ->
	#m_pet_dead_toc{pet_id=Pet_id,life=Life} = Record,
	case Pet_id =:= undefined of
		true ->
				Pet_idFinal = undefined,
				exit({required_field_not_assigned, m_pet_dead_toc, pet_id});
		false ->
			Pet_idFinal = Pet_id
	end,
	case Life =:= undefined of
		true ->
				LifeFinal = undefined,
				exit({required_field_not_assigned, m_pet_dead_toc, life});
		false ->
			LifeFinal = Life
	end,

	<<Pet_idFinal:32/signed,LifeFinal:32/signed>>;
encode_m_pet_dead_toc(_) -> 
	<<>>.

decode_m_pet_dead_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Pet_id:32/signed,Life:32/signed>> = Bin0,

	{m_pet_dead_toc, Pet_id,Life};

decode_m_pet_dead_toc(_) ->
	undefined.
encode_m_pet_attr_change_toc(Record) when is_record(Record, m_pet_attr_change_toc) ->
	#m_pet_attr_change_toc{pet_id=Pet_id,change_type=Change_type,value=Value} = Record,
	case Pet_id =:= undefined of
		true ->
				Pet_idFinal = undefined,
				exit({required_field_not_assigned, m_pet_attr_change_toc, pet_id});
		false ->
			Pet_idFinal = Pet_id
	end,
	case Change_type =:= undefined of
		true ->
				Change_typeFinal = undefined,
				exit({required_field_not_assigned, m_pet_attr_change_toc, change_type});
		false ->
			Change_typeFinal = Change_type
	end,
	case Value =:= undefined of
		true ->
				ValueFinal = undefined,
				exit({required_field_not_assigned, m_pet_attr_change_toc, value});
		false ->
			ValueFinal = Value
	end,

	<<Pet_idFinal:32/signed,Change_typeFinal:32/signed,ValueFinal:32/signed>>;
encode_m_pet_attr_change_toc(_) -> 
	<<>>.

decode_m_pet_attr_change_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Pet_id:32/signed,Change_type:32/signed,Value:32/signed>> = Bin0,

	{m_pet_attr_change_toc, Pet_id,Change_type,Value};

decode_m_pet_attr_change_toc(_) ->
	undefined.
encode_m_pet_summon_tos(Record) when is_record(Record, m_pet_summon_tos) ->
	#m_pet_summon_tos{pet_id=Pet_id} = Record,
	case Pet_id =:= undefined of
		true ->
				Pet_idFinal = undefined,
				exit({required_field_not_assigned, m_pet_summon_tos, pet_id});
		false ->
			Pet_idFinal = Pet_id
	end,

	<<Pet_idFinal:32/signed>>;
encode_m_pet_summon_tos(_) -> 
	<<>>.

decode_m_pet_summon_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Pet_id:32/signed>> = Bin0,

	{m_pet_summon_tos, Pet_id};

decode_m_pet_summon_tos(_) ->
	undefined.
encode_m_pet_summon_toc(Record) when is_record(Record, m_pet_summon_toc) ->
	#m_pet_summon_toc{succ=Succ,reason=Reason,pet_info=Pet_info} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Pet_info =:= undefined of
		true ->
				Pet_infoFinal = 0;
		false ->
			Pet_infoFinal = Pet_info
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Pet_info_bin = encode_p_pet(Pet_infoFinal),
	BinLen_pet_info = erlang:byte_size(Pet_info_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_pet_info:32, Pet_info_bin/binary>>;
encode_m_pet_summon_toc(_) -> 
	<<>>.

decode_m_pet_summon_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_SubBinSizepet_info:32, SubBinpet_info/binary>> = Bin1,
	Pet_info = decode_p_pet(SubBinpet_info),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_pet_summon_toc, Succ,common_tool:to_list(Reason),Pet_info};

decode_m_pet_summon_toc(_) ->
	undefined.
encode_m_pet_call_back_tos(Record) when is_record(Record, m_pet_call_back_tos) ->
	#m_pet_call_back_tos{pet_id=Pet_id} = Record,
	case Pet_id =:= undefined of
		true ->
				Pet_idFinal = undefined,
				exit({required_field_not_assigned, m_pet_call_back_tos, pet_id});
		false ->
			Pet_idFinal = Pet_id
	end,

	<<Pet_idFinal:32/signed>>;
encode_m_pet_call_back_tos(_) -> 
	<<>>.

decode_m_pet_call_back_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Pet_id:32/signed>> = Bin0,

	{m_pet_call_back_tos, Pet_id};

decode_m_pet_call_back_tos(_) ->
	undefined.
encode_m_pet_call_back_toc(Record) when is_record(Record, m_pet_call_back_toc) ->
	#m_pet_call_back_toc{succ=Succ,reason=Reason,pet_id=Pet_id} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Pet_id =:= undefined of
		true ->
				Pet_idFinal = undefined,
				exit({required_field_not_assigned, m_pet_call_back_toc, pet_id});
		false ->
			Pet_idFinal = Pet_id
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Pet_idFinal:32/signed>>;
encode_m_pet_call_back_toc(_) -> 
	<<>>.

decode_m_pet_call_back_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Pet_id:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_pet_call_back_toc, Succ,common_tool:to_list(Reason),Pet_id};

decode_m_pet_call_back_toc(_) ->
	undefined.
encode_m_pet_throw_tos(Record) when is_record(Record, m_pet_throw_tos) ->
	#m_pet_throw_tos{pet_id=Pet_id} = Record,
	case Pet_id =:= undefined of
		true ->
				Pet_idFinal = undefined,
				exit({required_field_not_assigned, m_pet_throw_tos, pet_id});
		false ->
			Pet_idFinal = Pet_id
	end,

	<<Pet_idFinal:32/signed>>;
encode_m_pet_throw_tos(_) -> 
	<<>>.

decode_m_pet_throw_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Pet_id:32/signed>> = Bin0,

	{m_pet_throw_tos, Pet_id};

decode_m_pet_throw_tos(_) ->
	undefined.
encode_m_pet_throw_toc(Record) when is_record(Record, m_pet_throw_toc) ->
	#m_pet_throw_toc{succ=Succ,reason=Reason,bag_info=Bag_info} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Bag_info =:= undefined of
		true ->
				Bag_infoFinal = 0;
		false ->
			Bag_infoFinal = Bag_info
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Bag_info_bin = encode_p_role_pet_bag(Bag_infoFinal),
	BinLen_bag_info = erlang:byte_size(Bag_info_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_bag_info:32, Bag_info_bin/binary>>;
encode_m_pet_throw_toc(_) -> 
	<<>>.

decode_m_pet_throw_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_SubBinSizebag_info:32, SubBinbag_info/binary>> = Bin1,
	Bag_info = decode_p_role_pet_bag(SubBinbag_info),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_pet_throw_toc, Succ,common_tool:to_list(Reason),Bag_info};

decode_m_pet_throw_toc(_) ->
	undefined.
encode_m_pet_add_life_tos(Record) when is_record(Record, m_pet_add_life_tos) ->
	#m_pet_add_life_tos{pet_id=Pet_id,add_type=Add_type} = Record,
	case Pet_id =:= undefined of
		true ->
				Pet_idFinal = undefined,
				exit({required_field_not_assigned, m_pet_add_life_tos, pet_id});
		false ->
			Pet_idFinal = Pet_id
	end,
	case Add_type =:= undefined of
		true ->
				Add_typeFinal = undefined,
				exit({required_field_not_assigned, m_pet_add_life_tos, add_type});
		false ->
			Add_typeFinal = Add_type
	end,

	<<Pet_idFinal:32/signed,Add_typeFinal:32/signed>>;
encode_m_pet_add_life_tos(_) -> 
	<<>>.

decode_m_pet_add_life_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Pet_id:32/signed,Add_type:32/signed>> = Bin0,

	{m_pet_add_life_tos, Pet_id,Add_type};

decode_m_pet_add_life_tos(_) ->
	undefined.
encode_m_pet_add_life_toc(Record) when is_record(Record, m_pet_add_life_toc) ->
	#m_pet_add_life_toc{succ=Succ,reason=Reason,pet_id=Pet_id,life=Life} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Pet_id =:= undefined of
		true ->
				Pet_idFinal = undefined,
				exit({required_field_not_assigned, m_pet_add_life_toc, pet_id});
		false ->
			Pet_idFinal = Pet_id
	end,
	case Life =:= undefined of
		true ->
				LifeFinal = 0;
		false ->
			LifeFinal = Life
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Pet_idFinal:32/signed,LifeFinal:32/signed>>;
encode_m_pet_add_life_toc(_) -> 
	<<>>.

decode_m_pet_add_life_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Pet_id:32/signed,Life:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_pet_add_life_toc, Succ,common_tool:to_list(Reason),Pet_id,Life};

decode_m_pet_add_life_toc(_) ->
	undefined.
encode_m_pet_learn_skill_tos(Record) when is_record(Record, m_pet_learn_skill_tos) ->
	#m_pet_learn_skill_tos{pet_id=Pet_id,skill_id=Skill_id} = Record,
	case Pet_id =:= undefined of
		true ->
				Pet_idFinal = undefined,
				exit({required_field_not_assigned, m_pet_learn_skill_tos, pet_id});
		false ->
			Pet_idFinal = Pet_id
	end,
	case Skill_id =:= undefined of
		true ->
				Skill_idFinal = undefined,
				exit({required_field_not_assigned, m_pet_learn_skill_tos, skill_id});
		false ->
			Skill_idFinal = Skill_id
	end,

	<<Pet_idFinal:32/signed,Skill_idFinal:32/signed>>;
encode_m_pet_learn_skill_tos(_) -> 
	<<>>.

decode_m_pet_learn_skill_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Pet_id:32/signed,Skill_id:32/signed>> = Bin0,

	{m_pet_learn_skill_tos, Pet_id,Skill_id};

decode_m_pet_learn_skill_tos(_) ->
	undefined.
encode_m_pet_learn_skill_toc(Record) when is_record(Record, m_pet_learn_skill_toc) ->
	#m_pet_learn_skill_toc{succ=Succ,reason=Reason,succ2=Succ2,pet_id=Pet_id,skills=Skills} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Succ2 =:= undefined of
		true ->
				Succ2Final = 1;
		false ->
			case Succ2 of
				true ->
					Succ2Final = 1;
				false ->
					Succ2Final = 0
			end
	end,
	case Pet_id =:= undefined of
		true ->
				Pet_idFinal = undefined,
				exit({required_field_not_assigned, m_pet_learn_skill_toc, pet_id});
		false ->
			Pet_idFinal = Pet_id
	end,
	case Skills =:= undefined of
		true ->
			SkillsFinal = [];
		false ->
			SkillsFinal = Skills
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Skills_bin = encode_p_pet_skills(SkillsFinal, <<>>),
	SizeSkillsFinal = erlang:length(SkillsFinal),
	BinLen_skills = erlang:byte_size(Skills_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Succ2Final:8,Pet_idFinal:32/signed,SizeSkillsFinal:16, BinLen_skills:32, Skills_bin/binary>>;
encode_m_pet_learn_skill_toc(_) -> 
	<<>>.

decode_m_pet_learn_skill_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Succ2Tmp:8,Pet_id:32/signed,_Sizeskills:16, _BinLenskills:32, SubBinskills/binary>> = Bin1,
	Skills = lists:reverse(decode_p_pet_skills(SubBinskills, [])),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Succ2Tmp of 
	1 -> 
		Succ2 = true;
	_ ->
		Succ2 = false
end,

	{m_pet_learn_skill_toc, Succ,common_tool:to_list(Reason),Succ2,Pet_id,Skills};

decode_m_pet_learn_skill_toc(_) ->
	undefined.
encode_m_pet_info_tos(Record) when is_record(Record, m_pet_info_tos) ->
	#m_pet_info_tos{pet_id=Pet_id,role_id=Role_id} = Record,
	case Pet_id =:= undefined of
		true ->
				Pet_idFinal = undefined,
				exit({required_field_not_assigned, m_pet_info_tos, pet_id});
		false ->
			Pet_idFinal = Pet_id
	end,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, m_pet_info_tos, role_id});
		false ->
			Role_idFinal = Role_id
	end,

	<<Pet_idFinal:32/signed,Role_idFinal:32/signed>>;
encode_m_pet_info_tos(_) -> 
	<<>>.

decode_m_pet_info_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Pet_id:32/signed,Role_id:32/signed>> = Bin0,

	{m_pet_info_tos, Pet_id,Role_id};

decode_m_pet_info_tos(_) ->
	undefined.
encode_m_pet_info_toc(Record) when is_record(Record, m_pet_info_toc) ->
	#m_pet_info_toc{succ=Succ,reason=Reason,pet_info=Pet_info} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Pet_info =:= undefined of
		true ->
				Pet_infoFinal = 0;
		false ->
			Pet_infoFinal = Pet_info
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Pet_info_bin = encode_p_pet(Pet_infoFinal),
	BinLen_pet_info = erlang:byte_size(Pet_info_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_pet_info:32, Pet_info_bin/binary>>;
encode_m_pet_info_toc(_) -> 
	<<>>.

decode_m_pet_info_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_SubBinSizepet_info:32, SubBinpet_info/binary>> = Bin1,
	Pet_info = decode_p_pet(SubBinpet_info),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_pet_info_toc, Succ,common_tool:to_list(Reason),Pet_info};

decode_m_pet_info_toc(_) ->
	undefined.
encode_m_pet_bag_info_tos(Record) when is_record(Record, m_pet_bag_info_tos) ->
	#m_pet_bag_info_tos{} = Record,

	<<>>;
encode_m_pet_bag_info_tos(_) -> 
	<<>>.

decode_m_pet_bag_info_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_pet_bag_info_tos};

decode_m_pet_bag_info_tos(_) ->
	undefined.
encode_m_pet_bag_info_toc(Record) when is_record(Record, m_pet_bag_info_toc) ->
	#m_pet_bag_info_toc{info=Info} = Record,
	case Info =:= undefined of
		true ->
				InfoFinal = undefined,
				exit({required_field_not_assigned, m_pet_bag_info_toc, info});
		false ->
			InfoFinal = Info
	end,
	Info_bin = encode_p_role_pet_bag(InfoFinal),
	BinLen_info = erlang:byte_size(Info_bin),

	<<BinLen_info:32, Info_bin/binary>>;
encode_m_pet_bag_info_toc(_) -> 
	<<>>.

decode_m_pet_bag_info_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_SubBinSizeinfo:32, SubBininfo/binary>> = Bin0,
	Info = decode_p_role_pet_bag(SubBininfo),

	{m_pet_bag_info_toc, Info};

decode_m_pet_bag_info_toc(_) ->
	undefined.
encode_m_pet_add_bag_tos(Record) when is_record(Record, m_pet_add_bag_tos) ->
	#m_pet_add_bag_tos{pet_id=Pet_id} = Record,
	case Pet_id =:= undefined of
		true ->
				Pet_idFinal = undefined,
				exit({required_field_not_assigned, m_pet_add_bag_tos, pet_id});
		false ->
			Pet_idFinal = Pet_id
	end,

	<<Pet_idFinal:32/signed>>;
encode_m_pet_add_bag_tos(_) -> 
	<<>>.

decode_m_pet_add_bag_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Pet_id:32/signed>> = Bin0,

	{m_pet_add_bag_tos, Pet_id};

decode_m_pet_add_bag_tos(_) ->
	undefined.
encode_m_pet_add_bag_toc(Record) when is_record(Record, m_pet_add_bag_toc) ->
	#m_pet_add_bag_toc{succ=Succ,reason=Reason,info=Info} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Info =:= undefined of
		true ->
				InfoFinal = 0;
		false ->
			InfoFinal = Info
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Info_bin = encode_p_role_pet_bag(InfoFinal),
	BinLen_info = erlang:byte_size(Info_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_info:32, Info_bin/binary>>;
encode_m_pet_add_bag_toc(_) -> 
	<<>>.

decode_m_pet_add_bag_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_SubBinSizeinfo:32, SubBininfo/binary>> = Bin1,
	Info = decode_p_role_pet_bag(SubBininfo),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_pet_add_bag_toc, Succ,common_tool:to_list(Reason),Info};

decode_m_pet_add_bag_toc(_) ->
	undefined.
encode_m_pet_attr_assign_tos(Record) when is_record(Record, m_pet_attr_assign_tos) ->
	#m_pet_attr_assign_tos{pet_id=Pet_id,assign_info=Assign_info} = Record,
	case Pet_id =:= undefined of
		true ->
				Pet_idFinal = undefined,
				exit({required_field_not_assigned, m_pet_attr_assign_tos, pet_id});
		false ->
			Pet_idFinal = Pet_id
	end,
	case Assign_info =:= undefined of
		true ->
			Assign_infoFinal = [];
		false ->
			Assign_infoFinal = Assign_info
	end,
	Assign_info_bin = encode_p_pet_attr_assigns(Assign_infoFinal, <<>>),
	SizeAssign_infoFinal = erlang:length(Assign_infoFinal),
	BinLen_assign_info = erlang:byte_size(Assign_info_bin),

	<<Pet_idFinal:32/signed,SizeAssign_infoFinal:16, BinLen_assign_info:32, Assign_info_bin/binary>>;
encode_m_pet_attr_assign_tos(_) -> 
	<<>>.

decode_m_pet_attr_assign_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Pet_id:32/signed,_Sizeassign_info:16, _BinLenassign_info:32, SubBinassign_info/binary>> = Bin0,
	Assign_info = lists:reverse(decode_p_pet_attr_assigns(SubBinassign_info, [])),

	{m_pet_attr_assign_tos, Pet_id,Assign_info};

decode_m_pet_attr_assign_tos(_) ->
	undefined.
encode_m_pet_attr_assign_toc(Record) when is_record(Record, m_pet_attr_assign_toc) ->
	#m_pet_attr_assign_toc{succ=Succ,reason=Reason,pet_info=Pet_info} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Pet_info =:= undefined of
		true ->
				Pet_infoFinal = 0;
		false ->
			Pet_infoFinal = Pet_info
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Pet_info_bin = encode_p_pet(Pet_infoFinal),
	BinLen_pet_info = erlang:byte_size(Pet_info_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_pet_info:32, Pet_info_bin/binary>>;
encode_m_pet_attr_assign_toc(_) -> 
	<<>>.

decode_m_pet_attr_assign_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_SubBinSizepet_info:32, SubBinpet_info/binary>> = Bin1,
	Pet_info = decode_p_pet(SubBinpet_info),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_pet_attr_assign_toc, Succ,common_tool:to_list(Reason),Pet_info};

decode_m_pet_attr_assign_toc(_) ->
	undefined.
encode_m_pet_level_up_toc(Record) when is_record(Record, m_pet_level_up_toc) ->
	#m_pet_level_up_toc{pet_info=Pet_info} = Record,
	case Pet_info =:= undefined of
		true ->
				Pet_infoFinal = undefined,
				exit({required_field_not_assigned, m_pet_level_up_toc, pet_info});
		false ->
			Pet_infoFinal = Pet_info
	end,
	Pet_info_bin = encode_p_pet(Pet_infoFinal),
	BinLen_pet_info = erlang:byte_size(Pet_info_bin),

	<<BinLen_pet_info:32, Pet_info_bin/binary>>;
encode_m_pet_level_up_toc(_) -> 
	<<>>.

decode_m_pet_level_up_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_SubBinSizepet_info:32, SubBinpet_info/binary>> = Bin0,
	Pet_info = decode_p_pet(SubBinpet_info),

	{m_pet_level_up_toc, Pet_info};

decode_m_pet_level_up_toc(_) ->
	undefined.
encode_m_pet_refresh_aptitude_tos(Record) when is_record(Record, m_pet_refresh_aptitude_tos) ->
	#m_pet_refresh_aptitude_tos{pet_id=Pet_id,item_type=Item_type,bind=Bind} = Record,
	case Pet_id =:= undefined of
		true ->
				Pet_idFinal = undefined,
				exit({required_field_not_assigned, m_pet_refresh_aptitude_tos, pet_id});
		false ->
			Pet_idFinal = Pet_id
	end,
	case Item_type =:= undefined of
		true ->
				Item_typeFinal = undefined,
				exit({required_field_not_assigned, m_pet_refresh_aptitude_tos, item_type});
		false ->
			Item_typeFinal = Item_type
	end,
	case Bind =:= undefined of
		true ->
				BindFinal = undefined,
				exit({required_field_not_assigned, m_pet_refresh_aptitude_tos, bind});
		false ->
		case Bind of
			true ->
				BindFinal = 1;
			false ->
				BindFinal = 0
		end
	end,

	<<Pet_idFinal:32/signed,Item_typeFinal:32/signed,BindFinal:8>>;
encode_m_pet_refresh_aptitude_tos(_) -> 
	<<>>.

decode_m_pet_refresh_aptitude_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Pet_id:32/signed,Item_type:32/signed,BindTmp:8>> = Bin0,
case BindTmp of 
	1 -> 
		Bind = true;
	_ ->
		Bind = false
end,

	{m_pet_refresh_aptitude_tos, Pet_id,Item_type,Bind};

decode_m_pet_refresh_aptitude_tos(_) ->
	undefined.
encode_m_pet_refresh_aptitude_toc(Record) when is_record(Record, m_pet_refresh_aptitude_toc) ->
	#m_pet_refresh_aptitude_toc{succ=Succ,reason=Reason,pet_info=Pet_info} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Pet_info =:= undefined of
		true ->
				Pet_infoFinal = 0;
		false ->
			Pet_infoFinal = Pet_info
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Pet_info_bin = encode_p_pet(Pet_infoFinal),
	BinLen_pet_info = erlang:byte_size(Pet_info_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_pet_info:32, Pet_info_bin/binary>>;
encode_m_pet_refresh_aptitude_toc(_) -> 
	<<>>.

decode_m_pet_refresh_aptitude_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_SubBinSizepet_info:32, SubBinpet_info/binary>> = Bin1,
	Pet_info = decode_p_pet(SubBinpet_info),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_pet_refresh_aptitude_toc, Succ,common_tool:to_list(Reason),Pet_info};

decode_m_pet_refresh_aptitude_toc(_) ->
	undefined.
encode_m_pet_add_understanding_tos(Record) when is_record(Record, m_pet_add_understanding_tos) ->
	#m_pet_add_understanding_tos{pet_id=Pet_id,item_type=Item_type,use_protect=Use_protect,bind=Bind} = Record,
	case Pet_id =:= undefined of
		true ->
				Pet_idFinal = undefined,
				exit({required_field_not_assigned, m_pet_add_understanding_tos, pet_id});
		false ->
			Pet_idFinal = Pet_id
	end,
	case Item_type =:= undefined of
		true ->
				Item_typeFinal = undefined,
				exit({required_field_not_assigned, m_pet_add_understanding_tos, item_type});
		false ->
			Item_typeFinal = Item_type
	end,
	case Use_protect =:= undefined of
		true ->
				Use_protectFinal = undefined,
				exit({required_field_not_assigned, m_pet_add_understanding_tos, use_protect});
		false ->
		case Use_protect of
			true ->
				Use_protectFinal = 1;
			false ->
				Use_protectFinal = 0
		end
	end,
	case Bind =:= undefined of
		true ->
				BindFinal = undefined,
				exit({required_field_not_assigned, m_pet_add_understanding_tos, bind});
		false ->
		case Bind of
			true ->
				BindFinal = 1;
			false ->
				BindFinal = 0
		end
	end,

	<<Pet_idFinal:32/signed,Item_typeFinal:32/signed,Use_protectFinal:8,BindFinal:8>>;
encode_m_pet_add_understanding_tos(_) -> 
	<<>>.

decode_m_pet_add_understanding_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Pet_id:32/signed,Item_type:32/signed,Use_protectTmp:8,BindTmp:8>> = Bin0,
case Use_protectTmp of 
	1 -> 
		Use_protect = true;
	_ ->
		Use_protect = false
end,
case BindTmp of 
	1 -> 
		Bind = true;
	_ ->
		Bind = false
end,

	{m_pet_add_understanding_tos, Pet_id,Item_type,Use_protect,Bind};

decode_m_pet_add_understanding_tos(_) ->
	undefined.
encode_m_pet_add_understanding_toc(Record) when is_record(Record, m_pet_add_understanding_toc) ->
	#m_pet_add_understanding_toc{succ=Succ,reason=Reason,succ2=Succ2,pet_info=Pet_info} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Succ2 =:= undefined of
		true ->
				Succ2Final = 1;
		false ->
			case Succ2 of
				true ->
					Succ2Final = 1;
				false ->
					Succ2Final = 0
			end
	end,
	case Pet_info =:= undefined of
		true ->
				Pet_infoFinal = 0;
		false ->
			Pet_infoFinal = Pet_info
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Pet_info_bin = encode_p_pet(Pet_infoFinal),
	BinLen_pet_info = erlang:byte_size(Pet_info_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Succ2Final:8,BinLen_pet_info:32, Pet_info_bin/binary>>;
encode_m_pet_add_understanding_toc(_) -> 
	<<>>.

decode_m_pet_add_understanding_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Succ2Tmp:8,_SubBinSizepet_info:32, SubBinpet_info/binary>> = Bin1,
	Pet_info = decode_p_pet(SubBinpet_info),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Succ2Tmp of 
	1 -> 
		Succ2 = true;
	_ ->
		Succ2 = false
end,

	{m_pet_add_understanding_toc, Succ,common_tool:to_list(Reason),Succ2,Pet_info};

decode_m_pet_add_understanding_toc(_) ->
	undefined.
encode_m_pet_change_name_tos(Record) when is_record(Record, m_pet_change_name_tos) ->
	#m_pet_change_name_tos{pet_id=Pet_id,pet_name=Pet_name} = Record,
	case Pet_id =:= undefined of
		true ->
				Pet_idFinal = undefined,
				exit({required_field_not_assigned, m_pet_change_name_tos, pet_id});
		false ->
			Pet_idFinal = Pet_id
	end,
	case Pet_name =:= undefined of
		true ->
				Pet_nameFinal = undefined,
				exit({required_field_not_assigned, m_pet_change_name_tos, pet_name});
		false ->
			Pet_nameFinal = Pet_name
	end,
	Pet_name2 = common_tool:to_binary(Pet_nameFinal),
	Pet_nameLen = erlang:byte_size(Pet_name2),

	<<Pet_idFinal:32/signed,Pet_nameLen:16, Pet_name2/binary>>;
encode_m_pet_change_name_tos(_) -> 
	<<>>.

decode_m_pet_change_name_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Pet_id:32/signed,Pet_nameLen:16, Bin1/binary>> = Bin0,
	<<Pet_name:Pet_nameLen/binary>> = Bin1,

	{m_pet_change_name_tos, Pet_id,common_tool:to_list(Pet_name)};

decode_m_pet_change_name_tos(_) ->
	undefined.
encode_m_pet_change_name_toc(Record) when is_record(Record, m_pet_change_name_toc) ->
	#m_pet_change_name_toc{succ=Succ,reason=Reason,pet_id=Pet_id,pet_name=Pet_name} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Pet_id =:= undefined of
		true ->
				Pet_idFinal = undefined,
				exit({required_field_not_assigned, m_pet_change_name_toc, pet_id});
		false ->
			Pet_idFinal = Pet_id
	end,
	case Pet_name =:= undefined of
		true ->
				Pet_nameFinal = undefined,
				exit({required_field_not_assigned, m_pet_change_name_toc, pet_name});
		false ->
			Pet_nameFinal = Pet_name
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Pet_name2 = common_tool:to_binary(Pet_nameFinal),
	Pet_nameLen = erlang:byte_size(Pet_name2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Pet_idFinal:32/signed,Pet_nameLen:16, Pet_name2/binary>>;
encode_m_pet_change_name_toc(_) -> 
	<<>>.

decode_m_pet_change_name_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Pet_id:32/signed,Pet_nameLen:16, Bin2/binary>> = Bin1,
	<<Pet_name:Pet_nameLen/binary>> = Bin2,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_pet_change_name_toc, Succ,common_tool:to_list(Reason),Pet_id,common_tool:to_list(Pet_name)};

decode_m_pet_change_name_toc(_) ->
	undefined.
encode_m_pet_feed_info_tos(Record) when is_record(Record, m_pet_feed_info_tos) ->
	#m_pet_feed_info_tos{} = Record,

	<<>>;
encode_m_pet_feed_info_tos(_) -> 
	<<>>.

decode_m_pet_feed_info_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_pet_feed_info_tos};

decode_m_pet_feed_info_tos(_) ->
	undefined.
encode_m_pet_feed_info_toc(Record) when is_record(Record, m_pet_feed_info_toc) ->
	#m_pet_feed_info_toc{succ=Succ,reason=Reason,info=Info} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Info =:= undefined of
		true ->
				InfoFinal = 0;
		false ->
			InfoFinal = Info
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Info_bin = encode_p_pet_feed(InfoFinal),
	BinLen_info = erlang:byte_size(Info_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_info:32, Info_bin/binary>>;
encode_m_pet_feed_info_toc(_) -> 
	<<>>.

decode_m_pet_feed_info_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_SubBinSizeinfo:32, SubBininfo/binary>> = Bin1,
	Info = decode_p_pet_feed(SubBininfo),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_pet_feed_info_toc, Succ,common_tool:to_list(Reason),Info};

decode_m_pet_feed_info_toc(_) ->
	undefined.
encode_m_pet_feed_begin_tos(Record) when is_record(Record, m_pet_feed_begin_tos) ->
	#m_pet_feed_begin_tos{pet_id=Pet_id} = Record,
	case Pet_id =:= undefined of
		true ->
				Pet_idFinal = undefined,
				exit({required_field_not_assigned, m_pet_feed_begin_tos, pet_id});
		false ->
			Pet_idFinal = Pet_id
	end,

	<<Pet_idFinal:32/signed>>;
encode_m_pet_feed_begin_tos(_) -> 
	<<>>.

decode_m_pet_feed_begin_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Pet_id:32/signed>> = Bin0,

	{m_pet_feed_begin_tos, Pet_id};

decode_m_pet_feed_begin_tos(_) ->
	undefined.
encode_m_pet_feed_begin_toc(Record) when is_record(Record, m_pet_feed_begin_toc) ->
	#m_pet_feed_begin_toc{succ=Succ,reason=Reason,info=Info} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Info =:= undefined of
		true ->
				InfoFinal = 0;
		false ->
			InfoFinal = Info
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Info_bin = encode_p_pet_feed(InfoFinal),
	BinLen_info = erlang:byte_size(Info_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_info:32, Info_bin/binary>>;
encode_m_pet_feed_begin_toc(_) -> 
	<<>>.

decode_m_pet_feed_begin_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_SubBinSizeinfo:32, SubBininfo/binary>> = Bin1,
	Info = decode_p_pet_feed(SubBininfo),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_pet_feed_begin_toc, Succ,common_tool:to_list(Reason),Info};

decode_m_pet_feed_begin_toc(_) ->
	undefined.
encode_m_pet_feed_commit_tos(Record) when is_record(Record, m_pet_feed_commit_tos) ->
	#m_pet_feed_commit_tos{pet_id=Pet_id,type=Type} = Record,
	case Pet_id =:= undefined of
		true ->
				Pet_idFinal = undefined,
				exit({required_field_not_assigned, m_pet_feed_commit_tos, pet_id});
		false ->
			Pet_idFinal = Pet_id
	end,
	case Type =:= undefined of
		true ->
				TypeFinal = undefined,
				exit({required_field_not_assigned, m_pet_feed_commit_tos, type});
		false ->
			TypeFinal = Type
	end,

	<<Pet_idFinal:32/signed,TypeFinal:32/signed>>;
encode_m_pet_feed_commit_tos(_) -> 
	<<>>.

decode_m_pet_feed_commit_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Pet_id:32/signed,Type:32/signed>> = Bin0,

	{m_pet_feed_commit_tos, Pet_id,Type};

decode_m_pet_feed_commit_tos(_) ->
	undefined.
encode_m_pet_feed_commit_toc(Record) when is_record(Record, m_pet_feed_commit_toc) ->
	#m_pet_feed_commit_toc{succ=Succ,reason=Reason,info=Info,pet_info=Pet_info} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Info =:= undefined of
		true ->
				InfoFinal = 0;
		false ->
			InfoFinal = Info
	end,
	case Pet_info =:= undefined of
		true ->
				Pet_infoFinal = 0;
		false ->
			Pet_infoFinal = Pet_info
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Info_bin = encode_p_pet_feed(InfoFinal),
	BinLen_info = erlang:byte_size(Info_bin),
	Pet_info_bin = encode_p_pet(Pet_infoFinal),
	BinLen_pet_info = erlang:byte_size(Pet_info_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_info:32, Info_bin/binary,BinLen_pet_info:32, Pet_info_bin/binary>>;
encode_m_pet_feed_commit_toc(_) -> 
	<<>>.

decode_m_pet_feed_commit_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,SubBinSizeinfo:32, Bin2/binary>> = Bin1,
	<<SubBininfo:SubBinSizeinfo/binary, Bin3/binary>> = Bin2,
	Info = decode_p_pet_feed(SubBininfo),
	<<_SubBinSizepet_info:32, SubBinpet_info/binary>> = Bin3,
	Pet_info = decode_p_pet(SubBinpet_info),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_pet_feed_commit_toc, Succ,common_tool:to_list(Reason),Info,Pet_info};

decode_m_pet_feed_commit_toc(_) ->
	undefined.
encode_m_pet_feed_give_up_tos(Record) when is_record(Record, m_pet_feed_give_up_tos) ->
	#m_pet_feed_give_up_tos{pet_id=Pet_id} = Record,
	case Pet_id =:= undefined of
		true ->
				Pet_idFinal = undefined,
				exit({required_field_not_assigned, m_pet_feed_give_up_tos, pet_id});
		false ->
			Pet_idFinal = Pet_id
	end,

	<<Pet_idFinal:32/signed>>;
encode_m_pet_feed_give_up_tos(_) -> 
	<<>>.

decode_m_pet_feed_give_up_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Pet_id:32/signed>> = Bin0,

	{m_pet_feed_give_up_tos, Pet_id};

decode_m_pet_feed_give_up_tos(_) ->
	undefined.
encode_m_pet_feed_give_up_toc(Record) when is_record(Record, m_pet_feed_give_up_toc) ->
	#m_pet_feed_give_up_toc{succ=Succ,reason=Reason,info=Info} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Info =:= undefined of
		true ->
				InfoFinal = 0;
		false ->
			InfoFinal = Info
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Info_bin = encode_p_pet_feed(InfoFinal),
	BinLen_info = erlang:byte_size(Info_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_info:32, Info_bin/binary>>;
encode_m_pet_feed_give_up_toc(_) -> 
	<<>>.

decode_m_pet_feed_give_up_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_SubBinSizeinfo:32, SubBininfo/binary>> = Bin1,
	Info = decode_p_pet_feed(SubBininfo),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_pet_feed_give_up_toc, Succ,common_tool:to_list(Reason),Info};

decode_m_pet_feed_give_up_toc(_) ->
	undefined.
encode_m_pet_feed_star_up_tos(Record) when is_record(Record, m_pet_feed_star_up_tos) ->
	#m_pet_feed_star_up_tos{} = Record,

	<<>>;
encode_m_pet_feed_star_up_tos(_) -> 
	<<>>.

decode_m_pet_feed_star_up_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_pet_feed_star_up_tos};

decode_m_pet_feed_star_up_tos(_) ->
	undefined.
encode_m_pet_feed_star_up_toc(Record) when is_record(Record, m_pet_feed_star_up_toc) ->
	#m_pet_feed_star_up_toc{succ=Succ,succ2=Succ2,reason=Reason,info=Info} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Succ2 =:= undefined of
		true ->
				Succ2Final = 1;
		false ->
			case Succ2 of
				true ->
					Succ2Final = 1;
				false ->
					Succ2Final = 0
			end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Info =:= undefined of
		true ->
				InfoFinal = 0;
		false ->
			InfoFinal = Info
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Info_bin = encode_p_pet_feed(InfoFinal),
	BinLen_info = erlang:byte_size(Info_bin),

	<<SuccFinal:8,Succ2Final:8,ReasonLen:16, Reason2/binary,BinLen_info:32, Info_bin/binary>>;
encode_m_pet_feed_star_up_toc(_) -> 
	<<>>.

decode_m_pet_feed_star_up_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,Succ2Tmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_SubBinSizeinfo:32, SubBininfo/binary>> = Bin1,
	Info = decode_p_pet_feed(SubBininfo),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Succ2Tmp of 
	1 -> 
		Succ2 = true;
	_ ->
		Succ2 = false
end,

	{m_pet_feed_star_up_toc, Succ,Succ2,common_tool:to_list(Reason),Info};

decode_m_pet_feed_star_up_toc(_) ->
	undefined.
encode_m_pet_feed_over_toc(Record) when is_record(Record, m_pet_feed_over_toc) ->
	#m_pet_feed_over_toc{pet_id=Pet_id} = Record,
	case Pet_id =:= undefined of
		true ->
				Pet_idFinal = undefined,
				exit({required_field_not_assigned, m_pet_feed_over_toc, pet_id});
		false ->
			Pet_idFinal = Pet_id
	end,

	<<Pet_idFinal:32/signed>>;
encode_m_pet_feed_over_toc(_) -> 
	<<>>.

decode_m_pet_feed_over_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Pet_id:32/signed>> = Bin0,

	{m_pet_feed_over_toc, Pet_id};

decode_m_pet_feed_over_toc(_) ->
	undefined.
encode_m_pet_training_request_tos(Record) when is_record(Record, m_pet_training_request_tos) ->
	#m_pet_training_request_tos{op_type=Op_type,pet_id=Pet_id,training_hours=Training_hours,training_mode=Training_mode} = Record,
	case Op_type =:= undefined of
		true ->
				Op_typeFinal = undefined,
				exit({required_field_not_assigned, m_pet_training_request_tos, op_type});
		false ->
			Op_typeFinal = Op_type
	end,
	case Pet_id =:= undefined of
		true ->
				Pet_idFinal = undefined,
				exit({required_field_not_assigned, m_pet_training_request_tos, pet_id});
		false ->
			Pet_idFinal = Pet_id
	end,
	case Training_hours =:= undefined of
		true ->
				Training_hoursFinal = 0;
		false ->
			Training_hoursFinal = Training_hours
	end,
	case Training_mode =:= undefined of
		true ->
				Training_modeFinal = 0;
		false ->
			Training_modeFinal = Training_mode
	end,

	<<Op_typeFinal:32/signed,Pet_idFinal:32/signed,Training_hoursFinal:32/signed,Training_modeFinal:32/signed>>;
encode_m_pet_training_request_tos(_) -> 
	<<>>.

decode_m_pet_training_request_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Op_type:32/signed,Pet_id:32/signed,Training_hours:32/signed,Training_mode:32/signed>> = Bin0,

	{m_pet_training_request_tos, Op_type,Pet_id,Training_hours,Training_mode};

decode_m_pet_training_request_tos(_) ->
	undefined.
encode_m_pet_training_request_toc(Record) when is_record(Record, m_pet_training_request_toc) ->
	#m_pet_training_request_toc{op_type=Op_type,succ=Succ,reason=Reason,reason_code=Reason_code,cur_room=Cur_room,pet_training_list=Pet_training_list,pet_training_info=Pet_training_info,pet_info=Pet_info,add_exp=Add_exp} = Record,
	case Op_type =:= undefined of
		true ->
				Op_typeFinal = undefined,
				exit({required_field_not_assigned, m_pet_training_request_toc, op_type});
		false ->
			Op_typeFinal = Op_type
	end,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
			case Succ of
				true ->
					SuccFinal = 1;
				false ->
					SuccFinal = 0
			end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Reason_code =:= undefined of
		true ->
				Reason_codeFinal = 0;
		false ->
			Reason_codeFinal = Reason_code
	end,
	case Cur_room =:= undefined of
		true ->
				Cur_roomFinal = 0;
		false ->
			Cur_roomFinal = Cur_room
	end,
	case Pet_training_list =:= undefined of
		true ->
			Pet_training_listFinal = [];
		false ->
			Pet_training_listFinal = Pet_training_list
	end,
	case Pet_training_info =:= undefined of
		true ->
				Pet_training_infoFinal = 0;
		false ->
			Pet_training_infoFinal = Pet_training_info
	end,
	case Pet_info =:= undefined of
		true ->
				Pet_infoFinal = 0;
		false ->
			Pet_infoFinal = Pet_info
	end,
	case Add_exp =:= undefined of
		true ->
				Add_expFinal = 0;
		false ->
			Add_expFinal = Add_exp
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Pet_training_list_bin = encode_p_pet_training_infos(Pet_training_listFinal, <<>>),
	SizePet_training_listFinal = erlang:length(Pet_training_listFinal),
	BinLen_pet_training_list = erlang:byte_size(Pet_training_list_bin),
	Pet_training_info_bin = encode_p_pet_training_info(Pet_training_infoFinal),
	BinLen_pet_training_info = erlang:byte_size(Pet_training_info_bin),
	Pet_info_bin = encode_p_pet(Pet_infoFinal),
	BinLen_pet_info = erlang:byte_size(Pet_info_bin),

	<<Op_typeFinal:32/signed,SuccFinal:8,ReasonLen:16, Reason2/binary,Reason_codeFinal:32/signed,Cur_roomFinal:32/signed,SizePet_training_listFinal:16, BinLen_pet_training_list:32, Pet_training_list_bin/binary,BinLen_pet_training_info:32, Pet_training_info_bin/binary,BinLen_pet_info:32, Pet_info_bin/binary,Add_expFinal:64/float>>;
encode_m_pet_training_request_toc(_) -> 
	<<>>.

decode_m_pet_training_request_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Op_type:32/signed,SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Reason_code:32/signed,Cur_room:32/signed,_Sizepet_training_list:16, BinLenpet_training_list:32, Bin2/binary>> = Bin1,
	<<SubBinpet_training_list:BinLenpet_training_list/binary, Bin3/binary>> = Bin2, 
	Pet_training_list = lists:reverse(decode_p_pet_training_infos(SubBinpet_training_list, [])),
	<<SubBinSizepet_training_info:32, Bin4/binary>> = Bin3,
	<<SubBinpet_training_info:SubBinSizepet_training_info/binary, Bin5/binary>> = Bin4,
	Pet_training_info = decode_p_pet_training_info(SubBinpet_training_info),
	<<SubBinSizepet_info:32, Bin6/binary>> = Bin5,
	<<SubBinpet_info:SubBinSizepet_info/binary, Bin7/binary>> = Bin6,
	Pet_info = decode_p_pet(SubBinpet_info),
	<<Add_exp:64>> = Bin7,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_pet_training_request_toc, Op_type,Succ,common_tool:to_list(Reason),Reason_code,Cur_room,Pet_training_list,Pet_training_info,Pet_info,Add_exp};

decode_m_pet_training_request_toc(_) ->
	undefined.
encode_m_pet_grow_info_tos(Record) when is_record(Record, m_pet_grow_info_tos) ->
	#m_pet_grow_info_tos{} = Record,

	<<>>;
encode_m_pet_grow_info_tos(_) -> 
	<<>>.

decode_m_pet_grow_info_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_pet_grow_info_tos};

decode_m_pet_grow_info_tos(_) ->
	undefined.
encode_m_pet_grow_info_toc(Record) when is_record(Record, m_pet_grow_info_toc) ->
	#m_pet_grow_info_toc{succ=Succ,reason=Reason,grow_info=Grow_info,info_configs=Info_configs} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Grow_info =:= undefined of
		true ->
				Grow_infoFinal = 0;
		false ->
			Grow_infoFinal = Grow_info
	end,
	case Info_configs =:= undefined of
		true ->
			Info_configsFinal = [];
		false ->
			Info_configsFinal = Info_configs
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Grow_info_bin = encode_p_role_pet_grow(Grow_infoFinal),
	BinLen_grow_info = erlang:byte_size(Grow_info_bin),
	Info_configs_bin = encode_p_grow_infos(Info_configsFinal, <<>>),
	SizeInfo_configsFinal = erlang:length(Info_configsFinal),
	BinLen_info_configs = erlang:byte_size(Info_configs_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_grow_info:32, Grow_info_bin/binary,SizeInfo_configsFinal:16, BinLen_info_configs:32, Info_configs_bin/binary>>;
encode_m_pet_grow_info_toc(_) -> 
	<<>>.

decode_m_pet_grow_info_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,SubBinSizegrow_info:32, Bin2/binary>> = Bin1,
	<<SubBingrow_info:SubBinSizegrow_info/binary, Bin3/binary>> = Bin2,
	Grow_info = decode_p_role_pet_grow(SubBingrow_info),
	<<_Sizeinfo_configs:16, _BinLeninfo_configs:32, SubBininfo_configs/binary>> = Bin3,
	Info_configs = lists:reverse(decode_p_grow_infos(SubBininfo_configs, [])),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_pet_grow_info_toc, Succ,common_tool:to_list(Reason),Grow_info,Info_configs};

decode_m_pet_grow_info_toc(_) ->
	undefined.
encode_m_pet_grow_begin_tos(Record) when is_record(Record, m_pet_grow_begin_tos) ->
	#m_pet_grow_begin_tos{grow_type=Grow_type} = Record,
	case Grow_type =:= undefined of
		true ->
				Grow_typeFinal = undefined,
				exit({required_field_not_assigned, m_pet_grow_begin_tos, grow_type});
		false ->
			Grow_typeFinal = Grow_type
	end,

	<<Grow_typeFinal:32/signed>>;
encode_m_pet_grow_begin_tos(_) -> 
	<<>>.

decode_m_pet_grow_begin_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Grow_type:32/signed>> = Bin0,

	{m_pet_grow_begin_tos, Grow_type};

decode_m_pet_grow_begin_tos(_) ->
	undefined.
encode_m_pet_grow_begin_toc(Record) when is_record(Record, m_pet_grow_begin_toc) ->
	#m_pet_grow_begin_toc{succ=Succ,reason=Reason,grow_info=Grow_info,info_configs=Info_configs} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Grow_info =:= undefined of
		true ->
				Grow_infoFinal = 0;
		false ->
			Grow_infoFinal = Grow_info
	end,
	case Info_configs =:= undefined of
		true ->
			Info_configsFinal = [];
		false ->
			Info_configsFinal = Info_configs
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Grow_info_bin = encode_p_role_pet_grow(Grow_infoFinal),
	BinLen_grow_info = erlang:byte_size(Grow_info_bin),
	Info_configs_bin = encode_p_grow_infos(Info_configsFinal, <<>>),
	SizeInfo_configsFinal = erlang:length(Info_configsFinal),
	BinLen_info_configs = erlang:byte_size(Info_configs_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_grow_info:32, Grow_info_bin/binary,SizeInfo_configsFinal:16, BinLen_info_configs:32, Info_configs_bin/binary>>;
encode_m_pet_grow_begin_toc(_) -> 
	<<>>.

decode_m_pet_grow_begin_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,SubBinSizegrow_info:32, Bin2/binary>> = Bin1,
	<<SubBingrow_info:SubBinSizegrow_info/binary, Bin3/binary>> = Bin2,
	Grow_info = decode_p_role_pet_grow(SubBingrow_info),
	<<_Sizeinfo_configs:16, _BinLeninfo_configs:32, SubBininfo_configs/binary>> = Bin3,
	Info_configs = lists:reverse(decode_p_grow_infos(SubBininfo_configs, [])),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_pet_grow_begin_toc, Succ,common_tool:to_list(Reason),Grow_info,Info_configs};

decode_m_pet_grow_begin_toc(_) ->
	undefined.
encode_m_pet_grow_commit_tos(Record) when is_record(Record, m_pet_grow_commit_tos) ->
	#m_pet_grow_commit_tos{} = Record,

	<<>>;
encode_m_pet_grow_commit_tos(_) -> 
	<<>>.

decode_m_pet_grow_commit_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_pet_grow_commit_tos};

decode_m_pet_grow_commit_tos(_) ->
	undefined.
encode_m_pet_grow_commit_toc(Record) when is_record(Record, m_pet_grow_commit_toc) ->
	#m_pet_grow_commit_toc{succ=Succ,reason=Reason,use_gold=Use_gold,grow_info=Grow_info,info_configs=Info_configs} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Use_gold =:= undefined of
		true ->
				Use_goldFinal = 0;
		false ->
			Use_goldFinal = Use_gold
	end,
	case Grow_info =:= undefined of
		true ->
				Grow_infoFinal = 0;
		false ->
			Grow_infoFinal = Grow_info
	end,
	case Info_configs =:= undefined of
		true ->
			Info_configsFinal = [];
		false ->
			Info_configsFinal = Info_configs
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Grow_info_bin = encode_p_role_pet_grow(Grow_infoFinal),
	BinLen_grow_info = erlang:byte_size(Grow_info_bin),
	Info_configs_bin = encode_p_grow_infos(Info_configsFinal, <<>>),
	SizeInfo_configsFinal = erlang:length(Info_configsFinal),
	BinLen_info_configs = erlang:byte_size(Info_configs_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Use_goldFinal:32/signed,BinLen_grow_info:32, Grow_info_bin/binary,SizeInfo_configsFinal:16, BinLen_info_configs:32, Info_configs_bin/binary>>;
encode_m_pet_grow_commit_toc(_) -> 
	<<>>.

decode_m_pet_grow_commit_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Use_gold:32/signed,SubBinSizegrow_info:32, Bin2/binary>> = Bin1,
	<<SubBingrow_info:SubBinSizegrow_info/binary, Bin3/binary>> = Bin2,
	Grow_info = decode_p_role_pet_grow(SubBingrow_info),
	<<_Sizeinfo_configs:16, _BinLeninfo_configs:32, SubBininfo_configs/binary>> = Bin3,
	Info_configs = lists:reverse(decode_p_grow_infos(SubBininfo_configs, [])),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_pet_grow_commit_toc, Succ,common_tool:to_list(Reason),Use_gold,Grow_info,Info_configs};

decode_m_pet_grow_commit_toc(_) ->
	undefined.
encode_m_pet_grow_give_up_tos(Record) when is_record(Record, m_pet_grow_give_up_tos) ->
	#m_pet_grow_give_up_tos{} = Record,

	<<>>;
encode_m_pet_grow_give_up_tos(_) -> 
	<<>>.

decode_m_pet_grow_give_up_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_pet_grow_give_up_tos};

decode_m_pet_grow_give_up_tos(_) ->
	undefined.
encode_m_pet_grow_give_up_toc(Record) when is_record(Record, m_pet_grow_give_up_toc) ->
	#m_pet_grow_give_up_toc{succ=Succ,reason=Reason,grow_info=Grow_info,info_configs=Info_configs} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Grow_info =:= undefined of
		true ->
				Grow_infoFinal = 0;
		false ->
			Grow_infoFinal = Grow_info
	end,
	case Info_configs =:= undefined of
		true ->
			Info_configsFinal = [];
		false ->
			Info_configsFinal = Info_configs
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Grow_info_bin = encode_p_role_pet_grow(Grow_infoFinal),
	BinLen_grow_info = erlang:byte_size(Grow_info_bin),
	Info_configs_bin = encode_p_grow_infos(Info_configsFinal, <<>>),
	SizeInfo_configsFinal = erlang:length(Info_configsFinal),
	BinLen_info_configs = erlang:byte_size(Info_configs_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_grow_info:32, Grow_info_bin/binary,SizeInfo_configsFinal:16, BinLen_info_configs:32, Info_configs_bin/binary>>;
encode_m_pet_grow_give_up_toc(_) -> 
	<<>>.

decode_m_pet_grow_give_up_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,SubBinSizegrow_info:32, Bin2/binary>> = Bin1,
	<<SubBingrow_info:SubBinSizegrow_info/binary, Bin3/binary>> = Bin2,
	Grow_info = decode_p_role_pet_grow(SubBingrow_info),
	<<_Sizeinfo_configs:16, _BinLeninfo_configs:32, SubBininfo_configs/binary>> = Bin3,
	Info_configs = lists:reverse(decode_p_grow_infos(SubBininfo_configs, [])),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_pet_grow_give_up_toc, Succ,common_tool:to_list(Reason),Grow_info,Info_configs};

decode_m_pet_grow_give_up_toc(_) ->
	undefined.
encode_m_pet_grow_over_toc(Record) when is_record(Record, m_pet_grow_over_toc) ->
	#m_pet_grow_over_toc{grow_type=Grow_type,grow_info=Grow_info,info_configs=Info_configs} = Record,
	case Grow_type =:= undefined of
		true ->
				Grow_typeFinal = undefined,
				exit({required_field_not_assigned, m_pet_grow_over_toc, grow_type});
		false ->
			Grow_typeFinal = Grow_type
	end,
	case Grow_info =:= undefined of
		true ->
				Grow_infoFinal = undefined,
				exit({required_field_not_assigned, m_pet_grow_over_toc, grow_info});
		false ->
			Grow_infoFinal = Grow_info
	end,
	case Info_configs =:= undefined of
		true ->
			Info_configsFinal = [];
		false ->
			Info_configsFinal = Info_configs
	end,
	Grow_info_bin = encode_p_role_pet_grow(Grow_infoFinal),
	BinLen_grow_info = erlang:byte_size(Grow_info_bin),
	Info_configs_bin = encode_p_grow_infos(Info_configsFinal, <<>>),
	SizeInfo_configsFinal = erlang:length(Info_configsFinal),
	BinLen_info_configs = erlang:byte_size(Info_configs_bin),

	<<Grow_typeFinal:32/signed,BinLen_grow_info:32, Grow_info_bin/binary,SizeInfo_configsFinal:16, BinLen_info_configs:32, Info_configs_bin/binary>>;
encode_m_pet_grow_over_toc(_) -> 
	<<>>.

decode_m_pet_grow_over_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Grow_type:32/signed,SubBinSizegrow_info:32, Bin1/binary>> = Bin0,
	<<SubBingrow_info:SubBinSizegrow_info/binary, Bin2/binary>> = Bin1,
	Grow_info = decode_p_role_pet_grow(SubBingrow_info),
	<<_Sizeinfo_configs:16, _BinLeninfo_configs:32, SubBininfo_configs/binary>> = Bin2,
	Info_configs = lists:reverse(decode_p_grow_infos(SubBininfo_configs, [])),

	{m_pet_grow_over_toc, Grow_type,Grow_info,Info_configs};

decode_m_pet_grow_over_toc(_) ->
	undefined.
encode_m_pet_add_skill_grid_tos(Record) when is_record(Record, m_pet_add_skill_grid_tos) ->
	#m_pet_add_skill_grid_tos{pet_id=Pet_id} = Record,
	case Pet_id =:= undefined of
		true ->
				Pet_idFinal = undefined,
				exit({required_field_not_assigned, m_pet_add_skill_grid_tos, pet_id});
		false ->
			Pet_idFinal = Pet_id
	end,

	<<Pet_idFinal:32/signed>>;
encode_m_pet_add_skill_grid_tos(_) -> 
	<<>>.

decode_m_pet_add_skill_grid_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Pet_id:32/signed>> = Bin0,

	{m_pet_add_skill_grid_tos, Pet_id};

decode_m_pet_add_skill_grid_tos(_) ->
	undefined.
encode_m_pet_add_skill_grid_toc(Record) when is_record(Record, m_pet_add_skill_grid_toc) ->
	#m_pet_add_skill_grid_toc{succ=Succ,reason=Reason,pet_info=Pet_info} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Pet_info =:= undefined of
		true ->
				Pet_infoFinal = 0;
		false ->
			Pet_infoFinal = Pet_info
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Pet_info_bin = encode_p_pet(Pet_infoFinal),
	BinLen_pet_info = erlang:byte_size(Pet_info_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_pet_info:32, Pet_info_bin/binary>>;
encode_m_pet_add_skill_grid_toc(_) -> 
	<<>>.

decode_m_pet_add_skill_grid_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_SubBinSizepet_info:32, SubBinpet_info/binary>> = Bin1,
	Pet_info = decode_p_pet(SubBinpet_info),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_pet_add_skill_grid_toc, Succ,common_tool:to_list(Reason),Pet_info};

decode_m_pet_add_skill_grid_toc(_) ->
	undefined.
encode_m_pet_forget_skill_tos(Record) when is_record(Record, m_pet_forget_skill_tos) ->
	#m_pet_forget_skill_tos{pet_id=Pet_id,skill_id=Skill_id} = Record,
	case Pet_id =:= undefined of
		true ->
				Pet_idFinal = undefined,
				exit({required_field_not_assigned, m_pet_forget_skill_tos, pet_id});
		false ->
			Pet_idFinal = Pet_id
	end,
	case Skill_id =:= undefined of
		true ->
				Skill_idFinal = undefined,
				exit({required_field_not_assigned, m_pet_forget_skill_tos, skill_id});
		false ->
			Skill_idFinal = Skill_id
	end,

	<<Pet_idFinal:32/signed,Skill_idFinal:32/signed>>;
encode_m_pet_forget_skill_tos(_) -> 
	<<>>.

decode_m_pet_forget_skill_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Pet_id:32/signed,Skill_id:32/signed>> = Bin0,

	{m_pet_forget_skill_tos, Pet_id,Skill_id};

decode_m_pet_forget_skill_tos(_) ->
	undefined.
encode_m_pet_forget_skill_toc(Record) when is_record(Record, m_pet_forget_skill_toc) ->
	#m_pet_forget_skill_toc{succ=Succ,reason=Reason,pet_info=Pet_info} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Pet_info =:= undefined of
		true ->
				Pet_infoFinal = 0;
		false ->
			Pet_infoFinal = Pet_info
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Pet_info_bin = encode_p_pet(Pet_infoFinal),
	BinLen_pet_info = erlang:byte_size(Pet_info_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_pet_info:32, Pet_info_bin/binary>>;
encode_m_pet_forget_skill_toc(_) -> 
	<<>>.

decode_m_pet_forget_skill_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_SubBinSizepet_info:32, SubBinpet_info/binary>> = Bin1,
	Pet_info = decode_p_pet(SubBinpet_info),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_pet_forget_skill_toc, Succ,common_tool:to_list(Reason),Pet_info};

decode_m_pet_forget_skill_toc(_) ->
	undefined.
encode_m_pet_change_pos_tos(Record) when is_record(Record, m_pet_change_pos_tos) ->
	#m_pet_change_pos_tos{pet_id=Pet_id,pos=Pos} = Record,
	case Pet_id =:= undefined of
		true ->
				Pet_idFinal = undefined,
				exit({required_field_not_assigned, m_pet_change_pos_tos, pet_id});
		false ->
			Pet_idFinal = Pet_id
	end,
	case Pos =:= undefined of
		true ->
				PosFinal = undefined,
				exit({required_field_not_assigned, m_pet_change_pos_tos, pos});
		false ->
			PosFinal = Pos
	end,

	<<Pet_idFinal:32/signed,PosFinal:32/signed>>;
encode_m_pet_change_pos_tos(_) -> 
	<<>>.

decode_m_pet_change_pos_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Pet_id:32/signed,Pos:32/signed>> = Bin0,

	{m_pet_change_pos_tos, Pet_id,Pos};

decode_m_pet_change_pos_tos(_) ->
	undefined.
encode_m_pet_change_pos_toc(Record) when is_record(Record, m_pet_change_pos_toc) ->
	#m_pet_change_pos_toc{succ=Succ,reason=Reason,info=Info} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Info =:= undefined of
		true ->
				InfoFinal = undefined,
				exit({required_field_not_assigned, m_pet_change_pos_toc, info});
		false ->
			InfoFinal = Info
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Info_bin = encode_p_role_pet_bag(InfoFinal),
	BinLen_info = erlang:byte_size(Info_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_info:32, Info_bin/binary>>;
encode_m_pet_change_pos_toc(_) -> 
	<<>>.

decode_m_pet_change_pos_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_SubBinSizeinfo:32, SubBininfo/binary>> = Bin1,
	Info = decode_p_role_pet_bag(SubBininfo),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_pet_change_pos_toc, Succ,common_tool:to_list(Reason),Info};

decode_m_pet_change_pos_toc(_) ->
	undefined.
encode_m_pet_refining_tos(Record) when is_record(Record, m_pet_refining_tos) ->
	#m_pet_refining_tos{pet_id=Pet_id} = Record,
	case Pet_id =:= undefined of
		true ->
				Pet_idFinal = undefined,
				exit({required_field_not_assigned, m_pet_refining_tos, pet_id});
		false ->
			Pet_idFinal = Pet_id
	end,

	<<Pet_idFinal:32/signed>>;
encode_m_pet_refining_tos(_) -> 
	<<>>.

decode_m_pet_refining_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Pet_id:32/signed>> = Bin0,

	{m_pet_refining_tos, Pet_id};

decode_m_pet_refining_tos(_) ->
	undefined.
encode_m_pet_refining_toc(Record) when is_record(Record, m_pet_refining_toc) ->
	#m_pet_refining_toc{succ=Succ,reason=Reason,info=Info} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Info =:= undefined of
		true ->
				InfoFinal = 0;
		false ->
			InfoFinal = Info
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Info_bin = encode_p_role_pet_bag(InfoFinal),
	BinLen_info = erlang:byte_size(Info_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_info:32, Info_bin/binary>>;
encode_m_pet_refining_toc(_) -> 
	<<>>.

decode_m_pet_refining_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_SubBinSizeinfo:32, SubBininfo/binary>> = Bin1,
	Info = decode_p_role_pet_bag(SubBininfo),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_pet_refining_toc, Succ,common_tool:to_list(Reason),Info};

decode_m_pet_refining_toc(_) ->
	undefined.
encode_m_pet_refining_exp_tos(Record) when is_record(Record, m_pet_refining_exp_tos) ->
	#m_pet_refining_exp_tos{pet_id=Pet_id} = Record,
	case Pet_id =:= undefined of
		true ->
				Pet_idFinal = undefined,
				exit({required_field_not_assigned, m_pet_refining_exp_tos, pet_id});
		false ->
			Pet_idFinal = Pet_id
	end,

	<<Pet_idFinal:32/signed>>;
encode_m_pet_refining_exp_tos(_) -> 
	<<>>.

decode_m_pet_refining_exp_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Pet_id:32/signed>> = Bin0,

	{m_pet_refining_exp_tos, Pet_id};

decode_m_pet_refining_exp_tos(_) ->
	undefined.
encode_m_pet_refining_exp_toc(Record) when is_record(Record, m_pet_refining_exp_toc) ->
	#m_pet_refining_exp_toc{succ=Succ,reason=Reason,pet_id=Pet_id,pet_name=Pet_name,silver=Silver,exp=Exp,pet_color=Pet_color} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Pet_id =:= undefined of
		true ->
				Pet_idFinal = 0;
		false ->
			Pet_idFinal = Pet_id
	end,
	case Pet_name =:= undefined of
		true ->
				Pet_nameFinal = <<>>;
		false ->
			Pet_nameFinal = Pet_name
	end,
	case Silver =:= undefined of
		true ->
				SilverFinal = 0;
		false ->
			SilverFinal = Silver
	end,
	case Exp =:= undefined of
		true ->
				ExpFinal = 0.0;
		false ->
			ExpFinal = Exp
	end,
	case Pet_color =:= undefined of
		true ->
				Pet_colorFinal = 0;
		false ->
			Pet_colorFinal = Pet_color
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Pet_name2 = common_tool:to_binary(Pet_nameFinal),
	Pet_nameLen = erlang:byte_size(Pet_name2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Pet_idFinal:32/signed,Pet_nameLen:16, Pet_name2/binary,SilverFinal:32/signed,ExpFinal:64/float,Pet_colorFinal:32/signed>>;
encode_m_pet_refining_exp_toc(_) -> 
	<<>>.

decode_m_pet_refining_exp_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Pet_id:32/signed,Pet_nameLen:16, Bin2/binary>> = Bin1,
	<<Pet_name:Pet_nameLen/binary,Silver:32/signed,Exp:64,Pet_color:32/signed>> = Bin2,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_pet_refining_exp_toc, Succ,common_tool:to_list(Reason),Pet_id,common_tool:to_list(Pet_name),Silver,Exp,Pet_color};

decode_m_pet_refining_exp_toc(_) ->
	undefined.
encode_m_pet_egg_use_tos(Record) when is_record(Record, m_pet_egg_use_tos) ->
	#m_pet_egg_use_tos{goods_id=Goods_id} = Record,
	case Goods_id =:= undefined of
		true ->
				Goods_idFinal = undefined,
				exit({required_field_not_assigned, m_pet_egg_use_tos, goods_id});
		false ->
			Goods_idFinal = Goods_id
	end,

	<<Goods_idFinal:32/signed>>;
encode_m_pet_egg_use_tos(_) -> 
	<<>>.

decode_m_pet_egg_use_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Goods_id:32/signed>> = Bin0,

	{m_pet_egg_use_tos, Goods_id};

decode_m_pet_egg_use_tos(_) ->
	undefined.
encode_m_pet_egg_use_toc(Record) when is_record(Record, m_pet_egg_use_toc) ->
	#m_pet_egg_use_toc{succ=Succ,reason=Reason,refresh_tick=Refresh_tick,type_id_list=Type_id_list,egg_left_tick=Egg_left_tick,goods_id=Goods_id} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Refresh_tick =:= undefined of
		true ->
				Refresh_tickFinal = 0;
		false ->
			Refresh_tickFinal = Refresh_tick
	end,
	case Type_id_list =:= undefined of
		true ->
			Type_id_listFinal = [];
		false ->
			Type_id_listFinal = Type_id_list
	end,
	case Egg_left_tick =:= undefined of
		true ->
				Egg_left_tickFinal = 0;
		false ->
			Egg_left_tickFinal = Egg_left_tick
	end,
	case Goods_id =:= undefined of
		true ->
				Goods_idFinal = 0;
		false ->
			Goods_idFinal = Goods_id
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Type_id_list_bin = encode_int32s(Type_id_listFinal, <<>>),
	SizeType_id_listFinal = erlang:length(Type_id_listFinal),
	BinLen_type_id_list = erlang:byte_size(Type_id_list_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Refresh_tickFinal:32/signed,SizeType_id_listFinal:16, BinLen_type_id_list:32, Type_id_list_bin/binary,Egg_left_tickFinal:32/signed,Goods_idFinal:32/signed>>;
encode_m_pet_egg_use_toc(_) -> 
	<<>>.

decode_m_pet_egg_use_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Refresh_tick:32/signed,_Sizetype_id_list:16, BinLentype_id_list:32, Bin2/binary>> = Bin1,
	<<SubBintype_id_list:BinLentype_id_list/binary, Bin3/binary>> = Bin2, 
	Type_id_list = lists:reverse(decode_int32s(SubBintype_id_list, [])),
	<<Egg_left_tick:32/signed,Goods_id:32/signed>> = Bin3,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_pet_egg_use_toc, Succ,common_tool:to_list(Reason),Refresh_tick,Type_id_list,Egg_left_tick,Goods_id};

decode_m_pet_egg_use_toc(_) ->
	undefined.
encode_m_pet_egg_refresh_tos(Record) when is_record(Record, m_pet_egg_refresh_tos) ->
	#m_pet_egg_refresh_tos{goods_id=Goods_id} = Record,
	case Goods_id =:= undefined of
		true ->
				Goods_idFinal = undefined,
				exit({required_field_not_assigned, m_pet_egg_refresh_tos, goods_id});
		false ->
			Goods_idFinal = Goods_id
	end,

	<<Goods_idFinal:32/signed>>;
encode_m_pet_egg_refresh_tos(_) -> 
	<<>>.

decode_m_pet_egg_refresh_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Goods_id:32/signed>> = Bin0,

	{m_pet_egg_refresh_tos, Goods_id};

decode_m_pet_egg_refresh_tos(_) ->
	undefined.
encode_m_pet_egg_refresh_toc(Record) when is_record(Record, m_pet_egg_refresh_toc) ->
	#m_pet_egg_refresh_toc{succ=Succ,reason=Reason,type_id_list=Type_id_list,egg_left_tick=Egg_left_tick,goods_id=Goods_id} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Type_id_list =:= undefined of
		true ->
			Type_id_listFinal = [];
		false ->
			Type_id_listFinal = Type_id_list
	end,
	case Egg_left_tick =:= undefined of
		true ->
				Egg_left_tickFinal = 0;
		false ->
			Egg_left_tickFinal = Egg_left_tick
	end,
	case Goods_id =:= undefined of
		true ->
				Goods_idFinal = 0;
		false ->
			Goods_idFinal = Goods_id
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Type_id_list_bin = encode_int32s(Type_id_listFinal, <<>>),
	SizeType_id_listFinal = erlang:length(Type_id_listFinal),
	BinLen_type_id_list = erlang:byte_size(Type_id_list_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,SizeType_id_listFinal:16, BinLen_type_id_list:32, Type_id_list_bin/binary,Egg_left_tickFinal:32/signed,Goods_idFinal:32/signed>>;
encode_m_pet_egg_refresh_toc(_) -> 
	<<>>.

decode_m_pet_egg_refresh_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_Sizetype_id_list:16, BinLentype_id_list:32, Bin2/binary>> = Bin1,
	<<SubBintype_id_list:BinLentype_id_list/binary, Bin3/binary>> = Bin2, 
	Type_id_list = lists:reverse(decode_int32s(SubBintype_id_list, [])),
	<<Egg_left_tick:32/signed,Goods_id:32/signed>> = Bin3,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_pet_egg_refresh_toc, Succ,common_tool:to_list(Reason),Type_id_list,Egg_left_tick,Goods_id};

decode_m_pet_egg_refresh_toc(_) ->
	undefined.
encode_m_pet_egg_adopt_tos(Record) when is_record(Record, m_pet_egg_adopt_tos) ->
	#m_pet_egg_adopt_tos{goods_id=Goods_id,type_id=Type_id} = Record,
	case Goods_id =:= undefined of
		true ->
				Goods_idFinal = undefined,
				exit({required_field_not_assigned, m_pet_egg_adopt_tos, goods_id});
		false ->
			Goods_idFinal = Goods_id
	end,
	case Type_id =:= undefined of
		true ->
				Type_idFinal = undefined,
				exit({required_field_not_assigned, m_pet_egg_adopt_tos, type_id});
		false ->
			Type_idFinal = Type_id
	end,

	<<Goods_idFinal:32/signed,Type_idFinal:32/signed>>;
encode_m_pet_egg_adopt_tos(_) -> 
	<<>>.

decode_m_pet_egg_adopt_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Goods_id:32/signed,Type_id:32/signed>> = Bin0,

	{m_pet_egg_adopt_tos, Goods_id,Type_id};

decode_m_pet_egg_adopt_tos(_) ->
	undefined.
encode_m_pet_egg_adopt_toc(Record) when is_record(Record, m_pet_egg_adopt_toc) ->
	#m_pet_egg_adopt_toc{succ=Succ,reason=Reason,type_id=Type_id} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Type_id =:= undefined of
		true ->
				Type_idFinal = 0;
		false ->
			Type_idFinal = Type_id
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Type_idFinal:32/signed>>;
encode_m_pet_egg_adopt_toc(_) -> 
	<<>>.

decode_m_pet_egg_adopt_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Type_id:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_pet_egg_adopt_toc, Succ,common_tool:to_list(Reason),Type_id};

decode_m_pet_egg_adopt_toc(_) ->
	undefined.
encode_m_pet_trick_learn_tos(Record) when is_record(Record, m_pet_trick_learn_tos) ->
	#m_pet_trick_learn_tos{type=Type,pet_id=Pet_id} = Record,
	case Type =:= undefined of
		true ->
				TypeFinal = undefined,
				exit({required_field_not_assigned, m_pet_trick_learn_tos, type});
		false ->
			TypeFinal = Type
	end,
	case Pet_id =:= undefined of
		true ->
				Pet_idFinal = undefined,
				exit({required_field_not_assigned, m_pet_trick_learn_tos, pet_id});
		false ->
			Pet_idFinal = Pet_id
	end,

	<<TypeFinal:32/signed,Pet_idFinal:32/signed>>;
encode_m_pet_trick_learn_tos(_) -> 
	<<>>.

decode_m_pet_trick_learn_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Type:32/signed,Pet_id:32/signed>> = Bin0,

	{m_pet_trick_learn_tos, Type,Pet_id};

decode_m_pet_trick_learn_tos(_) ->
	undefined.
encode_m_pet_trick_learn_toc(Record) when is_record(Record, m_pet_trick_learn_toc) ->
	#m_pet_trick_learn_toc{succ=Succ,reason=Reason,pet_info=Pet_info} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Pet_info =:= undefined of
		true ->
				Pet_infoFinal = 0;
		false ->
			Pet_infoFinal = Pet_info
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Pet_info_bin = encode_p_pet(Pet_infoFinal),
	BinLen_pet_info = erlang:byte_size(Pet_info_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_pet_info:32, Pet_info_bin/binary>>;
encode_m_pet_trick_learn_toc(_) -> 
	<<>>.

decode_m_pet_trick_learn_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_SubBinSizepet_info:32, SubBinpet_info/binary>> = Bin1,
	Pet_info = decode_p_pet(SubBinpet_info),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_pet_trick_learn_toc, Succ,common_tool:to_list(Reason),Pet_info};

decode_m_pet_trick_learn_toc(_) ->
	undefined.
encode_m_pet_trick_upgrade_tos(Record) when is_record(Record, m_pet_trick_upgrade_tos) ->
	#m_pet_trick_upgrade_tos{skill_id=Skill_id,pet_id=Pet_id} = Record,
	case Skill_id =:= undefined of
		true ->
				Skill_idFinal = undefined,
				exit({required_field_not_assigned, m_pet_trick_upgrade_tos, skill_id});
		false ->
			Skill_idFinal = Skill_id
	end,
	case Pet_id =:= undefined of
		true ->
				Pet_idFinal = undefined,
				exit({required_field_not_assigned, m_pet_trick_upgrade_tos, pet_id});
		false ->
			Pet_idFinal = Pet_id
	end,

	<<Skill_idFinal:32/signed,Pet_idFinal:32/signed>>;
encode_m_pet_trick_upgrade_tos(_) -> 
	<<>>.

decode_m_pet_trick_upgrade_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Skill_id:32/signed,Pet_id:32/signed>> = Bin0,

	{m_pet_trick_upgrade_tos, Skill_id,Pet_id};

decode_m_pet_trick_upgrade_tos(_) ->
	undefined.
encode_m_pet_trick_upgrade_toc(Record) when is_record(Record, m_pet_trick_upgrade_toc) ->
	#m_pet_trick_upgrade_toc{succ=Succ,reason=Reason,pet_info=Pet_info} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Pet_info =:= undefined of
		true ->
				Pet_infoFinal = 0;
		false ->
			Pet_infoFinal = Pet_info
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Pet_info_bin = encode_p_pet(Pet_infoFinal),
	BinLen_pet_info = erlang:byte_size(Pet_info_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_pet_info:32, Pet_info_bin/binary>>;
encode_m_pet_trick_upgrade_toc(_) -> 
	<<>>.

decode_m_pet_trick_upgrade_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_SubBinSizepet_info:32, SubBinpet_info/binary>> = Bin1,
	Pet_info = decode_p_pet(SubBinpet_info),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_pet_trick_upgrade_toc, Succ,common_tool:to_list(Reason),Pet_info};

decode_m_pet_trick_upgrade_toc(_) ->
	undefined.
encode_m_stat_button_tos(Record) when is_record(Record, m_stat_button_tos) ->
	#m_stat_button_tos{use_type=Use_type,btn_key=Btn_key} = Record,
	case Use_type =:= undefined of
		true ->
				Use_typeFinal = 1;
		false ->
			Use_typeFinal = Use_type
	end,
	case Btn_key =:= undefined of
		true ->
				Btn_keyFinal = 0;
		false ->
			Btn_keyFinal = Btn_key
	end,

	<<Use_typeFinal:32/signed,Btn_keyFinal:32/signed>>;
encode_m_stat_button_tos(_) -> 
	<<>>.

decode_m_stat_button_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Use_type:32/signed,Btn_key:32/signed>> = Bin0,

	{m_stat_button_tos, Use_type,Btn_key};

decode_m_stat_button_tos(_) ->
	undefined.
encode_m_stat_config_toc(Record) when is_record(Record, m_stat_config_toc) ->
	#m_stat_config_toc{is_open=Is_open} = Record,
	case Is_open =:= undefined of
		true ->
				Is_openFinal = 0;
		false ->
		case Is_open of
			true ->
				Is_openFinal = 1;
			false ->
				Is_openFinal = 0
		end
	end,

	<<Is_openFinal:8>>;
encode_m_stat_config_toc(_) -> 
	<<>>.

decode_m_stat_config_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Is_openTmp:8>> = Bin0,
case Is_openTmp of 
	1 -> 
		Is_open = true;
	_ ->
		Is_open = false
end,

	{m_stat_config_toc, Is_open};

decode_m_stat_config_toc(_) ->
	undefined.
encode_m_spy_faction_tos(Record) when is_record(Record, m_spy_faction_tos) ->
	#m_spy_faction_tos{} = Record,

	<<>>;
encode_m_spy_faction_tos(_) -> 
	<<>>.

decode_m_spy_faction_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_spy_faction_tos};

decode_m_spy_faction_tos(_) ->
	undefined.
encode_m_spy_faction_toc(Record) when is_record(Record, m_spy_faction_toc) ->
	#m_spy_faction_toc{succ=Succ,reason=Reason,return_self=Return_self,remain_time=Remain_time,npc_id=Npc_id,map_id=Map_id,tx=Tx,ty=Ty,office_id=Office_id,faction_id=Faction_id,role_name=Role_name} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
			case Return_self of
				true ->
					Return_selfFinal = 1;
				false ->
					Return_selfFinal = 0
			end
	end,
	case Remain_time =:= undefined of
		true ->
				Remain_timeFinal = 0;
		false ->
			Remain_timeFinal = Remain_time
	end,
	case Npc_id =:= undefined of
		true ->
				Npc_idFinal = 0;
		false ->
			Npc_idFinal = Npc_id
	end,
	case Map_id =:= undefined of
		true ->
				Map_idFinal = 0;
		false ->
			Map_idFinal = Map_id
	end,
	case Tx =:= undefined of
		true ->
				TxFinal = 0;
		false ->
			TxFinal = Tx
	end,
	case Ty =:= undefined of
		true ->
				TyFinal = 0;
		false ->
			TyFinal = Ty
	end,
	case Office_id =:= undefined of
		true ->
				Office_idFinal = 0;
		false ->
			Office_idFinal = Office_id
	end,
	case Faction_id =:= undefined of
		true ->
				Faction_idFinal = 0;
		false ->
			Faction_idFinal = Faction_id
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = <<>>;
		false ->
			Role_nameFinal = Role_name
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Return_selfFinal:8,Remain_timeFinal:32/signed,Npc_idFinal:32/signed,Map_idFinal:32/signed,TxFinal:32/signed,TyFinal:32/signed,Office_idFinal:32/signed,Faction_idFinal:32/signed,Role_nameLen:16, Role_name2/binary>>;
encode_m_spy_faction_toc(_) -> 
	<<>>.

decode_m_spy_faction_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Return_selfTmp:8,Remain_time:32/signed,Npc_id:32/signed,Map_id:32/signed,Tx:32/signed,Ty:32/signed,Office_id:32/signed,Faction_id:32/signed,Role_nameLen:16, Bin2/binary>> = Bin1,
	<<Role_name:Role_nameLen/binary>> = Bin2,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_spy_faction_toc, Succ,common_tool:to_list(Reason),Return_self,Remain_time,Npc_id,Map_id,Tx,Ty,Office_id,Faction_id,common_tool:to_list(Role_name)};

decode_m_spy_faction_toc(_) ->
	undefined.
encode_m_spy_faction_time_toc(Record) when is_record(Record, m_spy_faction_time_toc) ->
	#m_spy_faction_time_toc{remain_time=Remain_time} = Record,
	case Remain_time =:= undefined of
		true ->
				Remain_timeFinal = undefined,
				exit({required_field_not_assigned, m_spy_faction_time_toc, remain_time});
		false ->
			Remain_timeFinal = Remain_time
	end,

	<<Remain_timeFinal:32/signed>>;
encode_m_spy_faction_time_toc(_) -> 
	<<>>.

decode_m_spy_faction_time_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Remain_time:32/signed>> = Bin0,

	{m_spy_faction_time_toc, Remain_time};

decode_m_spy_faction_time_toc(_) ->
	undefined.
encode_m_spy_time_tos(Record) when is_record(Record, m_spy_time_tos) ->
	#m_spy_time_tos{request_type=Request_type,start_hour=Start_hour,start_min=Start_min} = Record,
	case Request_type =:= undefined of
		true ->
				Request_typeFinal = undefined,
				exit({required_field_not_assigned, m_spy_time_tos, request_type});
		false ->
			Request_typeFinal = Request_type
	end,
	case Start_hour =:= undefined of
		true ->
				Start_hourFinal = 0;
		false ->
			Start_hourFinal = Start_hour
	end,
	case Start_min =:= undefined of
		true ->
				Start_minFinal = 0;
		false ->
			Start_minFinal = Start_min
	end,

	<<Request_typeFinal:32/signed,Start_hourFinal:32/signed,Start_minFinal:32/signed>>;
encode_m_spy_time_tos(_) -> 
	<<>>.

decode_m_spy_time_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Request_type:32/signed,Start_hour:32/signed,Start_min:32/signed>> = Bin0,

	{m_spy_time_tos, Request_type,Start_hour,Start_min};

decode_m_spy_time_tos(_) ->
	undefined.
encode_m_spy_time_toc(Record) when is_record(Record, m_spy_time_toc) ->
	#m_spy_time_toc{succ=Succ,reason=Reason,start_hour=Start_hour,start_min=Start_min,can_start_now=Can_start_now,has_publish=Has_publish} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Start_hour =:= undefined of
		true ->
				Start_hourFinal = 0;
		false ->
			Start_hourFinal = Start_hour
	end,
	case Start_min =:= undefined of
		true ->
				Start_minFinal = 0;
		false ->
			Start_minFinal = Start_min
	end,
	case Can_start_now =:= undefined of
		true ->
				Can_start_nowFinal = 1;
		false ->
			case Can_start_now of
				true ->
					Can_start_nowFinal = 1;
				false ->
					Can_start_nowFinal = 0
			end
	end,
	case Has_publish =:= undefined of
		true ->
				Has_publishFinal = 1;
		false ->
			case Has_publish of
				true ->
					Has_publishFinal = 1;
				false ->
					Has_publishFinal = 0
			end
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Start_hourFinal:32/signed,Start_minFinal:32/signed,Can_start_nowFinal:8,Has_publishFinal:8>>;
encode_m_spy_time_toc(_) -> 
	<<>>.

decode_m_spy_time_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Start_hour:32/signed,Start_min:32/signed,Can_start_nowTmp:8,Has_publishTmp:8>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Can_start_nowTmp of 
	1 -> 
		Can_start_now = true;
	_ ->
		Can_start_now = false
end,
case Has_publishTmp of 
	1 -> 
		Has_publish = true;
	_ ->
		Has_publish = false
end,

	{m_spy_time_toc, Succ,common_tool:to_list(Reason),Start_hour,Start_min,Can_start_now,Has_publish};

decode_m_spy_time_toc(_) ->
	undefined.
encode_m_educate_fb_enter_tos(Record) when is_record(Record, m_educate_fb_enter_tos) ->
	#m_educate_fb_enter_tos{npc_id=Npc_id,map_id=Map_id} = Record,
	case Npc_id =:= undefined of
		true ->
				Npc_idFinal = 0;
		false ->
			Npc_idFinal = Npc_id
	end,
	case Map_id =:= undefined of
		true ->
				Map_idFinal = 0;
		false ->
			Map_idFinal = Map_id
	end,

	<<Npc_idFinal:32/signed,Map_idFinal:32/signed>>;
encode_m_educate_fb_enter_tos(_) -> 
	<<>>.

decode_m_educate_fb_enter_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Npc_id:32/signed,Map_id:32/signed>> = Bin0,

	{m_educate_fb_enter_tos, Npc_id,Map_id};

decode_m_educate_fb_enter_tos(_) ->
	undefined.
encode_m_educate_fb_enter_toc(Record) when is_record(Record, m_educate_fb_enter_toc) ->
	#m_educate_fb_enter_toc{succ=Succ,return_self=Return_self,reason=Reason,monster_type_ids=Monster_type_ids} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Monster_type_ids =:= undefined of
		true ->
			Monster_type_idsFinal = [];
		false ->
			Monster_type_idsFinal = Monster_type_ids
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Monster_type_ids_bin = encode_int32s(Monster_type_idsFinal, <<>>),
	SizeMonster_type_idsFinal = erlang:length(Monster_type_idsFinal),
	BinLen_monster_type_ids = erlang:byte_size(Monster_type_ids_bin),

	<<SuccFinal:8,Return_selfFinal:8,ReasonLen:16, Reason2/binary,SizeMonster_type_idsFinal:16, BinLen_monster_type_ids:32, Monster_type_ids_bin/binary>>;
encode_m_educate_fb_enter_toc(_) -> 
	<<>>.

decode_m_educate_fb_enter_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,Return_selfTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_Sizemonster_type_ids:16, _BinLenmonster_type_ids:32, SubBinmonster_type_ids/binary>> = Bin1,
	Monster_type_ids = lists:reverse(decode_int32s(SubBinmonster_type_ids, [])),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_educate_fb_enter_toc, Succ,Return_self,common_tool:to_list(Reason),Monster_type_ids};

decode_m_educate_fb_enter_toc(_) ->
	undefined.
encode_m_educate_fb_quit_tos(Record) when is_record(Record, m_educate_fb_quit_tos) ->
	#m_educate_fb_quit_tos{npc_id=Npc_id,map_id=Map_id} = Record,
	case Npc_id =:= undefined of
		true ->
				Npc_idFinal = 0;
		false ->
			Npc_idFinal = Npc_id
	end,
	case Map_id =:= undefined of
		true ->
				Map_idFinal = 0;
		false ->
			Map_idFinal = Map_id
	end,

	<<Npc_idFinal:32/signed,Map_idFinal:32/signed>>;
encode_m_educate_fb_quit_tos(_) -> 
	<<>>.

decode_m_educate_fb_quit_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Npc_id:32/signed,Map_id:32/signed>> = Bin0,

	{m_educate_fb_quit_tos, Npc_id,Map_id};

decode_m_educate_fb_quit_tos(_) ->
	undefined.
encode_m_educate_fb_quit_toc(Record) when is_record(Record, m_educate_fb_quit_toc) ->
	#m_educate_fb_quit_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_educate_fb_quit_toc(_) -> 
	<<>>.

decode_m_educate_fb_quit_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_educate_fb_quit_toc, Succ,common_tool:to_list(Reason)};

decode_m_educate_fb_quit_toc(_) ->
	undefined.
encode_m_educate_fb_award_tos(Record) when is_record(Record, m_educate_fb_award_tos) ->
	#m_educate_fb_award_tos{npc_id=Npc_id,map_id=Map_id} = Record,
	case Npc_id =:= undefined of
		true ->
				Npc_idFinal = 0;
		false ->
			Npc_idFinal = Npc_id
	end,
	case Map_id =:= undefined of
		true ->
				Map_idFinal = 0;
		false ->
			Map_idFinal = Map_id
	end,

	<<Npc_idFinal:32/signed,Map_idFinal:32/signed>>;
encode_m_educate_fb_award_tos(_) -> 
	<<>>.

decode_m_educate_fb_award_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Npc_id:32/signed,Map_id:32/signed>> = Bin0,

	{m_educate_fb_award_tos, Npc_id,Map_id};

decode_m_educate_fb_award_tos(_) ->
	undefined.
encode_m_educate_fb_award_toc(Record) when is_record(Record, m_educate_fb_award_toc) ->
	#m_educate_fb_award_toc{succ=Succ,reason=Reason,award_goods=Award_goods} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Award_goods =:= undefined of
		true ->
			Award_goodsFinal = [];
		false ->
			Award_goodsFinal = Award_goods
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Award_goods_bin = encode_p_goodss(Award_goodsFinal, <<>>),
	SizeAward_goodsFinal = erlang:length(Award_goodsFinal),
	BinLen_award_goods = erlang:byte_size(Award_goods_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,SizeAward_goodsFinal:16, BinLen_award_goods:32, Award_goods_bin/binary>>;
encode_m_educate_fb_award_toc(_) -> 
	<<>>.

decode_m_educate_fb_award_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_Sizeaward_goods:16, _BinLenaward_goods:32, SubBinaward_goods/binary>> = Bin1,
	Award_goods = lists:reverse(decode_p_goodss(SubBinaward_goods, [])),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_educate_fb_award_toc, Succ,common_tool:to_list(Reason),Award_goods};

decode_m_educate_fb_award_toc(_) ->
	undefined.
encode_m_educate_fb_gambling_tos(Record) when is_record(Record, m_educate_fb_gambling_tos) ->
	#m_educate_fb_gambling_tos{npc_id=Npc_id,map_id=Map_id} = Record,
	case Npc_id =:= undefined of
		true ->
				Npc_idFinal = 0;
		false ->
			Npc_idFinal = Npc_id
	end,
	case Map_id =:= undefined of
		true ->
				Map_idFinal = 0;
		false ->
			Map_idFinal = Map_id
	end,

	<<Npc_idFinal:32/signed,Map_idFinal:32/signed>>;
encode_m_educate_fb_gambling_tos(_) -> 
	<<>>.

decode_m_educate_fb_gambling_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Npc_id:32/signed,Map_id:32/signed>> = Bin0,

	{m_educate_fb_gambling_tos, Npc_id,Map_id};

decode_m_educate_fb_gambling_tos(_) ->
	undefined.
encode_m_educate_fb_gambling_toc(Record) when is_record(Record, m_educate_fb_gambling_toc) ->
	#m_educate_fb_gambling_toc{succ=Succ,reason=Reason,lucky_count=Lucky_count,fee=Fee,award_goods=Award_goods} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Lucky_count =:= undefined of
		true ->
				Lucky_countFinal = 0;
		false ->
			Lucky_countFinal = Lucky_count
	end,
	case Fee =:= undefined of
		true ->
				FeeFinal = 0;
		false ->
			FeeFinal = Fee
	end,
	case Award_goods =:= undefined of
		true ->
			Award_goodsFinal = [];
		false ->
			Award_goodsFinal = Award_goods
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Award_goods_bin = encode_p_goodss(Award_goodsFinal, <<>>),
	SizeAward_goodsFinal = erlang:length(Award_goodsFinal),
	BinLen_award_goods = erlang:byte_size(Award_goods_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Lucky_countFinal:32/signed,FeeFinal:32/signed,SizeAward_goodsFinal:16, BinLen_award_goods:32, Award_goods_bin/binary>>;
encode_m_educate_fb_gambling_toc(_) -> 
	<<>>.

decode_m_educate_fb_gambling_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Lucky_count:32/signed,Fee:32/signed,_Sizeaward_goods:16, _BinLenaward_goods:32, SubBinaward_goods/binary>> = Bin1,
	Award_goods = lists:reverse(decode_p_goodss(SubBinaward_goods, [])),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_educate_fb_gambling_toc, Succ,common_tool:to_list(Reason),Lucky_count,Fee,Award_goods};

decode_m_educate_fb_gambling_toc(_) ->
	undefined.
encode_m_educate_fb_item_tos(Record) when is_record(Record, m_educate_fb_item_tos) ->
	#m_educate_fb_item_tos{goods_id=Goods_id,item_id=Item_id} = Record,
	case Goods_id =:= undefined of
		true ->
				Goods_idFinal = 0;
		false ->
			Goods_idFinal = Goods_id
	end,
	case Item_id =:= undefined of
		true ->
				Item_idFinal = 0;
		false ->
			Item_idFinal = Item_id
	end,

	<<Goods_idFinal:32/signed,Item_idFinal:32/signed>>;
encode_m_educate_fb_item_tos(_) -> 
	<<>>.

decode_m_educate_fb_item_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Goods_id:32/signed,Item_id:32/signed>> = Bin0,

	{m_educate_fb_item_tos, Goods_id,Item_id};

decode_m_educate_fb_item_tos(_) ->
	undefined.
encode_m_educate_fb_item_toc(Record) when is_record(Record, m_educate_fb_item_toc) ->
	#m_educate_fb_item_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_educate_fb_item_toc(_) -> 
	<<>>.

decode_m_educate_fb_item_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_educate_fb_item_toc, Succ,common_tool:to_list(Reason)};

decode_m_educate_fb_item_toc(_) ->
	undefined.
encode_m_educate_fb_query_tos(Record) when is_record(Record, m_educate_fb_query_tos) ->
	#m_educate_fb_query_tos{op_type=Op_type,goods_id=Goods_id,item_id=Item_id,use_role_id=Use_role_id} = Record,
	case Op_type =:= undefined of
		true ->
				Op_typeFinal = 0;
		false ->
			Op_typeFinal = Op_type
	end,
	case Goods_id =:= undefined of
		true ->
				Goods_idFinal = 0;
		false ->
			Goods_idFinal = Goods_id
	end,
	case Item_id =:= undefined of
		true ->
				Item_idFinal = 0;
		false ->
			Item_idFinal = Item_id
	end,
	case Use_role_id =:= undefined of
		true ->
				Use_role_idFinal = 0;
		false ->
			Use_role_idFinal = Use_role_id
	end,

	<<Op_typeFinal:32/signed,Goods_idFinal:32/signed,Item_idFinal:32/signed,Use_role_idFinal:32/signed>>;
encode_m_educate_fb_query_tos(_) -> 
	<<>>.

decode_m_educate_fb_query_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Op_type:32/signed,Goods_id:32/signed,Item_id:32/signed,Use_role_id:32/signed>> = Bin0,

	{m_educate_fb_query_tos, Op_type,Goods_id,Item_id,Use_role_id};

decode_m_educate_fb_query_tos(_) ->
	undefined.
encode_m_educate_fb_query_toc(Record) when is_record(Record, m_educate_fb_query_toc) ->
	#m_educate_fb_query_toc{succ=Succ,op_type=Op_type,reason=Reason,times=Times,start_time=Start_time,end_time=End_time,status=Status,count=Count,fb_items=Fb_items,lucky_count=Lucky_count,goods_id=Goods_id,item_id=Item_id,use_role_id=Use_role_id,use_role_name=Use_role_name,use_tx=Use_tx,use_ty=Use_ty,return_self=Return_self,all_fb_items=All_fb_items,leader_role_id=Leader_role_id,max_lucky_count=Max_lucky_count,award_goods=Award_goods,fb_award_config=Fb_award_config} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Op_type =:= undefined of
		true ->
				Op_typeFinal = 0;
		false ->
			Op_typeFinal = Op_type
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Times =:= undefined of
		true ->
				TimesFinal = 0;
		false ->
			TimesFinal = Times
	end,
	case Start_time =:= undefined of
		true ->
				Start_timeFinal = 0;
		false ->
			Start_timeFinal = Start_time
	end,
	case End_time =:= undefined of
		true ->
				End_timeFinal = 0;
		false ->
			End_timeFinal = End_time
	end,
	case Status =:= undefined of
		true ->
				StatusFinal = 0;
		false ->
			StatusFinal = Status
	end,
	case Count =:= undefined of
		true ->
				CountFinal = 0;
		false ->
			CountFinal = Count
	end,
	case Fb_items =:= undefined of
		true ->
			Fb_itemsFinal = [];
		false ->
			Fb_itemsFinal = Fb_items
	end,
	case Lucky_count =:= undefined of
		true ->
				Lucky_countFinal = 0;
		false ->
			Lucky_countFinal = Lucky_count
	end,
	case Goods_id =:= undefined of
		true ->
				Goods_idFinal = 0;
		false ->
			Goods_idFinal = Goods_id
	end,
	case Item_id =:= undefined of
		true ->
				Item_idFinal = 0;
		false ->
			Item_idFinal = Item_id
	end,
	case Use_role_id =:= undefined of
		true ->
				Use_role_idFinal = 0;
		false ->
			Use_role_idFinal = Use_role_id
	end,
	case Use_role_name =:= undefined of
		true ->
				Use_role_nameFinal = <<>>;
		false ->
			Use_role_nameFinal = Use_role_name
	end,
	case Use_tx =:= undefined of
		true ->
				Use_txFinal = 0;
		false ->
			Use_txFinal = Use_tx
	end,
	case Use_ty =:= undefined of
		true ->
				Use_tyFinal = 0;
		false ->
			Use_tyFinal = Use_ty
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case All_fb_items =:= undefined of
		true ->
			All_fb_itemsFinal = [];
		false ->
			All_fb_itemsFinal = All_fb_items
	end,
	case Leader_role_id =:= undefined of
		true ->
				Leader_role_idFinal = 0;
		false ->
			Leader_role_idFinal = Leader_role_id
	end,
	case Max_lucky_count =:= undefined of
		true ->
				Max_lucky_countFinal = 0;
		false ->
			Max_lucky_countFinal = Max_lucky_count
	end,
	case Award_goods =:= undefined of
		true ->
			Award_goodsFinal = [];
		false ->
			Award_goodsFinal = Award_goods
	end,
	case Fb_award_config =:= undefined of
		true ->
			Fb_award_configFinal = [];
		false ->
			Fb_award_configFinal = Fb_award_config
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Fb_items_bin = encode_p_educate_fb_items(Fb_itemsFinal, <<>>),
	SizeFb_itemsFinal = erlang:length(Fb_itemsFinal),
	BinLen_fb_items = erlang:byte_size(Fb_items_bin),
	Use_role_name2 = common_tool:to_binary(Use_role_nameFinal),
	Use_role_nameLen = erlang:byte_size(Use_role_name2),
	All_fb_items_bin = encode_p_educate_fb_items(All_fb_itemsFinal, <<>>),
	SizeAll_fb_itemsFinal = erlang:length(All_fb_itemsFinal),
	BinLen_all_fb_items = erlang:byte_size(All_fb_items_bin),
	Award_goods_bin = encode_p_goodss(Award_goodsFinal, <<>>),
	SizeAward_goodsFinal = erlang:length(Award_goodsFinal),
	BinLen_award_goods = erlang:byte_size(Award_goods_bin),
	Fb_award_config_bin = encode_p_educate_fb_awards(Fb_award_configFinal, <<>>),
	SizeFb_award_configFinal = erlang:length(Fb_award_configFinal),
	BinLen_fb_award_config = erlang:byte_size(Fb_award_config_bin),

	<<SuccFinal:8,Op_typeFinal:32/signed,ReasonLen:16, Reason2/binary,TimesFinal:32/signed,Start_timeFinal:32/signed,End_timeFinal:32/signed,StatusFinal:32/signed,CountFinal:32/signed,SizeFb_itemsFinal:16, BinLen_fb_items:32, Fb_items_bin/binary,Lucky_countFinal:32/signed,Goods_idFinal:32/signed,Item_idFinal:32/signed,Use_role_idFinal:32/signed,Use_role_nameLen:16, Use_role_name2/binary,Use_txFinal:32/signed,Use_tyFinal:32/signed,Return_selfFinal:8,SizeAll_fb_itemsFinal:16, BinLen_all_fb_items:32, All_fb_items_bin/binary,Leader_role_idFinal:32/signed,Max_lucky_countFinal:32/signed,SizeAward_goodsFinal:16, BinLen_award_goods:32, Award_goods_bin/binary,SizeFb_award_configFinal:16, BinLen_fb_award_config:32, Fb_award_config_bin/binary>>;
encode_m_educate_fb_query_toc(_) -> 
	<<>>.

decode_m_educate_fb_query_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,Op_type:32/signed,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Times:32/signed,Start_time:32/signed,End_time:32/signed,Status:32/signed,Count:32/signed,_Sizefb_items:16, BinLenfb_items:32, Bin2/binary>> = Bin1,
	<<SubBinfb_items:BinLenfb_items/binary, Bin3/binary>> = Bin2, 
	Fb_items = lists:reverse(decode_p_educate_fb_items(SubBinfb_items, [])),
	<<Lucky_count:32/signed,Goods_id:32/signed,Item_id:32/signed,Use_role_id:32/signed,Use_role_nameLen:16, Bin4/binary>> = Bin3,
	<<Use_role_name:Use_role_nameLen/binary,Use_tx:32/signed,Use_ty:32/signed,Return_selfTmp:8,_Sizeall_fb_items:16, BinLenall_fb_items:32, Bin5/binary>> = Bin4,
	<<SubBinall_fb_items:BinLenall_fb_items/binary, Bin6/binary>> = Bin5, 
	All_fb_items = lists:reverse(decode_p_educate_fb_items(SubBinall_fb_items, [])),
	<<Leader_role_id:32/signed,Max_lucky_count:32/signed,_Sizeaward_goods:16, BinLenaward_goods:32, Bin7/binary>> = Bin6,
	<<SubBinaward_goods:BinLenaward_goods/binary, Bin8/binary>> = Bin7, 
	Award_goods = lists:reverse(decode_p_goodss(SubBinaward_goods, [])),
	<<_Sizefb_award_config:16, _BinLenfb_award_config:32, SubBinfb_award_config/binary>> = Bin8,
	Fb_award_config = lists:reverse(decode_p_educate_fb_awards(SubBinfb_award_config, [])),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_educate_fb_query_toc, Succ,Op_type,common_tool:to_list(Reason),Times,Start_time,End_time,Status,Count,Fb_items,Lucky_count,Goods_id,Item_id,Use_role_id,common_tool:to_list(Use_role_name),Use_tx,Use_ty,Return_self,All_fb_items,Leader_role_id,Max_lucky_count,Award_goods,Fb_award_config};

decode_m_educate_fb_query_toc(_) ->
	undefined.
encode_m_jail_out_tos(Record) when is_record(Record, m_jail_out_tos) ->
	#m_jail_out_tos{} = Record,

	<<>>;
encode_m_jail_out_tos(_) -> 
	<<>>.

decode_m_jail_out_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_jail_out_tos};

decode_m_jail_out_tos(_) ->
	undefined.
encode_m_jail_out_toc(Record) when is_record(Record, m_jail_out_toc) ->
	#m_jail_out_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_jail_out_toc(_) -> 
	<<>>.

decode_m_jail_out_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_jail_out_toc, Succ,common_tool:to_list(Reason)};

decode_m_jail_out_toc(_) ->
	undefined.
encode_m_jail_donate_tos(Record) when is_record(Record, m_jail_donate_tos) ->
	#m_jail_donate_tos{gold=Gold} = Record,
	case Gold =:= undefined of
		true ->
				GoldFinal = undefined,
				exit({required_field_not_assigned, m_jail_donate_tos, gold});
		false ->
			GoldFinal = Gold
	end,

	<<GoldFinal:32/signed>>;
encode_m_jail_donate_tos(_) -> 
	<<>>.

decode_m_jail_donate_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Gold:32/signed>> = Bin0,

	{m_jail_donate_tos, Gold};

decode_m_jail_donate_tos(_) ->
	undefined.
encode_m_jail_donate_toc(Record) when is_record(Record, m_jail_donate_toc) ->
	#m_jail_donate_toc{succ=Succ,reason=Reason,pk_points=Pk_points,gold=Gold,gold_bind=Gold_bind} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Pk_points =:= undefined of
		true ->
				Pk_pointsFinal = 0;
		false ->
			Pk_pointsFinal = Pk_points
	end,
	case Gold =:= undefined of
		true ->
				GoldFinal = 0;
		false ->
			GoldFinal = Gold
	end,
	case Gold_bind =:= undefined of
		true ->
				Gold_bindFinal = 0;
		false ->
			Gold_bindFinal = Gold_bind
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Pk_pointsFinal:32/signed,GoldFinal:32/signed,Gold_bindFinal:32/signed>>;
encode_m_jail_donate_toc(_) -> 
	<<>>.

decode_m_jail_donate_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Pk_points:32/signed,Gold:32/signed,Gold_bind:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_jail_donate_toc, Succ,common_tool:to_list(Reason),Pk_points,Gold,Gold_bind};

decode_m_jail_donate_toc(_) ->
	undefined.
encode_m_jail_out_force_tos(Record) when is_record(Record, m_jail_out_force_tos) ->
	#m_jail_out_force_tos{} = Record,

	<<>>;
encode_m_jail_out_force_tos(_) -> 
	<<>>.

decode_m_jail_out_force_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_jail_out_force_tos};

decode_m_jail_out_force_tos(_) ->
	undefined.
encode_m_jail_out_force_toc(Record) when is_record(Record, m_jail_out_force_toc) ->
	#m_jail_out_force_toc{succ=Succ,reason=Reason,silver=Silver,silver_bind=Silver_bind} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Silver =:= undefined of
		true ->
				SilverFinal = 0;
		false ->
			SilverFinal = Silver
	end,
	case Silver_bind =:= undefined of
		true ->
				Silver_bindFinal = 0;
		false ->
			Silver_bindFinal = Silver_bind
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,SilverFinal:32/signed,Silver_bindFinal:32/signed>>;
encode_m_jail_out_force_toc(_) -> 
	<<>>.

decode_m_jail_out_force_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Silver:32/signed,Silver_bind:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_jail_out_force_toc, Succ,common_tool:to_list(Reason),Silver,Silver_bind};

decode_m_jail_out_force_toc(_) ->
	undefined.
encode_m_present_get_tos(Record) when is_record(Record, m_present_get_tos) ->
	#m_present_get_tos{present_id=Present_id} = Record,
	case Present_id =:= undefined of
		true ->
				Present_idFinal = undefined,
				exit({required_field_not_assigned, m_present_get_tos, present_id});
		false ->
			Present_idFinal = Present_id
	end,

	<<Present_idFinal:32/signed>>;
encode_m_present_get_tos(_) -> 
	<<>>.

decode_m_present_get_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Present_id:32/signed>> = Bin0,

	{m_present_get_tos, Present_id};

decode_m_present_get_tos(_) ->
	undefined.
encode_m_present_get_toc(Record) when is_record(Record, m_present_get_toc) ->
	#m_present_get_toc{succ=Succ,reason=Reason,present_id=Present_id} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Present_id =:= undefined of
		true ->
				Present_idFinal = 0;
		false ->
			Present_idFinal = Present_id
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Present_idFinal:32/signed>>;
encode_m_present_get_toc(_) -> 
	<<>>.

decode_m_present_get_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Present_id:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_present_get_toc, Succ,common_tool:to_list(Reason),Present_id};

decode_m_present_get_toc(_) ->
	undefined.
encode_m_present_notify_toc(Record) when is_record(Record, m_present_notify_toc) ->
	#m_present_notify_toc{present_list=Present_list} = Record,
	case Present_list =:= undefined of
		true ->
			Present_listFinal = [];
		false ->
			Present_listFinal = Present_list
	end,
	Present_list_bin = encode_p_present_infos(Present_listFinal, <<>>),
	SizePresent_listFinal = erlang:length(Present_listFinal),
	BinLen_present_list = erlang:byte_size(Present_list_bin),

	<<SizePresent_listFinal:16, BinLen_present_list:32, Present_list_bin/binary>>;
encode_m_present_notify_toc(_) -> 
	<<>>.

decode_m_present_notify_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizepresent_list:16, _BinLenpresent_list:32, SubBinpresent_list/binary>> = Bin0,
	Present_list = lists:reverse(decode_p_present_infos(SubBinpresent_list, [])),

	{m_present_notify_toc, Present_list};

decode_m_present_notify_toc(_) ->
	undefined.
encode_m_conlogin_fetch_tos(Record) when is_record(Record, m_conlogin_fetch_tos) ->
	#m_conlogin_fetch_tos{id=Id,num=Num} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, m_conlogin_fetch_tos, id});
		false ->
			IdFinal = Id
	end,
	case Num =:= undefined of
		true ->
				NumFinal = 0;
		false ->
			NumFinal = Num
	end,

	<<IdFinal:32/signed,NumFinal:32/signed>>;
encode_m_conlogin_fetch_tos(_) -> 
	<<>>.

decode_m_conlogin_fetch_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed,Num:32/signed>> = Bin0,

	{m_conlogin_fetch_tos, Id,Num};

decode_m_conlogin_fetch_tos(_) ->
	undefined.
encode_m_conlogin_fetch_toc(Record) when is_record(Record, m_conlogin_fetch_toc) ->
	#m_conlogin_fetch_toc{succ=Succ,reason=Reason,id=Id,num=Num} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Id =:= undefined of
		true ->
				IdFinal = 0;
		false ->
			IdFinal = Id
	end,
	case Num =:= undefined of
		true ->
				NumFinal = 0;
		false ->
			NumFinal = Num
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,IdFinal:32/signed,NumFinal:32/signed>>;
encode_m_conlogin_fetch_toc(_) -> 
	<<>>.

decode_m_conlogin_fetch_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Id:32/signed,Num:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_conlogin_fetch_toc, Succ,common_tool:to_list(Reason),Id,Num};

decode_m_conlogin_fetch_toc(_) ->
	undefined.
encode_m_conlogin_info_toc(Record) when is_record(Record, m_conlogin_info_toc) ->
	#m_conlogin_info_toc{day=Day,next_day=Next_day,notice=Notice,rewards=Rewards} = Record,
	case Day =:= undefined of
		true ->
				DayFinal = undefined,
				exit({required_field_not_assigned, m_conlogin_info_toc, day});
		false ->
			DayFinal = Day
	end,
	case Next_day =:= undefined of
		true ->
				Next_dayFinal = undefined,
				exit({required_field_not_assigned, m_conlogin_info_toc, next_day});
		false ->
			Next_dayFinal = Next_day
	end,
	case Notice =:= undefined of
		true ->
				NoticeFinal = undefined,
				exit({required_field_not_assigned, m_conlogin_info_toc, notice});
		false ->
			NoticeFinal = Notice
	end,
	case Rewards =:= undefined of
		true ->
			RewardsFinal = [];
		false ->
			RewardsFinal = Rewards
	end,
	Notice2 = common_tool:to_binary(NoticeFinal),
	NoticeLen = erlang:byte_size(Notice2),
	Rewards_bin = encode_p_conlogin_rewards(RewardsFinal, <<>>),
	SizeRewardsFinal = erlang:length(RewardsFinal),
	BinLen_rewards = erlang:byte_size(Rewards_bin),

	<<DayFinal:32/signed,Next_dayFinal:32/signed,NoticeLen:16, Notice2/binary,SizeRewardsFinal:16, BinLen_rewards:32, Rewards_bin/binary>>;
encode_m_conlogin_info_toc(_) -> 
	<<>>.

decode_m_conlogin_info_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Day:32/signed,Next_day:32/signed,NoticeLen:16, Bin1/binary>> = Bin0,
	<<Notice:NoticeLen/binary,_Sizerewards:16, _BinLenrewards:32, SubBinrewards/binary>> = Bin1,
	Rewards = lists:reverse(decode_p_conlogin_rewards(SubBinrewards, [])),

	{m_conlogin_info_toc, Day,Next_day,common_tool:to_list(Notice),Rewards};

decode_m_conlogin_info_toc(_) ->
	undefined.
encode_m_conlogin_info_tos(Record) when is_record(Record, m_conlogin_info_tos) ->
	#m_conlogin_info_tos{auto=Auto} = Record,
	case Auto =:= undefined of
		true ->
				AutoFinal = 1;
		false ->
		case Auto of
			true ->
				AutoFinal = 1;
			false ->
				AutoFinal = 0
		end
	end,

	<<AutoFinal:8>>;
encode_m_conlogin_info_tos(_) -> 
	<<>>.

decode_m_conlogin_info_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<AutoTmp:8>> = Bin0,
case AutoTmp of 
	1 -> 
		Auto = true;
	_ ->
		Auto = false
end,

	{m_conlogin_info_tos, Auto};

decode_m_conlogin_info_tos(_) ->
	undefined.
encode_m_conlogin_notshow_tos(Record) when is_record(Record, m_conlogin_notshow_tos) ->
	#m_conlogin_notshow_tos{} = Record,

	<<>>;
encode_m_conlogin_notshow_tos(_) -> 
	<<>>.

decode_m_conlogin_notshow_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_conlogin_notshow_tos};

decode_m_conlogin_notshow_tos(_) ->
	undefined.
encode_m_conlogin_notshow_toc(Record) when is_record(Record, m_conlogin_notshow_toc) ->
	#m_conlogin_notshow_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_conlogin_notshow_toc(_) -> 
	<<>>.

decode_m_conlogin_notshow_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_conlogin_notshow_toc, Succ,common_tool:to_list(Reason)};

decode_m_conlogin_notshow_toc(_) ->
	undefined.
encode_m_conlogin_clear_tos(Record) when is_record(Record, m_conlogin_clear_tos) ->
	#m_conlogin_clear_tos{} = Record,

	<<>>;
encode_m_conlogin_clear_tos(_) -> 
	<<>>.

decode_m_conlogin_clear_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_conlogin_clear_tos};

decode_m_conlogin_clear_tos(_) ->
	undefined.
encode_m_conlogin_clear_toc(Record) when is_record(Record, m_conlogin_clear_toc) ->
	#m_conlogin_clear_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_conlogin_clear_toc(_) -> 
	<<>>.

decode_m_conlogin_clear_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_conlogin_clear_toc, Succ,common_tool:to_list(Reason)};

decode_m_conlogin_clear_toc(_) ->
	undefined.
encode_m_personal_fb_list_tos(Record) when is_record(Record, m_personal_fb_list_tos) ->
	#m_personal_fb_list_tos{} = Record,

	<<>>;
encode_m_personal_fb_list_tos(_) -> 
	<<>>.

decode_m_personal_fb_list_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_personal_fb_list_tos};

decode_m_personal_fb_list_tos(_) ->
	undefined.
encode_m_personal_fb_list_toc(Record) when is_record(Record, m_personal_fb_list_toc) ->
	#m_personal_fb_list_toc{succ=Succ,reason=Reason,fb_info=Fb_info,today_count=Today_count,max_times=Max_times,last_fb_passed=Last_fb_passed,today_lost=Today_lost,max_lost=Max_lost,exp_get=Exp_get} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Fb_info =:= undefined of
		true ->
			Fb_infoFinal = [];
		false ->
			Fb_infoFinal = Fb_info
	end,
	case Today_count =:= undefined of
		true ->
				Today_countFinal = 0;
		false ->
			Today_countFinal = Today_count
	end,
	case Max_times =:= undefined of
		true ->
				Max_timesFinal = 0;
		false ->
			Max_timesFinal = Max_times
	end,
	case Last_fb_passed =:= undefined of
		true ->
				Last_fb_passedFinal = 0;
		false ->
			Last_fb_passedFinal = Last_fb_passed
	end,
	case Today_lost =:= undefined of
		true ->
				Today_lostFinal = 0;
		false ->
			Today_lostFinal = Today_lost
	end,
	case Max_lost =:= undefined of
		true ->
				Max_lostFinal = 0;
		false ->
			Max_lostFinal = Max_lost
	end,
	case Exp_get =:= undefined of
		true ->
				Exp_getFinal = 0;
		false ->
			Exp_getFinal = Exp_get
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Fb_info_bin = encode_p_personal_fb_infos(Fb_infoFinal, <<>>),
	SizeFb_infoFinal = erlang:length(Fb_infoFinal),
	BinLen_fb_info = erlang:byte_size(Fb_info_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,SizeFb_infoFinal:16, BinLen_fb_info:32, Fb_info_bin/binary,Today_countFinal:32/signed,Max_timesFinal:32/signed,Last_fb_passedFinal:32/signed,Today_lostFinal:32/signed,Max_lostFinal:32/signed,Exp_getFinal:32/signed>>;
encode_m_personal_fb_list_toc(_) -> 
	<<>>.

decode_m_personal_fb_list_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_Sizefb_info:16, BinLenfb_info:32, Bin2/binary>> = Bin1,
	<<SubBinfb_info:BinLenfb_info/binary, Bin3/binary>> = Bin2, 
	Fb_info = lists:reverse(decode_p_personal_fb_infos(SubBinfb_info, [])),
	<<Today_count:32/signed,Max_times:32/signed,Last_fb_passed:32/signed,Today_lost:32/signed,Max_lost:32/signed,Exp_get:32/signed>> = Bin3,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_personal_fb_list_toc, Succ,common_tool:to_list(Reason),Fb_info,Today_count,Max_times,Last_fb_passed,Today_lost,Max_lost,Exp_get};

decode_m_personal_fb_list_toc(_) ->
	undefined.
encode_m_personal_fb_enter_tos(Record) when is_record(Record, m_personal_fb_enter_tos) ->
	#m_personal_fb_enter_tos{fb_id=Fb_id} = Record,
	case Fb_id =:= undefined of
		true ->
				Fb_idFinal = undefined,
				exit({required_field_not_assigned, m_personal_fb_enter_tos, fb_id});
		false ->
			Fb_idFinal = Fb_id
	end,

	<<Fb_idFinal:32/signed>>;
encode_m_personal_fb_enter_tos(_) -> 
	<<>>.

decode_m_personal_fb_enter_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Fb_id:32/signed>> = Bin0,

	{m_personal_fb_enter_tos, Fb_id};

decode_m_personal_fb_enter_tos(_) ->
	undefined.
encode_m_personal_fb_enter_toc(Record) when is_record(Record, m_personal_fb_enter_toc) ->
	#m_personal_fb_enter_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_personal_fb_enter_toc(_) -> 
	<<>>.

decode_m_personal_fb_enter_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_personal_fb_enter_toc, Succ,common_tool:to_list(Reason)};

decode_m_personal_fb_enter_toc(_) ->
	undefined.
encode_m_personal_fb_lost_toc(Record) when is_record(Record, m_personal_fb_lost_toc) ->
	#m_personal_fb_lost_toc{} = Record,

	<<>>;
encode_m_personal_fb_lost_toc(_) -> 
	<<>>.

decode_m_personal_fb_lost_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_personal_fb_lost_toc};

decode_m_personal_fb_lost_toc(_) ->
	undefined.
encode_m_personal_fb_quit_tos(Record) when is_record(Record, m_personal_fb_quit_tos) ->
	#m_personal_fb_quit_tos{quit_type=Quit_type} = Record,
	case Quit_type =:= undefined of
		true ->
				Quit_typeFinal = undefined,
				exit({required_field_not_assigned, m_personal_fb_quit_tos, quit_type});
		false ->
			Quit_typeFinal = Quit_type
	end,

	<<Quit_typeFinal:32/signed>>;
encode_m_personal_fb_quit_tos(_) -> 
	<<>>.

decode_m_personal_fb_quit_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Quit_type:32/signed>> = Bin0,

	{m_personal_fb_quit_tos, Quit_type};

decode_m_personal_fb_quit_tos(_) ->
	undefined.
encode_m_personal_fb_quit_toc(Record) when is_record(Record, m_personal_fb_quit_toc) ->
	#m_personal_fb_quit_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_personal_fb_quit_toc(_) -> 
	<<>>.

decode_m_personal_fb_quit_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_personal_fb_quit_toc, Succ,common_tool:to_list(Reason)};

decode_m_personal_fb_quit_toc(_) ->
	undefined.
encode_m_personal_fb_next_level_tos(Record) when is_record(Record, m_personal_fb_next_level_tos) ->
	#m_personal_fb_next_level_tos{} = Record,

	<<>>;
encode_m_personal_fb_next_level_tos(_) -> 
	<<>>.

decode_m_personal_fb_next_level_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_personal_fb_next_level_tos};

decode_m_personal_fb_next_level_tos(_) ->
	undefined.
encode_m_personal_fb_next_level_toc(Record) when is_record(Record, m_personal_fb_next_level_toc) ->
	#m_personal_fb_next_level_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_personal_fb_next_level_toc(_) -> 
	<<>>.

decode_m_personal_fb_next_level_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_personal_fb_next_level_toc, Succ,common_tool:to_list(Reason)};

decode_m_personal_fb_next_level_toc(_) ->
	undefined.
encode_m_personal_fb_state_toc(Record) when is_record(Record, m_personal_fb_state_toc) ->
	#m_personal_fb_state_toc{total_monsters=Total_monsters,killed_count=Killed_count,exp_get=Exp_get,time_used=Time_used,is_boss_killed=Is_boss_killed,self_best=Self_best} = Record,
	case Total_monsters =:= undefined of
		true ->
				Total_monstersFinal = undefined,
				exit({required_field_not_assigned, m_personal_fb_state_toc, total_monsters});
		false ->
			Total_monstersFinal = Total_monsters
	end,
	case Killed_count =:= undefined of
		true ->
				Killed_countFinal = 0;
		false ->
			Killed_countFinal = Killed_count
	end,
	case Exp_get =:= undefined of
		true ->
				Exp_getFinal = 0;
		false ->
			Exp_getFinal = Exp_get
	end,
	case Time_used =:= undefined of
		true ->
				Time_usedFinal = 0;
		false ->
			Time_usedFinal = Time_used
	end,
	case Is_boss_killed =:= undefined of
		true ->
				Is_boss_killedFinal = 1;
		false ->
			case Is_boss_killed of
				true ->
					Is_boss_killedFinal = 1;
				false ->
					Is_boss_killedFinal = 0
			end
	end,
	case Self_best =:= undefined of
		true ->
				Self_bestFinal = 0;
		false ->
			Self_bestFinal = Self_best
	end,

	<<Total_monstersFinal:32/signed,Killed_countFinal:32/signed,Exp_getFinal:32/signed,Time_usedFinal:32/signed,Is_boss_killedFinal:8,Self_bestFinal:32/signed>>;
encode_m_personal_fb_state_toc(_) -> 
	<<>>.

decode_m_personal_fb_state_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Total_monsters:32/signed,Killed_count:32/signed,Exp_get:32/signed,Time_used:32/signed,Is_boss_killedTmp:8,Self_best:32/signed>> = Bin0,
case Is_boss_killedTmp of 
	1 -> 
		Is_boss_killed = true;
	_ ->
		Is_boss_killed = false
end,

	{m_personal_fb_state_toc, Total_monsters,Killed_count,Exp_get,Time_used,Is_boss_killed,Self_best};

decode_m_personal_fb_state_toc(_) ->
	undefined.
encode_p_personal_fb_info(Record) when is_record(Record, p_personal_fb_info) ->
	#p_personal_fb_info{fb_id=Fb_id,fb_name=Fb_name,state=State,best_time=Best_time,winner_id=Winner_id,winner_name=Winner_name,winner_faction_id=Winner_faction_id,best_self=Best_self} = Record,
	case Fb_id =:= undefined of
		true ->
				Fb_idFinal = undefined,
				exit({required_field_not_assigned, p_personal_fb_info, fb_id});
		false ->
			Fb_idFinal = Fb_id
	end,
	case Fb_name =:= undefined of
		true ->
				Fb_nameFinal = undefined,
				exit({required_field_not_assigned, p_personal_fb_info, fb_name});
		false ->
			Fb_nameFinal = Fb_name
	end,
	case State =:= undefined of
		true ->
				StateFinal = undefined,
				exit({required_field_not_assigned, p_personal_fb_info, state});
		false ->
			StateFinal = State
	end,
	case Best_time =:= undefined of
		true ->
				Best_timeFinal = 0;
		false ->
			Best_timeFinal = Best_time
	end,
	case Winner_id =:= undefined of
		true ->
				Winner_idFinal = 0;
		false ->
			Winner_idFinal = Winner_id
	end,
	case Winner_name =:= undefined of
		true ->
				Winner_nameFinal = <<>>;
		false ->
			Winner_nameFinal = Winner_name
	end,
	case Winner_faction_id =:= undefined of
		true ->
				Winner_faction_idFinal = 0;
		false ->
			Winner_faction_idFinal = Winner_faction_id
	end,
	case Best_self =:= undefined of
		true ->
				Best_selfFinal = 0;
		false ->
			Best_selfFinal = Best_self
	end,
	Fb_name2 = common_tool:to_binary(Fb_nameFinal),
	Fb_nameLen = erlang:byte_size(Fb_name2),
	Winner_name2 = common_tool:to_binary(Winner_nameFinal),
	Winner_nameLen = erlang:byte_size(Winner_name2),

	<<Fb_idFinal:32/signed,Fb_nameLen:16, Fb_name2/binary,StateFinal:32/signed,Best_timeFinal:32/signed,Winner_idFinal:32/signed,Winner_nameLen:16, Winner_name2/binary,Winner_faction_idFinal:32/signed,Best_selfFinal:32/signed>>;
encode_p_personal_fb_info(_) -> 
	<<>>.

decode_p_personal_fb_info(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Fb_id:32/signed,Fb_nameLen:16, Bin1/binary>> = Bin0,
	<<Fb_name:Fb_nameLen/binary,State:32/signed,Best_time:32/signed,Winner_id:32/signed,Winner_nameLen:16, Bin2/binary>> = Bin1,
	<<Winner_name:Winner_nameLen/binary,Winner_faction_id:32/signed,Best_self:32/signed>> = Bin2,

	{p_personal_fb_info, Fb_id,common_tool:to_list(Fb_name),State,Best_time,Winner_id,common_tool:to_list(Winner_name),Winner_faction_id,Best_self};

decode_p_personal_fb_info(_) ->
	undefined.
encode_m_accumulate_exp_info_tos(Record) when is_record(Record, m_accumulate_exp_info_tos) ->
	#m_accumulate_exp_info_tos{id=Id} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, m_accumulate_exp_info_tos, id});
		false ->
			IdFinal = Id
	end,

	<<IdFinal:32/signed>>;
encode_m_accumulate_exp_info_tos(_) -> 
	<<>>.

decode_m_accumulate_exp_info_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed>> = Bin0,

	{m_accumulate_exp_info_tos, Id};

decode_m_accumulate_exp_info_tos(_) ->
	undefined.
encode_m_accumulate_exp_info_toc(Record) when is_record(Record, m_accumulate_exp_info_toc) ->
	#m_accumulate_exp_info_toc{succ=Succ,reason=Reason,info=Info} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Info =:= undefined of
		true ->
				InfoFinal = 0;
		false ->
			InfoFinal = Info
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Info_bin = encode_p_accumulate_exp_info(InfoFinal),
	BinLen_info = erlang:byte_size(Info_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_info:32, Info_bin/binary>>;
encode_m_accumulate_exp_info_toc(_) -> 
	<<>>.

decode_m_accumulate_exp_info_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_SubBinSizeinfo:32, SubBininfo/binary>> = Bin1,
	Info = decode_p_accumulate_exp_info(SubBininfo),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_accumulate_exp_info_toc, Succ,common_tool:to_list(Reason),Info};

decode_m_accumulate_exp_info_toc(_) ->
	undefined.
encode_m_accumulate_exp_refresh_tos(Record) when is_record(Record, m_accumulate_exp_refresh_tos) ->
	#m_accumulate_exp_refresh_tos{id=Id,type=Type} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, m_accumulate_exp_refresh_tos, id});
		false ->
			IdFinal = Id
	end,
	case Type =:= undefined of
		true ->
				TypeFinal = undefined,
				exit({required_field_not_assigned, m_accumulate_exp_refresh_tos, type});
		false ->
			TypeFinal = Type
	end,

	<<IdFinal:32/signed,TypeFinal:32/signed>>;
encode_m_accumulate_exp_refresh_tos(_) -> 
	<<>>.

decode_m_accumulate_exp_refresh_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed,Type:32/signed>> = Bin0,

	{m_accumulate_exp_refresh_tos, Id,Type};

decode_m_accumulate_exp_refresh_tos(_) ->
	undefined.
encode_m_accumulate_exp_refresh_toc(Record) when is_record(Record, m_accumulate_exp_refresh_toc) ->
	#m_accumulate_exp_refresh_toc{succ=Succ,reason=Reason,result=Result,rate=Rate,exp=Exp,gold=Gold,id=Id,next_exp=Next_exp} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Result =:= undefined of
		true ->
				ResultFinal = 1;
		false ->
			case Result of
				true ->
					ResultFinal = 1;
				false ->
					ResultFinal = 0
			end
	end,
	case Rate =:= undefined of
		true ->
				RateFinal = 0;
		false ->
			RateFinal = Rate
	end,
	case Exp =:= undefined of
		true ->
				ExpFinal = 0.0;
		false ->
			ExpFinal = Exp
	end,
	case Gold =:= undefined of
		true ->
				GoldFinal = 0;
		false ->
			GoldFinal = Gold
	end,
	case Id =:= undefined of
		true ->
				IdFinal = 0;
		false ->
			IdFinal = Id
	end,
	case Next_exp =:= undefined of
		true ->
				Next_expFinal = 0.0;
		false ->
			Next_expFinal = Next_exp
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,ResultFinal:8,RateFinal:32/signed,ExpFinal:64/float,GoldFinal:32/signed,IdFinal:32/signed,Next_expFinal:64/float>>;
encode_m_accumulate_exp_refresh_toc(_) -> 
	<<>>.

decode_m_accumulate_exp_refresh_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,ResultTmp:8,Rate:32/signed,Exp:64,Gold:32/signed,Id:32/signed,Next_exp:64>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case ResultTmp of 
	1 -> 
		Result = true;
	_ ->
		Result = false
end,

	{m_accumulate_exp_refresh_toc, Succ,common_tool:to_list(Reason),Result,Rate,Exp,Gold,Id,Next_exp};

decode_m_accumulate_exp_refresh_toc(_) ->
	undefined.
encode_m_accumulate_exp_fetch_tos(Record) when is_record(Record, m_accumulate_exp_fetch_tos) ->
	#m_accumulate_exp_fetch_tos{id=Id} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, m_accumulate_exp_fetch_tos, id});
		false ->
			IdFinal = Id
	end,

	<<IdFinal:32/signed>>;
encode_m_accumulate_exp_fetch_tos(_) -> 
	<<>>.

decode_m_accumulate_exp_fetch_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed>> = Bin0,

	{m_accumulate_exp_fetch_tos, Id};

decode_m_accumulate_exp_fetch_tos(_) ->
	undefined.
encode_m_accumulate_exp_fetch_toc(Record) when is_record(Record, m_accumulate_exp_fetch_toc) ->
	#m_accumulate_exp_fetch_toc{succ=Succ,reason=Reason,exp=Exp,id=Id} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Exp =:= undefined of
		true ->
				ExpFinal = 0.0;
		false ->
			ExpFinal = Exp
	end,
	case Id =:= undefined of
		true ->
				IdFinal = 0;
		false ->
			IdFinal = Id
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,ExpFinal:64/float,IdFinal:32/signed>>;
encode_m_accumulate_exp_fetch_toc(_) -> 
	<<>>.

decode_m_accumulate_exp_fetch_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Exp:64,Id:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_accumulate_exp_fetch_toc, Succ,common_tool:to_list(Reason),Exp,Id};

decode_m_accumulate_exp_fetch_toc(_) ->
	undefined.
encode_m_accumulate_exp_notify_toc(Record) when is_record(Record, m_accumulate_exp_notify_toc) ->
	#m_accumulate_exp_notify_toc{list=List} = Record,
	case List =:= undefined of
		true ->
			ListFinal = [];
		false ->
			ListFinal = List
	end,
	List_bin = encode_p_accumulate_exp_infos(ListFinal, <<>>),
	SizeListFinal = erlang:length(ListFinal),
	BinLen_list = erlang:byte_size(List_bin),

	<<SizeListFinal:16, BinLen_list:32, List_bin/binary>>;
encode_m_accumulate_exp_notify_toc(_) -> 
	<<>>.

decode_m_accumulate_exp_notify_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizelist:16, _BinLenlist:32, SubBinlist/binary>> = Bin0,
	List = lists:reverse(decode_p_accumulate_exp_infos(SubBinlist, [])),

	{m_accumulate_exp_notify_toc, List};

decode_m_accumulate_exp_notify_toc(_) ->
	undefined.
encode_m_accumulate_exp_list_tos(Record) when is_record(Record, m_accumulate_exp_list_tos) ->
	#m_accumulate_exp_list_tos{} = Record,

	<<>>;
encode_m_accumulate_exp_list_tos(_) -> 
	<<>>.

decode_m_accumulate_exp_list_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_accumulate_exp_list_tos};

decode_m_accumulate_exp_list_tos(_) ->
	undefined.
encode_m_accumulate_exp_list_toc(Record) when is_record(Record, m_accumulate_exp_list_toc) ->
	#m_accumulate_exp_list_toc{succ=Succ,reason=Reason,list=List} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case List =:= undefined of
		true ->
			ListFinal = [];
		false ->
			ListFinal = List
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	List_bin = encode_p_accumulate_exp_infos(ListFinal, <<>>),
	SizeListFinal = erlang:length(ListFinal),
	BinLen_list = erlang:byte_size(List_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,SizeListFinal:16, BinLen_list:32, List_bin/binary>>;
encode_m_accumulate_exp_list_toc(_) -> 
	<<>>.

decode_m_accumulate_exp_list_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_Sizelist:16, _BinLenlist:32, SubBinlist/binary>> = Bin1,
	List = lists:reverse(decode_p_accumulate_exp_infos(SubBinlist, [])),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_accumulate_exp_list_toc, Succ,common_tool:to_list(Reason),List};

decode_m_accumulate_exp_list_toc(_) ->
	undefined.
encode_m_trap_enter_toc(Record) when is_record(Record, m_trap_enter_toc) ->
	#m_trap_enter_toc{trap_list=Trap_list} = Record,
	case Trap_list =:= undefined of
		true ->
			Trap_listFinal = [];
		false ->
			Trap_listFinal = Trap_list
	end,
	Trap_list_bin = encode_p_map_traps(Trap_listFinal, <<>>),
	SizeTrap_listFinal = erlang:length(Trap_listFinal),
	BinLen_trap_list = erlang:byte_size(Trap_list_bin),

	<<SizeTrap_listFinal:16, BinLen_trap_list:32, Trap_list_bin/binary>>;
encode_m_trap_enter_toc(_) -> 
	<<>>.

decode_m_trap_enter_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizetrap_list:16, _BinLentrap_list:32, SubBintrap_list/binary>> = Bin0,
	Trap_list = lists:reverse(decode_p_map_traps(SubBintrap_list, [])),

	{m_trap_enter_toc, Trap_list};

decode_m_trap_enter_toc(_) ->
	undefined.
encode_m_trap_quit_toc(Record) when is_record(Record, m_trap_quit_toc) ->
	#m_trap_quit_toc{trap_id=Trap_id} = Record,
	case Trap_id =:= undefined of
		true ->
			Trap_idFinal = [];
		false ->
			Trap_idFinal = Trap_id
	end,
	Trap_id_bin = encode_int32s(Trap_idFinal, <<>>),
	SizeTrap_idFinal = erlang:length(Trap_idFinal),
	BinLen_trap_id = erlang:byte_size(Trap_id_bin),

	<<SizeTrap_idFinal:16, BinLen_trap_id:32, Trap_id_bin/binary>>;
encode_m_trap_quit_toc(_) -> 
	<<>>.

decode_m_trap_quit_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizetrap_id:16, _BinLentrap_id:32, SubBintrap_id/binary>> = Bin0,
	Trap_id = lists:reverse(decode_int32s(SubBintrap_id, [])),

	{m_trap_quit_toc, Trap_id};

decode_m_trap_quit_toc(_) ->
	undefined.
encode_m_vip_info_toc(Record) when is_record(Record, m_vip_info_toc) ->
	#m_vip_info_toc{succ=Succ,reason=Reason,vip_info=Vip_info} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Vip_info =:= undefined of
		true ->
				Vip_infoFinal = 0;
		false ->
			Vip_infoFinal = Vip_info
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Vip_info_bin = encode_p_role_vip(Vip_infoFinal),
	BinLen_vip_info = erlang:byte_size(Vip_info_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_vip_info:32, Vip_info_bin/binary>>;
encode_m_vip_info_toc(_) -> 
	<<>>.

decode_m_vip_info_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_SubBinSizevip_info:32, SubBinvip_info/binary>> = Bin1,
	Vip_info = decode_p_role_vip(SubBinvip_info),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_vip_info_toc, Succ,common_tool:to_list(Reason),Vip_info};

decode_m_vip_info_toc(_) ->
	undefined.
encode_m_vip_remote_depot_tos(Record) when is_record(Record, m_vip_remote_depot_tos) ->
	#m_vip_remote_depot_tos{} = Record,

	<<>>;
encode_m_vip_remote_depot_tos(_) -> 
	<<>>.

decode_m_vip_remote_depot_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_vip_remote_depot_tos};

decode_m_vip_remote_depot_tos(_) ->
	undefined.
encode_m_vip_remote_depot_toc(Record) when is_record(Record, m_vip_remote_depot_toc) ->
	#m_vip_remote_depot_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_vip_remote_depot_toc(_) -> 
	<<>>.

decode_m_vip_remote_depot_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_vip_remote_depot_toc, Succ,common_tool:to_list(Reason)};

decode_m_vip_remote_depot_toc(_) ->
	undefined.
encode_m_vip_active_tos(Record) when is_record(Record, m_vip_active_tos) ->
	#m_vip_active_tos{vip_type=Vip_type} = Record,
	case Vip_type =:= undefined of
		true ->
				Vip_typeFinal = undefined,
				exit({required_field_not_assigned, m_vip_active_tos, vip_type});
		false ->
			Vip_typeFinal = Vip_type
	end,

	<<Vip_typeFinal:32/signed>>;
encode_m_vip_active_tos(_) -> 
	<<>>.

decode_m_vip_active_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Vip_type:32/signed>> = Bin0,

	{m_vip_active_tos, Vip_type};

decode_m_vip_active_tos(_) ->
	undefined.
encode_m_vip_active_toc(Record) when is_record(Record, m_vip_active_toc) ->
	#m_vip_active_toc{succ=Succ,reason=Reason,vip_info=Vip_info,gold=Gold,item=Item} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Vip_info =:= undefined of
		true ->
				Vip_infoFinal = 0;
		false ->
			Vip_infoFinal = Vip_info
	end,
	case Gold =:= undefined of
		true ->
				GoldFinal = 0;
		false ->
			GoldFinal = Gold
	end,
	case Item =:= undefined of
		true ->
				ItemFinal = 0;
		false ->
			ItemFinal = Item
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Vip_info_bin = encode_p_role_vip(Vip_infoFinal),
	BinLen_vip_info = erlang:byte_size(Vip_info_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_vip_info:32, Vip_info_bin/binary,GoldFinal:32/signed,ItemFinal:32/signed>>;
encode_m_vip_active_toc(_) -> 
	<<>>.

decode_m_vip_active_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,SubBinSizevip_info:32, Bin2/binary>> = Bin1,
	<<SubBinvip_info:SubBinSizevip_info/binary, Bin3/binary>> = Bin2,
	Vip_info = decode_p_role_vip(SubBinvip_info),
	<<Gold:32/signed,Item:32/signed>> = Bin3,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_vip_active_toc, Succ,common_tool:to_list(Reason),Vip_info,Gold,Item};

decode_m_vip_active_toc(_) ->
	undefined.
encode_m_vip_multi_exp_tos(Record) when is_record(Record, m_vip_multi_exp_tos) ->
	#m_vip_multi_exp_tos{} = Record,

	<<>>;
encode_m_vip_multi_exp_tos(_) -> 
	<<>>.

decode_m_vip_multi_exp_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_vip_multi_exp_tos};

decode_m_vip_multi_exp_tos(_) ->
	undefined.
encode_m_vip_multi_exp_toc(Record) when is_record(Record, m_vip_multi_exp_toc) ->
	#m_vip_multi_exp_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_vip_multi_exp_toc(_) -> 
	<<>>.

decode_m_vip_multi_exp_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_vip_multi_exp_toc, Succ,common_tool:to_list(Reason)};

decode_m_vip_multi_exp_toc(_) ->
	undefined.
encode_m_vip_stop_notify_tos(Record) when is_record(Record, m_vip_stop_notify_tos) ->
	#m_vip_stop_notify_tos{notify_type=Notify_type} = Record,
	case Notify_type =:= undefined of
		true ->
				Notify_typeFinal = undefined,
				exit({required_field_not_assigned, m_vip_stop_notify_tos, notify_type});
		false ->
			Notify_typeFinal = Notify_type
	end,

	<<Notify_typeFinal:32/signed>>;
encode_m_vip_stop_notify_tos(_) -> 
	<<>>.

decode_m_vip_stop_notify_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Notify_type:32/signed>> = Bin0,

	{m_vip_stop_notify_tos, Notify_type};

decode_m_vip_stop_notify_tos(_) ->
	undefined.
encode_m_vip_stop_notify_toc(Record) when is_record(Record, m_vip_stop_notify_toc) ->
	#m_vip_stop_notify_toc{succ=Succ,reason=Reason,notify_type=Notify_type} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Notify_type =:= undefined of
		true ->
				Notify_typeFinal = 0;
		false ->
			Notify_typeFinal = Notify_type
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Notify_typeFinal:32/signed>>;
encode_m_vip_stop_notify_toc(_) -> 
	<<>>.

decode_m_vip_stop_notify_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Notify_type:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_vip_stop_notify_toc, Succ,common_tool:to_list(Reason),Notify_type};

decode_m_vip_stop_notify_toc(_) ->
	undefined.
encode_m_vip_list_tos(Record) when is_record(Record, m_vip_list_tos) ->
	#m_vip_list_tos{page_id=Page_id} = Record,
	case Page_id =:= undefined of
		true ->
				Page_idFinal = undefined,
				exit({required_field_not_assigned, m_vip_list_tos, page_id});
		false ->
			Page_idFinal = Page_id
	end,

	<<Page_idFinal:32/signed>>;
encode_m_vip_list_tos(_) -> 
	<<>>.

decode_m_vip_list_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Page_id:32/signed>> = Bin0,

	{m_vip_list_tos, Page_id};

decode_m_vip_list_tos(_) ->
	undefined.
encode_m_vip_list_toc(Record) when is_record(Record, m_vip_list_toc) ->
	#m_vip_list_toc{succ=Succ,reason=Reason,vip_list=Vip_list,max_page=Max_page} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Vip_list =:= undefined of
		true ->
			Vip_listFinal = [];
		false ->
			Vip_listFinal = Vip_list
	end,
	case Max_page =:= undefined of
		true ->
				Max_pageFinal = 0;
		false ->
			Max_pageFinal = Max_page
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Vip_list_bin = encode_p_vip_list_infos(Vip_listFinal, <<>>),
	SizeVip_listFinal = erlang:length(Vip_listFinal),
	BinLen_vip_list = erlang:byte_size(Vip_list_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,SizeVip_listFinal:16, BinLen_vip_list:32, Vip_list_bin/binary,Max_pageFinal:32/signed>>;
encode_m_vip_list_toc(_) -> 
	<<>>.

decode_m_vip_list_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_Sizevip_list:16, BinLenvip_list:32, Bin2/binary>> = Bin1,
	<<SubBinvip_list:BinLenvip_list/binary, Bin3/binary>> = Bin2, 
	Vip_list = lists:reverse(decode_p_vip_list_infos(SubBinvip_list, [])),
	<<Max_page:32/signed>> = Bin3,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_vip_list_toc, Succ,common_tool:to_list(Reason),Vip_list,Max_page};

decode_m_vip_list_toc(_) ->
	undefined.
encode_m_vip_exchange_prestige_tos(Record) when is_record(Record, m_vip_exchange_prestige_tos) ->
	#m_vip_exchange_prestige_tos{} = Record,

	<<>>;
encode_m_vip_exchange_prestige_tos(_) -> 
	<<>>.

decode_m_vip_exchange_prestige_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_vip_exchange_prestige_tos};

decode_m_vip_exchange_prestige_tos(_) ->
	undefined.
encode_m_vip_exchange_prestige_toc(Record) when is_record(Record, m_vip_exchange_prestige_toc) ->
	#m_vip_exchange_prestige_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_vip_exchange_prestige_toc(_) -> 
	<<>>.

decode_m_vip_exchange_prestige_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_vip_exchange_prestige_toc, Succ,common_tool:to_list(Reason)};

decode_m_vip_exchange_prestige_toc(_) ->
	undefined.
encode_m_fmldepot_list_goods_tos(Record) when is_record(Record, m_fmldepot_list_goods_tos) ->
	#m_fmldepot_list_goods_tos{} = Record,

	<<>>;
encode_m_fmldepot_list_goods_tos(_) -> 
	<<>>.

decode_m_fmldepot_list_goods_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_fmldepot_list_goods_tos};

decode_m_fmldepot_list_goods_tos(_) ->
	undefined.
encode_m_fmldepot_list_goods_toc(Record) when is_record(Record, m_fmldepot_list_goods_toc) ->
	#m_fmldepot_list_goods_toc{depots=Depots} = Record,
	case Depots =:= undefined of
		true ->
			DepotsFinal = [];
		false ->
			DepotsFinal = Depots
	end,
	Depots_bin = encode_p_fmldepot_bags(DepotsFinal, <<>>),
	SizeDepotsFinal = erlang:length(DepotsFinal),
	BinLen_depots = erlang:byte_size(Depots_bin),

	<<SizeDepotsFinal:16, BinLen_depots:32, Depots_bin/binary>>;
encode_m_fmldepot_list_goods_toc(_) -> 
	<<>>.

decode_m_fmldepot_list_goods_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizedepots:16, _BinLendepots:32, SubBindepots/binary>> = Bin0,
	Depots = lists:reverse(decode_p_fmldepot_bags(SubBindepots, [])),

	{m_fmldepot_list_goods_toc, Depots};

decode_m_fmldepot_list_goods_toc(_) ->
	undefined.
encode_m_fmldepot_create_tos(Record) when is_record(Record, m_fmldepot_create_tos) ->
	#m_fmldepot_create_tos{bag_id=Bag_id} = Record,
	case Bag_id =:= undefined of
		true ->
				Bag_idFinal = undefined,
				exit({required_field_not_assigned, m_fmldepot_create_tos, bag_id});
		false ->
			Bag_idFinal = Bag_id
	end,

	<<Bag_idFinal:32/signed>>;
encode_m_fmldepot_create_tos(_) -> 
	<<>>.

decode_m_fmldepot_create_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Bag_id:32/signed>> = Bin0,

	{m_fmldepot_create_tos, Bag_id};

decode_m_fmldepot_create_tos(_) ->
	undefined.
encode_m_fmldepot_create_toc(Record) when is_record(Record, m_fmldepot_create_toc) ->
	#m_fmldepot_create_toc{succ=Succ,reason=Reason,return_self=Return_self,bag_id=Bag_id} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_fmldepot_create_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
			case Return_self of
				true ->
					Return_selfFinal = 1;
				false ->
					Return_selfFinal = 0
			end
	end,
	case Bag_id =:= undefined of
		true ->
				Bag_idFinal = 0;
		false ->
			Bag_idFinal = Bag_id
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Return_selfFinal:8,Bag_idFinal:32/signed>>;
encode_m_fmldepot_create_toc(_) -> 
	<<>>.

decode_m_fmldepot_create_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Return_selfTmp:8,Bag_id:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_fmldepot_create_toc, Succ,common_tool:to_list(Reason),Return_self,Bag_id};

decode_m_fmldepot_create_toc(_) ->
	undefined.
encode_m_fmldepot_putin_tos(Record) when is_record(Record, m_fmldepot_putin_tos) ->
	#m_fmldepot_putin_tos{bag_id=Bag_id,goods_id=Goods_id} = Record,
	case Bag_id =:= undefined of
		true ->
				Bag_idFinal = undefined,
				exit({required_field_not_assigned, m_fmldepot_putin_tos, bag_id});
		false ->
			Bag_idFinal = Bag_id
	end,
	case Goods_id =:= undefined of
		true ->
				Goods_idFinal = undefined,
				exit({required_field_not_assigned, m_fmldepot_putin_tos, goods_id});
		false ->
			Goods_idFinal = Goods_id
	end,

	<<Bag_idFinal:32/signed,Goods_idFinal:32/signed>>;
encode_m_fmldepot_putin_tos(_) -> 
	<<>>.

decode_m_fmldepot_putin_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Bag_id:32/signed,Goods_id:32/signed>> = Bin0,

	{m_fmldepot_putin_tos, Bag_id,Goods_id};

decode_m_fmldepot_putin_tos(_) ->
	undefined.
encode_m_fmldepot_putin_toc(Record) when is_record(Record, m_fmldepot_putin_toc) ->
	#m_fmldepot_putin_toc{succ=Succ,reason=Reason,add_goods=Add_goods} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Add_goods =:= undefined of
		true ->
				Add_goodsFinal = 0;
		false ->
			Add_goodsFinal = Add_goods
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Add_goods_bin = encode_p_goods(Add_goodsFinal),
	BinLen_add_goods = erlang:byte_size(Add_goods_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_add_goods:32, Add_goods_bin/binary>>;
encode_m_fmldepot_putin_toc(_) -> 
	<<>>.

decode_m_fmldepot_putin_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_SubBinSizeadd_goods:32, SubBinadd_goods/binary>> = Bin1,
	Add_goods = decode_p_goods(SubBinadd_goods),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_fmldepot_putin_toc, Succ,common_tool:to_list(Reason),Add_goods};

decode_m_fmldepot_putin_toc(_) ->
	undefined.
encode_m_fmldepot_getout_tos(Record) when is_record(Record, m_fmldepot_getout_tos) ->
	#m_fmldepot_getout_tos{bag_id=Bag_id,goods_id=Goods_id,num=Num} = Record,
	case Bag_id =:= undefined of
		true ->
				Bag_idFinal = undefined,
				exit({required_field_not_assigned, m_fmldepot_getout_tos, bag_id});
		false ->
			Bag_idFinal = Bag_id
	end,
	case Goods_id =:= undefined of
		true ->
				Goods_idFinal = undefined,
				exit({required_field_not_assigned, m_fmldepot_getout_tos, goods_id});
		false ->
			Goods_idFinal = Goods_id
	end,
	case Num =:= undefined of
		true ->
				NumFinal = undefined,
				exit({required_field_not_assigned, m_fmldepot_getout_tos, num});
		false ->
			NumFinal = Num
	end,

	<<Bag_idFinal:32/signed,Goods_idFinal:32/signed,NumFinal:32/signed>>;
encode_m_fmldepot_getout_tos(_) -> 
	<<>>.

decode_m_fmldepot_getout_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Bag_id:32/signed,Goods_id:32/signed,Num:32/signed>> = Bin0,

	{m_fmldepot_getout_tos, Bag_id,Goods_id,Num};

decode_m_fmldepot_getout_tos(_) ->
	undefined.
encode_m_fmldepot_getout_toc(Record) when is_record(Record, m_fmldepot_getout_toc) ->
	#m_fmldepot_getout_toc{succ=Succ,reason=Reason,goods_id=Goods_id,remain_num=Remain_num} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Goods_id =:= undefined of
		true ->
				Goods_idFinal = 0;
		false ->
			Goods_idFinal = Goods_id
	end,
	case Remain_num =:= undefined of
		true ->
				Remain_numFinal = 0;
		false ->
			Remain_numFinal = Remain_num
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Goods_idFinal:32/signed,Remain_numFinal:32/signed>>;
encode_m_fmldepot_getout_toc(_) -> 
	<<>>.

decode_m_fmldepot_getout_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Goods_id:32/signed,Remain_num:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_fmldepot_getout_toc, Succ,common_tool:to_list(Reason),Goods_id,Remain_num};

decode_m_fmldepot_getout_toc(_) ->
	undefined.
encode_m_fmldepot_update_goods_toc(Record) when is_record(Record, m_fmldepot_update_goods_toc) ->
	#m_fmldepot_update_goods_toc{update_type=Update_type,goods=Goods} = Record,
	case Update_type =:= undefined of
		true ->
				Update_typeFinal = undefined,
				exit({required_field_not_assigned, m_fmldepot_update_goods_toc, update_type});
		false ->
			Update_typeFinal = Update_type
	end,
	case Goods =:= undefined of
		true ->
			GoodsFinal = [];
		false ->
			GoodsFinal = Goods
	end,
	Goods_bin = encode_p_goodss(GoodsFinal, <<>>),
	SizeGoodsFinal = erlang:length(GoodsFinal),
	BinLen_goods = erlang:byte_size(Goods_bin),

	<<Update_typeFinal:32/signed,SizeGoodsFinal:16, BinLen_goods:32, Goods_bin/binary>>;
encode_m_fmldepot_update_goods_toc(_) -> 
	<<>>.

decode_m_fmldepot_update_goods_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Update_type:32/signed,_Sizegoods:16, _BinLengoods:32, SubBingoods/binary>> = Bin0,
	Goods = lists:reverse(decode_p_goodss(SubBingoods, [])),

	{m_fmldepot_update_goods_toc, Update_type,Goods};

decode_m_fmldepot_update_goods_toc(_) ->
	undefined.
encode_m_fmldepot_list_log_tos(Record) when is_record(Record, m_fmldepot_list_log_tos) ->
	#m_fmldepot_list_log_tos{log_type=Log_type,page_num=Page_num} = Record,
	case Log_type =:= undefined of
		true ->
				Log_typeFinal = undefined,
				exit({required_field_not_assigned, m_fmldepot_list_log_tos, log_type});
		false ->
			Log_typeFinal = Log_type
	end,
	case Page_num =:= undefined of
		true ->
				Page_numFinal = 1;
		false ->
			Page_numFinal = Page_num
	end,

	<<Log_typeFinal:32/signed,Page_numFinal:32/signed>>;
encode_m_fmldepot_list_log_tos(_) -> 
	<<>>.

decode_m_fmldepot_list_log_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Log_type:32/signed,Page_num:32/signed>> = Bin0,

	{m_fmldepot_list_log_tos, Log_type,Page_num};

decode_m_fmldepot_list_log_tos(_) ->
	undefined.
encode_m_fmldepot_list_log_toc(Record) when is_record(Record, m_fmldepot_list_log_toc) ->
	#m_fmldepot_list_log_toc{succ=Succ,reason=Reason,log_type=Log_type,log_count=Log_count,page_num=Page_num,logs=Logs} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Log_type =:= undefined of
		true ->
				Log_typeFinal = 0;
		false ->
			Log_typeFinal = Log_type
	end,
	case Log_count =:= undefined of
		true ->
				Log_countFinal = 0;
		false ->
			Log_countFinal = Log_count
	end,
	case Page_num =:= undefined of
		true ->
				Page_numFinal = 1;
		false ->
			Page_numFinal = Page_num
	end,
	case Logs =:= undefined of
		true ->
			LogsFinal = [];
		false ->
			LogsFinal = Logs
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Logs_bin = encode_p_fmldepot_logs(LogsFinal, <<>>),
	SizeLogsFinal = erlang:length(LogsFinal),
	BinLen_logs = erlang:byte_size(Logs_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Log_typeFinal:32/signed,Log_countFinal:32/signed,Page_numFinal:32/signed,SizeLogsFinal:16, BinLen_logs:32, Logs_bin/binary>>;
encode_m_fmldepot_list_log_toc(_) -> 
	<<>>.

decode_m_fmldepot_list_log_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Log_type:32/signed,Log_count:32/signed,Page_num:32/signed,_Sizelogs:16, _BinLenlogs:32, SubBinlogs/binary>> = Bin1,
	Logs = lists:reverse(decode_p_fmldepot_logs(SubBinlogs, [])),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_fmldepot_list_log_toc, Succ,common_tool:to_list(Reason),Log_type,Log_count,Page_num,Logs};

decode_m_fmldepot_list_log_toc(_) ->
	undefined.
encode_m_scene_war_fb_enter_tos(Record) when is_record(Record, m_scene_war_fb_enter_tos) ->
	#m_scene_war_fb_enter_tos{npc_id=Npc_id,fb_type=Fb_type,fb_level=Fb_level,fb_id=Fb_id,fb_seconds=Fb_seconds} = Record,
	case Npc_id =:= undefined of
		true ->
				Npc_idFinal = 0;
		false ->
			Npc_idFinal = Npc_id
	end,
	case Fb_type =:= undefined of
		true ->
				Fb_typeFinal = 0;
		false ->
			Fb_typeFinal = Fb_type
	end,
	case Fb_level =:= undefined of
		true ->
				Fb_levelFinal = 0;
		false ->
			Fb_levelFinal = Fb_level
	end,
	case Fb_id =:= undefined of
		true ->
				Fb_idFinal = 0;
		false ->
			Fb_idFinal = Fb_id
	end,
	case Fb_seconds =:= undefined of
		true ->
				Fb_secondsFinal = 0;
		false ->
			Fb_secondsFinal = Fb_seconds
	end,

	<<Npc_idFinal:32/signed,Fb_typeFinal:32/signed,Fb_levelFinal:32/signed,Fb_idFinal:32/signed,Fb_secondsFinal:32/signed>>;
encode_m_scene_war_fb_enter_tos(_) -> 
	<<>>.

decode_m_scene_war_fb_enter_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Npc_id:32/signed,Fb_type:32/signed,Fb_level:32/signed,Fb_id:32/signed,Fb_seconds:32/signed>> = Bin0,

	{m_scene_war_fb_enter_tos, Npc_id,Fb_type,Fb_level,Fb_id,Fb_seconds};

decode_m_scene_war_fb_enter_tos(_) ->
	undefined.
encode_m_scene_war_fb_enter_toc(Record) when is_record(Record, m_scene_war_fb_enter_toc) ->
	#m_scene_war_fb_enter_toc{succ=Succ,return_self=Return_self,reason=Reason,reason_code=Reason_code,fb_fee=Fb_fee,fb_times=Fb_times,npc_id=Npc_id,fb_type=Fb_type,fb_level=Fb_level,fb_id=Fb_id,fb_seconds=Fb_seconds,fb_max_times=Fb_max_times} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Reason_code =:= undefined of
		true ->
				Reason_codeFinal = 0;
		false ->
			Reason_codeFinal = Reason_code
	end,
	case Fb_fee =:= undefined of
		true ->
				Fb_feeFinal = 0;
		false ->
			Fb_feeFinal = Fb_fee
	end,
	case Fb_times =:= undefined of
		true ->
				Fb_timesFinal = 0;
		false ->
			Fb_timesFinal = Fb_times
	end,
	case Npc_id =:= undefined of
		true ->
				Npc_idFinal = 0;
		false ->
			Npc_idFinal = Npc_id
	end,
	case Fb_type =:= undefined of
		true ->
				Fb_typeFinal = 0;
		false ->
			Fb_typeFinal = Fb_type
	end,
	case Fb_level =:= undefined of
		true ->
				Fb_levelFinal = 0;
		false ->
			Fb_levelFinal = Fb_level
	end,
	case Fb_id =:= undefined of
		true ->
				Fb_idFinal = 0;
		false ->
			Fb_idFinal = Fb_id
	end,
	case Fb_seconds =:= undefined of
		true ->
				Fb_secondsFinal = 0;
		false ->
			Fb_secondsFinal = Fb_seconds
	end,
	case Fb_max_times =:= undefined of
		true ->
				Fb_max_timesFinal = 0;
		false ->
			Fb_max_timesFinal = Fb_max_times
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,Return_selfFinal:8,ReasonLen:16, Reason2/binary,Reason_codeFinal:32/signed,Fb_feeFinal:32/signed,Fb_timesFinal:32/signed,Npc_idFinal:32/signed,Fb_typeFinal:32/signed,Fb_levelFinal:32/signed,Fb_idFinal:32/signed,Fb_secondsFinal:32/signed,Fb_max_timesFinal:32/signed>>;
encode_m_scene_war_fb_enter_toc(_) -> 
	<<>>.

decode_m_scene_war_fb_enter_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,Return_selfTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Reason_code:32/signed,Fb_fee:32/signed,Fb_times:32/signed,Npc_id:32/signed,Fb_type:32/signed,Fb_level:32/signed,Fb_id:32/signed,Fb_seconds:32/signed,Fb_max_times:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_scene_war_fb_enter_toc, Succ,Return_self,common_tool:to_list(Reason),Reason_code,Fb_fee,Fb_times,Npc_id,Fb_type,Fb_level,Fb_id,Fb_seconds,Fb_max_times};

decode_m_scene_war_fb_enter_toc(_) ->
	undefined.
encode_m_scene_war_fb_quit_tos(Record) when is_record(Record, m_scene_war_fb_quit_tos) ->
	#m_scene_war_fb_quit_tos{npc_id=Npc_id} = Record,
	case Npc_id =:= undefined of
		true ->
				Npc_idFinal = 0;
		false ->
			Npc_idFinal = Npc_id
	end,

	<<Npc_idFinal:32/signed>>;
encode_m_scene_war_fb_quit_tos(_) -> 
	<<>>.

decode_m_scene_war_fb_quit_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Npc_id:32/signed>> = Bin0,

	{m_scene_war_fb_quit_tos, Npc_id};

decode_m_scene_war_fb_quit_tos(_) ->
	undefined.
encode_m_scene_war_fb_quit_toc(Record) when is_record(Record, m_scene_war_fb_quit_toc) ->
	#m_scene_war_fb_quit_toc{succ=Succ,reason=Reason,reason_code=Reason_code,npc_id=Npc_id,fb_type=Fb_type,fb_level=Fb_level} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Reason_code =:= undefined of
		true ->
				Reason_codeFinal = 0;
		false ->
			Reason_codeFinal = Reason_code
	end,
	case Npc_id =:= undefined of
		true ->
				Npc_idFinal = 0;
		false ->
			Npc_idFinal = Npc_id
	end,
	case Fb_type =:= undefined of
		true ->
				Fb_typeFinal = 0;
		false ->
			Fb_typeFinal = Fb_type
	end,
	case Fb_level =:= undefined of
		true ->
				Fb_levelFinal = 0;
		false ->
			Fb_levelFinal = Fb_level
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Reason_codeFinal:32/signed,Npc_idFinal:32/signed,Fb_typeFinal:32/signed,Fb_levelFinal:32/signed>>;
encode_m_scene_war_fb_quit_toc(_) -> 
	<<>>.

decode_m_scene_war_fb_quit_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Reason_code:32/signed,Npc_id:32/signed,Fb_type:32/signed,Fb_level:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_scene_war_fb_quit_toc, Succ,common_tool:to_list(Reason),Reason_code,Npc_id,Fb_type,Fb_level};

decode_m_scene_war_fb_quit_toc(_) ->
	undefined.
encode_m_scene_war_fb_query_tos(Record) when is_record(Record, m_scene_war_fb_query_tos) ->
	#m_scene_war_fb_query_tos{op_type=Op_type,npc_id=Npc_id} = Record,
	case Op_type =:= undefined of
		true ->
				Op_typeFinal = 0;
		false ->
			Op_typeFinal = Op_type
	end,
	case Npc_id =:= undefined of
		true ->
				Npc_idFinal = 0;
		false ->
			Npc_idFinal = Npc_id
	end,

	<<Op_typeFinal:32/signed,Npc_idFinal:32/signed>>;
encode_m_scene_war_fb_query_tos(_) -> 
	<<>>.

decode_m_scene_war_fb_query_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Op_type:32/signed,Npc_id:32/signed>> = Bin0,

	{m_scene_war_fb_query_tos, Op_type,Npc_id};

decode_m_scene_war_fb_query_tos(_) ->
	undefined.
encode_m_scene_war_fb_query_toc(Record) when is_record(Record, m_scene_war_fb_query_toc) ->
	#m_scene_war_fb_query_toc{succ=Succ,op_type=Op_type,npc_id=Npc_id,reason=Reason,reason_code=Reason_code,fb_links=Fb_links} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Op_type =:= undefined of
		true ->
				Op_typeFinal = 0;
		false ->
			Op_typeFinal = Op_type
	end,
	case Npc_id =:= undefined of
		true ->
				Npc_idFinal = 0;
		false ->
			Npc_idFinal = Npc_id
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Reason_code =:= undefined of
		true ->
				Reason_codeFinal = 0;
		false ->
			Reason_codeFinal = Reason_code
	end,
	case Fb_links =:= undefined of
		true ->
			Fb_linksFinal = [];
		false ->
			Fb_linksFinal = Fb_links
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Fb_links_bin = encode_p_scene_war_fb_links(Fb_linksFinal, <<>>),
	SizeFb_linksFinal = erlang:length(Fb_linksFinal),
	BinLen_fb_links = erlang:byte_size(Fb_links_bin),

	<<SuccFinal:8,Op_typeFinal:32/signed,Npc_idFinal:32/signed,ReasonLen:16, Reason2/binary,Reason_codeFinal:32/signed,SizeFb_linksFinal:16, BinLen_fb_links:32, Fb_links_bin/binary>>;
encode_m_scene_war_fb_query_toc(_) -> 
	<<>>.

decode_m_scene_war_fb_query_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,Op_type:32/signed,Npc_id:32/signed,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Reason_code:32/signed,_Sizefb_links:16, _BinLenfb_links:32, SubBinfb_links/binary>> = Bin1,
	Fb_links = lists:reverse(decode_p_scene_war_fb_links(SubBinfb_links, [])),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_scene_war_fb_query_toc, Succ,Op_type,Npc_id,common_tool:to_list(Reason),Reason_code,Fb_links};

decode_m_scene_war_fb_query_toc(_) ->
	undefined.
encode_m_scene_war_fb_call_monster_tos(Record) when is_record(Record, m_scene_war_fb_call_monster_tos) ->
	#m_scene_war_fb_call_monster_tos{npc_id=Npc_id,pass_id=Pass_id} = Record,
	case Npc_id =:= undefined of
		true ->
				Npc_idFinal = 0;
		false ->
			Npc_idFinal = Npc_id
	end,
	case Pass_id =:= undefined of
		true ->
				Pass_idFinal = 0;
		false ->
			Pass_idFinal = Pass_id
	end,

	<<Npc_idFinal:32/signed,Pass_idFinal:32/signed>>;
encode_m_scene_war_fb_call_monster_tos(_) -> 
	<<>>.

decode_m_scene_war_fb_call_monster_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Npc_id:32/signed,Pass_id:32/signed>> = Bin0,

	{m_scene_war_fb_call_monster_tos, Npc_id,Pass_id};

decode_m_scene_war_fb_call_monster_tos(_) ->
	undefined.
encode_m_scene_war_fb_call_monster_toc(Record) when is_record(Record, m_scene_war_fb_call_monster_toc) ->
	#m_scene_war_fb_call_monster_toc{op_type=Op_type,succ=Succ,reason=Reason,reason_code=Reason_code,npc_id=Npc_id,pass_id=Pass_id} = Record,
	case Op_type =:= undefined of
		true ->
				Op_typeFinal = 1;
		false ->
			Op_typeFinal = Op_type
	end,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Reason_code =:= undefined of
		true ->
				Reason_codeFinal = 0;
		false ->
			Reason_codeFinal = Reason_code
	end,
	case Npc_id =:= undefined of
		true ->
				Npc_idFinal = 0;
		false ->
			Npc_idFinal = Npc_id
	end,
	case Pass_id =:= undefined of
		true ->
				Pass_idFinal = 0;
		false ->
			Pass_idFinal = Pass_id
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<Op_typeFinal:32/signed,SuccFinal:8,ReasonLen:16, Reason2/binary,Reason_codeFinal:32/signed,Npc_idFinal:32/signed,Pass_idFinal:32/signed>>;
encode_m_scene_war_fb_call_monster_toc(_) -> 
	<<>>.

decode_m_scene_war_fb_call_monster_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Op_type:32/signed,SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Reason_code:32/signed,Npc_id:32/signed,Pass_id:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_scene_war_fb_call_monster_toc, Op_type,Succ,common_tool:to_list(Reason),Reason_code,Npc_id,Pass_id};

decode_m_scene_war_fb_call_monster_toc(_) ->
	undefined.
encode_m_bgp_login_tos(Record) when is_record(Record, m_bgp_login_tos) ->
	#m_bgp_login_tos{id=Id,host=Host,port=Port} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, m_bgp_login_tos, id});
		false ->
			IdFinal = Id
	end,
	case Host =:= undefined of
		true ->
				HostFinal = undefined,
				exit({required_field_not_assigned, m_bgp_login_tos, host});
		false ->
			HostFinal = Host
	end,
	case Port =:= undefined of
		true ->
				PortFinal = undefined,
				exit({required_field_not_assigned, m_bgp_login_tos, port});
		false ->
			PortFinal = Port
	end,
	Host2 = common_tool:to_binary(HostFinal),
	HostLen = erlang:byte_size(Host2),

	<<IdFinal:32/signed,HostLen:16, Host2/binary,PortFinal:32/signed>>;
encode_m_bgp_login_tos(_) -> 
	<<>>.

decode_m_bgp_login_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed,HostLen:16, Bin1/binary>> = Bin0,
	<<Host:HostLen/binary,Port:32/signed>> = Bin1,

	{m_bgp_login_tos, Id,common_tool:to_list(Host),Port};

decode_m_bgp_login_tos(_) ->
	undefined.
encode_m_bgp_login_toc(Record) when is_record(Record, m_bgp_login_toc) ->
	#m_bgp_login_toc{id=Id,succ=Succ,reason=Reason} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, m_bgp_login_toc, id});
		false ->
			IdFinal = Id
	end,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<IdFinal:32/signed,SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_bgp_login_toc(_) -> 
	<<>>.

decode_m_bgp_login_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed,SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_bgp_login_toc, Id,Succ,common_tool:to_list(Reason)};

decode_m_bgp_login_toc(_) ->
	undefined.
encode_m_gift_item_query_tos(Record) when is_record(Record, m_gift_item_query_tos) ->
	#m_gift_item_query_tos{} = Record,

	<<>>;
encode_m_gift_item_query_tos(_) -> 
	<<>>.

decode_m_gift_item_query_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_gift_item_query_tos};

decode_m_gift_item_query_tos(_) ->
	undefined.
encode_m_gift_item_query_toc(Record) when is_record(Record, m_gift_item_query_toc) ->
	#m_gift_item_query_toc{succ=Succ,reason=Reason,reason_code=Reason_code,cur_goods=Cur_goods,award_role_level=Award_role_level} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Reason_code =:= undefined of
		true ->
				Reason_codeFinal = 0;
		false ->
			Reason_codeFinal = Reason_code
	end,
	case Cur_goods =:= undefined of
		true ->
			Cur_goodsFinal = [];
		false ->
			Cur_goodsFinal = Cur_goods
	end,
	case Award_role_level =:= undefined of
		true ->
				Award_role_levelFinal = 0;
		false ->
			Award_role_levelFinal = Award_role_level
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Cur_goods_bin = encode_p_goodss(Cur_goodsFinal, <<>>),
	SizeCur_goodsFinal = erlang:length(Cur_goodsFinal),
	BinLen_cur_goods = erlang:byte_size(Cur_goods_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Reason_codeFinal:32/signed,SizeCur_goodsFinal:16, BinLen_cur_goods:32, Cur_goods_bin/binary,Award_role_levelFinal:32/signed>>;
encode_m_gift_item_query_toc(_) -> 
	<<>>.

decode_m_gift_item_query_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Reason_code:32/signed,_Sizecur_goods:16, BinLencur_goods:32, Bin2/binary>> = Bin1,
	<<SubBincur_goods:BinLencur_goods/binary, Bin3/binary>> = Bin2, 
	Cur_goods = lists:reverse(decode_p_goodss(SubBincur_goods, [])),
	<<Award_role_level:32/signed>> = Bin3,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_gift_item_query_toc, Succ,common_tool:to_list(Reason),Reason_code,Cur_goods,Award_role_level};

decode_m_gift_item_query_toc(_) ->
	undefined.
encode_m_gift_item_award_tos(Record) when is_record(Record, m_gift_item_award_tos) ->
	#m_gift_item_award_tos{} = Record,

	<<>>;
encode_m_gift_item_award_tos(_) -> 
	<<>>.

decode_m_gift_item_award_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_gift_item_award_tos};

decode_m_gift_item_award_tos(_) ->
	undefined.
encode_m_gift_item_award_toc(Record) when is_record(Record, m_gift_item_award_toc) ->
	#m_gift_item_award_toc{succ=Succ,reason=Reason,reason_code=Reason_code,award_goods=Award_goods,next_goods=Next_goods,award_role_level=Award_role_level} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Reason_code =:= undefined of
		true ->
				Reason_codeFinal = 0;
		false ->
			Reason_codeFinal = Reason_code
	end,
	case Award_goods =:= undefined of
		true ->
			Award_goodsFinal = [];
		false ->
			Award_goodsFinal = Award_goods
	end,
	case Next_goods =:= undefined of
		true ->
			Next_goodsFinal = [];
		false ->
			Next_goodsFinal = Next_goods
	end,
	case Award_role_level =:= undefined of
		true ->
				Award_role_levelFinal = 0;
		false ->
			Award_role_levelFinal = Award_role_level
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Award_goods_bin = encode_p_goodss(Award_goodsFinal, <<>>),
	SizeAward_goodsFinal = erlang:length(Award_goodsFinal),
	BinLen_award_goods = erlang:byte_size(Award_goods_bin),
	Next_goods_bin = encode_p_goodss(Next_goodsFinal, <<>>),
	SizeNext_goodsFinal = erlang:length(Next_goodsFinal),
	BinLen_next_goods = erlang:byte_size(Next_goods_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Reason_codeFinal:32/signed,SizeAward_goodsFinal:16, BinLen_award_goods:32, Award_goods_bin/binary,SizeNext_goodsFinal:16, BinLen_next_goods:32, Next_goods_bin/binary,Award_role_levelFinal:32/signed>>;
encode_m_gift_item_award_toc(_) -> 
	<<>>.

decode_m_gift_item_award_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Reason_code:32/signed,_Sizeaward_goods:16, BinLenaward_goods:32, Bin2/binary>> = Bin1,
	<<SubBinaward_goods:BinLenaward_goods/binary, Bin3/binary>> = Bin2, 
	Award_goods = lists:reverse(decode_p_goodss(SubBinaward_goods, [])),
	<<_Sizenext_goods:16, BinLennext_goods:32, Bin4/binary>> = Bin3,
	<<SubBinnext_goods:BinLennext_goods/binary, Bin5/binary>> = Bin4, 
	Next_goods = lists:reverse(decode_p_goodss(SubBinnext_goods, [])),
	<<Award_role_level:32/signed>> = Bin5,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_gift_item_award_toc, Succ,common_tool:to_list(Reason),Reason_code,Award_goods,Next_goods,Award_role_level};

decode_m_gift_item_award_toc(_) ->
	undefined.
encode_m_bonfire_up_toc(Record) when is_record(Record, m_bonfire_up_toc) ->
	#m_bonfire_up_toc{bnfires=Bnfires} = Record,
	case Bnfires =:= undefined of
		true ->
			BnfiresFinal = [];
		false ->
			BnfiresFinal = Bnfires
	end,
	Bnfires_bin = encode_p_map_bonfires(BnfiresFinal, <<>>),
	SizeBnfiresFinal = erlang:length(BnfiresFinal),
	BinLen_bnfires = erlang:byte_size(Bnfires_bin),

	<<SizeBnfiresFinal:16, BinLen_bnfires:32, Bnfires_bin/binary>>;
encode_m_bonfire_up_toc(_) -> 
	<<>>.

decode_m_bonfire_up_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizebnfires:16, _BinLenbnfires:32, SubBinbnfires/binary>> = Bin0,
	Bnfires = lists:reverse(decode_p_map_bonfires(SubBinbnfires, [])),

	{m_bonfire_up_toc, Bnfires};

decode_m_bonfire_up_toc(_) ->
	undefined.
encode_m_bonfire_rm_toc(Record) when is_record(Record, m_bonfire_rm_toc) ->
	#m_bonfire_rm_toc{id=Id} = Record,
	case Id =:= undefined of
		true ->
				IdFinal = undefined,
				exit({required_field_not_assigned, m_bonfire_rm_toc, id});
		false ->
			IdFinal = Id
	end,

	<<IdFinal:32/signed>>;
encode_m_bonfire_rm_toc(_) -> 
	<<>>.

decode_m_bonfire_rm_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Id:32/signed>> = Bin0,

	{m_bonfire_rm_toc, Id};

decode_m_bonfire_rm_toc(_) ->
	undefined.
encode_m_bonfire_add_fagot_tos(Record) when is_record(Record, m_bonfire_add_fagot_tos) ->
	#m_bonfire_add_fagot_tos{bonfire_id=Bonfire_id} = Record,
	case Bonfire_id =:= undefined of
		true ->
				Bonfire_idFinal = undefined,
				exit({required_field_not_assigned, m_bonfire_add_fagot_tos, bonfire_id});
		false ->
			Bonfire_idFinal = Bonfire_id
	end,

	<<Bonfire_idFinal:32/signed>>;
encode_m_bonfire_add_fagot_tos(_) -> 
	<<>>.

decode_m_bonfire_add_fagot_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Bonfire_id:32/signed>> = Bin0,

	{m_bonfire_add_fagot_tos, Bonfire_id};

decode_m_bonfire_add_fagot_tos(_) ->
	undefined.
encode_m_bonfire_add_fagot_toc(Record) when is_record(Record, m_bonfire_add_fagot_toc) ->
	#m_bonfire_add_fagot_toc{succ=Succ,bonfire=Bonfire,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_bonfire_add_fagot_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Bonfire =:= undefined of
		true ->
				BonfireFinal = 0;
		false ->
			BonfireFinal = Bonfire
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Bonfire_bin = encode_p_map_bonfire(BonfireFinal),
	BinLen_bonfire = erlang:byte_size(Bonfire_bin),
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,BinLen_bonfire:32, Bonfire_bin/binary,ReasonLen:16, Reason2/binary>>;
encode_m_bonfire_add_fagot_toc(_) -> 
	<<>>.

decode_m_bonfire_add_fagot_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,SubBinSizebonfire:32, Bin1/binary>> = Bin0,
	<<SubBinbonfire:SubBinSizebonfire/binary, Bin2/binary>> = Bin1,
	Bonfire = decode_p_map_bonfire(SubBinbonfire),
	<<ReasonLen:16, Bin3/binary>> = Bin2,
	<<Reason:ReasonLen/binary>> = Bin3,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_bonfire_add_fagot_toc, Succ,Bonfire,common_tool:to_list(Reason)};

decode_m_bonfire_add_fagot_toc(_) ->
	undefined.
encode_m_bonfire_get_tos(Record) when is_record(Record, m_bonfire_get_tos) ->
	#m_bonfire_get_tos{bonfire_id=Bonfire_id} = Record,
	case Bonfire_id =:= undefined of
		true ->
				Bonfire_idFinal = undefined,
				exit({required_field_not_assigned, m_bonfire_get_tos, bonfire_id});
		false ->
			Bonfire_idFinal = Bonfire_id
	end,

	<<Bonfire_idFinal:32/signed>>;
encode_m_bonfire_get_tos(_) -> 
	<<>>.

decode_m_bonfire_get_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Bonfire_id:32/signed>> = Bin0,

	{m_bonfire_get_tos, Bonfire_id};

decode_m_bonfire_get_tos(_) ->
	undefined.
encode_m_bonfire_get_toc(Record) when is_record(Record, m_bonfire_get_toc) ->
	#m_bonfire_get_toc{succ=Succ,reason=Reason,bonfire_info=Bonfire_info} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = undefined,
				exit({required_field_not_assigned, m_bonfire_get_toc, succ});
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Bonfire_info =:= undefined of
		true ->
				Bonfire_infoFinal = 0;
		false ->
			Bonfire_infoFinal = Bonfire_info
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Bonfire_info_bin = encode_p_map_bonfire(Bonfire_infoFinal),
	BinLen_bonfire_info = erlang:byte_size(Bonfire_info_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_bonfire_info:32, Bonfire_info_bin/binary>>;
encode_m_bonfire_get_toc(_) -> 
	<<>>.

decode_m_bonfire_get_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_SubBinSizebonfire_info:32, SubBinbonfire_info/binary>> = Bin1,
	Bonfire_info = decode_p_map_bonfire(SubBinbonfire_info),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_bonfire_get_toc, Succ,common_tool:to_list(Reason),Bonfire_info};

decode_m_bonfire_get_toc(_) ->
	undefined.
encode_m_mission_fb_enter_tos(Record) when is_record(Record, m_mission_fb_enter_tos) ->
	#m_mission_fb_enter_tos{barrier_id=Barrier_id} = Record,
	case Barrier_id =:= undefined of
		true ->
				Barrier_idFinal = undefined,
				exit({required_field_not_assigned, m_mission_fb_enter_tos, barrier_id});
		false ->
			Barrier_idFinal = Barrier_id
	end,

	<<Barrier_idFinal:32/signed>>;
encode_m_mission_fb_enter_tos(_) -> 
	<<>>.

decode_m_mission_fb_enter_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Barrier_id:32/signed>> = Bin0,

	{m_mission_fb_enter_tos, Barrier_id};

decode_m_mission_fb_enter_tos(_) ->
	undefined.
encode_m_mission_fb_enter_toc(Record) when is_record(Record, m_mission_fb_enter_toc) ->
	#m_mission_fb_enter_toc{succ=Succ,reason=Reason,barrier_id=Barrier_id,error_code=Error_code} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Barrier_id =:= undefined of
		true ->
				Barrier_idFinal = 0;
		false ->
			Barrier_idFinal = Barrier_id
	end,
	case Error_code =:= undefined of
		true ->
				Error_codeFinal = 0;
		false ->
			Error_codeFinal = Error_code
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Barrier_idFinal:32/signed,Error_codeFinal:32/signed>>;
encode_m_mission_fb_enter_toc(_) -> 
	<<>>.

decode_m_mission_fb_enter_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Barrier_id:32/signed,Error_code:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_mission_fb_enter_toc, Succ,common_tool:to_list(Reason),Barrier_id,Error_code};

decode_m_mission_fb_enter_toc(_) ->
	undefined.
encode_m_mission_fb_prop_tos(Record) when is_record(Record, m_mission_fb_prop_tos) ->
	#m_mission_fb_prop_tos{barrier_id=Barrier_id} = Record,
	case Barrier_id =:= undefined of
		true ->
				Barrier_idFinal = undefined,
				exit({required_field_not_assigned, m_mission_fb_prop_tos, barrier_id});
		false ->
			Barrier_idFinal = Barrier_id
	end,

	<<Barrier_idFinal:32/signed>>;
encode_m_mission_fb_prop_tos(_) -> 
	<<>>.

decode_m_mission_fb_prop_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Barrier_id:32/signed>> = Bin0,

	{m_mission_fb_prop_tos, Barrier_id};

decode_m_mission_fb_prop_tos(_) ->
	undefined.
encode_m_mission_fb_prop_toc(Record) when is_record(Record, m_mission_fb_prop_toc) ->
	#m_mission_fb_prop_toc{barrier_id=Barrier_id,succ=Succ,reason=Reason,prop_id=Prop_id} = Record,
	case Barrier_id =:= undefined of
		true ->
				Barrier_idFinal = undefined,
				exit({required_field_not_assigned, m_mission_fb_prop_toc, barrier_id});
		false ->
			Barrier_idFinal = Barrier_id
	end,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Prop_id =:= undefined of
		true ->
				Prop_idFinal = 0;
		false ->
			Prop_idFinal = Prop_id
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<Barrier_idFinal:32/signed,SuccFinal:8,ReasonLen:16, Reason2/binary,Prop_idFinal:32/signed>>;
encode_m_mission_fb_prop_toc(_) -> 
	<<>>.

decode_m_mission_fb_prop_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Barrier_id:32/signed,SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Prop_id:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_mission_fb_prop_toc, Barrier_id,Succ,common_tool:to_list(Reason),Prop_id};

decode_m_mission_fb_prop_toc(_) ->
	undefined.
encode_m_mission_fb_quit_tos(Record) when is_record(Record, m_mission_fb_quit_tos) ->
	#m_mission_fb_quit_tos{quit_type=Quit_type} = Record,
	case Quit_type =:= undefined of
		true ->
				Quit_typeFinal = undefined,
				exit({required_field_not_assigned, m_mission_fb_quit_tos, quit_type});
		false ->
			Quit_typeFinal = Quit_type
	end,

	<<Quit_typeFinal:32/signed>>;
encode_m_mission_fb_quit_tos(_) -> 
	<<>>.

decode_m_mission_fb_quit_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Quit_type:32/signed>> = Bin0,

	{m_mission_fb_quit_tos, Quit_type};

decode_m_mission_fb_quit_tos(_) ->
	undefined.
encode_m_mission_fb_quit_toc(Record) when is_record(Record, m_mission_fb_quit_toc) ->
	#m_mission_fb_quit_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_mission_fb_quit_toc(_) -> 
	<<>>.

decode_m_mission_fb_quit_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_mission_fb_quit_toc, Succ,common_tool:to_list(Reason)};

decode_m_mission_fb_quit_toc(_) ->
	undefined.
encode_m_hero_fb_enter_tos(Record) when is_record(Record, m_hero_fb_enter_tos) ->
	#m_hero_fb_enter_tos{barrier_id=Barrier_id} = Record,
	case Barrier_id =:= undefined of
		true ->
				Barrier_idFinal = undefined,
				exit({required_field_not_assigned, m_hero_fb_enter_tos, barrier_id});
		false ->
			Barrier_idFinal = Barrier_id
	end,

	<<Barrier_idFinal:32/signed>>;
encode_m_hero_fb_enter_tos(_) -> 
	<<>>.

decode_m_hero_fb_enter_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Barrier_id:32/signed>> = Bin0,

	{m_hero_fb_enter_tos, Barrier_id};

decode_m_hero_fb_enter_tos(_) ->
	undefined.
encode_m_hero_fb_enter_toc(Record) when is_record(Record, m_hero_fb_enter_toc) ->
	#m_hero_fb_enter_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_hero_fb_enter_toc(_) -> 
	<<>>.

decode_m_hero_fb_enter_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_hero_fb_enter_toc, Succ,common_tool:to_list(Reason)};

decode_m_hero_fb_enter_toc(_) ->
	undefined.
encode_m_hero_fb_report_tos(Record) when is_record(Record, m_hero_fb_report_tos) ->
	#m_hero_fb_report_tos{barrier_id=Barrier_id} = Record,
	case Barrier_id =:= undefined of
		true ->
				Barrier_idFinal = undefined,
				exit({required_field_not_assigned, m_hero_fb_report_tos, barrier_id});
		false ->
			Barrier_idFinal = Barrier_id
	end,

	<<Barrier_idFinal:32/signed>>;
encode_m_hero_fb_report_tos(_) -> 
	<<>>.

decode_m_hero_fb_report_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Barrier_id:32/signed>> = Bin0,

	{m_hero_fb_report_tos, Barrier_id};

decode_m_hero_fb_report_tos(_) ->
	undefined.
encode_m_hero_fb_report_toc(Record) when is_record(Record, m_hero_fb_report_toc) ->
	#m_hero_fb_report_toc{succ=Succ,reason=Reason,barrier_id=Barrier_id,fb_record=Fb_record,state=State,first_record=First_record,poker_count=Poker_count,fail_code=Fail_code} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Barrier_id =:= undefined of
		true ->
				Barrier_idFinal = 0;
		false ->
			Barrier_idFinal = Barrier_id
	end,
	case Fb_record =:= undefined of
		true ->
				Fb_recordFinal = 0;
		false ->
			Fb_recordFinal = Fb_record
	end,
	case State =:= undefined of
		true ->
				StateFinal = 0;
		false ->
			StateFinal = State
	end,
	case First_record =:= undefined of
		true ->
				First_recordFinal = 0;
		false ->
			First_recordFinal = First_record
	end,
	case Poker_count =:= undefined of
		true ->
				Poker_countFinal = 0;
		false ->
			Poker_countFinal = Poker_count
	end,
	case Fail_code =:= undefined of
		true ->
				Fail_codeFinal = 1;
		false ->
			Fail_codeFinal = Fail_code
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Fb_record_bin = encode_p_hero_fb_record(Fb_recordFinal),
	BinLen_fb_record = erlang:byte_size(Fb_record_bin),
	First_record_bin = encode_p_hero_fb_record(First_recordFinal),
	BinLen_first_record = erlang:byte_size(First_record_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Barrier_idFinal:32/signed,BinLen_fb_record:32, Fb_record_bin/binary,StateFinal:32/signed,BinLen_first_record:32, First_record_bin/binary,Poker_countFinal:32/signed,Fail_codeFinal:32/signed>>;
encode_m_hero_fb_report_toc(_) -> 
	<<>>.

decode_m_hero_fb_report_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Barrier_id:32/signed,SubBinSizefb_record:32, Bin2/binary>> = Bin1,
	<<SubBinfb_record:SubBinSizefb_record/binary, Bin3/binary>> = Bin2,
	Fb_record = decode_p_hero_fb_record(SubBinfb_record),
	<<State:32/signed,SubBinSizefirst_record:32, Bin4/binary>> = Bin3,
	<<SubBinfirst_record:SubBinSizefirst_record/binary, Bin5/binary>> = Bin4,
	First_record = decode_p_hero_fb_record(SubBinfirst_record),
	<<Poker_count:32/signed,Fail_code:32/signed>> = Bin5,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_hero_fb_report_toc, Succ,common_tool:to_list(Reason),Barrier_id,Fb_record,State,First_record,Poker_count,Fail_code};

decode_m_hero_fb_report_toc(_) ->
	undefined.
encode_m_hero_fb_panel_tos(Record) when is_record(Record, m_hero_fb_panel_tos) ->
	#m_hero_fb_panel_tos{} = Record,

	<<>>;
encode_m_hero_fb_panel_tos(_) -> 
	<<>>.

decode_m_hero_fb_panel_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_hero_fb_panel_tos};

decode_m_hero_fb_panel_tos(_) ->
	undefined.
encode_m_hero_fb_panel_toc(Record) when is_record(Record, m_hero_fb_panel_toc) ->
	#m_hero_fb_panel_toc{succ=Succ,reason=Reason,hero_fb=Hero_fb} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Hero_fb =:= undefined of
		true ->
				Hero_fbFinal = 0;
		false ->
			Hero_fbFinal = Hero_fb
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Hero_fb_bin = encode_p_role_hero_fb_info(Hero_fbFinal),
	BinLen_hero_fb = erlang:byte_size(Hero_fb_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_hero_fb:32, Hero_fb_bin/binary>>;
encode_m_hero_fb_panel_toc(_) -> 
	<<>>.

decode_m_hero_fb_panel_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_SubBinSizehero_fb:32, SubBinhero_fb/binary>> = Bin1,
	Hero_fb = decode_p_role_hero_fb_info(SubBinhero_fb),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_hero_fb_panel_toc, Succ,common_tool:to_list(Reason),Hero_fb};

decode_m_hero_fb_panel_toc(_) ->
	undefined.
encode_m_hero_fb_quit_tos(Record) when is_record(Record, m_hero_fb_quit_tos) ->
	#m_hero_fb_quit_tos{quit_type=Quit_type} = Record,
	case Quit_type =:= undefined of
		true ->
				Quit_typeFinal = undefined,
				exit({required_field_not_assigned, m_hero_fb_quit_tos, quit_type});
		false ->
			Quit_typeFinal = Quit_type
	end,

	<<Quit_typeFinal:32/signed>>;
encode_m_hero_fb_quit_tos(_) -> 
	<<>>.

decode_m_hero_fb_quit_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Quit_type:32/signed>> = Bin0,

	{m_hero_fb_quit_tos, Quit_type};

decode_m_hero_fb_quit_tos(_) ->
	undefined.
encode_m_hero_fb_quit_toc(Record) when is_record(Record, m_hero_fb_quit_toc) ->
	#m_hero_fb_quit_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_hero_fb_quit_toc(_) -> 
	<<>>.

decode_m_hero_fb_quit_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_hero_fb_quit_toc, Succ,common_tool:to_list(Reason)};

decode_m_hero_fb_quit_toc(_) ->
	undefined.
encode_m_hero_fb_reward_tos(Record) when is_record(Record, m_hero_fb_reward_tos) ->
	#m_hero_fb_reward_tos{reward_id=Reward_id} = Record,
	case Reward_id =:= undefined of
		true ->
				Reward_idFinal = undefined,
				exit({required_field_not_assigned, m_hero_fb_reward_tos, reward_id});
		false ->
			Reward_idFinal = Reward_id
	end,

	<<Reward_idFinal:32/signed>>;
encode_m_hero_fb_reward_tos(_) -> 
	<<>>.

decode_m_hero_fb_reward_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Reward_id:32/signed>> = Bin0,

	{m_hero_fb_reward_tos, Reward_id};

decode_m_hero_fb_reward_tos(_) ->
	undefined.
encode_m_hero_fb_reward_toc(Record) when is_record(Record, m_hero_fb_reward_toc) ->
	#m_hero_fb_reward_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_hero_fb_reward_toc(_) -> 
	<<>>.

decode_m_hero_fb_reward_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_hero_fb_reward_toc, Succ,common_tool:to_list(Reason)};

decode_m_hero_fb_reward_toc(_) ->
	undefined.
encode_m_hero_fb_state_toc(Record) when is_record(Record, m_hero_fb_state_toc) ->
	#m_hero_fb_state_toc{total_monsters=Total_monsters,remain_monsters=Remain_monsters,time_used=Time_used} = Record,
	case Total_monsters =:= undefined of
		true ->
				Total_monstersFinal = undefined,
				exit({required_field_not_assigned, m_hero_fb_state_toc, total_monsters});
		false ->
			Total_monstersFinal = Total_monsters
	end,
	case Remain_monsters =:= undefined of
		true ->
				Remain_monstersFinal = 0;
		false ->
			Remain_monstersFinal = Remain_monsters
	end,
	case Time_used =:= undefined of
		true ->
				Time_usedFinal = 0;
		false ->
			Time_usedFinal = Time_used
	end,

	<<Total_monstersFinal:32/signed,Remain_monstersFinal:32/signed,Time_usedFinal:32/signed>>;
encode_m_hero_fb_state_toc(_) -> 
	<<>>.

decode_m_hero_fb_state_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Total_monsters:32/signed,Remain_monsters:32/signed,Time_used:32/signed>> = Bin0,

	{m_hero_fb_state_toc, Total_monsters,Remain_monsters,Time_used};

decode_m_hero_fb_state_toc(_) ->
	undefined.
encode_m_hero_fb_buy_tos(Record) when is_record(Record, m_hero_fb_buy_tos) ->
	#m_hero_fb_buy_tos{} = Record,

	<<>>;
encode_m_hero_fb_buy_tos(_) -> 
	<<>>.

decode_m_hero_fb_buy_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_hero_fb_buy_tos};

decode_m_hero_fb_buy_tos(_) ->
	undefined.
encode_m_hero_fb_buy_toc(Record) when is_record(Record, m_hero_fb_buy_toc) ->
	#m_hero_fb_buy_toc{succ=Succ,reason=Reason,max_enter_times=Max_enter_times,buy_count=Buy_count} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Max_enter_times =:= undefined of
		true ->
				Max_enter_timesFinal = 0;
		false ->
			Max_enter_timesFinal = Max_enter_times
	end,
	case Buy_count =:= undefined of
		true ->
				Buy_countFinal = 0;
		false ->
			Buy_countFinal = Buy_count
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Max_enter_timesFinal:32/signed,Buy_countFinal:32/signed>>;
encode_m_hero_fb_buy_toc(_) -> 
	<<>>.

decode_m_hero_fb_buy_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Max_enter_times:32/signed,Buy_count:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_hero_fb_buy_toc, Succ,common_tool:to_list(Reason),Max_enter_times,Buy_count};

decode_m_hero_fb_buy_toc(_) ->
	undefined.
encode_m_hero_fb_poker_reward_tos(Record) when is_record(Record, m_hero_fb_poker_reward_tos) ->
	#m_hero_fb_poker_reward_tos{op_type=Op_type} = Record,
	case Op_type =:= undefined of
		true ->
				Op_typeFinal = 0;
		false ->
			Op_typeFinal = Op_type
	end,

	<<Op_typeFinal:32/signed>>;
encode_m_hero_fb_poker_reward_tos(_) -> 
	<<>>.

decode_m_hero_fb_poker_reward_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Op_type:32/signed>> = Bin0,

	{m_hero_fb_poker_reward_tos, Op_type};

decode_m_hero_fb_poker_reward_tos(_) ->
	undefined.
encode_m_hero_fb_poker_reward_toc(Record) when is_record(Record, m_hero_fb_poker_reward_toc) ->
	#m_hero_fb_poker_reward_toc{op_type=Op_type,err_code=Err_code,reason=Reason,reward_list=Reward_list,other_list=Other_list} = Record,
	case Op_type =:= undefined of
		true ->
				Op_typeFinal = 0;
		false ->
			Op_typeFinal = Op_type
	end,
	case Err_code =:= undefined of
		true ->
				Err_codeFinal = 0;
		false ->
			Err_codeFinal = Err_code
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Reward_list =:= undefined of
		true ->
				Reward_listFinal = 0;
		false ->
			Reward_listFinal = Reward_list
	end,
	case Other_list =:= undefined of
		true ->
			Other_listFinal = [];
		false ->
			Other_listFinal = Other_list
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Reward_list_bin = encode_p_hero_fb_poker_reward(Reward_listFinal),
	BinLen_reward_list = erlang:byte_size(Reward_list_bin),
	Other_list_bin = encode_p_hero_fb_poker_rewards(Other_listFinal, <<>>),
	SizeOther_listFinal = erlang:length(Other_listFinal),
	BinLen_other_list = erlang:byte_size(Other_list_bin),

	<<Op_typeFinal:32/signed,Err_codeFinal:32/signed,ReasonLen:16, Reason2/binary,BinLen_reward_list:32, Reward_list_bin/binary,SizeOther_listFinal:16, BinLen_other_list:32, Other_list_bin/binary>>;
encode_m_hero_fb_poker_reward_toc(_) -> 
	<<>>.

decode_m_hero_fb_poker_reward_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Op_type:32/signed,Err_code:32/signed,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,SubBinSizereward_list:32, Bin2/binary>> = Bin1,
	<<SubBinreward_list:SubBinSizereward_list/binary, Bin3/binary>> = Bin2,
	Reward_list = decode_p_hero_fb_poker_reward(SubBinreward_list),
	<<_Sizeother_list:16, _BinLenother_list:32, SubBinother_list/binary>> = Bin3,
	Other_list = lists:reverse(decode_p_hero_fb_poker_rewards(SubBinother_list, [])),

	{m_hero_fb_poker_reward_toc, Op_type,Err_code,common_tool:to_list(Reason),Reward_list,Other_list};

decode_m_hero_fb_poker_reward_toc(_) ->
	undefined.
encode_m_accumulate_exp_get_tos(Record) when is_record(Record, m_accumulate_exp_get_tos) ->
	#m_accumulate_exp_get_tos{} = Record,

	<<>>;
encode_m_accumulate_exp_get_tos(_) -> 
	<<>>.

decode_m_accumulate_exp_get_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_accumulate_exp_get_tos};

decode_m_accumulate_exp_get_tos(_) ->
	undefined.
encode_m_accumulate_exp_get_toc(Record) when is_record(Record, m_accumulate_exp_get_toc) ->
	#m_accumulate_exp_get_toc{succ=Succ,reason=Reason,addexp=Addexp} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Addexp =:= undefined of
		true ->
				AddexpFinal = 0.0;
		false ->
			AddexpFinal = Addexp
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,AddexpFinal:64/float>>;
encode_m_accumulate_exp_get_toc(_) -> 
	<<>>.

decode_m_accumulate_exp_get_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Addexp:64>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_accumulate_exp_get_toc, Succ,common_tool:to_list(Reason),Addexp};

decode_m_accumulate_exp_get_toc(_) ->
	undefined.
encode_m_accumulate_exp_view_tos(Record) when is_record(Record, m_accumulate_exp_view_tos) ->
	#m_accumulate_exp_view_tos{} = Record,

	<<>>;
encode_m_accumulate_exp_view_tos(_) -> 
	<<>>.

decode_m_accumulate_exp_view_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_accumulate_exp_view_tos};

decode_m_accumulate_exp_view_tos(_) ->
	undefined.
encode_m_accumulate_exp_view_toc(Record) when is_record(Record, m_accumulate_exp_view_toc) ->
	#m_accumulate_exp_view_toc{succ=Succ,reason=Reason,allexp=Allexp,cangetexp=Cangetexp,nextexp=Nextexp,gold=Gold,flag=Flag} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Allexp =:= undefined of
		true ->
				AllexpFinal = 0.0;
		false ->
			AllexpFinal = Allexp
	end,
	case Cangetexp =:= undefined of
		true ->
				CangetexpFinal = 0.0;
		false ->
			CangetexpFinal = Cangetexp
	end,
	case Nextexp =:= undefined of
		true ->
				NextexpFinal = 0.0;
		false ->
			NextexpFinal = Nextexp
	end,
	case Gold =:= undefined of
		true ->
				GoldFinal = 0;
		false ->
			GoldFinal = Gold
	end,
	case Flag =:= undefined of
		true ->
				FlagFinal = 0;
		false ->
			FlagFinal = Flag
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,AllexpFinal:64/float,CangetexpFinal:64/float,NextexpFinal:64/float,GoldFinal:32/signed,FlagFinal:32/signed>>;
encode_m_accumulate_exp_view_toc(_) -> 
	<<>>.

decode_m_accumulate_exp_view_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Allexp:64,Cangetexp:64,Nextexp:64,Gold:32/signed,Flag:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_accumulate_exp_view_toc, Succ,common_tool:to_list(Reason),Allexp,Cangetexp,Nextexp,Gold,Flag};

decode_m_accumulate_exp_view_toc(_) ->
	undefined.
encode_m_family_set_interior_manager_tos(Record) when is_record(Record, m_family_set_interior_manager_tos) ->
	#m_family_set_interior_manager_tos{role_id=Role_id} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, m_family_set_interior_manager_tos, role_id});
		false ->
			Role_idFinal = Role_id
	end,

	<<Role_idFinal:32/signed>>;
encode_m_family_set_interior_manager_tos(_) -> 
	<<>>.

decode_m_family_set_interior_manager_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed>> = Bin0,

	{m_family_set_interior_manager_tos, Role_id};

decode_m_family_set_interior_manager_tos(_) ->
	undefined.
encode_m_family_set_interior_manager_toc(Record) when is_record(Record, m_family_set_interior_manager_toc) ->
	#m_family_set_interior_manager_toc{succ=Succ,reason=Reason,return_self=Return_self,role_id=Role_id,role_name=Role_name,oldrole_id=Oldrole_id,oldrole_name=Oldrole_name} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = 0;
		false ->
			Role_idFinal = Role_id
	end,
	case Role_name =:= undefined of
		true ->
				Role_nameFinal = <<>>;
		false ->
			Role_nameFinal = Role_name
	end,
	case Oldrole_id =:= undefined of
		true ->
				Oldrole_idFinal = 0;
		false ->
			Oldrole_idFinal = Oldrole_id
	end,
	case Oldrole_name =:= undefined of
		true ->
				Oldrole_nameFinal = <<>>;
		false ->
			Oldrole_nameFinal = Oldrole_name
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Role_name2 = common_tool:to_binary(Role_nameFinal),
	Role_nameLen = erlang:byte_size(Role_name2),
	Oldrole_name2 = common_tool:to_binary(Oldrole_nameFinal),
	Oldrole_nameLen = erlang:byte_size(Oldrole_name2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Return_selfFinal:8,Role_idFinal:32/signed,Role_nameLen:16, Role_name2/binary,Oldrole_idFinal:32/signed,Oldrole_nameLen:16, Oldrole_name2/binary>>;
encode_m_family_set_interior_manager_toc(_) -> 
	<<>>.

decode_m_family_set_interior_manager_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Return_selfTmp:8,Role_id:32/signed,Role_nameLen:16, Bin2/binary>> = Bin1,
	<<Role_name:Role_nameLen/binary,Oldrole_id:32/signed,Oldrole_nameLen:16, Bin3/binary>> = Bin2,
	<<Oldrole_name:Oldrole_nameLen/binary>> = Bin3,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_family_set_interior_manager_toc, Succ,common_tool:to_list(Reason),Return_self,Role_id,common_tool:to_list(Role_name),Oldrole_id,common_tool:to_list(Oldrole_name)};

decode_m_family_set_interior_manager_toc(_) ->
	undefined.
encode_m_family_unset_interior_manager_tos(Record) when is_record(Record, m_family_unset_interior_manager_tos) ->
	#m_family_unset_interior_manager_tos{role_id=Role_id} = Record,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, m_family_unset_interior_manager_tos, role_id});
		false ->
			Role_idFinal = Role_id
	end,

	<<Role_idFinal:32/signed>>;
encode_m_family_unset_interior_manager_tos(_) -> 
	<<>>.

decode_m_family_unset_interior_manager_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Role_id:32/signed>> = Bin0,

	{m_family_unset_interior_manager_tos, Role_id};

decode_m_family_unset_interior_manager_tos(_) ->
	undefined.
encode_m_family_unset_interior_manager_toc(Record) when is_record(Record, m_family_unset_interior_manager_toc) ->
	#m_family_unset_interior_manager_toc{succ=Succ,reason=Reason,return_self=Return_self,role_id=Role_id} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Return_self =:= undefined of
		true ->
				Return_selfFinal = 1;
		false ->
		case Return_self of
			true ->
				Return_selfFinal = 1;
			false ->
				Return_selfFinal = 0
		end
	end,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = 0;
		false ->
			Role_idFinal = Role_id
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Return_selfFinal:8,Role_idFinal:32/signed>>;
encode_m_family_unset_interior_manager_toc(_) -> 
	<<>>.

decode_m_family_unset_interior_manager_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Return_selfTmp:8,Role_id:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,
case Return_selfTmp of 
	1 -> 
		Return_self = true;
	_ ->
		Return_self = false
end,

	{m_family_unset_interior_manager_toc, Succ,common_tool:to_list(Reason),Return_self,Role_id};

decode_m_family_unset_interior_manager_toc(_) ->
	undefined.
encode_m_family_leftright_protector_toc(Record) when is_record(Record, m_family_leftright_protector_toc) ->
	#m_family_leftright_protector_toc{num=Num,reason=Reason,leftid=Leftid,leftrole_name=Leftrole_name,rightid=Rightid,rightrole_name=Rightrole_name} = Record,
	case Num =:= undefined of
		true ->
				NumFinal = 2;
		false ->
			NumFinal = Num
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Leftid =:= undefined of
		true ->
				LeftidFinal = 0;
		false ->
			LeftidFinal = Leftid
	end,
	case Leftrole_name =:= undefined of
		true ->
				Leftrole_nameFinal = <<>>;
		false ->
			Leftrole_nameFinal = Leftrole_name
	end,
	case Rightid =:= undefined of
		true ->
				RightidFinal = 0;
		false ->
			RightidFinal = Rightid
	end,
	case Rightrole_name =:= undefined of
		true ->
				Rightrole_nameFinal = <<>>;
		false ->
			Rightrole_nameFinal = Rightrole_name
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Leftrole_name2 = common_tool:to_binary(Leftrole_nameFinal),
	Leftrole_nameLen = erlang:byte_size(Leftrole_name2),
	Rightrole_name2 = common_tool:to_binary(Rightrole_nameFinal),
	Rightrole_nameLen = erlang:byte_size(Rightrole_name2),

	<<NumFinal:32/signed,ReasonLen:16, Reason2/binary,LeftidFinal:32/signed,Leftrole_nameLen:16, Leftrole_name2/binary,RightidFinal:32/signed,Rightrole_nameLen:16, Rightrole_name2/binary>>;
encode_m_family_leftright_protector_toc(_) -> 
	<<>>.

decode_m_family_leftright_protector_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Num:32/signed,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Leftid:32/signed,Leftrole_nameLen:16, Bin2/binary>> = Bin1,
	<<Leftrole_name:Leftrole_nameLen/binary,Rightid:32/signed,Rightrole_nameLen:16, Bin3/binary>> = Bin2,
	<<Rightrole_name:Rightrole_nameLen/binary>> = Bin3,

	{m_family_leftright_protector_toc, Num,common_tool:to_list(Reason),Leftid,common_tool:to_list(Leftrole_name),Rightid,common_tool:to_list(Rightrole_name)};

decode_m_family_leftright_protector_toc(_) ->
	undefined.
encode_m_family_collect_get_role_info_tos(Record) when is_record(Record, m_family_collect_get_role_info_tos) ->
	#m_family_collect_get_role_info_tos{type_id=Type_id,role_id=Role_id} = Record,
	case Type_id =:= undefined of
		true ->
				Type_idFinal = undefined,
				exit({required_field_not_assigned, m_family_collect_get_role_info_tos, type_id});
		false ->
			Type_idFinal = Type_id
	end,
	case Role_id =:= undefined of
		true ->
				Role_idFinal = undefined,
				exit({required_field_not_assigned, m_family_collect_get_role_info_tos, role_id});
		false ->
			Role_idFinal = Role_id
	end,

	<<Type_idFinal:32/signed,Role_idFinal:32/signed>>;
encode_m_family_collect_get_role_info_tos(_) -> 
	<<>>.

decode_m_family_collect_get_role_info_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Type_id:32/signed,Role_id:32/signed>> = Bin0,

	{m_family_collect_get_role_info_tos, Type_id,Role_id};

decode_m_family_collect_get_role_info_tos(_) ->
	undefined.
encode_m_family_collect_get_role_info_toc(Record) when is_record(Record, m_family_collect_get_role_info_toc) ->
	#m_family_collect_get_role_info_toc{succ=Succ,reason=Reason,type_id=Type_id,value=Value} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Type_id =:= undefined of
		true ->
				Type_idFinal = 0;
		false ->
			Type_idFinal = Type_id
	end,
	case Value =:= undefined of
		true ->
				ValueFinal = 0;
		false ->
			ValueFinal = Value
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Type_idFinal:32/signed,ValueFinal:32/signed>>;
encode_m_family_collect_get_role_info_toc(_) -> 
	<<>>.

decode_m_family_collect_get_role_info_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Type_id:32/signed,Value:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_family_collect_get_role_info_toc, Succ,common_tool:to_list(Reason),Type_id,Value};

decode_m_family_collect_get_role_info_toc(_) ->
	undefined.
encode_m_family_notify_online_tos(Record) when is_record(Record, m_family_notify_online_tos) ->
	#m_family_notify_online_tos{} = Record,

	<<>>;
encode_m_family_notify_online_tos(_) -> 
	<<>>.

decode_m_family_notify_online_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_family_notify_online_tos};

decode_m_family_notify_online_tos(_) ->
	undefined.
encode_m_family_notify_online_toc(Record) when is_record(Record, m_family_notify_online_toc) ->
	#m_family_notify_online_toc{succ=Succ,reason=Reason,online_list=Online_list} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Online_list =:= undefined of
		true ->
			Online_listFinal = [];
		false ->
			Online_listFinal = Online_list
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Online_list_bin = encode_p_online_infos(Online_listFinal, <<>>),
	SizeOnline_listFinal = erlang:length(Online_listFinal),
	BinLen_online_list = erlang:byte_size(Online_list_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,SizeOnline_listFinal:16, BinLen_online_list:32, Online_list_bin/binary>>;
encode_m_family_notify_online_toc(_) -> 
	<<>>.

decode_m_family_notify_online_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_Sizeonline_list:16, _BinLenonline_list:32, SubBinonline_list/binary>> = Bin1,
	Online_list = lists:reverse(decode_p_online_infos(SubBinonline_list, [])),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_family_notify_online_toc, Succ,common_tool:to_list(Reason),Online_list};

decode_m_family_notify_online_toc(_) ->
	undefined.
encode_m_goal_info_tos(Record) when is_record(Record, m_goal_info_tos) ->
	#m_goal_info_tos{} = Record,

	<<>>;
encode_m_goal_info_tos(_) -> 
	<<>>.

decode_m_goal_info_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<>> = Bin0,

	{m_goal_info_tos};

decode_m_goal_info_tos(_) ->
	undefined.
encode_m_goal_info_toc(Record) when is_record(Record, m_goal_info_toc) ->
	#m_goal_info_toc{succ=Succ,reason=Reason,info=Info} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Info =:= undefined of
		true ->
				InfoFinal = 0;
		false ->
			InfoFinal = Info
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Info_bin = encode_p_role_goal(InfoFinal),
	BinLen_info = erlang:byte_size(Info_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,BinLen_info:32, Info_bin/binary>>;
encode_m_goal_info_toc(_) -> 
	<<>>.

decode_m_goal_info_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,_SubBinSizeinfo:32, SubBininfo/binary>> = Bin1,
	Info = decode_p_role_goal(SubBininfo),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_goal_info_toc, Succ,common_tool:to_list(Reason),Info};

decode_m_goal_info_toc(_) ->
	undefined.
encode_m_goal_fetch_tos(Record) when is_record(Record, m_goal_fetch_tos) ->
	#m_goal_fetch_tos{goal_id=Goal_id} = Record,
	case Goal_id =:= undefined of
		true ->
				Goal_idFinal = undefined,
				exit({required_field_not_assigned, m_goal_fetch_tos, goal_id});
		false ->
			Goal_idFinal = Goal_id
	end,

	<<Goal_idFinal:32/signed>>;
encode_m_goal_fetch_tos(_) -> 
	<<>>.

decode_m_goal_fetch_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Goal_id:32/signed>> = Bin0,

	{m_goal_fetch_tos, Goal_id};

decode_m_goal_fetch_tos(_) ->
	undefined.
encode_m_goal_fetch_toc(Record) when is_record(Record, m_goal_fetch_toc) ->
	#m_goal_fetch_toc{succ=Succ,reason=Reason,goal_id=Goal_id} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Goal_id =:= undefined of
		true ->
				Goal_idFinal = 0;
		false ->
			Goal_idFinal = Goal_id
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Goal_idFinal:32/signed>>;
encode_m_goal_fetch_toc(_) -> 
	<<>>.

decode_m_goal_fetch_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Goal_id:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_goal_fetch_toc, Succ,common_tool:to_list(Reason),Goal_id};

decode_m_goal_fetch_toc(_) ->
	undefined.
encode_m_goal_update_toc(Record) when is_record(Record, m_goal_update_toc) ->
	#m_goal_update_toc{goal_item=Goal_item} = Record,
	case Goal_item =:= undefined of
		true ->
				Goal_itemFinal = undefined,
				exit({required_field_not_assigned, m_goal_update_toc, goal_item});
		false ->
			Goal_itemFinal = Goal_item
	end,
	Goal_item_bin = encode_p_role_goal_item(Goal_itemFinal),
	BinLen_goal_item = erlang:byte_size(Goal_item_bin),

	<<BinLen_goal_item:32, Goal_item_bin/binary>>;
encode_m_goal_update_toc(_) -> 
	<<>>.

decode_m_goal_update_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_SubBinSizegoal_item:32, SubBingoal_item/binary>> = Bin0,
	Goal_item = decode_p_role_goal_item(SubBingoal_item),

	{m_goal_update_toc, Goal_item};

decode_m_goal_update_toc(_) ->
	undefined.
encode_m_prestige_query_tos(Record) when is_record(Record, m_prestige_query_tos) ->
	#m_prestige_query_tos{op_type=Op_type,group_id=Group_id,class_id=Class_id} = Record,
	case Op_type =:= undefined of
		true ->
				Op_typeFinal = 0;
		false ->
			Op_typeFinal = Op_type
	end,
	case Group_id =:= undefined of
		true ->
				Group_idFinal = 0;
		false ->
			Group_idFinal = Group_id
	end,
	case Class_id =:= undefined of
		true ->
				Class_idFinal = 0;
		false ->
			Class_idFinal = Class_id
	end,

	<<Op_typeFinal:32/signed,Group_idFinal:32/signed,Class_idFinal:32/signed>>;
encode_m_prestige_query_tos(_) -> 
	<<>>.

decode_m_prestige_query_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Op_type:32/signed,Group_id:32/signed,Class_id:32/signed>> = Bin0,

	{m_prestige_query_tos, Op_type,Group_id,Class_id};

decode_m_prestige_query_tos(_) ->
	undefined.
encode_m_prestige_query_toc(Record) when is_record(Record, m_prestige_query_toc) ->
	#m_prestige_query_toc{op_type=Op_type,group_id=Group_id,class_id=Class_id,succ=Succ,reason=Reason,reason_code=Reason_code,item_list=Item_list} = Record,
	case Op_type =:= undefined of
		true ->
				Op_typeFinal = 0;
		false ->
			Op_typeFinal = Op_type
	end,
	case Group_id =:= undefined of
		true ->
				Group_idFinal = 0;
		false ->
			Group_idFinal = Group_id
	end,
	case Class_id =:= undefined of
		true ->
				Class_idFinal = 0;
		false ->
			Class_idFinal = Class_id
	end,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Reason_code =:= undefined of
		true ->
				Reason_codeFinal = 0;
		false ->
			Reason_codeFinal = Reason_code
	end,
	case Item_list =:= undefined of
		true ->
			Item_listFinal = [];
		false ->
			Item_listFinal = Item_list
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Item_list_bin = encode_p_prestige_items(Item_listFinal, <<>>),
	SizeItem_listFinal = erlang:length(Item_listFinal),
	BinLen_item_list = erlang:byte_size(Item_list_bin),

	<<Op_typeFinal:32/signed,Group_idFinal:32/signed,Class_idFinal:32/signed,SuccFinal:8,ReasonLen:16, Reason2/binary,Reason_codeFinal:32/signed,SizeItem_listFinal:16, BinLen_item_list:32, Item_list_bin/binary>>;
encode_m_prestige_query_toc(_) -> 
	<<>>.

decode_m_prestige_query_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Op_type:32/signed,Group_id:32/signed,Class_id:32/signed,SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Reason_code:32/signed,_Sizeitem_list:16, _BinLenitem_list:32, SubBinitem_list/binary>> = Bin1,
	Item_list = lists:reverse(decode_p_prestige_items(SubBinitem_list, [])),
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_prestige_query_toc, Op_type,Group_id,Class_id,Succ,common_tool:to_list(Reason),Reason_code,Item_list};

decode_m_prestige_query_toc(_) ->
	undefined.
encode_m_prestige_deal_tos(Record) when is_record(Record, m_prestige_deal_tos) ->
	#m_prestige_deal_tos{group_id=Group_id,class_id=Class_id,key=Key,number=Number} = Record,
	case Group_id =:= undefined of
		true ->
				Group_idFinal = 0;
		false ->
			Group_idFinal = Group_id
	end,
	case Class_id =:= undefined of
		true ->
				Class_idFinal = 0;
		false ->
			Class_idFinal = Class_id
	end,
	case Key =:= undefined of
		true ->
				KeyFinal = 0;
		false ->
			KeyFinal = Key
	end,
	case Number =:= undefined of
		true ->
				NumberFinal = 1;
		false ->
			NumberFinal = Number
	end,

	<<Group_idFinal:32/signed,Class_idFinal:32/signed,KeyFinal:32/signed,NumberFinal:32/signed>>;
encode_m_prestige_deal_tos(_) -> 
	<<>>.

decode_m_prestige_deal_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Group_id:32/signed,Class_id:32/signed,Key:32/signed,Number:32/signed>> = Bin0,

	{m_prestige_deal_tos, Group_id,Class_id,Key,Number};

decode_m_prestige_deal_tos(_) ->
	undefined.
encode_m_prestige_deal_toc(Record) when is_record(Record, m_prestige_deal_toc) ->
	#m_prestige_deal_toc{group_id=Group_id,class_id=Class_id,key=Key,number=Number,succ=Succ,reason=Reason,reason_code=Reason_code,consume_prestige=Consume_prestige,award_list=Award_list,sum_prestige=Sum_prestige,cur_prestige=Cur_prestige} = Record,
	case Group_id =:= undefined of
		true ->
				Group_idFinal = 0;
		false ->
			Group_idFinal = Group_id
	end,
	case Class_id =:= undefined of
		true ->
				Class_idFinal = 0;
		false ->
			Class_idFinal = Class_id
	end,
	case Key =:= undefined of
		true ->
				KeyFinal = 0;
		false ->
			KeyFinal = Key
	end,
	case Number =:= undefined of
		true ->
				NumberFinal = 1;
		false ->
			NumberFinal = Number
	end,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Reason_code =:= undefined of
		true ->
				Reason_codeFinal = 0;
		false ->
			Reason_codeFinal = Reason_code
	end,
	case Consume_prestige =:= undefined of
		true ->
				Consume_prestigeFinal = 0;
		false ->
			Consume_prestigeFinal = Consume_prestige
	end,
	case Award_list =:= undefined of
		true ->
			Award_listFinal = [];
		false ->
			Award_listFinal = Award_list
	end,
	case Sum_prestige =:= undefined of
		true ->
				Sum_prestigeFinal = 0;
		false ->
			Sum_prestigeFinal = Sum_prestige
	end,
	case Cur_prestige =:= undefined of
		true ->
				Cur_prestigeFinal = 0;
		false ->
			Cur_prestigeFinal = Cur_prestige
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Award_list_bin = encode_p_goodss(Award_listFinal, <<>>),
	SizeAward_listFinal = erlang:length(Award_listFinal),
	BinLen_award_list = erlang:byte_size(Award_list_bin),

	<<Group_idFinal:32/signed,Class_idFinal:32/signed,KeyFinal:32/signed,NumberFinal:32/signed,SuccFinal:8,ReasonLen:16, Reason2/binary,Reason_codeFinal:32/signed,Consume_prestigeFinal:32/signed,SizeAward_listFinal:16, BinLen_award_list:32, Award_list_bin/binary,Sum_prestigeFinal:64/float,Cur_prestigeFinal:64/float>>;
encode_m_prestige_deal_toc(_) -> 
	<<>>.

decode_m_prestige_deal_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Group_id:32/signed,Class_id:32/signed,Key:32/signed,Number:32/signed,SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Reason_code:32/signed,Consume_prestige:32/signed,_Sizeaward_list:16, BinLenaward_list:32, Bin2/binary>> = Bin1,
	<<SubBinaward_list:BinLenaward_list/binary, Bin3/binary>> = Bin2, 
	Award_list = lists:reverse(decode_p_goodss(SubBinaward_list, [])),
	<<Sum_prestige:64,Cur_prestige:64>> = Bin3,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_prestige_deal_toc, Group_id,Class_id,Key,Number,Succ,common_tool:to_list(Reason),Reason_code,Consume_prestige,Award_list,Sum_prestige,Cur_prestige};

decode_m_prestige_deal_toc(_) ->
	undefined.
encode_m_special_activity_get_prize_tos(Record) when is_record(Record, m_special_activity_get_prize_tos) ->
	#m_special_activity_get_prize_tos{activity_key=Activity_key,condition_id=Condition_id} = Record,
	case Activity_key =:= undefined of
		true ->
				Activity_keyFinal = undefined,
				exit({required_field_not_assigned, m_special_activity_get_prize_tos, activity_key});
		false ->
			Activity_keyFinal = Activity_key
	end,
	case Condition_id =:= undefined of
		true ->
				Condition_idFinal = 0;
		false ->
			Condition_idFinal = Condition_id
	end,

	<<Activity_keyFinal:32/signed,Condition_idFinal:32/signed>>;
encode_m_special_activity_get_prize_tos(_) -> 
	<<>>.

decode_m_special_activity_get_prize_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Activity_key:32/signed,Condition_id:32/signed>> = Bin0,

	{m_special_activity_get_prize_tos, Activity_key,Condition_id};

decode_m_special_activity_get_prize_tos(_) ->
	undefined.
encode_m_special_activity_get_prize_toc(Record) when is_record(Record, m_special_activity_get_prize_toc) ->
	#m_special_activity_get_prize_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_special_activity_get_prize_toc(_) -> 
	<<>>.

decode_m_special_activity_get_prize_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_special_activity_get_prize_toc, Succ,common_tool:to_list(Reason)};

decode_m_special_activity_get_prize_toc(_) ->
	undefined.
encode_m_special_activity_able_get_toc(Record) when is_record(Record, m_special_activity_able_get_toc) ->
	#m_special_activity_able_get_toc{activity_key=Activity_key} = Record,
	case Activity_key =:= undefined of
		true ->
				Activity_keyFinal = undefined,
				exit({required_field_not_assigned, m_special_activity_able_get_toc, activity_key});
		false ->
			Activity_keyFinal = Activity_key
	end,

	<<Activity_keyFinal:32/signed>>;
encode_m_special_activity_able_get_toc(_) -> 
	<<>>.

decode_m_special_activity_able_get_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Activity_key:32/signed>> = Bin0,

	{m_special_activity_able_get_toc, Activity_key};

decode_m_special_activity_able_get_toc(_) ->
	undefined.
encode_m_special_activity_list_tos(Record) when is_record(Record, m_special_activity_list_tos) ->
	#m_special_activity_list_tos{activity_key=Activity_key} = Record,
	case Activity_key =:= undefined of
		true ->
				Activity_keyFinal = 0;
		false ->
			Activity_keyFinal = Activity_key
	end,

	<<Activity_keyFinal:32/signed>>;
encode_m_special_activity_list_tos(_) -> 
	<<>>.

decode_m_special_activity_list_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Activity_key:32/signed>> = Bin0,

	{m_special_activity_list_tos, Activity_key};

decode_m_special_activity_list_tos(_) ->
	undefined.
encode_m_special_activity_list_toc(Record) when is_record(Record, m_special_activity_list_toc) ->
	#m_special_activity_list_toc{key_list=Key_list} = Record,
	case Key_list =:= undefined of
		true ->
			Key_listFinal = [];
		false ->
			Key_listFinal = Key_list
	end,
	Key_list_bin = encode_int32s(Key_listFinal, <<>>),
	SizeKey_listFinal = erlang:length(Key_listFinal),
	BinLen_key_list = erlang:byte_size(Key_list_bin),

	<<SizeKey_listFinal:16, BinLen_key_list:32, Key_list_bin/binary>>;
encode_m_special_activity_list_toc(_) -> 
	<<>>.

decode_m_special_activity_list_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<_Sizekey_list:16, _BinLenkey_list:32, SubBinkey_list/binary>> = Bin0,
	Key_list = lists:reverse(decode_int32s(SubBinkey_list, [])),

	{m_special_activity_list_toc, Key_list};

decode_m_special_activity_list_toc(_) ->
	undefined.
encode_m_special_activity_detail_tos(Record) when is_record(Record, m_special_activity_detail_tos) ->
	#m_special_activity_detail_tos{activity_key=Activity_key} = Record,
	case Activity_key =:= undefined of
		true ->
				Activity_keyFinal = undefined,
				exit({required_field_not_assigned, m_special_activity_detail_tos, activity_key});
		false ->
			Activity_keyFinal = Activity_key
	end,

	<<Activity_keyFinal:32/signed>>;
encode_m_special_activity_detail_tos(_) -> 
	<<>>.

decode_m_special_activity_detail_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Activity_key:32/signed>> = Bin0,

	{m_special_activity_detail_tos, Activity_key};

decode_m_special_activity_detail_tos(_) ->
	undefined.
encode_m_special_activity_detail_toc(Record) when is_record(Record, m_special_activity_detail_toc) ->
	#m_special_activity_detail_toc{succ=Succ,reason=Reason,activity_key=Activity_key,title=Title,text=Text,activity_start_time=Activity_start_time,activity_end_time=Activity_end_time,reward_start_time=Reward_start_time,reward_end_time=Reward_end_time,condition_list=Condition_list,limit=Limit} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Activity_key =:= undefined of
		true ->
				Activity_keyFinal = 0;
		false ->
			Activity_keyFinal = Activity_key
	end,
	case Title =:= undefined of
		true ->
				TitleFinal = <<>>;
		false ->
			TitleFinal = Title
	end,
	case Text =:= undefined of
		true ->
				TextFinal = <<>>;
		false ->
			TextFinal = Text
	end,
	case Activity_start_time =:= undefined of
		true ->
				Activity_start_timeFinal = 0;
		false ->
			Activity_start_timeFinal = Activity_start_time
	end,
	case Activity_end_time =:= undefined of
		true ->
				Activity_end_timeFinal = 0;
		false ->
			Activity_end_timeFinal = Activity_end_time
	end,
	case Reward_start_time =:= undefined of
		true ->
				Reward_start_timeFinal = 0;
		false ->
			Reward_start_timeFinal = Reward_start_time
	end,
	case Reward_end_time =:= undefined of
		true ->
				Reward_end_timeFinal = 0;
		false ->
			Reward_end_timeFinal = Reward_end_time
	end,
	case Condition_list =:= undefined of
		true ->
			Condition_listFinal = [];
		false ->
			Condition_listFinal = Condition_list
	end,
	case Limit =:= undefined of
		true ->
				LimitFinal = 0;
		false ->
			LimitFinal = Limit
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),
	Title2 = common_tool:to_binary(TitleFinal),
	TitleLen = erlang:byte_size(Title2),
	Text2 = common_tool:to_binary(TextFinal),
	TextLen = erlang:byte_size(Text2),
	Condition_list_bin = encode_p_activity_conditions(Condition_listFinal, <<>>),
	SizeCondition_listFinal = erlang:length(Condition_listFinal),
	BinLen_condition_list = erlang:byte_size(Condition_list_bin),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary,Activity_keyFinal:32/signed,TitleLen:16, Title2/binary,TextLen:16, Text2/binary,Activity_start_timeFinal:32/signed,Activity_end_timeFinal:32/signed,Reward_start_timeFinal:32/signed,Reward_end_timeFinal:32/signed,SizeCondition_listFinal:16, BinLen_condition_list:32, Condition_list_bin/binary,LimitFinal:32/signed>>;
encode_m_special_activity_detail_toc(_) -> 
	<<>>.

decode_m_special_activity_detail_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Activity_key:32/signed,TitleLen:16, Bin2/binary>> = Bin1,
	<<Title:TitleLen/binary,TextLen:16, Bin3/binary>> = Bin2,
	<<Text:TextLen/binary,Activity_start_time:32/signed,Activity_end_time:32/signed,Reward_start_time:32/signed,Reward_end_time:32/signed,_Sizecondition_list:16, BinLencondition_list:32, Bin4/binary>> = Bin3,
	<<SubBincondition_list:BinLencondition_list/binary, Bin5/binary>> = Bin4, 
	Condition_list = lists:reverse(decode_p_activity_conditions(SubBincondition_list, [])),
	<<Limit:32/signed>> = Bin5,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_special_activity_detail_toc, Succ,common_tool:to_list(Reason),Activity_key,common_tool:to_list(Title),common_tool:to_list(Text),Activity_start_time,Activity_end_time,Reward_start_time,Reward_end_time,Condition_list,Limit};

decode_m_special_activity_detail_toc(_) ->
	undefined.
encode_m_special_activity_stat_tos(Record) when is_record(Record, m_special_activity_stat_tos) ->
	#m_special_activity_stat_tos{activity_key=Activity_key,goods_id=Goods_id} = Record,
	case Activity_key =:= undefined of
		true ->
				Activity_keyFinal = undefined,
				exit({required_field_not_assigned, m_special_activity_stat_tos, activity_key});
		false ->
			Activity_keyFinal = Activity_key
	end,
	case Goods_id =:= undefined of
		true ->
				Goods_idFinal = 0;
		false ->
			Goods_idFinal = Goods_id
	end,

	<<Activity_keyFinal:32/signed,Goods_idFinal:32/signed>>;
encode_m_special_activity_stat_tos(_) -> 
	<<>>.

decode_m_special_activity_stat_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Activity_key:32/signed,Goods_id:32/signed>> = Bin0,

	{m_special_activity_stat_tos, Activity_key,Goods_id};

decode_m_special_activity_stat_tos(_) ->
	undefined.
encode_m_special_activity_stat_toc(Record) when is_record(Record, m_special_activity_stat_toc) ->
	#m_special_activity_stat_toc{succ=Succ,reason=Reason} = Record,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
		case Succ of
			true ->
				SuccFinal = 1;
			false ->
				SuccFinal = 0
		end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_special_activity_stat_toc(_) -> 
	<<>>.

decode_m_special_activity_stat_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_special_activity_stat_toc, Succ,common_tool:to_list(Reason)};

decode_m_special_activity_stat_toc(_) ->
	undefined.
encode_m_activity_boss_group_tos(Record) when is_record(Record, m_activity_boss_group_tos) ->
	#m_activity_boss_group_tos{op_type=Op_type,boss_id=Boss_id} = Record,
	case Op_type =:= undefined of
		true ->
				Op_typeFinal = undefined,
				exit({required_field_not_assigned, m_activity_boss_group_tos, op_type});
		false ->
			Op_typeFinal = Op_type
	end,
	case Boss_id =:= undefined of
		true ->
				Boss_idFinal = 0;
		false ->
			Boss_idFinal = Boss_id
	end,

	<<Op_typeFinal:32/signed,Boss_idFinal:32/signed>>;
encode_m_activity_boss_group_tos(_) -> 
	<<>>.

decode_m_activity_boss_group_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Op_type:32/signed,Boss_id:32/signed>> = Bin0,

	{m_activity_boss_group_tos, Op_type,Boss_id};

decode_m_activity_boss_group_tos(_) ->
	undefined.
encode_m_activity_boss_group_toc(Record) when is_record(Record, m_activity_boss_group_toc) ->
	#m_activity_boss_group_toc{op_type=Op_type,boss_group_list=Boss_group_list,boss_id=Boss_id,map_id=Map_id,tx=Tx,ty=Ty,succ=Succ,reason=Reason} = Record,
	case Op_type =:= undefined of
		true ->
				Op_typeFinal = undefined,
				exit({required_field_not_assigned, m_activity_boss_group_toc, op_type});
		false ->
			Op_typeFinal = Op_type
	end,
	case Boss_group_list =:= undefined of
		true ->
			Boss_group_listFinal = [];
		false ->
			Boss_group_listFinal = Boss_group_list
	end,
	case Boss_id =:= undefined of
		true ->
				Boss_idFinal = 0;
		false ->
			Boss_idFinal = Boss_id
	end,
	case Map_id =:= undefined of
		true ->
				Map_idFinal = 0;
		false ->
			Map_idFinal = Map_id
	end,
	case Tx =:= undefined of
		true ->
				TxFinal = 0;
		false ->
			TxFinal = Tx
	end,
	case Ty =:= undefined of
		true ->
				TyFinal = 0;
		false ->
			TyFinal = Ty
	end,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
			case Succ of
				true ->
					SuccFinal = 1;
				false ->
					SuccFinal = 0
			end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	Boss_group_list_bin = encode_p_boss_groups(Boss_group_listFinal, <<>>),
	SizeBoss_group_listFinal = erlang:length(Boss_group_listFinal),
	BinLen_boss_group_list = erlang:byte_size(Boss_group_list_bin),
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<Op_typeFinal:32/signed,SizeBoss_group_listFinal:16, BinLen_boss_group_list:32, Boss_group_list_bin/binary,Boss_idFinal:32/signed,Map_idFinal:32/signed,TxFinal:32/signed,TyFinal:32/signed,SuccFinal:8,ReasonLen:16, Reason2/binary>>;
encode_m_activity_boss_group_toc(_) -> 
	<<>>.

decode_m_activity_boss_group_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Op_type:32/signed,_Sizeboss_group_list:16, BinLenboss_group_list:32, Bin1/binary>> = Bin0,
	<<SubBinboss_group_list:BinLenboss_group_list/binary, Bin2/binary>> = Bin1, 
	Boss_group_list = lists:reverse(decode_p_boss_groups(SubBinboss_group_list, [])),
	<<Boss_id:32/signed,Map_id:32/signed,Tx:32/signed,Ty:32/signed,SuccTmp:8,ReasonLen:16, Bin3/binary>> = Bin2,
	<<Reason:ReasonLen/binary>> = Bin3,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_activity_boss_group_toc, Op_type,Boss_group_list,Boss_id,Map_id,Tx,Ty,Succ,common_tool:to_list(Reason)};

decode_m_activity_boss_group_toc(_) ->
	undefined.
encode_m_shuaqi_fb_request_tos(Record) when is_record(Record, m_shuaqi_fb_request_tos) ->
	#m_shuaqi_fb_request_tos{op_type=Op_type,fb_type=Fb_type} = Record,
	case Op_type =:= undefined of
		true ->
				Op_typeFinal = undefined,
				exit({required_field_not_assigned, m_shuaqi_fb_request_tos, op_type});
		false ->
			Op_typeFinal = Op_type
	end,
	case Fb_type =:= undefined of
		true ->
				Fb_typeFinal = 0;
		false ->
			Fb_typeFinal = Fb_type
	end,

	<<Op_typeFinal:32/signed,Fb_typeFinal:32/signed>>;
encode_m_shuaqi_fb_request_tos(_) -> 
	<<>>.

decode_m_shuaqi_fb_request_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Op_type:32/signed,Fb_type:32/signed>> = Bin0,

	{m_shuaqi_fb_request_tos, Op_type,Fb_type};

decode_m_shuaqi_fb_request_tos(_) ->
	undefined.
encode_m_shuaqi_fb_request_toc(Record) when is_record(Record, m_shuaqi_fb_request_toc) ->
	#m_shuaqi_fb_request_toc{op_type=Op_type,succ=Succ,reason=Reason,reason_code=Reason_code,fight_times=Fight_times,fb_type=Fb_type} = Record,
	case Op_type =:= undefined of
		true ->
				Op_typeFinal = undefined,
				exit({required_field_not_assigned, m_shuaqi_fb_request_toc, op_type});
		false ->
			Op_typeFinal = Op_type
	end,
	case Succ =:= undefined of
		true ->
				SuccFinal = 1;
		false ->
			case Succ of
				true ->
					SuccFinal = 1;
				false ->
					SuccFinal = 0
			end
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Reason_code =:= undefined of
		true ->
				Reason_codeFinal = 0;
		false ->
			Reason_codeFinal = Reason_code
	end,
	case Fight_times =:= undefined of
		true ->
				Fight_timesFinal = 0;
		false ->
			Fight_timesFinal = Fight_times
	end,
	case Fb_type =:= undefined of
		true ->
				Fb_typeFinal = 0;
		false ->
			Fb_typeFinal = Fb_type
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<Op_typeFinal:32/signed,SuccFinal:8,ReasonLen:16, Reason2/binary,Reason_codeFinal:32/signed,Fight_timesFinal:32/signed,Fb_typeFinal:32/signed>>;
encode_m_shuaqi_fb_request_toc(_) -> 
	<<>>.

decode_m_shuaqi_fb_request_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Op_type:32/signed,SuccTmp:8,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Reason_code:32/signed,Fight_times:32/signed,Fb_type:32/signed>> = Bin1,
case SuccTmp of 
	1 -> 
		Succ = true;
	_ ->
		Succ = false
end,

	{m_shuaqi_fb_request_toc, Op_type,Succ,common_tool:to_list(Reason),Reason_code,Fight_times,Fb_type};

decode_m_shuaqi_fb_request_toc(_) ->
	undefined.
encode_m_exercise_fb_request_tos(Record) when is_record(Record, m_exercise_fb_request_tos) ->
	#m_exercise_fb_request_tos{op_type=Op_type,fb_type=Fb_type} = Record,
	case Op_type =:= undefined of
		true ->
				Op_typeFinal = undefined,
				exit({required_field_not_assigned, m_exercise_fb_request_tos, op_type});
		false ->
			Op_typeFinal = Op_type
	end,
	case Fb_type =:= undefined of
		true ->
				Fb_typeFinal = 0;
		false ->
			Fb_typeFinal = Fb_type
	end,

	<<Op_typeFinal:32/signed,Fb_typeFinal:32/signed>>;
encode_m_exercise_fb_request_tos(_) -> 
	<<>>.

decode_m_exercise_fb_request_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Op_type:32/signed,Fb_type:32/signed>> = Bin0,

	{m_exercise_fb_request_tos, Op_type,Fb_type};

decode_m_exercise_fb_request_tos(_) ->
	undefined.
encode_m_exercise_fb_request_toc(Record) when is_record(Record, m_exercise_fb_request_toc) ->
	#m_exercise_fb_request_toc{op_type=Op_type,reason=Reason,err_code=Err_code,fb_type=Fb_type,map_id=Map_id,tx=Tx,ty=Ty,fight_times=Fight_times} = Record,
	case Op_type =:= undefined of
		true ->
				Op_typeFinal = undefined,
				exit({required_field_not_assigned, m_exercise_fb_request_toc, op_type});
		false ->
			Op_typeFinal = Op_type
	end,
	case Reason =:= undefined of
		true ->
				ReasonFinal = <<>>;
		false ->
			ReasonFinal = Reason
	end,
	case Err_code =:= undefined of
		true ->
				Err_codeFinal = 0;
		false ->
			Err_codeFinal = Err_code
	end,
	case Fb_type =:= undefined of
		true ->
				Fb_typeFinal = 0;
		false ->
			Fb_typeFinal = Fb_type
	end,
	case Map_id =:= undefined of
		true ->
				Map_idFinal = 0;
		false ->
			Map_idFinal = Map_id
	end,
	case Tx =:= undefined of
		true ->
				TxFinal = 0;
		false ->
			TxFinal = Tx
	end,
	case Ty =:= undefined of
		true ->
				TyFinal = 0;
		false ->
			TyFinal = Ty
	end,
	case Fight_times =:= undefined of
		true ->
				Fight_timesFinal = 0;
		false ->
			Fight_timesFinal = Fight_times
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<Op_typeFinal:32/signed,ReasonLen:16, Reason2/binary,Err_codeFinal:32/signed,Fb_typeFinal:32/signed,Map_idFinal:32/signed,TxFinal:32/signed,TyFinal:32/signed,Fight_timesFinal:32/signed>>;
encode_m_exercise_fb_request_toc(_) -> 
	<<>>.

decode_m_exercise_fb_request_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Op_type:32/signed,ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary,Err_code:32/signed,Fb_type:32/signed,Map_id:32/signed,Tx:32/signed,Ty:32/signed,Fight_times:32/signed>> = Bin1,

	{m_exercise_fb_request_toc, Op_type,common_tool:to_list(Reason),Err_code,Fb_type,Map_id,Tx,Ty,Fight_times};

decode_m_exercise_fb_request_toc(_) ->
	undefined.
encode_m_flash_proxy_server_tos(Record) when is_record(Record, m_flash_proxy_server_tos) ->
	#m_flash_proxy_server_tos{servername=Servername} = Record,
	case Servername =:= undefined of
		true ->
				ServernameFinal = undefined,
				exit({required_field_not_assigned, m_flash_proxy_server_tos, servername});
		false ->
			ServernameFinal = Servername
	end,
	Servername2 = common_tool:to_binary(ServernameFinal),
	ServernameLen = erlang:byte_size(Servername2),

	<<ServernameLen:16, Servername2/binary>>;
encode_m_flash_proxy_server_tos(_) -> 
	<<>>.

decode_m_flash_proxy_server_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<ServernameLen:16, Bin1/binary>> = Bin0,
	<<Servername:ServernameLen/binary>> = Bin1,

	{m_flash_proxy_server_tos, common_tool:to_list(Servername)};

decode_m_flash_proxy_server_tos(_) ->
	undefined.
encode_m_server_disconnect_flash_toc(Record) when is_record(Record, m_server_disconnect_flash_toc) ->
	#m_server_disconnect_flash_toc{reason=Reason} = Record,
	case Reason =:= undefined of
		true ->
				ReasonFinal = undefined,
				exit({required_field_not_assigned, m_server_disconnect_flash_toc, reason});
		false ->
			ReasonFinal = Reason
	end,
	Reason2 = common_tool:to_binary(ReasonFinal),
	ReasonLen = erlang:byte_size(Reason2),

	<<ReasonLen:16, Reason2/binary>>;
encode_m_server_disconnect_flash_toc(_) -> 
	<<>>.

decode_m_server_disconnect_flash_toc(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<ReasonLen:16, Bin1/binary>> = Bin0,
	<<Reason:ReasonLen/binary>> = Bin1,

	{m_server_disconnect_flash_toc, common_tool:to_list(Reason)};

decode_m_server_disconnect_flash_toc(_) ->
	undefined.
encode_m_server_update_proxy_address_config_tos(Record) when is_record(Record, m_server_update_proxy_address_config_tos) ->
	#m_server_update_proxy_address_config_tos{type=Type,servername=Servername,ip=Ip,port=Port} = Record,
	case Type =:= undefined of
		true ->
				TypeFinal = undefined,
				exit({required_field_not_assigned, m_server_update_proxy_address_config_tos, type});
		false ->
			TypeFinal = Type
	end,
	case Servername =:= undefined of
		true ->
				ServernameFinal = undefined,
				exit({required_field_not_assigned, m_server_update_proxy_address_config_tos, servername});
		false ->
			ServernameFinal = Servername
	end,
	case Ip =:= undefined of
		true ->
				IpFinal = undefined,
				exit({required_field_not_assigned, m_server_update_proxy_address_config_tos, ip});
		false ->
			IpFinal = Ip
	end,
	case Port =:= undefined of
		true ->
				PortFinal = undefined,
				exit({required_field_not_assigned, m_server_update_proxy_address_config_tos, port});
		false ->
			PortFinal = Port
	end,
	Servername2 = common_tool:to_binary(ServernameFinal),
	ServernameLen = erlang:byte_size(Servername2),
	Ip2 = common_tool:to_binary(IpFinal),
	IpLen = erlang:byte_size(Ip2),

	<<TypeFinal:32/signed,ServernameLen:16, Servername2/binary,IpLen:16, Ip2/binary,PortFinal:32/signed>>;
encode_m_server_update_proxy_address_config_tos(_) -> 
	<<>>.

decode_m_server_update_proxy_address_config_tos(Bin0) when erlang:is_binary(Bin0) andalso erlang:byte_size(Bin0) > 0 ->
	<<Type:32/signed,ServernameLen:16, Bin1/binary>> = Bin0,
	<<Servername:ServernameLen/binary,IpLen:16, Bin2/binary>> = Bin1,
	<<Ip:IpLen/binary,Port:32/signed>> = Bin2,

	{m_server_update_proxy_address_config_tos, Type,common_tool:to_list(Servername),common_tool:to_list(Ip),Port};

decode_m_server_update_proxy_address_config_tos(_) ->
	undefined.
encode_p_chat_titles([], Bin) ->
	Bin;
encode_p_chat_titles([H|T], Bin) ->
	NewBin = encode_p_chat_title(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_chat_titles(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_actor_bufs([], Bin) ->
	Bin;
encode_p_actor_bufs([H|T], Bin) ->
	NewBin = encode_p_actor_buf(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_actor_bufs(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_goodss([], Bin) ->
	Bin;
encode_p_goodss([H|T], Bin) ->
	NewBin = encode_p_goods(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_goodss(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_skill_preconditions([], Bin) ->
	Bin;
encode_p_skill_preconditions([H|T], Bin) ->
	NewBin = encode_p_skill_precondition(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_skill_preconditions(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_skill_item_consumes([], Bin) ->
	Bin;
encode_p_skill_item_consumes([H|T], Bin) ->
	NewBin = encode_p_skill_item_consume(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_skill_item_consumes(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_map_tiles([], Bin) ->
	Bin;
encode_p_map_tiles([H|T], Bin) ->
	NewBin = encode_p_map_tile(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_map_tiles(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_item_effects([], Bin) ->
	Bin;
encode_p_item_effects([H|T], Bin) ->
	NewBin = encode_p_item_effect(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_item_effects(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_equip_bind_attrs([], Bin) ->
	Bin;
encode_p_equip_bind_attrs([H|T], Bin) ->
	NewBin = encode_p_equip_bind_attr(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_equip_bind_attrs(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_drop_colour_modes([], Bin) ->
	Bin;
encode_p_drop_colour_modes([H|T], Bin) ->
	NewBin = encode_p_drop_colour_mode(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_drop_colour_modes(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_drop_quality_modes([], Bin) ->
	Bin;
encode_p_drop_quality_modes([H|T], Bin) ->
	NewBin = encode_p_drop_quality_mode(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_drop_quality_modes(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_drop_hole_modes([], Bin) ->
	Bin;
encode_p_drop_hole_modes([H|T], Bin) ->
	NewBin = encode_p_drop_hole_mode(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_drop_hole_modes(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_single_drops([], Bin) ->
	Bin;
encode_p_single_drops([H|T], Bin) ->
	NewBin = encode_p_single_drop(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_single_drops(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_drop_infos([], Bin) ->
	Bin;
encode_p_drop_infos([H|T], Bin) ->
	NewBin = encode_p_drop_info(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_drop_infos(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_monster_skills([], Bin) ->
	Bin;
encode_p_monster_skills([H|T], Bin) ->
	NewBin = encode_p_monster_skill(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_monster_skills(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_enemys([], Bin) ->
	Bin;
encode_p_enemys([H|T], Bin) ->
	NewBin = encode_p_enemy(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_enemys(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_boss_ai_skills([], Bin) ->
	Bin;
encode_p_boss_ai_skills([H|T], Bin) ->
	NewBin = encode_p_boss_ai_skill(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_boss_ai_skills(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_monster_talks([], Bin) ->
	Bin;
encode_p_monster_talks([H|T], Bin) ->
	NewBin = encode_p_monster_talk(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_monster_talks(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_boss_ai_conditions([], Bin) ->
	Bin;
encode_p_boss_ai_conditions([H|T], Bin) ->
	NewBin = encode_p_boss_ai_condition(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_boss_ai_conditions(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_family_second_owners([], Bin) ->
	Bin;
encode_p_family_second_owners([H|T], Bin) ->
	NewBin = encode_p_family_second_owner(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_family_second_owners(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_family_requests([], Bin) ->
	Bin;
encode_p_family_requests([H|T], Bin) ->
	NewBin = encode_p_family_request(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_family_requests(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_family_invites([], Bin) ->
	Bin;
encode_p_family_invites([H|T], Bin) ->
	NewBin = encode_p_family_invite(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_family_invites(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_family_member_infos([], Bin) ->
	Bin;
encode_p_family_member_infos([H|T], Bin) ->
	NewBin = encode_p_family_member_info(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_family_member_infos(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_rank_elements([], Bin) ->
	Bin;
encode_p_rank_elements([H|T], Bin) ->
	NewBin = encode_p_rank_element(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_rank_elements(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_collect_roles([], Bin) ->
	Bin;
encode_p_collect_roles([H|T], Bin) ->
	NewBin = encode_p_collect_role(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_collect_roles(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_collects([], Bin) ->
	Bin;
encode_p_collects([H|T], Bin) ->
	NewBin = encode_p_collect(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_collects(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_collect_goodss([], Bin) ->
	Bin;
encode_p_collect_goodss([H|T], Bin) ->
	NewBin = encode_p_collect_goods(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_collect_goodss(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_equip_onekey_simples([], Bin) ->
	Bin;
encode_p_equip_onekey_simples([H|T], Bin) ->
	NewBin = encode_p_equip_onekey_simple(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_equip_onekey_simples(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_pet_skills([], Bin) ->
	Bin;
encode_p_pet_skills([H|T], Bin) ->
	NewBin = encode_p_pet_skill(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_pet_skills(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_pet_id_names([], Bin) ->
	Bin;
encode_p_pet_id_names([H|T], Bin) ->
	NewBin = encode_p_pet_id_name(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_pet_id_names(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_scene_war_fb_role_infos([], Bin) ->
	Bin;
encode_p_scene_war_fb_role_infos([H|T], Bin) ->
	NewBin = encode_p_scene_war_fb_role_info(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_scene_war_fb_role_infos(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_hero_fb_barriers([], Bin) ->
	Bin;
encode_p_hero_fb_barriers([H|T], Bin) ->
	NewBin = encode_p_hero_fb_barrier(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_hero_fb_barriers(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_role_goal_items([], Bin) ->
	Bin;
encode_p_role_goal_items([H|T], Bin) ->
	NewBin = encode_p_role_goal_item(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_role_goal_items(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_goal_items([], Bin) ->
	Bin;
encode_p_goal_items([H|T], Bin) ->
	NewBin = encode_p_goal_item(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_goal_items(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_activity_prize_goodss([], Bin) ->
	Bin;
encode_p_activity_prize_goodss([H|T], Bin) ->
	NewBin = encode_p_activity_prize_goods(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_activity_prize_goodss(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_channel_infos([], Bin) ->
	Bin;
encode_p_channel_infos([H|T], Bin) ->
	NewBin = encode_p_channel_info(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_channel_infos(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_chat_roles([], Bin) ->
	Bin;
encode_p_chat_roles([H|T], Bin) ->
	NewBin = encode_p_chat_role(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_chat_roles(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_chat_channel_role_infos([], Bin) ->
	Bin;
encode_p_chat_channel_role_infos([H|T], Bin) ->
	NewBin = encode_p_chat_channel_role_info(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_chat_channel_role_infos(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_roles([], Bin) ->
	Bin;
encode_p_roles([H|T], Bin) ->
	NewBin = encode_p_role(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_roles(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_line_infos([], Bin) ->
	Bin;
encode_p_line_infos([H|T], Bin) ->
	NewBin = encode_p_line_info(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_line_infos(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_bag_contents([], Bin) ->
	Bin;
encode_p_bag_contents([H|T], Bin) ->
	NewBin = encode_p_bag_content(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_bag_contents(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_map_roles([], Bin) ->
	Bin;
encode_p_map_roles([H|T], Bin) ->
	NewBin = encode_p_map_role(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_map_roles(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_map_monsters([], Bin) ->
	Bin;
encode_p_map_monsters([H|T], Bin) ->
	NewBin = encode_p_map_monster(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_map_monsters(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_map_dropthings([], Bin) ->
	Bin;
encode_p_map_dropthings([H|T], Bin) ->
	NewBin = encode_p_map_dropthing(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_map_dropthings(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_map_stalls([], Bin) ->
	Bin;
encode_p_map_stalls([H|T], Bin) ->
	NewBin = encode_p_map_stall(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_map_stalls(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_map_collects([], Bin) ->
	Bin;
encode_p_map_collects([H|T], Bin) ->
	NewBin = encode_p_map_collect(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_map_collects(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_map_ybcs([], Bin) ->
	Bin;
encode_p_map_ybcs([H|T], Bin) ->
	NewBin = encode_p_map_ybc(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_map_ybcs(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_map_server_npcs([], Bin) ->
	Bin;
encode_p_map_server_npcs([H|T], Bin) ->
	NewBin = encode_p_map_server_npc(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_map_server_npcs(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_map_pets([], Bin) ->
	Bin;
encode_p_map_pets([H|T], Bin) ->
	NewBin = encode_p_map_pet(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_map_pets(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_map_traps([], Bin) ->
	Bin;
encode_p_map_traps([H|T], Bin) ->
	NewBin = encode_p_map_trap(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_map_traps(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_bufs([], Bin) ->
	Bin;
encode_p_bufs([H|T], Bin) ->
	NewBin = encode_p_buf(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_bufs(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_buff_effects([], Bin) ->
	Bin;
encode_p_buff_effects([H|T], Bin) ->
	NewBin = encode_p_buff_effect(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_buff_effects(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_attack_results([], Bin) ->
	Bin;
encode_p_attack_results([H|T], Bin) ->
	NewBin = encode_p_attack_result(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_attack_results(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_team_roles([], Bin) ->
	Bin;
encode_p_team_roles([H|T], Bin) ->
	NewBin = encode_p_team_role(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_team_roles(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_recommend_member_infos([], Bin) ->
	Bin;
encode_p_recommend_member_infos([H|T], Bin) ->
	NewBin = encode_p_recommend_member_info(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_recommend_member_infos(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_team_nearbys([], Bin) ->
	Bin;
encode_p_team_nearbys([H|T], Bin) ->
	NewBin = encode_p_team_nearby(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_team_nearbys(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_friend_infos([], Bin) ->
	Bin;
encode_p_friend_infos([H|T], Bin) ->
	NewBin = encode_p_friend_info(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_friend_infos(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_simple_friend_infos([], Bin) ->
	Bin;
encode_p_simple_friend_infos([H|T], Bin) ->
	NewBin = encode_p_simple_friend_info(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_simple_friend_infos(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_shop_infos([], Bin) ->
	Bin;
encode_p_shop_infos([H|T], Bin) ->
	NewBin = encode_p_shop_info(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_shop_infos(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_shop_currencys([], Bin) ->
	Bin;
encode_p_shop_currencys([H|T], Bin) ->
	NewBin = encode_p_shop_currency(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_shop_currencys(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_shop_prices([], Bin) ->
	Bin;
encode_p_shop_prices([H|T], Bin) ->
	NewBin = encode_p_shop_price(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_shop_prices(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_shop_goods_infos([], Bin) ->
	Bin;
encode_p_shop_goods_infos([H|T], Bin) ->
	NewBin = encode_p_shop_goods_info(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_shop_goods_infos(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_shop_sale_goodss([], Bin) ->
	Bin;
encode_p_shop_sale_goodss([H|T], Bin) ->
	NewBin = encode_p_shop_sale_goods(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_shop_sale_goodss(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_letter_simple_infos([], Bin) ->
	Bin;
encode_p_letter_simple_infos([H|T], Bin) ->
	NewBin = encode_p_letter_simple_info(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_letter_simple_infos(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_letter_goodss([], Bin) ->
	Bin;
encode_p_letter_goodss([H|T], Bin) ->
	NewBin = encode_p_letter_goods(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_letter_goodss(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_letter_deletes([], Bin) ->
	Bin;
encode_p_letter_deletes([H|T], Bin) ->
	NewBin = encode_p_letter_delete(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_letter_deletes(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_equip_mount_renewals([], Bin) ->
	Bin;
encode_p_equip_mount_renewals([H|T], Bin) ->
	NewBin = encode_p_equip_mount_renewal(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_equip_mount_renewals(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_equip_endurance_infos([], Bin) ->
	Bin;
encode_p_equip_endurance_infos([H|T], Bin) ->
	NewBin = encode_p_equip_endurance_info(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_equip_endurance_infos(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_role_attr_changes([], Bin) ->
	Bin;
encode_p_role_attr_changes([H|T], Bin) ->
	NewBin = encode_p_role_attr_change(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_role_attr_changes(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_role_skills([], Bin) ->
	Bin;
encode_p_role_skills([H|T], Bin) ->
	NewBin = encode_p_role_skill(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_role_skills(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_sys_buff_infos([], Bin) ->
	Bin;
encode_p_sys_buff_infos([H|T], Bin) ->
	NewBin = encode_p_sys_buff_info(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_sys_buff_infos(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_faction_online_ranks([], Bin) ->
	Bin;
encode_p_faction_online_ranks([H|T], Bin) ->
	NewBin = encode_p_faction_online_rank(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_faction_online_ranks(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_mission_listeners([], Bin) ->
	Bin;
encode_p_mission_listeners([H|T], Bin) ->
	NewBin = encode_p_mission_listener(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_mission_listeners(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_mission_infos([], Bin) ->
	Bin;
encode_p_mission_infos([H|T], Bin) ->
	NewBin = encode_p_mission_info(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_mission_infos(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_mission_props([], Bin) ->
	Bin;
encode_p_mission_props([H|T], Bin) ->
	NewBin = encode_p_mission_prop(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_mission_props(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_mission_autos([], Bin) ->
	Bin;
encode_p_mission_autos([H|T], Bin) ->
	NewBin = encode_p_mission_auto(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_mission_autos(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_family_ybc_member_infos([], Bin) ->
	Bin;
encode_p_family_ybc_member_infos([H|T], Bin) ->
	NewBin = encode_p_family_ybc_member_info(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_family_ybc_member_infos(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_simple_goodss([], Bin) ->
	Bin;
encode_p_simple_goodss([H|T], Bin) ->
	NewBin = encode_p_simple_goods(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_simple_goodss(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_equip_items([], Bin) ->
	Bin;
encode_p_equip_items([H|T], Bin) ->
	NewBin = encode_p_equip_item(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_equip_items(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_stall_goodss([], Bin) ->
	Bin;
encode_p_stall_goodss([H|T], Bin) ->
	NewBin = encode_p_stall_goods(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_stall_goodss(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_stall_logs([], Bin) ->
	Bin;
encode_p_stall_logs([H|T], Bin) ->
	NewBin = encode_p_stall_log(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_stall_logs(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_stall_list_items([], Bin) ->
	Bin;
encode_p_stall_list_items([H|T], Bin) ->
	NewBin = encode_p_stall_list_item(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_stall_list_items(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_stall_search_goodss([], Bin) ->
	Bin;
encode_p_stall_search_goodss([H|T], Bin) ->
	NewBin = encode_p_stall_search_goods(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_stall_search_goodss(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_fml_buffs([], Bin) ->
	Bin;
encode_p_fml_buffs([H|T], Bin) ->
	NewBin = encode_p_fml_buff(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_fml_buffs(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_skill_times([], Bin) ->
	Bin;
encode_p_skill_times([H|T], Bin) ->
	NewBin = encode_p_skill_time(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_skill_times(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_refinings([], Bin) ->
	Bin;
encode_p_refinings([H|T], Bin) ->
	NewBin = encode_p_refining(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_refinings(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_refining_box_logs([], Bin) ->
	Bin;
encode_p_refining_box_logs([H|T], Bin) ->
	NewBin = encode_p_refining_box_log(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_refining_box_logs(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_depot_bags([], Bin) ->
	Bin;
encode_p_depot_bags([H|T], Bin) ->
	NewBin = encode_p_depot_bag(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_depot_bags(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_educate_role_infos([], Bin) ->
	Bin;
encode_p_educate_role_infos([H|T], Bin) ->
	NewBin = encode_p_educate_role_info(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_educate_role_infos(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_bank_simple_sheets([], Bin) ->
	Bin;
encode_p_bank_simple_sheets([H|T], Bin) ->
	NewBin = encode_p_bank_simple_sheet(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_bank_simple_sheets(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_bank_sheets([], Bin) ->
	Bin;
encode_p_bank_sheets([H|T], Bin) ->
	NewBin = encode_p_bank_sheet(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_bank_sheets(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_shortcuts([], Bin) ->
	Bin;
encode_p_shortcuts([H|T], Bin) ->
	NewBin = encode_p_shortcut(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_shortcuts(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_family_invite_infos([], Bin) ->
	Bin;
encode_p_family_invite_infos([H|T], Bin) ->
	NewBin = encode_p_family_invite_info(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_family_invite_infos(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_family_summarys([], Bin) ->
	Bin;
encode_p_family_summarys([H|T], Bin) ->
	NewBin = encode_p_family_summary(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_family_summarys(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_family_request_infos([], Bin) ->
	Bin;
encode_p_family_request_infos([H|T], Bin) ->
	NewBin = encode_p_family_request_info(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_family_request_infos(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_family_info_changes([], Bin) ->
	Bin;
encode_p_family_info_changes([H|T], Bin) ->
	NewBin = encode_p_family_info_change(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_family_info_changes(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_family_tasks([], Bin) ->
	Bin;
encode_p_family_tasks([H|T], Bin) ->
	NewBin = encode_p_family_task(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_family_tasks(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_role_family_donate_infos([], Bin) ->
	Bin;
encode_p_role_family_donate_infos([H|T], Bin) ->
	NewBin = encode_p_role_family_donate_info(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_role_family_donate_infos(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_equip_build_equips([], Bin) ->
	Bin;
encode_p_equip_build_equips([H|T], Bin) ->
	NewBin = encode_p_equip_build_equip(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_equip_build_equips(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_equip_build_goodss([], Bin) ->
	Bin;
encode_p_equip_build_goodss([H|T], Bin) ->
	NewBin = encode_p_equip_build_goods(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_equip_build_goodss(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_rank_rows([], Bin) ->
	Bin;
encode_p_rank_rows([H|T], Bin) ->
	NewBin = encode_p_rank_row(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_rank_rows(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_rankings([], Bin) ->
	Bin;
encode_p_rankings([H|T], Bin) ->
	NewBin = encode_p_ranking(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_rankings(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_role_level_ranks([], Bin) ->
	Bin;
encode_p_role_level_ranks([H|T], Bin) ->
	NewBin = encode_p_role_level_rank(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_role_level_ranks(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_role_pkpoint_ranks([], Bin) ->
	Bin;
encode_p_role_pkpoint_ranks([H|T], Bin) ->
	NewBin = encode_p_role_pkpoint_rank(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_role_pkpoint_ranks(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_family_active_ranks([], Bin) ->
	Bin;
encode_p_family_active_ranks([H|T], Bin) ->
	NewBin = encode_p_family_active_rank(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_family_active_ranks(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_family_gongxun_ranks([], Bin) ->
	Bin;
encode_p_family_gongxun_ranks([H|T], Bin) ->
	NewBin = encode_p_family_gongxun_rank(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_family_gongxun_ranks(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_equip_ranks([], Bin) ->
	Bin;
encode_p_equip_ranks([H|T], Bin) ->
	NewBin = encode_p_equip_rank(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_equip_ranks(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_role_gongxun_ranks([], Bin) ->
	Bin;
encode_p_role_gongxun_ranks([H|T], Bin) ->
	NewBin = encode_p_role_gongxun_rank(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_role_gongxun_ranks(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_role_give_flowers_ranks([], Bin) ->
	Bin;
encode_p_role_give_flowers_ranks([H|T], Bin) ->
	NewBin = encode_p_role_give_flowers_rank(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_role_give_flowers_ranks(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_role_give_flowers_today_ranks([], Bin) ->
	Bin;
encode_p_role_give_flowers_today_ranks([H|T], Bin) ->
	NewBin = encode_p_role_give_flowers_today_rank(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_role_give_flowers_today_ranks(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_role_give_flowers_yesterday_ranks([], Bin) ->
	Bin;
encode_p_role_give_flowers_yesterday_ranks([H|T], Bin) ->
	NewBin = encode_p_role_give_flowers_yesterday_rank(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_role_give_flowers_yesterday_ranks(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_role_give_flowers_last_week_ranks([], Bin) ->
	Bin;
encode_p_role_give_flowers_last_week_ranks([H|T], Bin) ->
	NewBin = encode_p_role_give_flowers_last_week_rank(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_role_give_flowers_last_week_ranks(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_role_give_flowers_this_week_ranks([], Bin) ->
	Bin;
encode_p_role_give_flowers_this_week_ranks([H|T], Bin) ->
	NewBin = encode_p_role_give_flowers_this_week_rank(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_role_give_flowers_this_week_ranks(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_role_rece_flowers_ranks([], Bin) ->
	Bin;
encode_p_role_rece_flowers_ranks([H|T], Bin) ->
	NewBin = encode_p_role_rece_flowers_rank(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_role_rece_flowers_ranks(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_role_rece_flowers_today_ranks([], Bin) ->
	Bin;
encode_p_role_rece_flowers_today_ranks([H|T], Bin) ->
	NewBin = encode_p_role_rece_flowers_today_rank(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_role_rece_flowers_today_ranks(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_role_rece_flowers_yesterday_ranks([], Bin) ->
	Bin;
encode_p_role_rece_flowers_yesterday_ranks([H|T], Bin) ->
	NewBin = encode_p_role_rece_flowers_yesterday_rank(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_role_rece_flowers_yesterday_ranks(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_role_rece_flowers_last_week_ranks([], Bin) ->
	Bin;
encode_p_role_rece_flowers_last_week_ranks([H|T], Bin) ->
	NewBin = encode_p_role_rece_flowers_last_week_rank(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_role_rece_flowers_last_week_ranks(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_role_rece_flowers_this_week_ranks([], Bin) ->
	Bin;
encode_p_role_rece_flowers_this_week_ranks([H|T], Bin) ->
	NewBin = encode_p_role_rece_flowers_this_week_rank(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_role_rece_flowers_this_week_ranks(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_role_pet_ranks([], Bin) ->
	Bin;
encode_p_role_pet_ranks([H|T], Bin) ->
	NewBin = encode_p_role_pet_rank(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_role_pet_ranks(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_hero_fb_ranks([], Bin) ->
	Bin;
encode_p_hero_fb_ranks([H|T], Bin) ->
	NewBin = encode_p_hero_fb_rank(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_hero_fb_ranks(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_role_all_ranks([], Bin) ->
	Bin;
encode_p_role_all_ranks([H|T], Bin) ->
	NewBin = encode_p_role_all_rank(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_role_all_ranks(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_warofking_marks([], Bin) ->
	Bin;
encode_p_warofking_marks([H|T], Bin) ->
	NewBin = encode_p_warofking_mark(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_warofking_marks(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_titles([], Bin) ->
	Bin;
encode_p_titles([H|T], Bin) ->
	NewBin = encode_p_title(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_titles(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_office_positions([], Bin) ->
	Bin;
encode_p_office_positions([H|T], Bin) ->
	NewBin = encode_p_office_position(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_office_positions(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_office_equips([], Bin) ->
	Bin;
encode_p_office_equips([H|T], Bin) ->
	NewBin = encode_p_office_equip(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_office_equips(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_waroffaction_records([], Bin) ->
	Bin;
encode_p_waroffaction_records([H|T], Bin) ->
	NewBin = encode_p_waroffaction_record(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_waroffaction_records(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_waroffaction_ranks([], Bin) ->
	Bin;
encode_p_waroffaction_ranks([H|T], Bin) ->
	NewBin = encode_p_waroffaction_rank(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_waroffaction_ranks(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_warofcity_family_marks([], Bin) ->
	Bin;
encode_p_warofcity_family_marks([H|T], Bin) ->
	NewBin = encode_p_warofcity_family_mark(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_warofcity_family_marks(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_warofcity_role_marks([], Bin) ->
	Bin;
encode_p_warofcity_role_marks([H|T], Bin) ->
	NewBin = encode_p_warofcity_role_mark(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_warofcity_role_marks(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_warofcity_rewards([], Bin) ->
	Bin;
encode_p_warofcity_rewards([H|T], Bin) ->
	NewBin = encode_p_warofcity_reward(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_warofcity_rewards(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_warofcity_apply_familys([], Bin) ->
	Bin;
encode_p_warofcity_apply_familys([H|T], Bin) ->
	NewBin = encode_p_warofcity_apply_family(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_warofcity_apply_familys(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_warofcitys([], Bin) ->
	Bin;
encode_p_warofcitys([H|T], Bin) ->
	NewBin = encode_p_warofcity(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_warofcitys(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_achievement_infos([], Bin) ->
	Bin;
encode_p_achievement_infos([H|T], Bin) ->
	NewBin = encode_p_achievement_info(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_achievement_infos(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_achievement_stat_infos([], Bin) ->
	Bin;
encode_p_achievement_stat_infos([H|T], Bin) ->
	NewBin = encode_p_achievement_stat_info(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_achievement_stat_infos(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_personybc_award_attrs([], Bin) ->
	Bin;
encode_p_personybc_award_attrs([H|T], Bin) ->
	NewBin = encode_p_personybc_award_attr(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_personybc_award_attrs(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_personybc_award_props([], Bin) ->
	Bin;
encode_p_personybc_award_props([H|T], Bin) ->
	NewBin = encode_p_personybc_award_prop(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_personybc_award_props(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_equip_onekey_infos([], Bin) ->
	Bin;
encode_p_equip_onekey_infos([H|T], Bin) ->
	NewBin = encode_p_equip_onekey_info(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_equip_onekey_infos(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_activity_infos([], Bin) ->
	Bin;
encode_p_activity_infos([H|T], Bin) ->
	NewBin = encode_p_activity_info(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_activity_infos(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_gift_goodss([], Bin) ->
	Bin;
encode_p_gift_goodss([H|T], Bin) ->
	NewBin = encode_p_gift_goods(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_gift_goodss(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_trading_goodss([], Bin) ->
	Bin;
encode_p_trading_goodss([H|T], Bin) ->
	NewBin = encode_p_trading_goods(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_trading_goodss(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_flowers_give_infos([], Bin) ->
	Bin;
encode_p_flowers_give_infos([H|T], Bin) ->
	NewBin = encode_p_flowers_give_info(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_flowers_give_infos(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_map_farms([], Bin) ->
	Bin;
encode_p_map_farms([H|T], Bin) ->
	NewBin = encode_p_map_farm(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_map_farms(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_seed_infos([], Bin) ->
	Bin;
encode_p_seed_infos([H|T], Bin) ->
	NewBin = encode_p_seed_info(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_seed_infos(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_country_pointss([], Bin) ->
	Bin;
encode_p_country_pointss([H|T], Bin) ->
	NewBin = encode_p_country_points(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_country_pointss(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_pet_attr_assigns([], Bin) ->
	Bin;
encode_p_pet_attr_assigns([H|T], Bin) ->
	NewBin = encode_p_pet_attr_assign(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_pet_attr_assigns(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_pet_training_infos([], Bin) ->
	Bin;
encode_p_pet_training_infos([H|T], Bin) ->
	NewBin = encode_p_pet_training_info(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_pet_training_infos(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_grow_infos([], Bin) ->
	Bin;
encode_p_grow_infos([H|T], Bin) ->
	NewBin = encode_p_grow_info(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_grow_infos(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_educate_fb_items([], Bin) ->
	Bin;
encode_p_educate_fb_items([H|T], Bin) ->
	NewBin = encode_p_educate_fb_item(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_educate_fb_items(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_educate_fb_awards([], Bin) ->
	Bin;
encode_p_educate_fb_awards([H|T], Bin) ->
	NewBin = encode_p_educate_fb_award(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_educate_fb_awards(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_present_infos([], Bin) ->
	Bin;
encode_p_present_infos([H|T], Bin) ->
	NewBin = encode_p_present_info(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_present_infos(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_conlogin_rewards([], Bin) ->
	Bin;
encode_p_conlogin_rewards([H|T], Bin) ->
	NewBin = encode_p_conlogin_reward(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_conlogin_rewards(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_personal_fb_infos([], Bin) ->
	Bin;
encode_p_personal_fb_infos([H|T], Bin) ->
	NewBin = encode_p_personal_fb_info(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_personal_fb_infos(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_accumulate_exp_infos([], Bin) ->
	Bin;
encode_p_accumulate_exp_infos([H|T], Bin) ->
	NewBin = encode_p_accumulate_exp_info(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_accumulate_exp_infos(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_vip_list_infos([], Bin) ->
	Bin;
encode_p_vip_list_infos([H|T], Bin) ->
	NewBin = encode_p_vip_list_info(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_vip_list_infos(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_fmldepot_bags([], Bin) ->
	Bin;
encode_p_fmldepot_bags([H|T], Bin) ->
	NewBin = encode_p_fmldepot_bag(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_fmldepot_bags(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_fmldepot_logs([], Bin) ->
	Bin;
encode_p_fmldepot_logs([H|T], Bin) ->
	NewBin = encode_p_fmldepot_log(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_fmldepot_logs(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_scene_war_fb_links([], Bin) ->
	Bin;
encode_p_scene_war_fb_links([H|T], Bin) ->
	NewBin = encode_p_scene_war_fb_link(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_scene_war_fb_links(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_map_bonfires([], Bin) ->
	Bin;
encode_p_map_bonfires([H|T], Bin) ->
	NewBin = encode_p_map_bonfire(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_map_bonfires(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_hero_fb_poker_rewards([], Bin) ->
	Bin;
encode_p_hero_fb_poker_rewards([H|T], Bin) ->
	NewBin = encode_p_hero_fb_poker_reward(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_hero_fb_poker_rewards(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_online_infos([], Bin) ->
	Bin;
encode_p_online_infos([H|T], Bin) ->
	NewBin = encode_p_online_info(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_online_infos(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_prestige_items([], Bin) ->
	Bin;
encode_p_prestige_items([H|T], Bin) ->
	NewBin = encode_p_prestige_item(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_prestige_items(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_activity_conditions([], Bin) ->
	Bin;
encode_p_activity_conditions([H|T], Bin) ->
	NewBin = encode_p_activity_condition(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_activity_conditions(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
encode_p_boss_groups([], Bin) ->
	Bin;
encode_p_boss_groups([H|T], Bin) ->
	NewBin = encode_p_boss_group(H),
 	NewBinSize = erlang:byte_size(NewBin),
	encode_p_boss_groups(T, <<Bin/binary, NewBinSize:32, NewBin/binary>>).
decode_p_chat_titles(<<>>, List) ->
	List;
decode_p_chat_titles(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_chat_title(SubBin),
	decode_p_chat_titles(Bin3, [TmpRecord|List]).
decode_p_actor_bufs(<<>>, List) ->
	List;
decode_p_actor_bufs(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_actor_buf(SubBin),
	decode_p_actor_bufs(Bin3, [TmpRecord|List]).
decode_p_goodss(<<>>, List) ->
	List;
decode_p_goodss(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_goods(SubBin),
	decode_p_goodss(Bin3, [TmpRecord|List]).
decode_p_skill_preconditions(<<>>, List) ->
	List;
decode_p_skill_preconditions(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_skill_precondition(SubBin),
	decode_p_skill_preconditions(Bin3, [TmpRecord|List]).
decode_p_skill_item_consumes(<<>>, List) ->
	List;
decode_p_skill_item_consumes(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_skill_item_consume(SubBin),
	decode_p_skill_item_consumes(Bin3, [TmpRecord|List]).
decode_p_map_tiles(<<>>, List) ->
	List;
decode_p_map_tiles(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_map_tile(SubBin),
	decode_p_map_tiles(Bin3, [TmpRecord|List]).
decode_p_item_effects(<<>>, List) ->
	List;
decode_p_item_effects(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_item_effect(SubBin),
	decode_p_item_effects(Bin3, [TmpRecord|List]).
decode_p_equip_bind_attrs(<<>>, List) ->
	List;
decode_p_equip_bind_attrs(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_equip_bind_attr(SubBin),
	decode_p_equip_bind_attrs(Bin3, [TmpRecord|List]).
decode_p_drop_colour_modes(<<>>, List) ->
	List;
decode_p_drop_colour_modes(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_drop_colour_mode(SubBin),
	decode_p_drop_colour_modes(Bin3, [TmpRecord|List]).
decode_p_drop_quality_modes(<<>>, List) ->
	List;
decode_p_drop_quality_modes(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_drop_quality_mode(SubBin),
	decode_p_drop_quality_modes(Bin3, [TmpRecord|List]).
decode_p_drop_hole_modes(<<>>, List) ->
	List;
decode_p_drop_hole_modes(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_drop_hole_mode(SubBin),
	decode_p_drop_hole_modes(Bin3, [TmpRecord|List]).
decode_p_single_drops(<<>>, List) ->
	List;
decode_p_single_drops(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_single_drop(SubBin),
	decode_p_single_drops(Bin3, [TmpRecord|List]).
decode_p_drop_infos(<<>>, List) ->
	List;
decode_p_drop_infos(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_drop_info(SubBin),
	decode_p_drop_infos(Bin3, [TmpRecord|List]).
decode_p_monster_skills(<<>>, List) ->
	List;
decode_p_monster_skills(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_monster_skill(SubBin),
	decode_p_monster_skills(Bin3, [TmpRecord|List]).
decode_p_enemys(<<>>, List) ->
	List;
decode_p_enemys(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_enemy(SubBin),
	decode_p_enemys(Bin3, [TmpRecord|List]).
decode_p_boss_ai_skills(<<>>, List) ->
	List;
decode_p_boss_ai_skills(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_boss_ai_skill(SubBin),
	decode_p_boss_ai_skills(Bin3, [TmpRecord|List]).
decode_p_monster_talks(<<>>, List) ->
	List;
decode_p_monster_talks(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_monster_talk(SubBin),
	decode_p_monster_talks(Bin3, [TmpRecord|List]).
decode_p_boss_ai_conditions(<<>>, List) ->
	List;
decode_p_boss_ai_conditions(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_boss_ai_condition(SubBin),
	decode_p_boss_ai_conditions(Bin3, [TmpRecord|List]).
decode_p_family_second_owners(<<>>, List) ->
	List;
decode_p_family_second_owners(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_family_second_owner(SubBin),
	decode_p_family_second_owners(Bin3, [TmpRecord|List]).
decode_p_family_requests(<<>>, List) ->
	List;
decode_p_family_requests(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_family_request(SubBin),
	decode_p_family_requests(Bin3, [TmpRecord|List]).
decode_p_family_invites(<<>>, List) ->
	List;
decode_p_family_invites(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_family_invite(SubBin),
	decode_p_family_invites(Bin3, [TmpRecord|List]).
decode_p_family_member_infos(<<>>, List) ->
	List;
decode_p_family_member_infos(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_family_member_info(SubBin),
	decode_p_family_member_infos(Bin3, [TmpRecord|List]).
decode_p_rank_elements(<<>>, List) ->
	List;
decode_p_rank_elements(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_rank_element(SubBin),
	decode_p_rank_elements(Bin3, [TmpRecord|List]).
decode_p_collect_roles(<<>>, List) ->
	List;
decode_p_collect_roles(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_collect_role(SubBin),
	decode_p_collect_roles(Bin3, [TmpRecord|List]).
decode_p_collects(<<>>, List) ->
	List;
decode_p_collects(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_collect(SubBin),
	decode_p_collects(Bin3, [TmpRecord|List]).
decode_p_collect_goodss(<<>>, List) ->
	List;
decode_p_collect_goodss(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_collect_goods(SubBin),
	decode_p_collect_goodss(Bin3, [TmpRecord|List]).
decode_p_equip_onekey_simples(<<>>, List) ->
	List;
decode_p_equip_onekey_simples(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_equip_onekey_simple(SubBin),
	decode_p_equip_onekey_simples(Bin3, [TmpRecord|List]).
decode_p_pet_skills(<<>>, List) ->
	List;
decode_p_pet_skills(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_pet_skill(SubBin),
	decode_p_pet_skills(Bin3, [TmpRecord|List]).
decode_p_pet_id_names(<<>>, List) ->
	List;
decode_p_pet_id_names(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_pet_id_name(SubBin),
	decode_p_pet_id_names(Bin3, [TmpRecord|List]).
decode_p_scene_war_fb_role_infos(<<>>, List) ->
	List;
decode_p_scene_war_fb_role_infos(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_scene_war_fb_role_info(SubBin),
	decode_p_scene_war_fb_role_infos(Bin3, [TmpRecord|List]).
decode_p_hero_fb_barriers(<<>>, List) ->
	List;
decode_p_hero_fb_barriers(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_hero_fb_barrier(SubBin),
	decode_p_hero_fb_barriers(Bin3, [TmpRecord|List]).
decode_p_role_goal_items(<<>>, List) ->
	List;
decode_p_role_goal_items(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_role_goal_item(SubBin),
	decode_p_role_goal_items(Bin3, [TmpRecord|List]).
decode_p_goal_items(<<>>, List) ->
	List;
decode_p_goal_items(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_goal_item(SubBin),
	decode_p_goal_items(Bin3, [TmpRecord|List]).
decode_p_activity_prize_goodss(<<>>, List) ->
	List;
decode_p_activity_prize_goodss(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_activity_prize_goods(SubBin),
	decode_p_activity_prize_goodss(Bin3, [TmpRecord|List]).
decode_p_channel_infos(<<>>, List) ->
	List;
decode_p_channel_infos(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_channel_info(SubBin),
	decode_p_channel_infos(Bin3, [TmpRecord|List]).
decode_p_chat_roles(<<>>, List) ->
	List;
decode_p_chat_roles(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_chat_role(SubBin),
	decode_p_chat_roles(Bin3, [TmpRecord|List]).
decode_p_chat_channel_role_infos(<<>>, List) ->
	List;
decode_p_chat_channel_role_infos(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_chat_channel_role_info(SubBin),
	decode_p_chat_channel_role_infos(Bin3, [TmpRecord|List]).
decode_p_roles(<<>>, List) ->
	List;
decode_p_roles(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_role(SubBin),
	decode_p_roles(Bin3, [TmpRecord|List]).
decode_p_line_infos(<<>>, List) ->
	List;
decode_p_line_infos(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_line_info(SubBin),
	decode_p_line_infos(Bin3, [TmpRecord|List]).
decode_p_bag_contents(<<>>, List) ->
	List;
decode_p_bag_contents(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_bag_content(SubBin),
	decode_p_bag_contents(Bin3, [TmpRecord|List]).
decode_p_map_roles(<<>>, List) ->
	List;
decode_p_map_roles(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_map_role(SubBin),
	decode_p_map_roles(Bin3, [TmpRecord|List]).
decode_p_map_monsters(<<>>, List) ->
	List;
decode_p_map_monsters(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_map_monster(SubBin),
	decode_p_map_monsters(Bin3, [TmpRecord|List]).
decode_p_map_dropthings(<<>>, List) ->
	List;
decode_p_map_dropthings(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_map_dropthing(SubBin),
	decode_p_map_dropthings(Bin3, [TmpRecord|List]).
decode_p_map_stalls(<<>>, List) ->
	List;
decode_p_map_stalls(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_map_stall(SubBin),
	decode_p_map_stalls(Bin3, [TmpRecord|List]).
decode_p_map_collects(<<>>, List) ->
	List;
decode_p_map_collects(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_map_collect(SubBin),
	decode_p_map_collects(Bin3, [TmpRecord|List]).
decode_p_map_ybcs(<<>>, List) ->
	List;
decode_p_map_ybcs(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_map_ybc(SubBin),
	decode_p_map_ybcs(Bin3, [TmpRecord|List]).
decode_p_map_server_npcs(<<>>, List) ->
	List;
decode_p_map_server_npcs(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_map_server_npc(SubBin),
	decode_p_map_server_npcs(Bin3, [TmpRecord|List]).
decode_p_map_pets(<<>>, List) ->
	List;
decode_p_map_pets(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_map_pet(SubBin),
	decode_p_map_pets(Bin3, [TmpRecord|List]).
decode_p_map_traps(<<>>, List) ->
	List;
decode_p_map_traps(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_map_trap(SubBin),
	decode_p_map_traps(Bin3, [TmpRecord|List]).
decode_p_bufs(<<>>, List) ->
	List;
decode_p_bufs(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_buf(SubBin),
	decode_p_bufs(Bin3, [TmpRecord|List]).
decode_p_buff_effects(<<>>, List) ->
	List;
decode_p_buff_effects(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_buff_effect(SubBin),
	decode_p_buff_effects(Bin3, [TmpRecord|List]).
decode_p_attack_results(<<>>, List) ->
	List;
decode_p_attack_results(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_attack_result(SubBin),
	decode_p_attack_results(Bin3, [TmpRecord|List]).
decode_p_team_roles(<<>>, List) ->
	List;
decode_p_team_roles(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_team_role(SubBin),
	decode_p_team_roles(Bin3, [TmpRecord|List]).
decode_p_recommend_member_infos(<<>>, List) ->
	List;
decode_p_recommend_member_infos(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_recommend_member_info(SubBin),
	decode_p_recommend_member_infos(Bin3, [TmpRecord|List]).
decode_p_team_nearbys(<<>>, List) ->
	List;
decode_p_team_nearbys(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_team_nearby(SubBin),
	decode_p_team_nearbys(Bin3, [TmpRecord|List]).
decode_p_friend_infos(<<>>, List) ->
	List;
decode_p_friend_infos(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_friend_info(SubBin),
	decode_p_friend_infos(Bin3, [TmpRecord|List]).
decode_p_simple_friend_infos(<<>>, List) ->
	List;
decode_p_simple_friend_infos(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_simple_friend_info(SubBin),
	decode_p_simple_friend_infos(Bin3, [TmpRecord|List]).
decode_p_shop_infos(<<>>, List) ->
	List;
decode_p_shop_infos(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_shop_info(SubBin),
	decode_p_shop_infos(Bin3, [TmpRecord|List]).
decode_p_shop_currencys(<<>>, List) ->
	List;
decode_p_shop_currencys(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_shop_currency(SubBin),
	decode_p_shop_currencys(Bin3, [TmpRecord|List]).
decode_p_shop_prices(<<>>, List) ->
	List;
decode_p_shop_prices(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_shop_price(SubBin),
	decode_p_shop_prices(Bin3, [TmpRecord|List]).
decode_p_shop_goods_infos(<<>>, List) ->
	List;
decode_p_shop_goods_infos(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_shop_goods_info(SubBin),
	decode_p_shop_goods_infos(Bin3, [TmpRecord|List]).
decode_p_shop_sale_goodss(<<>>, List) ->
	List;
decode_p_shop_sale_goodss(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_shop_sale_goods(SubBin),
	decode_p_shop_sale_goodss(Bin3, [TmpRecord|List]).
decode_p_letter_simple_infos(<<>>, List) ->
	List;
decode_p_letter_simple_infos(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_letter_simple_info(SubBin),
	decode_p_letter_simple_infos(Bin3, [TmpRecord|List]).
decode_p_letter_goodss(<<>>, List) ->
	List;
decode_p_letter_goodss(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_letter_goods(SubBin),
	decode_p_letter_goodss(Bin3, [TmpRecord|List]).
decode_p_letter_deletes(<<>>, List) ->
	List;
decode_p_letter_deletes(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_letter_delete(SubBin),
	decode_p_letter_deletes(Bin3, [TmpRecord|List]).
decode_p_equip_mount_renewals(<<>>, List) ->
	List;
decode_p_equip_mount_renewals(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_equip_mount_renewal(SubBin),
	decode_p_equip_mount_renewals(Bin3, [TmpRecord|List]).
decode_p_equip_endurance_infos(<<>>, List) ->
	List;
decode_p_equip_endurance_infos(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_equip_endurance_info(SubBin),
	decode_p_equip_endurance_infos(Bin3, [TmpRecord|List]).
decode_p_role_attr_changes(<<>>, List) ->
	List;
decode_p_role_attr_changes(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_role_attr_change(SubBin),
	decode_p_role_attr_changes(Bin3, [TmpRecord|List]).
decode_p_role_skills(<<>>, List) ->
	List;
decode_p_role_skills(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_role_skill(SubBin),
	decode_p_role_skills(Bin3, [TmpRecord|List]).
decode_p_sys_buff_infos(<<>>, List) ->
	List;
decode_p_sys_buff_infos(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_sys_buff_info(SubBin),
	decode_p_sys_buff_infos(Bin3, [TmpRecord|List]).
decode_p_faction_online_ranks(<<>>, List) ->
	List;
decode_p_faction_online_ranks(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_faction_online_rank(SubBin),
	decode_p_faction_online_ranks(Bin3, [TmpRecord|List]).
decode_p_mission_listeners(<<>>, List) ->
	List;
decode_p_mission_listeners(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_mission_listener(SubBin),
	decode_p_mission_listeners(Bin3, [TmpRecord|List]).
decode_p_mission_infos(<<>>, List) ->
	List;
decode_p_mission_infos(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_mission_info(SubBin),
	decode_p_mission_infos(Bin3, [TmpRecord|List]).
decode_p_mission_props(<<>>, List) ->
	List;
decode_p_mission_props(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_mission_prop(SubBin),
	decode_p_mission_props(Bin3, [TmpRecord|List]).
decode_p_mission_autos(<<>>, List) ->
	List;
decode_p_mission_autos(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_mission_auto(SubBin),
	decode_p_mission_autos(Bin3, [TmpRecord|List]).
decode_p_family_ybc_member_infos(<<>>, List) ->
	List;
decode_p_family_ybc_member_infos(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_family_ybc_member_info(SubBin),
	decode_p_family_ybc_member_infos(Bin3, [TmpRecord|List]).
decode_p_simple_goodss(<<>>, List) ->
	List;
decode_p_simple_goodss(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_simple_goods(SubBin),
	decode_p_simple_goodss(Bin3, [TmpRecord|List]).
decode_p_equip_items(<<>>, List) ->
	List;
decode_p_equip_items(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_equip_item(SubBin),
	decode_p_equip_items(Bin3, [TmpRecord|List]).
decode_p_stall_goodss(<<>>, List) ->
	List;
decode_p_stall_goodss(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_stall_goods(SubBin),
	decode_p_stall_goodss(Bin3, [TmpRecord|List]).
decode_p_stall_logs(<<>>, List) ->
	List;
decode_p_stall_logs(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_stall_log(SubBin),
	decode_p_stall_logs(Bin3, [TmpRecord|List]).
decode_p_stall_list_items(<<>>, List) ->
	List;
decode_p_stall_list_items(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_stall_list_item(SubBin),
	decode_p_stall_list_items(Bin3, [TmpRecord|List]).
decode_p_stall_search_goodss(<<>>, List) ->
	List;
decode_p_stall_search_goodss(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_stall_search_goods(SubBin),
	decode_p_stall_search_goodss(Bin3, [TmpRecord|List]).
decode_p_fml_buffs(<<>>, List) ->
	List;
decode_p_fml_buffs(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_fml_buff(SubBin),
	decode_p_fml_buffs(Bin3, [TmpRecord|List]).
decode_p_skill_times(<<>>, List) ->
	List;
decode_p_skill_times(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_skill_time(SubBin),
	decode_p_skill_times(Bin3, [TmpRecord|List]).
decode_p_refinings(<<>>, List) ->
	List;
decode_p_refinings(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_refining(SubBin),
	decode_p_refinings(Bin3, [TmpRecord|List]).
decode_p_refining_box_logs(<<>>, List) ->
	List;
decode_p_refining_box_logs(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_refining_box_log(SubBin),
	decode_p_refining_box_logs(Bin3, [TmpRecord|List]).
decode_p_depot_bags(<<>>, List) ->
	List;
decode_p_depot_bags(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_depot_bag(SubBin),
	decode_p_depot_bags(Bin3, [TmpRecord|List]).
decode_p_educate_role_infos(<<>>, List) ->
	List;
decode_p_educate_role_infos(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_educate_role_info(SubBin),
	decode_p_educate_role_infos(Bin3, [TmpRecord|List]).
decode_p_bank_simple_sheets(<<>>, List) ->
	List;
decode_p_bank_simple_sheets(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_bank_simple_sheet(SubBin),
	decode_p_bank_simple_sheets(Bin3, [TmpRecord|List]).
decode_p_bank_sheets(<<>>, List) ->
	List;
decode_p_bank_sheets(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_bank_sheet(SubBin),
	decode_p_bank_sheets(Bin3, [TmpRecord|List]).
decode_p_shortcuts(<<>>, List) ->
	List;
decode_p_shortcuts(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_shortcut(SubBin),
	decode_p_shortcuts(Bin3, [TmpRecord|List]).
decode_p_family_invite_infos(<<>>, List) ->
	List;
decode_p_family_invite_infos(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_family_invite_info(SubBin),
	decode_p_family_invite_infos(Bin3, [TmpRecord|List]).
decode_p_family_summarys(<<>>, List) ->
	List;
decode_p_family_summarys(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_family_summary(SubBin),
	decode_p_family_summarys(Bin3, [TmpRecord|List]).
decode_p_family_request_infos(<<>>, List) ->
	List;
decode_p_family_request_infos(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_family_request_info(SubBin),
	decode_p_family_request_infos(Bin3, [TmpRecord|List]).
decode_p_family_info_changes(<<>>, List) ->
	List;
decode_p_family_info_changes(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_family_info_change(SubBin),
	decode_p_family_info_changes(Bin3, [TmpRecord|List]).
decode_p_family_tasks(<<>>, List) ->
	List;
decode_p_family_tasks(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_family_task(SubBin),
	decode_p_family_tasks(Bin3, [TmpRecord|List]).
decode_p_role_family_donate_infos(<<>>, List) ->
	List;
decode_p_role_family_donate_infos(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_role_family_donate_info(SubBin),
	decode_p_role_family_donate_infos(Bin3, [TmpRecord|List]).
decode_p_equip_build_equips(<<>>, List) ->
	List;
decode_p_equip_build_equips(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_equip_build_equip(SubBin),
	decode_p_equip_build_equips(Bin3, [TmpRecord|List]).
decode_p_equip_build_goodss(<<>>, List) ->
	List;
decode_p_equip_build_goodss(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_equip_build_goods(SubBin),
	decode_p_equip_build_goodss(Bin3, [TmpRecord|List]).
decode_p_rank_rows(<<>>, List) ->
	List;
decode_p_rank_rows(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_rank_row(SubBin),
	decode_p_rank_rows(Bin3, [TmpRecord|List]).
decode_p_rankings(<<>>, List) ->
	List;
decode_p_rankings(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_ranking(SubBin),
	decode_p_rankings(Bin3, [TmpRecord|List]).
decode_p_role_level_ranks(<<>>, List) ->
	List;
decode_p_role_level_ranks(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_role_level_rank(SubBin),
	decode_p_role_level_ranks(Bin3, [TmpRecord|List]).
decode_p_role_pkpoint_ranks(<<>>, List) ->
	List;
decode_p_role_pkpoint_ranks(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_role_pkpoint_rank(SubBin),
	decode_p_role_pkpoint_ranks(Bin3, [TmpRecord|List]).
decode_p_family_active_ranks(<<>>, List) ->
	List;
decode_p_family_active_ranks(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_family_active_rank(SubBin),
	decode_p_family_active_ranks(Bin3, [TmpRecord|List]).
decode_p_family_gongxun_ranks(<<>>, List) ->
	List;
decode_p_family_gongxun_ranks(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_family_gongxun_rank(SubBin),
	decode_p_family_gongxun_ranks(Bin3, [TmpRecord|List]).
decode_p_equip_ranks(<<>>, List) ->
	List;
decode_p_equip_ranks(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_equip_rank(SubBin),
	decode_p_equip_ranks(Bin3, [TmpRecord|List]).
decode_p_role_gongxun_ranks(<<>>, List) ->
	List;
decode_p_role_gongxun_ranks(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_role_gongxun_rank(SubBin),
	decode_p_role_gongxun_ranks(Bin3, [TmpRecord|List]).
decode_p_role_give_flowers_ranks(<<>>, List) ->
	List;
decode_p_role_give_flowers_ranks(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_role_give_flowers_rank(SubBin),
	decode_p_role_give_flowers_ranks(Bin3, [TmpRecord|List]).
decode_p_role_give_flowers_today_ranks(<<>>, List) ->
	List;
decode_p_role_give_flowers_today_ranks(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_role_give_flowers_today_rank(SubBin),
	decode_p_role_give_flowers_today_ranks(Bin3, [TmpRecord|List]).
decode_p_role_give_flowers_yesterday_ranks(<<>>, List) ->
	List;
decode_p_role_give_flowers_yesterday_ranks(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_role_give_flowers_yesterday_rank(SubBin),
	decode_p_role_give_flowers_yesterday_ranks(Bin3, [TmpRecord|List]).
decode_p_role_give_flowers_last_week_ranks(<<>>, List) ->
	List;
decode_p_role_give_flowers_last_week_ranks(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_role_give_flowers_last_week_rank(SubBin),
	decode_p_role_give_flowers_last_week_ranks(Bin3, [TmpRecord|List]).
decode_p_role_give_flowers_this_week_ranks(<<>>, List) ->
	List;
decode_p_role_give_flowers_this_week_ranks(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_role_give_flowers_this_week_rank(SubBin),
	decode_p_role_give_flowers_this_week_ranks(Bin3, [TmpRecord|List]).
decode_p_role_rece_flowers_ranks(<<>>, List) ->
	List;
decode_p_role_rece_flowers_ranks(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_role_rece_flowers_rank(SubBin),
	decode_p_role_rece_flowers_ranks(Bin3, [TmpRecord|List]).
decode_p_role_rece_flowers_today_ranks(<<>>, List) ->
	List;
decode_p_role_rece_flowers_today_ranks(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_role_rece_flowers_today_rank(SubBin),
	decode_p_role_rece_flowers_today_ranks(Bin3, [TmpRecord|List]).
decode_p_role_rece_flowers_yesterday_ranks(<<>>, List) ->
	List;
decode_p_role_rece_flowers_yesterday_ranks(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_role_rece_flowers_yesterday_rank(SubBin),
	decode_p_role_rece_flowers_yesterday_ranks(Bin3, [TmpRecord|List]).
decode_p_role_rece_flowers_last_week_ranks(<<>>, List) ->
	List;
decode_p_role_rece_flowers_last_week_ranks(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_role_rece_flowers_last_week_rank(SubBin),
	decode_p_role_rece_flowers_last_week_ranks(Bin3, [TmpRecord|List]).
decode_p_role_rece_flowers_this_week_ranks(<<>>, List) ->
	List;
decode_p_role_rece_flowers_this_week_ranks(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_role_rece_flowers_this_week_rank(SubBin),
	decode_p_role_rece_flowers_this_week_ranks(Bin3, [TmpRecord|List]).
decode_p_role_pet_ranks(<<>>, List) ->
	List;
decode_p_role_pet_ranks(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_role_pet_rank(SubBin),
	decode_p_role_pet_ranks(Bin3, [TmpRecord|List]).
decode_p_hero_fb_ranks(<<>>, List) ->
	List;
decode_p_hero_fb_ranks(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_hero_fb_rank(SubBin),
	decode_p_hero_fb_ranks(Bin3, [TmpRecord|List]).
decode_p_role_all_ranks(<<>>, List) ->
	List;
decode_p_role_all_ranks(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_role_all_rank(SubBin),
	decode_p_role_all_ranks(Bin3, [TmpRecord|List]).
decode_p_warofking_marks(<<>>, List) ->
	List;
decode_p_warofking_marks(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_warofking_mark(SubBin),
	decode_p_warofking_marks(Bin3, [TmpRecord|List]).
decode_p_titles(<<>>, List) ->
	List;
decode_p_titles(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_title(SubBin),
	decode_p_titles(Bin3, [TmpRecord|List]).
decode_p_office_positions(<<>>, List) ->
	List;
decode_p_office_positions(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_office_position(SubBin),
	decode_p_office_positions(Bin3, [TmpRecord|List]).
decode_p_office_equips(<<>>, List) ->
	List;
decode_p_office_equips(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_office_equip(SubBin),
	decode_p_office_equips(Bin3, [TmpRecord|List]).
decode_p_waroffaction_records(<<>>, List) ->
	List;
decode_p_waroffaction_records(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_waroffaction_record(SubBin),
	decode_p_waroffaction_records(Bin3, [TmpRecord|List]).
decode_p_waroffaction_ranks(<<>>, List) ->
	List;
decode_p_waroffaction_ranks(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_waroffaction_rank(SubBin),
	decode_p_waroffaction_ranks(Bin3, [TmpRecord|List]).
decode_p_warofcity_family_marks(<<>>, List) ->
	List;
decode_p_warofcity_family_marks(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_warofcity_family_mark(SubBin),
	decode_p_warofcity_family_marks(Bin3, [TmpRecord|List]).
decode_p_warofcity_role_marks(<<>>, List) ->
	List;
decode_p_warofcity_role_marks(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_warofcity_role_mark(SubBin),
	decode_p_warofcity_role_marks(Bin3, [TmpRecord|List]).
decode_p_warofcity_rewards(<<>>, List) ->
	List;
decode_p_warofcity_rewards(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_warofcity_reward(SubBin),
	decode_p_warofcity_rewards(Bin3, [TmpRecord|List]).
decode_p_warofcity_apply_familys(<<>>, List) ->
	List;
decode_p_warofcity_apply_familys(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_warofcity_apply_family(SubBin),
	decode_p_warofcity_apply_familys(Bin3, [TmpRecord|List]).
decode_p_warofcitys(<<>>, List) ->
	List;
decode_p_warofcitys(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_warofcity(SubBin),
	decode_p_warofcitys(Bin3, [TmpRecord|List]).
decode_p_achievement_infos(<<>>, List) ->
	List;
decode_p_achievement_infos(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_achievement_info(SubBin),
	decode_p_achievement_infos(Bin3, [TmpRecord|List]).
decode_p_achievement_stat_infos(<<>>, List) ->
	List;
decode_p_achievement_stat_infos(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_achievement_stat_info(SubBin),
	decode_p_achievement_stat_infos(Bin3, [TmpRecord|List]).
decode_p_personybc_award_attrs(<<>>, List) ->
	List;
decode_p_personybc_award_attrs(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_personybc_award_attr(SubBin),
	decode_p_personybc_award_attrs(Bin3, [TmpRecord|List]).
decode_p_personybc_award_props(<<>>, List) ->
	List;
decode_p_personybc_award_props(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_personybc_award_prop(SubBin),
	decode_p_personybc_award_props(Bin3, [TmpRecord|List]).
decode_p_equip_onekey_infos(<<>>, List) ->
	List;
decode_p_equip_onekey_infos(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_equip_onekey_info(SubBin),
	decode_p_equip_onekey_infos(Bin3, [TmpRecord|List]).
decode_p_activity_infos(<<>>, List) ->
	List;
decode_p_activity_infos(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_activity_info(SubBin),
	decode_p_activity_infos(Bin3, [TmpRecord|List]).
decode_p_gift_goodss(<<>>, List) ->
	List;
decode_p_gift_goodss(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_gift_goods(SubBin),
	decode_p_gift_goodss(Bin3, [TmpRecord|List]).
decode_p_trading_goodss(<<>>, List) ->
	List;
decode_p_trading_goodss(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_trading_goods(SubBin),
	decode_p_trading_goodss(Bin3, [TmpRecord|List]).
decode_p_flowers_give_infos(<<>>, List) ->
	List;
decode_p_flowers_give_infos(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_flowers_give_info(SubBin),
	decode_p_flowers_give_infos(Bin3, [TmpRecord|List]).
decode_p_map_farms(<<>>, List) ->
	List;
decode_p_map_farms(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_map_farm(SubBin),
	decode_p_map_farms(Bin3, [TmpRecord|List]).
decode_p_seed_infos(<<>>, List) ->
	List;
decode_p_seed_infos(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_seed_info(SubBin),
	decode_p_seed_infos(Bin3, [TmpRecord|List]).
decode_p_country_pointss(<<>>, List) ->
	List;
decode_p_country_pointss(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_country_points(SubBin),
	decode_p_country_pointss(Bin3, [TmpRecord|List]).
decode_p_pet_attr_assigns(<<>>, List) ->
	List;
decode_p_pet_attr_assigns(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_pet_attr_assign(SubBin),
	decode_p_pet_attr_assigns(Bin3, [TmpRecord|List]).
decode_p_pet_training_infos(<<>>, List) ->
	List;
decode_p_pet_training_infos(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_pet_training_info(SubBin),
	decode_p_pet_training_infos(Bin3, [TmpRecord|List]).
decode_p_grow_infos(<<>>, List) ->
	List;
decode_p_grow_infos(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_grow_info(SubBin),
	decode_p_grow_infos(Bin3, [TmpRecord|List]).
decode_p_educate_fb_items(<<>>, List) ->
	List;
decode_p_educate_fb_items(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_educate_fb_item(SubBin),
	decode_p_educate_fb_items(Bin3, [TmpRecord|List]).
decode_p_educate_fb_awards(<<>>, List) ->
	List;
decode_p_educate_fb_awards(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_educate_fb_award(SubBin),
	decode_p_educate_fb_awards(Bin3, [TmpRecord|List]).
decode_p_present_infos(<<>>, List) ->
	List;
decode_p_present_infos(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_present_info(SubBin),
	decode_p_present_infos(Bin3, [TmpRecord|List]).
decode_p_conlogin_rewards(<<>>, List) ->
	List;
decode_p_conlogin_rewards(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_conlogin_reward(SubBin),
	decode_p_conlogin_rewards(Bin3, [TmpRecord|List]).
decode_p_personal_fb_infos(<<>>, List) ->
	List;
decode_p_personal_fb_infos(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_personal_fb_info(SubBin),
	decode_p_personal_fb_infos(Bin3, [TmpRecord|List]).
decode_p_accumulate_exp_infos(<<>>, List) ->
	List;
decode_p_accumulate_exp_infos(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_accumulate_exp_info(SubBin),
	decode_p_accumulate_exp_infos(Bin3, [TmpRecord|List]).
decode_p_vip_list_infos(<<>>, List) ->
	List;
decode_p_vip_list_infos(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_vip_list_info(SubBin),
	decode_p_vip_list_infos(Bin3, [TmpRecord|List]).
decode_p_fmldepot_bags(<<>>, List) ->
	List;
decode_p_fmldepot_bags(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_fmldepot_bag(SubBin),
	decode_p_fmldepot_bags(Bin3, [TmpRecord|List]).
decode_p_fmldepot_logs(<<>>, List) ->
	List;
decode_p_fmldepot_logs(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_fmldepot_log(SubBin),
	decode_p_fmldepot_logs(Bin3, [TmpRecord|List]).
decode_p_scene_war_fb_links(<<>>, List) ->
	List;
decode_p_scene_war_fb_links(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_scene_war_fb_link(SubBin),
	decode_p_scene_war_fb_links(Bin3, [TmpRecord|List]).
decode_p_map_bonfires(<<>>, List) ->
	List;
decode_p_map_bonfires(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_map_bonfire(SubBin),
	decode_p_map_bonfires(Bin3, [TmpRecord|List]).
decode_p_hero_fb_poker_rewards(<<>>, List) ->
	List;
decode_p_hero_fb_poker_rewards(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_hero_fb_poker_reward(SubBin),
	decode_p_hero_fb_poker_rewards(Bin3, [TmpRecord|List]).
decode_p_online_infos(<<>>, List) ->
	List;
decode_p_online_infos(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_online_info(SubBin),
	decode_p_online_infos(Bin3, [TmpRecord|List]).
decode_p_prestige_items(<<>>, List) ->
	List;
decode_p_prestige_items(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_prestige_item(SubBin),
	decode_p_prestige_items(Bin3, [TmpRecord|List]).
decode_p_activity_conditions(<<>>, List) ->
	List;
decode_p_activity_conditions(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_activity_condition(SubBin),
	decode_p_activity_conditions(Bin3, [TmpRecord|List]).
decode_p_boss_groups(<<>>, List) ->
	List;
decode_p_boss_groups(Bin, List) ->
	<<SubBinSize:32, Bin2/binary>> = Bin,
	<<SubBin:SubBinSize/binary, Bin3/binary>> = Bin2,	TmpRecord = decode_p_boss_group(SubBin),
	decode_p_boss_groups(Bin3, [TmpRecord|List]).
