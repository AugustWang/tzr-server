#!/bin/bash

# add by odinxu, 2009-10-05, fix bug: [emfile] open too many files.
ulimit -SHn 51200

# define default configuration
POLL=true
SMP=disable
ERL_MAX_PORTS=32000
ERL_PROCESSES=250000
ERL_MAX_ETS_TABLES=1400

# define default environment variables
NODE=chat

MGE_ROOT=/data/tzr/server

ERLANG_NODE=`php ${MGE_ROOT}/script/host_info.php -get_node ${NODE}_node`
ERL=/usr/local/bin/erl

ARGS=
while [ $# -ne 0 ] ; do
    PARAM=$1
    shift
    case $PARAM in
        --) break ;;
        *) ARGS="$ARGS $PARAM" ;;
    esac
done

EXEC_CMD="sh -c"

NAME=-name
[ "$ERLANG_NODE" = "${ERLANG_NODE%.*}" ] && NAME=-sname

LOCK_FILE=$MGE_ROOT/ebin/$NODE/run.lock

##额外的ebin目录
PROTO_EBIN_PATH=$MGE_ROOT/ebin/proto
COMMON_EBIN_PATH=$MGE_ROOT/ebin/common

MAEEL_PA="-pa $MGE_ROOT/ebin -pa $MGE_ROOT/ebin/chat/mod -pa $MGE_ROOT/ebin/chat -pa $PROTO_EBIN_PATH -pa $COMMON_EBIN_PATH "

LOG_DIR=/data/logs/tzr

##设置输出日志文件
MGEEA_LOG_PATH=$LOG_DIR/$NODE.log
##设置sasl日志输出目录
SASL_LOG_PATH=$LOG_DIR/${NODE}_sasl.log
##设置coredump输出目录
DATETIME=`date "+%Y%m%d-%H%M%S"`
ERL_CRASH_DUMP=$LOG_DIR/${NODE}_erl_crash_$DATETIME.dump

COOKIE=123456

ERLANG_OPTS="+K $POLL -smp $SMP -setcookie $COOKIE -test a +P $ERL_PROCESSES $ERL_OPTIONS $KERNEL_OPTS"


# export global variables
export ERL_CRASH_DUMP
export ERL_MAX_PORTS
export ERL_MAX_ETS_TABLES
export HOME
export EXEC_CMD


# start server
start ()
{
	started
	if [ $? = 1 ] ; then
		rm -rf "$LOCK_FILE"
		$EXEC_CMD "$ERL \
		  $NAME $ERLANG_NODE \
		  -noinput -detached \
		  $MAEEL_PA \
		  -s mgeec \
		  -sasl sasl_error_logger \\{file,\\\"$SASL_LOG_PATH\\\"\\} \
		  $ERLANG_OPTS $ARGS \"$@\""
	fi
}

# attach to server
debug ()
{
    echo "--------------------------------------------------------------------"
    echo ""
    echo "IMPORTANT: we will attempt to attach an INTERACTIVE shell"
    echo "to an already running mgeec node."
    echo "If an ERROR is printed, it means the connection was not succesfull."
    echo "You can interact with the mgeec node if you know how to use it."
    echo "Please be extremely cautious with your actions,"
    echo "and exit immediately if you are not completely sure."
    echo ""
    echo "To detach this shell from mgeec, press:"
    echo "  control+c, control+c"
    echo ""
    echo "--------------------------------------------------------------------"
    echo "Press any key to continue"
    read foo
    echo ""
    $EXEC_CMD "$ERL \
      $NAME debug-${ERLANG_NODE} \
      -remsh $ERLANG_NODE \
      -hidden \
      $ERLANG_OPTS $ARGS \"$@\""
}

# start interactive server
live ()
{
    echo "--------------------------------------------------------------------"
    echo ""
    echo "IMPORTANT: mgeec is going to start in LIVE (interactive) mode."
    echo "All log messages will be shown in the command shell."
    echo "You can interact with the mgeec node if you know how to use it."
    echo "Please be extremely cautious with your actions,"
    echo "and exit immediately if you are not completely sure."
    echo ""
    echo "To exit this LIVE mode and stop mgeec, press:"
    echo "  q().  and press the Enter key"
    echo ""
    echo "--------------------------------------------------------------------"
    echo "Press any key to continue"
    read foo
    echo ""
	rm -rf "$LOCK_FILE"
    $EXEC_CMD "$ERL \
      $NAME $ERLANG_NODE \
      $MAEEL_PA \
      -s mgeec \
	  -sasl sasl_error_logger \\{file,\\\"$SASL_LOG_PATH\\\"\\} \
      $ERLANG_OPTS $ARGS \"$@\""
}

help ()
{
    echo ""
    echo "mgeec结点管理命令:"
    echo "  start  以正常服务器方式启动"
    echo "  debug  以交互式命令行的方式连接到已有mgeec结点"
    echo "  live  以交互方式启动服务器"
    echo ""
}

# common control function
ctl ()
{
    COMMAND=$@
    $EXEC_CMD "$ERL \
      $NAME ctl-${ERLANG_NODE} \
      -setcookie $COOKIE \
      -noinput \
      -hidden \
      $MAEEL_PA \
      -s mgeec_ctl -extra $ERLANG_NODE $COMMAND"
    result=$?
    case $result in
    0) :;;
    1) :;;
    2) help;;
    3) help;;
    esac
    return $result
}

## 检查服务器是否已经启动
started ()
{
	PID=`ps awux | grep $ERLANG_NODE | grep -v "grep" | awk '{print $2}'`
	if [ -f "$LOCK_FILE" ] && [ "$PID" != '' ] ; then
		return 0
	else 
		return 1
	fi
}

# display ctl usage
usage ()
{
    ctl
    exit
}

# stop epmd if there is no other running node
stop_epmd()
{
    epmd -names | grep -q name || epmd -kill
}

# allow sync calls
wait_for_status()
{
    # args: status try delay
    # return: 0 OK, 1 KO
    timeout=$2
    status=4
    while [ $status -ne $1 ]; do
        sleep $3
        let timeout=timeout-1
        [ $timeout -eq 0 ] && {
            status=$1
        } || {
            ctl status > /dev/null
            status=$?
        }
    done
    [ $timeout -eq 0 ] && {
        status=1
    } || {
        status=0
    }
    return $status
}

case $ARGS in
    ' start') start;;
    ' debug') debug;;
    ' live') live;;
    ' started') started;; 
    ' stopped') wait_for_status 3 15 2; stop_epmd;; # wait 15x2s before timeout
    *) ctl $ARGS;;
esac
